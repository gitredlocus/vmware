/*===- TableGen'erated file -------------------------------------*- C++ -*-===*\
|*                                                                            *|
|*Assembly Writer Source Fragment                                             *|
|*                                                                            *|
|* Automatically generated file, do not edit!                                 *|
|*                                                                            *|
\*===----------------------------------------------------------------------===*/

/// printInstruction - This method is automatically generated by tablegen
/// from the instruction set description.
void MipsInstPrinter::printInstruction(const MCInst *MI, raw_ostream &O) {
  static const uint32_t OpInfo[] = {
    0U,	// PHI
    0U,	// INLINEASM
    0U,	// PROLOG_LABEL
    0U,	// EH_LABEL
    0U,	// GC_LABEL
    0U,	// KILL
    0U,	// EXTRACT_SUBREG
    0U,	// INSERT_SUBREG
    0U,	// IMPLICIT_DEF
    0U,	// SUBREG_TO_REG
    0U,	// COPY_TO_REGCLASS
    7921U,	// DBG_VALUE
    0U,	// REG_SEQUENCE
    0U,	// COPY
    7914U,	// BUNDLE
    7931U,	// LIFETIME_START
    7901U,	// LIFETIME_END
    12663U,	// ABSQ_S_PH
    9516U,	// ABSQ_S_QB
    15207U,	// ABSQ_S_W
    16788496U,	// ADD
    16789684U,	// ADDQH_PH
    16789801U,	// ADDQH_R_PH
    16792098U,	// ADDQH_R_W
    16791701U,	// ADDQH_W
    16789758U,	// ADDQ_PH
    16789857U,	// ADDQ_S_PH
    16792403U,	// ADDQ_S_W
    16786892U,	// ADDSC
    16785691U,	// ADDS_A_B
    16786943U,	// ADDS_A_D
    16788615U,	// ADDS_A_H
    16791409U,	// ADDS_A_W
    16786169U,	// ADDS_S_B
    16787853U,	// ADDS_S_D
    16789172U,	// ADDS_S_H
    16792453U,	// ADDS_S_W
    16786394U,	// ADDS_U_B
    16788256U,	// ADDS_U_D
    16789450U,	// ADDS_U_H
    16792871U,	// ADDS_U_W
    16786600U,	// ADDUH_QB
    16786708U,	// ADDUH_R_QB
    16789956U,	// ADDU_PH
    16786813U,	// ADDU_QB
    16789901U,	// ADDU_S_PH
    16786754U,	// ADDU_S_QB
    285221396U,	// ADDVI_B
    285222820U,	// ADDVI_D
    285224287U,	// ADDVI_H
    285227290U,	// ADDVI_W
    16786472U,	// ADDV_B
    16788346U,	// ADDV_D
    16789528U,	// ADDV_H
    16792971U,	// ADDV_W
    16786899U,	// ADDWC
    16785673U,	// ADD_A_B
    16786924U,	// ADD_A_D
    16788597U,	// ADD_A_H
    16791390U,	// ADD_A_W
    16788496U,	// ADD_MM
    16790163U,	// ADDi
    16790163U,	// ADDi_MM
    16791187U,	// ADDiu
    16791187U,	// ADDiu_MM
    16791162U,	// ADDu
    16791162U,	// ADDu_MM
    0U,	// ADJCALLSTACKDOWN
    0U,	// ADJCALLSTACKUP
    16788518U,	// AND
    16788518U,	// AND64
    285221255U,	// ANDI_B
    16788518U,	// AND_MM
    16791240U,	// AND_V
    285225625U,	// ANDi
    285225625U,	// ANDi64
    285225625U,	// ANDi_MM
    16788532U,	// APPEND
    16786053U,	// ASUB_S_B
    16787683U,	// ASUB_S_D
    16789004U,	// ASUB_S_H
    16792233U,	// ASUB_S_W
    16786278U,	// ASUB_U_B
    16788086U,	// ASUB_U_D
    16789292U,	// ASUB_U_H
    16792701U,	// ASUB_U_W
    0U,	// ATOMIC_CMP_SWAP_I16
    0U,	// ATOMIC_CMP_SWAP_I32
    0U,	// ATOMIC_CMP_SWAP_I64
    0U,	// ATOMIC_CMP_SWAP_I8
    0U,	// ATOMIC_LOAD_ADD_I16
    0U,	// ATOMIC_LOAD_ADD_I32
    0U,	// ATOMIC_LOAD_ADD_I64
    0U,	// ATOMIC_LOAD_ADD_I8
    0U,	// ATOMIC_LOAD_AND_I16
    0U,	// ATOMIC_LOAD_AND_I32
    0U,	// ATOMIC_LOAD_AND_I64
    0U,	// ATOMIC_LOAD_AND_I8
    0U,	// ATOMIC_LOAD_NAND_I16
    0U,	// ATOMIC_LOAD_NAND_I32
    0U,	// ATOMIC_LOAD_NAND_I64
    0U,	// ATOMIC_LOAD_NAND_I8
    0U,	// ATOMIC_LOAD_OR_I16
    0U,	// ATOMIC_LOAD_OR_I32
    0U,	// ATOMIC_LOAD_OR_I64
    0U,	// ATOMIC_LOAD_OR_I8
    0U,	// ATOMIC_LOAD_SUB_I16
    0U,	// ATOMIC_LOAD_SUB_I32
    0U,	// ATOMIC_LOAD_SUB_I64
    0U,	// ATOMIC_LOAD_SUB_I8
    0U,	// ATOMIC_LOAD_XOR_I16
    0U,	// ATOMIC_LOAD_XOR_I32
    0U,	// ATOMIC_LOAD_XOR_I64
    0U,	// ATOMIC_LOAD_XOR_I8
    0U,	// ATOMIC_SWAP_I16
    0U,	// ATOMIC_SWAP_I32
    0U,	// ATOMIC_SWAP_I64
    0U,	// ATOMIC_SWAP_I8
    16786149U,	// AVER_S_B
    16787833U,	// AVER_S_D
    16789142U,	// AVER_S_H
    16792433U,	// AVER_S_W
    16786374U,	// AVER_U_B
    16788236U,	// AVER_U_D
    16789430U,	// AVER_U_H
    16792851U,	// AVER_U_W
    16786081U,	// AVE_S_B
    16787765U,	// AVE_S_D
    16789074U,	// AVE_S_H
    16792315U,	// AVE_S_W
    16786306U,	// AVE_U_B
    16788168U,	// AVE_U_D
    16789362U,	// AVE_U_H
    16792783U,	// AVE_U_W
    13971U,	// AddiuRxImmX16
    79507U,	// AddiuRxPcImmX16
    34616979U,	// AddiuRxRxImm16
    1062547U,	// AddiuRxRxImmX16
    2111123U,	// AddiuRxRyOffMemX16
    147088U,	// AddiuSpImm16
    212624U,	// AddiuSpImmX16
    16791162U,	// AdduRxRyRz16
    1059878U,	// AndRxRxRy16
    205071U,	// B
    16790460U,	// BALIGN
    0U,	// BAL_BR
    11364U,	// BC1F
    13892U,	// BC1T
    285221324U,	// BCLRI_B
    285222764U,	// BCLRI_D
    285224231U,	// BCLRI_H
    285227234U,	// BCLRI_W
    16786020U,	// BCLR_B
    16787607U,	// BCLR_D
    16788971U,	// BCLR_H
    16792149U,	// BCLR_W
    16790573U,	// BEQ
    16790573U,	// BEQ64
    15865U,	// BGEZ
    15865U,	// BGEZ64
    13055U,	// BGEZAL
    15909U,	// BGTZ
    15909U,	// BGTZ64
    285221297U,	// BINSLI_B
    285222737U,	// BINSLI_D
    285224204U,	// BINSLI_H
    285227207U,	// BINSLI_W
    16785988U,	// BINSL_B
    16787466U,	// BINSL_D
    16788862U,	// BINSL_H
    16791909U,	// BINSL_W
    285221358U,	// BINSRI_B
    285222782U,	// BINSRI_D
    285224249U,	// BINSRI_H
    285227252U,	// BINSRI_W
    16786036U,	// BINSR_B
    16787657U,	// BINSR_D
    16788987U,	// BINSR_H
    16792199U,	// BINSR_W
    14096U,	// BITREV
    15871U,	// BLEZ
    15871U,	// BLEZ64
    15915U,	// BLTZ
    15915U,	// BLTZ64
    13063U,	// BLTZAL
    285221413U,	// BMNZI_B
    16791297U,	// BMNZ_V
    285221405U,	// BMZI_B
    16791283U,	// BMZ_V
    16788549U,	// BNE
    16788549U,	// BNE64
    285221263U,	// BNEGI_B
    285222712U,	// BNEGI_D
    285224179U,	// BNEGI_H
    285227182U,	// BNEGI_W
    16785775U,	// BNEG_B
    16787232U,	// BNEG_D
    16788699U,	// BNEG_H
    16791621U,	// BNEG_W
    9310U,	// BNZ_B
    11259U,	// BNZ_D
    12366U,	// BNZ_H
    14074U,	// BNZ_V
    15834U,	// BNZ_W
    204937U,	// BPOSGE32
    0U,	// BPOSGE32_PSEUDO
    13025U,	// BREAK
    285221272U,	// BSELI_B
    16791255U,	// BSEL_V
    285221378U,	// BSETI_B
    285222802U,	// BSETI_D
    285224269U,	// BSETI_H
    285227272U,	// BSETI_W
    16786246U,	// BSET_B
    16787959U,	// BSET_D
    16789260U,	// BSET_H
    16792607U,	// BSET_W
    9304U,	// BZ_B
    11253U,	// BZ_D
    12360U,	// BZ_H
    14061U,	// BZ_V
    15828U,	// BZ_W
    50347544U,	// BeqzRxImm16
    15896U,	// BeqzRxImmX16
    205071U,	// BimmX16
    50347525U,	// BnezRxImm16
    15877U,	// BnezRxImmX16
    7893U,	// Break16
    67122163U,	// BteqzT8CmpX16
    67121851U,	// BteqzT8CmpiX16
    67122762U,	// BteqzT8SltX16
    67121869U,	// BteqzT8SltiX16
    67122849U,	// BteqzT8SltiuX16
    67122863U,	// BteqzT8SltuX16
    212510U,	// BteqzX16
    83899379U,	// BtnezT8CmpX16
    83899067U,	// BtnezT8CmpiX16
    83899978U,	// BtnezT8SltX16
    83899085U,	// BtnezT8SltiX16
    83900065U,	// BtnezT8SltiuX16
    83900079U,	// BtnezT8SltuX16
    212491U,	// BtnezX16
    0U,	// BuildPairF64
    0U,	// BuildPairF64_64
    10179U,	// CEIL_L_D64
    13672U,	// CEIL_L_S
    11201U,	// CEIL_W_D32
    11201U,	// CEIL_W_D64
    13854U,	// CEIL_W_S
    16785851U,	// CEQI_B
    16787291U,	// CEQI_D
    16788758U,	// CEQI_H
    16791761U,	// CEQI_W
    16786005U,	// CEQ_B
    16787548U,	// CEQ_D
    16788949U,	// CEQ_H
    16792037U,	// CEQ_W
    8227U,	// CFC1
    8441U,	// CFCMSA
    16786090U,	// CLEI_S_B
    16787774U,	// CLEI_S_D
    16789083U,	// CLEI_S_H
    16792324U,	// CLEI_S_W
    16786315U,	// CLEI_U_B
    16788177U,	// CLEI_U_D
    16789371U,	// CLEI_U_H
    16792792U,	// CLEI_U_W
    16786072U,	// CLE_S_B
    16787756U,	// CLE_S_D
    16789065U,	// CLE_S_H
    16792306U,	// CLE_S_W
    16786297U,	// CLE_U_B
    16788159U,	// CLE_U_D
    16789353U,	// CLE_U_H
    16792774U,	// CLE_U_W
    13259U,	// CLO
    16786110U,	// CLTI_S_B
    16787794U,	// CLTI_S_D
    16789103U,	// CLTI_S_H
    16792344U,	// CLTI_S_W
    16786335U,	// CLTI_U_B
    16788197U,	// CLTI_U_D
    16789391U,	// CLTI_U_H
    16792812U,	// CLTI_U_W
    16786188U,	// CLT_S_B
    16787872U,	// CLT_S_D
    16789191U,	// CLT_S_H
    16792472U,	// CLT_S_W
    16786425U,	// CLT_U_B
    16788287U,	// CLT_U_D
    16789481U,	// CLT_U_H
    16792902U,	// CLT_U_W
    15891U,	// CLZ
    16786646U,	// CMPGDU_EQ_QB
    16786551U,	// CMPGDU_LE_QB
    16786765U,	// CMPGDU_LT_QB
    16786660U,	// CMPGU_EQ_QB
    16786565U,	// CMPGU_LE_QB
    16786779U,	// CMPGU_LT_QB
    9457U,	// CMPU_EQ_QB
    9362U,	// CMPU_LE_QB
    9576U,	// CMPU_LT_QB
    12551U,	// CMP_EQ_PH
    12447U,	// CMP_LE_PH
    12720U,	// CMP_LT_PH
    100672307U,	// COPY_S_B
    100675321U,	// COPY_S_H
    100678624U,	// COPY_S_W
    100672532U,	// COPY_U_B
    100675588U,	// COPY_U_H
    100679031U,	// COPY_U_W
    278590U,	// CTC1
    8449U,	// CTCMSA
    13557U,	// CVT_D32_S
    14253U,	// CVT_D32_W
    13032U,	// CVT_D64_L
    13557U,	// CVT_D64_S
    14253U,	// CVT_D64_W
    10200U,	// CVT_L_D64
    13693U,	// CVT_L_S
    10458U,	// CVT_S_D32
    10458U,	// CVT_S_D64
    13041U,	// CVT_S_L
    15008U,	// CVT_S_W
    11222U,	// CVT_W_D32
    11222U,	// CVT_W_D64
    13875U,	// CVT_W_S
    10323U,	// C_EQ_D32
    10323U,	// C_EQ_D64
    13734U,	// C_EQ_S
    9969U,	// C_F_D32
    9969U,	// C_F_D64
    13620U,	// C_F_S
    9856U,	// C_LE_D32
    9856U,	// C_LE_D64
    13584U,	// C_LE_S
    10760U,	// C_LT_D32
    10760U,	// C_LT_D64
    13776U,	// C_LT_S
    9847U,	// C_NGE_D32
    9847U,	// C_NGE_D64
    13575U,	// C_NGE_S
    9872U,	// C_NGLE_D32
    9872U,	// C_NGLE_D64
    13592U,	// C_NGLE_S
    10209U,	// C_NGL_D32
    10209U,	// C_NGL_D64
    13702U,	// C_NGL_S
    10751U,	// C_NGT_D32
    10751U,	// C_NGT_D64
    13767U,	// C_NGT_S
    9882U,	// C_OLE_D32
    9882U,	// C_OLE_D64
    13602U,	// C_OLE_S
    10776U,	// C_OLT_D32
    10776U,	// C_OLT_D64
    13784U,	// C_OLT_S
    10339U,	// C_SEQ_D32
    10339U,	// C_SEQ_D64
    13742U,	// C_SEQ_S
    10000U,	// C_SF_D32
    10000U,	// C_SF_D64
    13627U,	// C_SF_S
    10356U,	// C_UEQ_D32
    10356U,	// C_UEQ_D64
    13751U,	// C_UEQ_S
    9899U,	// C_ULE_D32
    9899U,	// C_ULE_D64
    13611U,	// C_ULE_S
    10793U,	// C_ULT_D32
    10793U,	// C_ULT_D64
    13793U,	// C_ULT_S
    10283U,	// C_UN_D32
    10283U,	// C_UN_D64
    13718U,	// C_UN_S
    13299U,	// CmpRxRy16
    117453499U,	// CmpiRxImm16
    12987U,	// CmpiRxImmX16
    212642U,	// Constant32
    16788495U,	// DADD
    16790162U,	// DADDi
    16791186U,	// DADDiu
    16791161U,	// DADDu
    13258U,	// DCLO
    15890U,	// DCLZ
    7969U,	// DERET
    1358970558U,	// DEXT
    1358970545U,	// DEXTM
    1358970571U,	// DEXTU
    209557U,	// DI
    1358970552U,	// DINS
    1358970538U,	// DINSM
    1358970564U,	// DINSU
    16786209U,	// DIV_S_B
    16787915U,	// DIV_S_D
    16789212U,	// DIV_S_H
    16792515U,	// DIV_S_W
    16786434U,	// DIV_U_B
    16788318U,	// DIV_U_D
    16789490U,	// DIV_U_H
    16792933U,	// DIV_U_W
    285220873U,	// DMFC0
    8233U,	// DMFC1
    285221027U,	// DMFC2
    285220880U,	// DMTC0
    278596U,	// DMTC1
    285221034U,	// DMTC2
    13908U,	// DMULT
    14011U,	// DMULTu
    16786139U,	// DOTP_S_B
    16787823U,	// DOTP_S_D
    16789132U,	// DOTP_S_H
    16792383U,	// DOTP_S_W
    16786364U,	// DOTP_U_B
    16788226U,	// DOTP_U_D
    16789420U,	// DOTP_U_H
    16792841U,	// DOTP_U_W
    554707224U,	// DPADD_S_D
    554708533U,	// DPADD_S_H
    554711774U,	// DPADD_S_W
    554707627U,	// DPADD_U_D
    554708821U,	// DPADD_U_H
    554712242U,	// DPADD_U_W
    16790015U,	// DPAQX_SA_W_PH
    16790098U,	// DPAQX_S_W_PH
    16791843U,	// DPAQ_SA_L_W
    16790057U,	// DPAQ_S_W_PH
    16790287U,	// DPAU_H_QBL
    16790583U,	// DPAU_H_QBR
    16790136U,	// DPAX_W_PH
    16790005U,	// DPA_W_PH
    16790030U,	// DPSQX_SA_W_PH
    16790112U,	// DPSQX_S_W_PH
    16791856U,	// DPSQ_SA_L_W
    16790085U,	// DPSQ_S_W_PH
    554707191U,	// DPSUB_S_D
    554708512U,	// DPSUB_S_H
    554711741U,	// DPSUB_S_W
    554707594U,	// DPSUB_U_D
    554708800U,	// DPSUB_U_H
    554712209U,	// DPSUB_U_W
    16790299U,	// DPSU_H_QBL
    16790595U,	// DPSU_H_QBR
    16790147U,	// DPSX_W_PH
    16790126U,	// DPS_W_PH
    16790740U,	// DROTR
    16791358U,	// DROTRV
    12373U,	// DSBH
    16003U,	// DSDIV
    11291U,	// DSHD
    16790433U,	// DSLL
    16785555U,	// DSLL32
    134230945U,	// DSLL64_32
    16791320U,	// DSLLV
    16785651U,	// DSRA
    16785537U,	// DSRA32
    16791305U,	// DSRAV
    16790439U,	// DSRL
    16785563U,	// DSRL32
    16791327U,	// DSRLV
    16791147U,	// DSUBu
    15989U,	// DUDIV
    16004U,	// DivRxRy16
    15990U,	// DivuRxRy16
    209569U,	// EI
    7970U,	// ERET
    1358970559U,	// EXT
    285226023U,	// EXTP
    285225955U,	// EXTPDP
    16791342U,	// EXTPDPV
    16791351U,	// EXTPV
    16792576U,	// EXTRV_RS_W
    16792130U,	// EXTRV_R_W
    16789221U,	// EXTRV_S_H
    16793013U,	// EXTRV_W
    285228021U,	// EXTR_RS_W
    285227565U,	// EXTR_R_W
    285224608U,	// EXTR_S_H
    285227664U,	// EXTR_W
    0U,	// ExtractElementF64
    0U,	// ExtractElementF64_64
    10717U,	// FABS_D32
    10717U,	// FABS_D64
    13760U,	// FABS_S
    16787012U,	// FADD_D
    16787013U,	// FADD_D32
    16787013U,	// FADD_D64
    16790784U,	// FADD_S
    16791478U,	// FADD_W
    16787192U,	// FCAF_D
    16791597U,	// FCAF_W
    16787547U,	// FCEQ_D
    16792036U,	// FCEQ_W
    10724U,	// FCLASS_D
    15372U,	// FCLASS_W
    16787080U,	// FCLE_D
    16791520U,	// FCLE_W
    16787984U,	// FCLT_D
    16792615U,	// FCLT_W
    360146U,	// FCMP_D32
    360146U,	// FCMP_D64
    425682U,	// FCMP_S32
    16787142U,	// FCNE_D
    16791554U,	// FCNE_W
    16787623U,	// FCOR_D
    16792165U,	// FCOR_W
    16787581U,	// FCUEQ_D
    16792052U,	// FCUEQ_W
    16787124U,	// FCULE_D
    16791536U,	// FCULE_W
    16788018U,	// FCULT_D
    16792631U,	// FCULT_W
    16787158U,	// FCUNE_D
    16791570U,	// FCUNE_W
    16787507U,	// FCUN_D
    16791942U,	// FCUN_W
    16788372U,	// FDIV_D
    16788373U,	// FDIV_D32
    16788373U,	// FDIV_D64
    16791034U,	// FDIV_S
    16792997U,	// FDIV_W
    16788879U,	// FEXDO_H
    16791958U,	// FEXDO_W
    16786915U,	// FEXP2_D
    16791381U,	// FEXP2_W
    10225U,	// FEXUPL_D
    14668U,	// FEXUPL_W
    10423U,	// FEXUPR_D
    14965U,	// FEXUPR_W
    10665U,	// FFINT_S_D
    15265U,	// FFINT_S_W
    11080U,	// FFINT_U_D
    15695U,	// FFINT_U_W
    10235U,	// FFQL_D
    14678U,	// FFQL_W
    10433U,	// FFQR_D
    14975U,	// FFQR_W
    8750U,	// FILL_B
    11624U,	// FILL_H
    14653U,	// FILL_W
    9690U,	// FLOG2_D
    14156U,	// FLOG2_W
    10189U,	// FLOOR_L_D64
    13682U,	// FLOOR_L_S
    11211U,	// FLOOR_W_D32
    11211U,	// FLOOR_W_D64
    13864U,	// FLOOR_W_S
    554706508U,	// FMADD_D
    554710974U,	// FMADD_W
    16786953U,	// FMAX_A_D
    16791419U,	// FMAX_A_W
    16788447U,	// FMAX_D
    16793022U,	// FMAX_W
    16786933U,	// FMIN_A_D
    16791399U,	// FMIN_A_W
    16787491U,	// FMIN_D
    16791934U,	// FMIN_W
    11172U,	// FMOV_D32
    11172U,	// FMOV_D64
    13825U,	// FMOV_S
    554706466U,	// FMSUB_D
    554710932U,	// FMSUB_W
    16787475U,	// FMUL_D
    16787476U,	// FMUL_D32
    16787476U,	// FMUL_D64
    16790927U,	// FMUL_S
    16791918U,	// FMUL_W
    10017U,	// FNEG_D32
    10017U,	// FNEG_D64
    13643U,	// FNEG_S
    10315U,	// FRCP_D
    14751U,	// FRCP_W
    10828U,	// FRINT_D
    15441U,	// FRINT_W
    10846U,	// FRSQRT_D
    15469U,	// FRSQRT_W
    16787200U,	// FSAF_D
    16791605U,	// FSAF_W
    16787564U,	// FSEQ_D
    16792044U,	// FSEQ_W
    16787107U,	// FSLE_D
    16791528U,	// FSLE_W
    16788001U,	// FSLT_D
    16792623U,	// FSLT_W
    16787150U,	// FSNE_D
    16791562U,	// FSNE_W
    16787631U,	// FSOR_D
    16792173U,	// FSOR_W
    10837U,	// FSQRT_D
    10838U,	// FSQRT_D32
    10838U,	// FSQRT_D64
    13802U,	// FSQRT_S
    15460U,	// FSQRT_W
    16786970U,	// FSUB_D
    16786971U,	// FSUB_D32
    16786971U,	// FSUB_D64
    16790766U,	// FSUB_S
    16791436U,	// FSUB_W
    16787590U,	// FSUEQ_D
    16792061U,	// FSUEQ_W
    16787133U,	// FSULE_D
    16791545U,	// FSULE_W
    16788027U,	// FSULT_D
    16792640U,	// FSULT_W
    16787167U,	// FSUNE_D
    16791579U,	// FSUNE_W
    16787515U,	// FSUN_D
    16791950U,	// FSUN_W
    10676U,	// FTINT_S_D
    15276U,	// FTINT_S_W
    11091U,	// FTINT_U_D
    15706U,	// FTINT_U_W
    16788956U,	// FTQ_H
    16792070U,	// FTQ_W
    10498U,	// FTRUNC_S_D
    15048U,	// FTRUNC_S_W
    10901U,	// FTRUNC_U_D
    15516U,	// FTRUNC_U_W
    16787726U,	// HADD_S_D
    16789035U,	// HADD_S_H
    16792276U,	// HADD_S_W
    16788129U,	// HADD_U_D
    16789323U,	// HADD_U_H
    16792744U,	// HADD_U_W
    16787693U,	// HSUB_S_D
    16789014U,	// HSUB_S_H
    16792243U,	// HSUB_S_W
    16788096U,	// HSUB_U_D
    16789302U,	// HSUB_U_H
    16792711U,	// HSUB_U_W
    16786489U,	// ILVEV_B
    16788363U,	// ILVEV_D
    16789545U,	// ILVEV_H
    16792988U,	// ILVEV_W
    16785997U,	// ILVL_B
    16787483U,	// ILVL_D
    16788871U,	// ILVL_H
    16791926U,	// ILVL_W
    16785749U,	// ILVOD_B
    16787054U,	// ILVOD_D
    16788673U,	// ILVOD_H
    16791511U,	// ILVOD_W
    16786045U,	// ILVR_B
    16787666U,	// ILVR_D
    16788996U,	// ILVR_H
    16792216U,	// ILVR_W
    1358970553U,	// INS
    3613526U,	// INSERT_B
    3616540U,	// INSERT_H
    3619930U,	// INSERT_W
    1062726U,	// INSV
    4661598U,	// INSVE_B
    4663016U,	// INSVE_D
    4664522U,	// INSVE_H
    4667428U,	// INSVE_W
    209630U,	// J
    209658U,	// JAL
    13508U,	// JALR
    13508U,	// JALR64
    0U,	// JALR64Pseudo
    0U,	// JALRPseudo
    210112U,	// JR
    210112U,	// JR64
    537338U,	// Jal16
    7955U,	// JrRa16
    7946U,	// JrcRa16
    212535U,	// JrcRx16
    204801U,	// JumpLinkReg16
    5252202U,	// LB
    5252202U,	// LB64
    152059374U,	// LBUX
    5252202U,	// LB_MM
    5256806U,	// LBu
    5256806U,	// LBu64
    5256806U,	// LBu_MM
    5254178U,	// LD
    5251095U,	// LDC1
    5251095U,	// LDC164
    8576U,	// LDI_B
    11500U,	// LDI_H
    14503U,	// LDI_W
    5256022U,	// LDL
    5256318U,	// LDR
    152051799U,	// LDXC1
    152051799U,	// LDXC164
    5252170U,	// LDX_B
    5254119U,	// LDX_D
    5255226U,	// LDX_H
    5258694U,	// LDX_W
    5251398U,	// LD_B
    5252703U,	// LD_D
    5254322U,	// LD_H
    5257160U,	// LD_W
    2111123U,	// LEA_ADDiu
    2111122U,	// LEA_ADDiu64
    5255270U,	// LH
    5255270U,	// LH64
    152059369U,	// LHX
    5255270U,	// LH_MM
    5256845U,	// LHu
    5256845U,	// LHu64
    5256845U,	// LHu_MM
    5256093U,	// LL
    5254177U,	// LLD
    5251079U,	// LOAD_ACC128
    5251079U,	// LOAD_ACC64
    5251079U,	// LOAD_ACC64DSP
    5256184U,	// LOAD_CCOND_DSP
    152051813U,	// LUXC1
    152051813U,	// LUXC164
    6304473U,	// LUi
    6304473U,	// LUi64
    6304473U,	// LUi_MM
    5258721U,	// LW
    5258721U,	// LW64
    5251147U,	// LWC1
    5256114U,	// LWL
    5256114U,	// LWL64
    5256114U,	// LWL_MM
    5256418U,	// LWR
    5256418U,	// LWR64
    5256418U,	// LWR_MM
    152059380U,	// LWX
    152051827U,	// LWXC1
    5258721U,	// LW_MM
    5256899U,	// LWu
    5252202U,	// LbRxRyOffMemX16
    5256806U,	// LbuRxRyOffMemX16
    5255270U,	// LhRxRyOffMemX16
    5256845U,	// LhuRxRyOffMemX16
    117453495U,	// LiRxImm16
    12983U,	// LiRxImmX16
    8381U,	// LoadAddr32Imm
    5251261U,	// LoadAddr32Reg
    12983U,	// LoadImm32Reg
    605665U,	// LwConstant32
    5258721U,	// LwRxRyOffMemX16
    168836577U,	// LwRxSpImmX16
    11285U,	// MADD
    554708416U,	// MADDR_Q_H
    554711503U,	// MADDR_Q_W
    13952U,	// MADDU
    16791168U,	// MADDU_DSP
    554705959U,	// MADDV_B
    554707833U,	// MADDV_D
    554709015U,	// MADDV_H
    554712458U,	// MADDV_W
    1090528845U,	// MADD_D32
    1090528845U,	// MADD_D64
    16788501U,	// MADD_DSP
    554708386U,	// MADD_Q_H
    554711473U,	// MADD_Q_W
    1090532607U,	// MADD_S
    16790368U,	// MAQ_SA_W_PHL
    16790664U,	// MAQ_SA_W_PHR
    16790396U,	// MAQ_S_W_PHL
    16790692U,	// MAQ_S_W_PHR
    285221576U,	// MAXI_S_B
    285223260U,	// MAXI_S_D
    285224569U,	// MAXI_S_H
    285227810U,	// MAXI_S_W
    285221801U,	// MAXI_U_B
    285223663U,	// MAXI_U_D
    285224857U,	// MAXI_U_H
    285228278U,	// MAXI_U_W
    16785701U,	// MAX_A_B
    16786954U,	// MAX_A_D
    16788625U,	// MAX_A_H
    16791420U,	// MAX_A_W
    16786218U,	// MAX_S_B
    16787924U,	// MAX_S_D
    16789232U,	// MAX_S_H
    16792535U,	// MAX_S_W
    16786443U,	// MAX_U_B
    16788327U,	// MAX_U_D
    16789499U,	// MAX_U_H
    16792942U,	// MAX_U_W
    285220874U,	// MFC0
    8234U,	// MFC1
    285221028U,	// MFC2
    8240U,	// MFHC1
    209579U,	// MFHI
    209579U,	// MFHI64
    12971U,	// MFHI_DSP
    209872U,	// MFLO
    209872U,	// MFLO64
    13264U,	// MFLO_DSP
    285221556U,	// MINI_S_B
    285223240U,	// MINI_S_D
    285224549U,	// MINI_S_H
    285227790U,	// MINI_S_W
    285221781U,	// MINI_U_B
    285223643U,	// MINI_U_D
    285224837U,	// MINI_U_H
    285228258U,	// MINI_U_W
    16785682U,	// MIN_A_B
    16786934U,	// MIN_A_D
    16788606U,	// MIN_A_H
    16791400U,	// MIN_A_W
    16786130U,	// MIN_S_B
    16787814U,	// MIN_S_D
    16789123U,	// MIN_S_H
    16792374U,	// MIN_S_W
    16786355U,	// MIN_U_B
    16788217U,	// MIN_U_D
    16789411U,	// MIN_U_H
    16792832U,	// MIN_U_W
    0U,	// MIPSeh_return32
    0U,	// MIPSeh_return64
    16786878U,	// MODSUB
    16786063U,	// MOD_S_B
    16787747U,	// MOD_S_D
    16789056U,	// MOD_S_H
    16792297U,	// MOD_S_W
    16786288U,	// MOD_U_B
    16788150U,	// MOD_U_D
    16789344U,	// MOD_U_H
    16792765U,	// MOD_U_W
    14031U,	// MOVE_V
    16787224U,	// MOVF_D32
    16787224U,	// MOVF_D64
    16788586U,	// MOVF_I
    16788586U,	// MOVF_I64
    16790851U,	// MOVF_S
    16787523U,	// MOVN_I64_D64
    16790468U,	// MOVN_I64_I
    16790468U,	// MOVN_I64_I64
    16790942U,	// MOVN_I64_S
    16787523U,	// MOVN_I_D32
    16787523U,	// MOVN_I_D64
    16790468U,	// MOVN_I_I
    16790468U,	// MOVN_I_I64
    16790942U,	// MOVN_I_S
    16788078U,	// MOVT_D32
    16788078U,	// MOVT_D64
    16791136U,	// MOVT_I
    16791136U,	// MOVT_I64
    16791026U,	// MOVT_S
    16788482U,	// MOVZ_I64_D64
    16793137U,	// MOVZ_I64_I
    16793137U,	// MOVZ_I64_I64
    16791100U,	// MOVZ_I64_S
    16788482U,	// MOVZ_I_D32
    16788482U,	// MOVZ_I_D64
    16793137U,	// MOVZ_I_I
    16793137U,	// MOVZ_I_I64
    16791100U,	// MOVZ_I_S
    9670U,	// MSUB
    554708405U,	// MSUBR_Q_H
    554711492U,	// MSUBR_Q_W
    13938U,	// MSUBU
    16791154U,	// MSUBU_DSP
    554705950U,	// MSUBV_B
    554707824U,	// MSUBV_D
    554709006U,	// MSUBV_H
    554712449U,	// MSUBV_W
    1090528803U,	// MSUB_D32
    1090528803U,	// MSUB_D64
    16786886U,	// MSUB_DSP
    554708376U,	// MSUB_Q_H
    554711463U,	// MSUB_Q_W
    1090532589U,	// MSUB_S
    285220881U,	// MTC0
    278597U,	// MTC1
    285221035U,	// MTC2
    278583U,	// MTHC1
    209585U,	// MTHI
    209585U,	// MTHI64
    283313U,	// MTHI_DSP
    283627U,	// MTHLIP
    209885U,	// MTLO
    209885U,	// MTLO64
    283613U,	// MTLO_DSP
    16790445U,	// MUL
    16790409U,	// MULEQ_S_W_PHL
    16790705U,	// MULEQ_S_W_PHR
    16790311U,	// MULEU_S_PH_QBL
    16790607U,	// MULEU_S_PH_QBR
    16789924U,	// MULQ_RS_PH
    16792554U,	// MULQ_RS_W
    16789868U,	// MULQ_S_PH
    16792413U,	// MULQ_S_W
    16788939U,	// MULR_Q_H
    16792026U,	// MULR_Q_W
    16790070U,	// MULSAQ_S_W_PH
    16790045U,	// MULSA_W_PH
    13909U,	// MULT
    16791228U,	// MULTU_DSP
    16791125U,	// MULT_DSP
    13909U,	// MULT_MM
    14012U,	// MULTu
    14012U,	// MULTu_MM
    16786498U,	// MULV_B
    16788380U,	// MULV_D
    16789554U,	// MULV_H
    16793005U,	// MULV_W
    16790445U,	// MUL_MM
    16789741U,	// MUL_PH
    16788908U,	// MUL_Q_H
    16791995U,	// MUL_Q_W
    16789836U,	// MUL_S_PH
    209579U,	// Mfhi16
    209872U,	// Mflo16
    11358U,	// Move32R16
    11358U,	// MoveR3216
    13909U,	// MultRxRy16
    8017493U,	// MultRxRyRz16
    14012U,	// MultuRxRy16
    8017596U,	// MultuRxRyRz16
    8501U,	// NLOC_B
    9780U,	// NLOC_D
    11425U,	// NLOC_H
    14237U,	// NLOC_W
    8509U,	// NLZC_B
    9788U,	// NLZC_D
    11433U,	// NLZC_H
    14245U,	// NLZC_W
    1090528853U,	// NMADD_D32
    1090528853U,	// NMADD_D64
    1090532606U,	// NMADD_S
    1090528811U,	// NMSUB_D32
    1090528811U,	// NMSUB_D64
    1090532588U,	// NMSUB_S
    0U,	// NOP
    16790730U,	// NOR
    16790730U,	// NOR64
    285221342U,	// NORI_B
    16790730U,	// NOR_MM
    16791263U,	// NOR_V
    11376U,	// NegRxRy16
    13915U,	// NotRxRy16
    16790731U,	// OR
    16790731U,	// OR64
    285221343U,	// ORI_B
    16790731U,	// OR_MM
    16791264U,	// OR_V
    285225672U,	// ORi
    285225672U,	// ORi64
    285225672U,	// ORi_MM
    1062091U,	// OrRxRxRy16
    16789730U,	// PACKRL_PH
    16786480U,	// PCKEV_B
    16788354U,	// PCKEV_D
    16789536U,	// PCKEV_H
    16792979U,	// PCKEV_W
    16785740U,	// PCKOD_B
    16787045U,	// PCKOD_D
    16788664U,	// PCKOD_H
    16791502U,	// PCKOD_W
    9038U,	// PCNT_B
    10820U,	// PCNT_D
    12052U,	// PCNT_H
    15433U,	// PCNT_W
    16789694U,	// PICK_PH
    16786610U,	// PICK_QB
    13126U,	// PRECEQU_PH_QBL
    8385U,	// PRECEQU_PH_QBLA
    13422U,	// PRECEQU_PH_QBR
    8418U,	// PRECEQU_PH_QBRA
    13166U,	// PRECEQ_W_PHL
    13462U,	// PRECEQ_W_PHR
    13111U,	// PRECEU_PH_QBL
    8369U,	// PRECEU_PH_QBLA
    13407U,	// PRECEU_PH_QBR
    8402U,	// PRECEU_PH_QBRA
    16789646U,	// PRECRQU_S_QB_PH
    16791645U,	// PRECRQ_PH_W
    16789619U,	// PRECRQ_QB_PH
    16791676U,	// PRECRQ_RS_PH_W
    16789633U,	// PRECR_QB_PH
    16791629U,	// PRECR_SRA_PH_W
    16791658U,	// PRECR_SRA_R_PH_W
    16788523U,	// PREPEND
    0U,	// PseudoCMPU_EQ_QB
    0U,	// PseudoCMPU_LE_QB
    0U,	// PseudoCMPU_LT_QB
    0U,	// PseudoCMP_EQ_PH
    0U,	// PseudoCMP_LE_PH
    0U,	// PseudoCMP_LT_PH
    8199U,	// PseudoCVT_D32_W
    8199U,	// PseudoCVT_D64_L
    8199U,	// PseudoCVT_D64_W
    8199U,	// PseudoCVT_S_L
    8199U,	// PseudoCVT_S_W
    0U,	// PseudoDMULT
    0U,	// PseudoDMULTu
    0U,	// PseudoDSDIV
    0U,	// PseudoDUDIV
    5251079U,	// PseudoLDC1
    0U,	// PseudoMADD
    0U,	// PseudoMADDU
    0U,	// PseudoMSUB
    0U,	// PseudoMSUBU
    0U,	// PseudoMULT
    0U,	// PseudoMULTu
    0U,	// PseudoPICK_PH
    0U,	// PseudoPICK_QB
    5251079U,	// PseudoSDC1
    0U,	// PseudoSDIV
    0U,	// PseudoUDIV
    9646U,	// RADDU_W_QB
    6304793U,	// RDDSP
    13531U,	// RDHWR
    13531U,	// RDHWR64
    12769U,	// REPLV_PH
    9626U,	// REPLV_QB
    6303952U,	// REPL_PH
    6300868U,	// REPL_QB
    210112U,	// RET
    16790741U,	// ROTR
    16791359U,	// ROTRV
    16791359U,	// ROTRV_MM
    16790741U,	// ROTR_MM
    10168U,	// ROUND_L_D64
    13661U,	// ROUND_L_S
    11190U,	// ROUND_W_D32
    11190U,	// ROUND_W_D64
    13843U,	// ROUND_W_S
    35919U,	// RestoreIncSpF16
    40509U,	// RestoreRaF16
    0U,	// RetRA
    0U,	// RetRA16
    285221635U,	// SAT_S_B
    285223319U,	// SAT_S_D
    285224638U,	// SAT_S_H
    285227919U,	// SAT_S_W
    285221872U,	// SAT_U_B
    285223734U,	// SAT_U_D
    285224928U,	// SAT_U_H
    285228349U,	// SAT_U_W
    5252538U,	// SB
    5252538U,	// SB64
    5252538U,	// SB_MM
    738767U,	// SC
    740362U,	// SCD
    5254204U,	// SD
    5251101U,	// SDC1
    5251101U,	// SDC164
    16004U,	// SDIV
    5256027U,	// SDL
    5256323U,	// SDR
    152051806U,	// SDXC1
    152051806U,	// SDXC164
    9317U,	// SEB
    9317U,	// SEB64
    12385U,	// SEH
    12385U,	// SEH64
    5255822U,	// SH
    5255822U,	// SH64
    285221224U,	// SHF_B
    285224148U,	// SHF_H
    285227070U,	// SHF_W
    13270U,	// SHILO
    14118U,	// SHILOV
    16789975U,	// SHLLV_PH
    16786832U,	// SHLLV_QB
    16789912U,	// SHLLV_S_PH
    16792524U,	// SHLLV_S_W
    285225159U,	// SHLL_PH
    285222075U,	// SHLL_QB
    285225281U,	// SHLL_S_PH
    285227820U,	// SHLL_S_W
    16789965U,	// SHRAV_PH
    16786822U,	// SHRAV_QB
    16789813U,	// SHRAV_R_PH
    16786720U,	// SHRAV_R_QB
    16792119U,	// SHRAV_R_W
    285225066U,	// SHRA_PH
    285221998U,	// SHRA_QB
    285225234U,	// SHRA_R_PH
    285222141U,	// SHRA_R_QB
    285227533U,	// SHRA_R_W
    16789995U,	// SHRLV_PH
    16786852U,	// SHRLV_QB
    285225177U,	// SHRL_PH
    285222093U,	// SHRL_QB
    5255822U,	// SH_MM
    285221247U,	// SLDI_B
    285222704U,	// SLDI_D
    285224171U,	// SLDI_H
    285227174U,	// SLDI_W
    16785733U,	// SLD_B
    16787038U,	// SLD_D
    16788657U,	// SLD_H
    16791495U,	// SLD_W
    16790434U,	// SLL
    184562594U,	// SLL64_32
    184562594U,	// SLL64_64
    285221281U,	// SLLI_B
    285222721U,	// SLLI_D
    285224188U,	// SLLI_H
    285227191U,	// SLLI_W
    16791321U,	// SLLV
    16791321U,	// SLLV_MM
    16785974U,	// SLL_B
    16787434U,	// SLL_D
    16788848U,	// SLL_H
    16790434U,	// SLL_MM
    16791877U,	// SLL_W
    16791114U,	// SLT
    16791114U,	// SLT64
    16791114U,	// SLT_MM
    16790221U,	// SLTi
    16790221U,	// SLTi64
    16790221U,	// SLTi_MM
    16791201U,	// SLTiu
    16791201U,	// SLTiu64
    16791201U,	// SLTiu_MM
    16791215U,	// SLTu
    16791215U,	// SLTu64
    16791215U,	// SLTu_MM
    0U,	// SNZ_B_PSEUDO
    0U,	// SNZ_D_PSEUDO
    0U,	// SNZ_H_PSEUDO
    0U,	// SNZ_V_PSEUDO
    0U,	// SNZ_W_PSEUDO
    285221368U,	// SPLATI_B
    285222792U,	// SPLATI_D
    285224259U,	// SPLATI_H
    285227262U,	// SPLATI_W
    16786237U,	// SPLAT_B
    16787950U,	// SPLAT_D
    16789251U,	// SPLAT_H
    16792598U,	// SPLAT_W
    16785652U,	// SRA
    285221239U,	// SRAI_B
    285222696U,	// SRAI_D
    285224163U,	// SRAI_H
    285227166U,	// SRAI_W
    285221315U,	// SRARI_B
    285222755U,	// SRARI_D
    285224222U,	// SRARI_H
    285227225U,	// SRARI_W
    16786012U,	// SRAR_B
    16787599U,	// SRAR_D
    16788963U,	// SRAR_H
    16792141U,	// SRAR_W
    16791306U,	// SRAV
    16791306U,	// SRAV_MM
    16785710U,	// SRA_B
    16786963U,	// SRA_D
    16788634U,	// SRA_H
    16785652U,	// SRA_MM
    16791429U,	// SRA_W
    16790440U,	// SRL
    285221289U,	// SRLI_B
    285222729U,	// SRLI_D
    285224196U,	// SRLI_H
    285227199U,	// SRLI_W
    285221333U,	// SRLRI_B
    285222773U,	// SRLRI_D
    285224240U,	// SRLRI_H
    285227243U,	// SRLRI_W
    16786028U,	// SRLR_B
    16787615U,	// SRLR_D
    16788979U,	// SRLR_H
    16792157U,	// SRLR_W
    16791328U,	// SRLV
    16791328U,	// SRLV_MM
    16785981U,	// SRL_B
    16787459U,	// SRL_D
    16788855U,	// SRL_H
    16790440U,	// SRL_MM
    16791902U,	// SRL_W
    5251079U,	// STORE_ACC128
    5251079U,	// STORE_ACC64
    5251079U,	// STORE_ACC64DSP
    5256200U,	// STORE_CCOND_DSP
    5252177U,	// STX_B
    5254126U,	// STX_D
    5255233U,	// STX_H
    5258701U,	// STX_W
    5251936U,	// ST_B
    5253736U,	// ST_D
    5254950U,	// ST_H
    5258359U,	// ST_W
    16786881U,	// SUB
    16789674U,	// SUBQH_PH
    16789789U,	// SUBQH_R_PH
    16792087U,	// SUBQH_R_W
    16791692U,	// SUBQH_W
    16789749U,	// SUBQ_PH
    16789846U,	// SUBQ_S_PH
    16792393U,	// SUBQ_S_W
    16786404U,	// SUBSUS_U_B
    16788266U,	// SUBSUS_U_D
    16789460U,	// SUBSUS_U_H
    16792881U,	// SUBSUS_U_W
    16786197U,	// SUBSUU_S_B
    16787903U,	// SUBSUU_S_D
    16789200U,	// SUBSUU_S_H
    16792503U,	// SUBSUU_S_W
    16786159U,	// SUBS_S_B
    16787843U,	// SUBS_S_D
    16789162U,	// SUBS_S_H
    16792443U,	// SUBS_S_W
    16786384U,	// SUBS_U_B
    16788246U,	// SUBS_U_D
    16789440U,	// SUBS_U_H
    16792861U,	// SUBS_U_W
    16786590U,	// SUBUH_QB
    16786696U,	// SUBUH_R_QB
    16789947U,	// SUBU_PH
    16786804U,	// SUBU_QB
    16789890U,	// SUBU_S_PH
    16786743U,	// SUBU_S_QB
    285221387U,	// SUBVI_B
    285222811U,	// SUBVI_D
    285224278U,	// SUBVI_H
    285227281U,	// SUBVI_W
    16786463U,	// SUBV_B
    16788337U,	// SUBV_D
    16789519U,	// SUBV_H
    16792962U,	// SUBV_W
    16786881U,	// SUB_MM
    16791148U,	// SUBu
    16791148U,	// SUBu_MM
    152051820U,	// SUXC1
    152051820U,	// SUXC164
    5258725U,	// SW
    5258725U,	// SW64
    5251153U,	// SWC1
    5256119U,	// SWL
    5256119U,	// SWL64
    5256119U,	// SWL_MM
    5256423U,	// SWR
    5256423U,	// SWR64
    5256423U,	// SWR_MM
    152051834U,	// SWXC1
    5258725U,	// SW_MM
    212636U,	// SYNC
    209816U,	// SYSCALL
    0U,	// SZ_B_PSEUDO
    0U,	// SZ_D_PSEUDO
    0U,	// SZ_H_PSEUDO
    0U,	// SZ_V_PSEUDO
    0U,	// SZ_W_PSEUDO
    35928U,	// SaveDecSpF16
    40539U,	// SaveRaF16
    5252538U,	// SbRxRyOffMemX16
    835096U,	// SelBeqZ
    835077U,	// SelBneZ
    209761267U,	// SelTBteqZCmp
    209760955U,	// SelTBteqZCmpi
    209761866U,	// SelTBteqZSlt
    209760973U,	// SelTBteqZSlti
    209761953U,	// SelTBteqZSltiu
    209761967U,	// SelTBteqZSltu
    226538483U,	// SelTBtneZCmp
    226538171U,	// SelTBtneZCmpi
    226539082U,	// SelTBtneZSlt
    226538189U,	// SelTBtneZSlti
    226539169U,	// SelTBtneZSltiu
    226539183U,	// SelTBtneZSltu
    5255822U,	// ShRxRyOffMemX16
    16790434U,	// SllX16
    1062681U,	// SllvRxRy16
    10114634U,	// SltCCRxRy16
    13898U,	// SltRxRy16
    10113741U,	// SltiCCRxImmX16
    117453517U,	// SltiRxImm16
    13005U,	// SltiRxImmX16
    10114721U,	// SltiuCCRxImmX16
    117454497U,	// SltiuRxImm16
    13985U,	// SltiuRxImmX16
    10114735U,	// SltuCCRxRy16
    13999U,	// SltuRxRy16
    10114735U,	// SltuRxRyRz16
    16785652U,	// SraX16
    1062666U,	// SravRxRy16
    16790440U,	// SrlX16
    1062688U,	// SrlvRxRy16
    16791148U,	// SubuRxRyRz16
    5258725U,	// SwRxRyOffMemX16
    168836581U,	// SwRxSpImmX16
    209630U,	// TAILCALL
    210112U,	// TAILCALL64_R
    210112U,	// TAILCALL_R
    285226034U,	// TEQ
    6304449U,	// TEQI
    285224000U,	// TGE
    6304415U,	// TGEI
    6305434U,	// TGEIU
    285226631U,	// TGEU
    285226575U,	// TLT
    6304467U,	// TLTI
    285226677U,	// TLTU
    285224010U,	// TNE
    6304421U,	// TNEI
    7963U,	// TRAP
    10157U,	// TRUNC_L_D64
    13650U,	// TRUNC_L_S
    11179U,	// TRUNC_W_D32
    11179U,	// TRUNC_W_D64
    13832U,	// TRUNC_W_S
    6305448U,	// TTLTIU
    15990U,	// UDIV
    16785767U,	// VSHF_B
    16787208U,	// VSHF_D
    16788691U,	// VSHF_H
    16791613U,	// VSHF_W
    7975U,	// WAIT
    6304800U,	// WRDSP
    12379U,	// WSBH
    16790735U,	// XOR
    16790735U,	// XOR64
    285221350U,	// XORI_B
    16790735U,	// XOR_MM
    16791270U,	// XOR_V
    285225671U,	// XORi
    285225671U,	// XORi64
    285225671U,	// XORi_MM
    1062095U,	// XorRxRxRy16
    0U
  };

  const char AsmStrs[] = {
  /* 0 */ 'j', 'a', 'l', 'r', 'c', 32, 9, 0,
  /* 8 */ 'd', 'm', 'f', 'c', '0', 9, 0,
  /* 15 */ 'd', 'm', 't', 'c', '0', 9, 0,
  /* 22 */ 'l', 'd', 'c', '1', 9, 0,
  /* 28 */ 's', 'd', 'c', '1', 9, 0,
  /* 34 */ 'c', 'f', 'c', '1', 9, 0,
  /* 40 */ 'd', 'm', 'f', 'c', '1', 9, 0,
  /* 47 */ 'm', 'f', 'h', 'c', '1', 9, 0,
  /* 54 */ 'm', 't', 'h', 'c', '1', 9, 0,
  /* 61 */ 'c', 't', 'c', '1', 9, 0,
  /* 67 */ 'd', 'm', 't', 'c', '1', 9, 0,
  /* 74 */ 'l', 'w', 'c', '1', 9, 0,
  /* 80 */ 's', 'w', 'c', '1', 9, 0,
  /* 86 */ 'l', 'd', 'x', 'c', '1', 9, 0,
  /* 93 */ 's', 'd', 'x', 'c', '1', 9, 0,
  /* 100 */ 'l', 'u', 'x', 'c', '1', 9, 0,
  /* 107 */ 's', 'u', 'x', 'c', '1', 9, 0,
  /* 114 */ 'l', 'w', 'x', 'c', '1', 9, 0,
  /* 121 */ 's', 'w', 'x', 'c', '1', 9, 0,
  /* 128 */ 'd', 's', 'r', 'a', '3', '2', 9, 0,
  /* 136 */ 'b', 'p', 'o', 's', 'g', 'e', '3', '2', 9, 0,
  /* 146 */ 'd', 's', 'l', 'l', '3', '2', 9, 0,
  /* 154 */ 'd', 's', 'r', 'l', '3', '2', 9, 0,
  /* 162 */ 'd', 'm', 'f', 'c', '2', 9, 0,
  /* 169 */ 'd', 'm', 't', 'c', '2', 9, 0,
  /* 176 */ 'p', 'r', 'e', 'c', 'e', 'u', '.', 'p', 'h', '.', 'q', 'b', 'l', 'a', 9, 0,
  /* 192 */ 'p', 'r', 'e', 'c', 'e', 'q', 'u', '.', 'p', 'h', '.', 'q', 'b', 'l', 'a', 9, 0,
  /* 209 */ 'p', 'r', 'e', 'c', 'e', 'u', '.', 'p', 'h', '.', 'q', 'b', 'r', 'a', 9, 0,
  /* 225 */ 'p', 'r', 'e', 'c', 'e', 'q', 'u', '.', 'p', 'h', '.', 'q', 'b', 'r', 'a', 9, 0,
  /* 242 */ 'd', 's', 'r', 'a', 9, 0,
  /* 248 */ 'c', 'f', 'c', 'm', 's', 'a', 9, 0,
  /* 256 */ 'c', 't', 'c', 'm', 's', 'a', 9, 0,
  /* 264 */ 'a', 'd', 'd', '_', 'a', '.', 'b', 9, 0,
  /* 273 */ 'm', 'i', 'n', '_', 'a', '.', 'b', 9, 0,
  /* 282 */ 'a', 'd', 'd', 's', '_', 'a', '.', 'b', 9, 0,
  /* 292 */ 'm', 'a', 'x', '_', 'a', '.', 'b', 9, 0,
  /* 301 */ 's', 'r', 'a', '.', 'b', 9, 0,
  /* 308 */ 'n', 'l', 'o', 'c', '.', 'b', 9, 0,
  /* 316 */ 'n', 'l', 'z', 'c', '.', 'b', 9, 0,
  /* 324 */ 's', 'l', 'd', '.', 'b', 9, 0,
  /* 331 */ 'p', 'c', 'k', 'o', 'd', '.', 'b', 9, 0,
  /* 340 */ 'i', 'l', 'v', 'o', 'd', '.', 'b', 9, 0,
  /* 349 */ 'i', 'n', 's', 'v', 'e', '.', 'b', 9, 0,
  /* 358 */ 'v', 's', 'h', 'f', '.', 'b', 9, 0,
  /* 366 */ 'b', 'n', 'e', 'g', '.', 'b', 9, 0,
  /* 374 */ 's', 'r', 'a', 'i', '.', 'b', 9, 0,
  /* 382 */ 's', 'l', 'd', 'i', '.', 'b', 9, 0,
  /* 390 */ 'a', 'n', 'd', 'i', '.', 'b', 9, 0,
  /* 398 */ 'b', 'n', 'e', 'g', 'i', '.', 'b', 9, 0,
  /* 407 */ 'b', 's', 'e', 'l', 'i', '.', 'b', 9, 0,
  /* 416 */ 's', 'l', 'l', 'i', '.', 'b', 9, 0,
  /* 424 */ 's', 'r', 'l', 'i', '.', 'b', 9, 0,
  /* 432 */ 'b', 'i', 'n', 's', 'l', 'i', '.', 'b', 9, 0,
  /* 442 */ 'c', 'e', 'q', 'i', '.', 'b', 9, 0,
  /* 450 */ 's', 'r', 'a', 'r', 'i', '.', 'b', 9, 0,
  /* 459 */ 'b', 'c', 'l', 'r', 'i', '.', 'b', 9, 0,
  /* 468 */ 's', 'r', 'l', 'r', 'i', '.', 'b', 9, 0,
  /* 477 */ 'n', 'o', 'r', 'i', '.', 'b', 9, 0,
  /* 485 */ 'x', 'o', 'r', 'i', '.', 'b', 9, 0,
  /* 493 */ 'b', 'i', 'n', 's', 'r', 'i', '.', 'b', 9, 0,
  /* 503 */ 's', 'p', 'l', 'a', 't', 'i', '.', 'b', 9, 0,
  /* 513 */ 'b', 's', 'e', 't', 'i', '.', 'b', 9, 0,
  /* 522 */ 's', 'u', 'b', 'v', 'i', '.', 'b', 9, 0,
  /* 531 */ 'a', 'd', 'd', 'v', 'i', '.', 'b', 9, 0,
  /* 540 */ 'b', 'm', 'z', 'i', '.', 'b', 9, 0,
  /* 548 */ 'b', 'm', 'n', 'z', 'i', '.', 'b', 9, 0,
  /* 557 */ 'f', 'i', 'l', 'l', '.', 'b', 9, 0,
  /* 565 */ 's', 'l', 'l', '.', 'b', 9, 0,
  /* 572 */ 's', 'r', 'l', '.', 'b', 9, 0,
  /* 579 */ 'b', 'i', 'n', 's', 'l', '.', 'b', 9, 0,
  /* 588 */ 'i', 'l', 'v', 'l', '.', 'b', 9, 0,
  /* 596 */ 'c', 'e', 'q', '.', 'b', 9, 0,
  /* 603 */ 's', 'r', 'a', 'r', '.', 'b', 9, 0,
  /* 611 */ 'b', 'c', 'l', 'r', '.', 'b', 9, 0,
  /* 619 */ 's', 'r', 'l', 'r', '.', 'b', 9, 0,
  /* 627 */ 'b', 'i', 'n', 's', 'r', '.', 'b', 9, 0,
  /* 636 */ 'i', 'l', 'v', 'r', '.', 'b', 9, 0,
  /* 644 */ 'a', 's', 'u', 'b', '_', 's', '.', 'b', 9, 0,
  /* 654 */ 'm', 'o', 'd', '_', 's', '.', 'b', 9, 0,
  /* 663 */ 'c', 'l', 'e', '_', 's', '.', 'b', 9, 0,
  /* 672 */ 'a', 'v', 'e', '_', 's', '.', 'b', 9, 0,
  /* 681 */ 'c', 'l', 'e', 'i', '_', 's', '.', 'b', 9, 0,
  /* 691 */ 'm', 'i', 'n', 'i', '_', 's', '.', 'b', 9, 0,
  /* 701 */ 'c', 'l', 't', 'i', '_', 's', '.', 'b', 9, 0,
  /* 711 */ 'm', 'a', 'x', 'i', '_', 's', '.', 'b', 9, 0,
  /* 721 */ 'm', 'i', 'n', '_', 's', '.', 'b', 9, 0,
  /* 730 */ 'd', 'o', 't', 'p', '_', 's', '.', 'b', 9, 0,
  /* 740 */ 'a', 'v', 'e', 'r', '_', 's', '.', 'b', 9, 0,
  /* 750 */ 's', 'u', 'b', 's', '_', 's', '.', 'b', 9, 0,
  /* 760 */ 'a', 'd', 'd', 's', '_', 's', '.', 'b', 9, 0,
  /* 770 */ 's', 'a', 't', '_', 's', '.', 'b', 9, 0,
  /* 779 */ 'c', 'l', 't', '_', 's', '.', 'b', 9, 0,
  /* 788 */ 's', 'u', 'b', 's', 'u', 'u', '_', 's', '.', 'b', 9, 0,
  /* 800 */ 'd', 'i', 'v', '_', 's', '.', 'b', 9, 0,
  /* 809 */ 'm', 'a', 'x', '_', 's', '.', 'b', 9, 0,
  /* 818 */ 'c', 'o', 'p', 'y', '_', 's', '.', 'b', 9, 0,
  /* 828 */ 's', 'p', 'l', 'a', 't', '.', 'b', 9, 0,
  /* 837 */ 'b', 's', 'e', 't', '.', 'b', 9, 0,
  /* 845 */ 'p', 'c', 'n', 't', '.', 'b', 9, 0,
  /* 853 */ 'i', 'n', 's', 'e', 'r', 't', '.', 'b', 9, 0,
  /* 863 */ 's', 't', '.', 'b', 9, 0,
  /* 869 */ 'a', 's', 'u', 'b', '_', 'u', '.', 'b', 9, 0,
  /* 879 */ 'm', 'o', 'd', '_', 'u', '.', 'b', 9, 0,
  /* 888 */ 'c', 'l', 'e', '_', 'u', '.', 'b', 9, 0,
  /* 897 */ 'a', 'v', 'e', '_', 'u', '.', 'b', 9, 0,
  /* 906 */ 'c', 'l', 'e', 'i', '_', 'u', '.', 'b', 9, 0,
  /* 916 */ 'm', 'i', 'n', 'i', '_', 'u', '.', 'b', 9, 0,
  /* 926 */ 'c', 'l', 't', 'i', '_', 'u', '.', 'b', 9, 0,
  /* 936 */ 'm', 'a', 'x', 'i', '_', 'u', '.', 'b', 9, 0,
  /* 946 */ 'm', 'i', 'n', '_', 'u', '.', 'b', 9, 0,
  /* 955 */ 'd', 'o', 't', 'p', '_', 'u', '.', 'b', 9, 0,
  /* 965 */ 'a', 'v', 'e', 'r', '_', 'u', '.', 'b', 9, 0,
  /* 975 */ 's', 'u', 'b', 's', '_', 'u', '.', 'b', 9, 0,
  /* 985 */ 'a', 'd', 'd', 's', '_', 'u', '.', 'b', 9, 0,
  /* 995 */ 's', 'u', 'b', 's', 'u', 's', '_', 'u', '.', 'b', 9, 0,
  /* 1007 */ 's', 'a', 't', '_', 'u', '.', 'b', 9, 0,
  /* 1016 */ 'c', 'l', 't', '_', 'u', '.', 'b', 9, 0,
  /* 1025 */ 'd', 'i', 'v', '_', 'u', '.', 'b', 9, 0,
  /* 1034 */ 'm', 'a', 'x', '_', 'u', '.', 'b', 9, 0,
  /* 1043 */ 'c', 'o', 'p', 'y', '_', 'u', '.', 'b', 9, 0,
  /* 1053 */ 'm', 's', 'u', 'b', 'v', '.', 'b', 9, 0,
  /* 1062 */ 'm', 'a', 'd', 'd', 'v', '.', 'b', 9, 0,
  /* 1071 */ 'p', 'c', 'k', 'e', 'v', '.', 'b', 9, 0,
  /* 1080 */ 'i', 'l', 'v', 'e', 'v', '.', 'b', 9, 0,
  /* 1089 */ 'm', 'u', 'l', 'v', '.', 'b', 9, 0,
  /* 1097 */ 'l', 'd', 'x', '.', 'b', 9, 0,
  /* 1104 */ 's', 't', 'x', '.', 'b', 9, 0,
  /* 1111 */ 'b', 'z', '.', 'b', 9, 0,
  /* 1117 */ 'b', 'n', 'z', '.', 'b', 9, 0,
  /* 1124 */ 's', 'e', 'b', 9, 0,
  /* 1129 */ 'l', 'b', 9, 0,
  /* 1133 */ 's', 'h', 'r', 'a', '.', 'q', 'b', 9, 0,
  /* 1142 */ 'c', 'm', 'p', 'g', 'd', 'u', '.', 'l', 'e', '.', 'q', 'b', 9, 0,
  /* 1156 */ 'c', 'm', 'p', 'g', 'u', '.', 'l', 'e', '.', 'q', 'b', 9, 0,
  /* 1169 */ 'c', 'm', 'p', 'u', '.', 'l', 'e', '.', 'q', 'b', 9, 0,
  /* 1181 */ 's', 'u', 'b', 'u', 'h', '.', 'q', 'b', 9, 0,
  /* 1191 */ 'a', 'd', 'd', 'u', 'h', '.', 'q', 'b', 9, 0,
  /* 1201 */ 'p', 'i', 'c', 'k', '.', 'q', 'b', 9, 0,
  /* 1210 */ 's', 'h', 'l', 'l', '.', 'q', 'b', 9, 0,
  /* 1219 */ 'r', 'e', 'p', 'l', '.', 'q', 'b', 9, 0,
  /* 1228 */ 's', 'h', 'r', 'l', '.', 'q', 'b', 9, 0,
  /* 1237 */ 'c', 'm', 'p', 'g', 'd', 'u', '.', 'e', 'q', '.', 'q', 'b', 9, 0,
  /* 1251 */ 'c', 'm', 'p', 'g', 'u', '.', 'e', 'q', '.', 'q', 'b', 9, 0,
  /* 1264 */ 'c', 'm', 'p', 'u', '.', 'e', 'q', '.', 'q', 'b', 9, 0,
  /* 1276 */ 's', 'h', 'r', 'a', '_', 'r', '.', 'q', 'b', 9, 0,
  /* 1287 */ 's', 'u', 'b', 'u', 'h', '_', 'r', '.', 'q', 'b', 9, 0,
  /* 1299 */ 'a', 'd', 'd', 'u', 'h', '_', 'r', '.', 'q', 'b', 9, 0,
  /* 1311 */ 's', 'h', 'r', 'a', 'v', '_', 'r', '.', 'q', 'b', 9, 0,
  /* 1323 */ 'a', 'b', 's', 'q', '_', 's', '.', 'q', 'b', 9, 0,
  /* 1334 */ 's', 'u', 'b', 'u', '_', 's', '.', 'q', 'b', 9, 0,
  /* 1345 */ 'a', 'd', 'd', 'u', '_', 's', '.', 'q', 'b', 9, 0,
  /* 1356 */ 'c', 'm', 'p', 'g', 'd', 'u', '.', 'l', 't', '.', 'q', 'b', 9, 0,
  /* 1370 */ 'c', 'm', 'p', 'g', 'u', '.', 'l', 't', '.', 'q', 'b', 9, 0,
  /* 1383 */ 'c', 'm', 'p', 'u', '.', 'l', 't', '.', 'q', 'b', 9, 0,
  /* 1395 */ 's', 'u', 'b', 'u', '.', 'q', 'b', 9, 0,
  /* 1404 */ 'a', 'd', 'd', 'u', '.', 'q', 'b', 9, 0,
  /* 1413 */ 's', 'h', 'r', 'a', 'v', '.', 'q', 'b', 9, 0,
  /* 1423 */ 's', 'h', 'l', 'l', 'v', '.', 'q', 'b', 9, 0,
  /* 1433 */ 'r', 'e', 'p', 'l', 'v', '.', 'q', 'b', 9, 0,
  /* 1443 */ 's', 'h', 'r', 'l', 'v', '.', 'q', 'b', 9, 0,
  /* 1453 */ 'r', 'a', 'd', 'd', 'u', '.', 'w', '.', 'q', 'b', 9, 0,
  /* 1465 */ 's', 'b', 9, 0,
  /* 1469 */ 'm', 'o', 'd', 's', 'u', 'b', 9, 0,
  /* 1477 */ 'm', 's', 'u', 'b', 9, 0,
  /* 1483 */ 'a', 'd', 'd', 's', 'c', 9, 0,
  /* 1490 */ 'a', 'd', 'd', 'w', 'c', 9, 0,
  /* 1497 */ 'f', 'l', 'o', 'g', '2', '.', 'd', 9, 0,
  /* 1506 */ 'f', 'e', 'x', 'p', '2', '.', 'd', 9, 0,
  /* 1515 */ 'a', 'd', 'd', '_', 'a', '.', 'd', 9, 0,
  /* 1524 */ 'f', 'm', 'i', 'n', '_', 'a', '.', 'd', 9, 0,
  /* 1534 */ 'a', 'd', 'd', 's', '_', 'a', '.', 'd', 9, 0,
  /* 1544 */ 'f', 'm', 'a', 'x', '_', 'a', '.', 'd', 9, 0,
  /* 1554 */ 's', 'r', 'a', '.', 'd', 9, 0,
  /* 1561 */ 'f', 's', 'u', 'b', '.', 'd', 9, 0,
  /* 1569 */ 'f', 'm', 's', 'u', 'b', '.', 'd', 9, 0,
  /* 1578 */ 'n', 'm', 's', 'u', 'b', '.', 'd', 9, 0,
  /* 1587 */ 'n', 'l', 'o', 'c', '.', 'd', 9, 0,
  /* 1595 */ 'n', 'l', 'z', 'c', '.', 'd', 9, 0,
  /* 1603 */ 'f', 'a', 'd', 'd', '.', 'd', 9, 0,
  /* 1611 */ 'f', 'm', 'a', 'd', 'd', '.', 'd', 9, 0,
  /* 1620 */ 'n', 'm', 'a', 'd', 'd', '.', 'd', 9, 0,
  /* 1629 */ 's', 'l', 'd', '.', 'd', 9, 0,
  /* 1636 */ 'p', 'c', 'k', 'o', 'd', '.', 'd', 9, 0,
  /* 1645 */ 'i', 'l', 'v', 'o', 'd', '.', 'd', 9, 0,
  /* 1654 */ 'c', '.', 'n', 'g', 'e', '.', 'd', 9, 0,
  /* 1663 */ 'c', '.', 'l', 'e', '.', 'd', 9, 0,
  /* 1671 */ 'f', 'c', 'l', 'e', '.', 'd', 9, 0,
  /* 1679 */ 'c', '.', 'n', 'g', 'l', 'e', '.', 'd', 9, 0,
  /* 1689 */ 'c', '.', 'o', 'l', 'e', '.', 'd', 9, 0,
  /* 1698 */ 'f', 's', 'l', 'e', '.', 'd', 9, 0,
  /* 1706 */ 'c', '.', 'u', 'l', 'e', '.', 'd', 9, 0,
  /* 1715 */ 'f', 'c', 'u', 'l', 'e', '.', 'd', 9, 0,
  /* 1724 */ 'f', 's', 'u', 'l', 'e', '.', 'd', 9, 0,
  /* 1733 */ 'f', 'c', 'n', 'e', '.', 'd', 9, 0,
  /* 1741 */ 'f', 's', 'n', 'e', '.', 'd', 9, 0,
  /* 1749 */ 'f', 'c', 'u', 'n', 'e', '.', 'd', 9, 0,
  /* 1758 */ 'f', 's', 'u', 'n', 'e', '.', 'd', 9, 0,
  /* 1767 */ 'i', 'n', 's', 'v', 'e', '.', 'd', 9, 0,
  /* 1776 */ 'c', '.', 'f', '.', 'd', 9, 0,
  /* 1783 */ 'f', 'c', 'a', 'f', '.', 'd', 9, 0,
  /* 1791 */ 'f', 's', 'a', 'f', '.', 'd', 9, 0,
  /* 1799 */ 'v', 's', 'h', 'f', '.', 'd', 9, 0,
  /* 1807 */ 'c', '.', 's', 'f', '.', 'd', 9, 0,
  /* 1815 */ 'm', 'o', 'v', 'f', '.', 'd', 9, 0,
  /* 1823 */ 'b', 'n', 'e', 'g', '.', 'd', 9, 0,
  /* 1831 */ 's', 'r', 'a', 'i', '.', 'd', 9, 0,
  /* 1839 */ 's', 'l', 'd', 'i', '.', 'd', 9, 0,
  /* 1847 */ 'b', 'n', 'e', 'g', 'i', '.', 'd', 9, 0,
  /* 1856 */ 's', 'l', 'l', 'i', '.', 'd', 9, 0,
  /* 1864 */ 's', 'r', 'l', 'i', '.', 'd', 9, 0,
  /* 1872 */ 'b', 'i', 'n', 's', 'l', 'i', '.', 'd', 9, 0,
  /* 1882 */ 'c', 'e', 'q', 'i', '.', 'd', 9, 0,
  /* 1890 */ 's', 'r', 'a', 'r', 'i', '.', 'd', 9, 0,
  /* 1899 */ 'b', 'c', 'l', 'r', 'i', '.', 'd', 9, 0,
  /* 1908 */ 's', 'r', 'l', 'r', 'i', '.', 'd', 9, 0,
  /* 1917 */ 'b', 'i', 'n', 's', 'r', 'i', '.', 'd', 9, 0,
  /* 1927 */ 's', 'p', 'l', 'a', 't', 'i', '.', 'd', 9, 0,
  /* 1937 */ 'b', 's', 'e', 't', 'i', '.', 'd', 9, 0,
  /* 1946 */ 's', 'u', 'b', 'v', 'i', '.', 'd', 9, 0,
  /* 1955 */ 'a', 'd', 'd', 'v', 'i', '.', 'd', 9, 0,
  /* 1964 */ 't', 'r', 'u', 'n', 'c', '.', 'l', '.', 'd', 9, 0,
  /* 1975 */ 'r', 'o', 'u', 'n', 'd', '.', 'l', '.', 'd', 9, 0,
  /* 1986 */ 'c', 'e', 'i', 'l', '.', 'l', '.', 'd', 9, 0,
  /* 1996 */ 'f', 'l', 'o', 'o', 'r', '.', 'l', '.', 'd', 9, 0,
  /* 2007 */ 'c', 'v', 't', '.', 'l', '.', 'd', 9, 0,
  /* 2016 */ 'c', '.', 'n', 'g', 'l', '.', 'd', 9, 0,
  /* 2025 */ 's', 'l', 'l', '.', 'd', 9, 0,
  /* 2032 */ 'f', 'e', 'x', 'u', 'p', 'l', '.', 'd', 9, 0,
  /* 2042 */ 'f', 'f', 'q', 'l', '.', 'd', 9, 0,
  /* 2050 */ 's', 'r', 'l', '.', 'd', 9, 0,
  /* 2057 */ 'b', 'i', 'n', 's', 'l', '.', 'd', 9, 0,
  /* 2066 */ 'f', 'm', 'u', 'l', '.', 'd', 9, 0,
  /* 2074 */ 'i', 'l', 'v', 'l', '.', 'd', 9, 0,
  /* 2082 */ 'f', 'm', 'i', 'n', '.', 'd', 9, 0,
  /* 2090 */ 'c', '.', 'u', 'n', '.', 'd', 9, 0,
  /* 2098 */ 'f', 'c', 'u', 'n', '.', 'd', 9, 0,
  /* 2106 */ 'f', 's', 'u', 'n', '.', 'd', 9, 0,
  /* 2114 */ 'm', 'o', 'v', 'n', '.', 'd', 9, 0,
  /* 2122 */ 'f', 'r', 'c', 'p', '.', 'd', 9, 0,
  /* 2130 */ 'c', '.', 'e', 'q', '.', 'd', 9, 0,
  /* 2138 */ 'f', 'c', 'e', 'q', '.', 'd', 9, 0,
  /* 2146 */ 'c', '.', 's', 'e', 'q', '.', 'd', 9, 0,
  /* 2155 */ 'f', 's', 'e', 'q', '.', 'd', 9, 0,
  /* 2163 */ 'c', '.', 'u', 'e', 'q', '.', 'd', 9, 0,
  /* 2172 */ 'f', 'c', 'u', 'e', 'q', '.', 'd', 9, 0,
  /* 2181 */ 'f', 's', 'u', 'e', 'q', '.', 'd', 9, 0,
  /* 2190 */ 's', 'r', 'a', 'r', '.', 'd', 9, 0,
  /* 2198 */ 'b', 'c', 'l', 'r', '.', 'd', 9, 0,
  /* 2206 */ 's', 'r', 'l', 'r', '.', 'd', 9, 0,
  /* 2214 */ 'f', 'c', 'o', 'r', '.', 'd', 9, 0,
  /* 2222 */ 'f', 's', 'o', 'r', '.', 'd', 9, 0,
  /* 2230 */ 'f', 'e', 'x', 'u', 'p', 'r', '.', 'd', 9, 0,
  /* 2240 */ 'f', 'f', 'q', 'r', '.', 'd', 9, 0,
  /* 2248 */ 'b', 'i', 'n', 's', 'r', '.', 'd', 9, 0,
  /* 2257 */ 'i', 'l', 'v', 'r', '.', 'd', 9, 0,
  /* 2265 */ 'c', 'v', 't', '.', 's', '.', 'd', 9, 0,
  /* 2274 */ 'a', 's', 'u', 'b', '_', 's', '.', 'd', 9, 0,
  /* 2284 */ 'h', 's', 'u', 'b', '_', 's', '.', 'd', 9, 0,
  /* 2294 */ 'd', 'p', 's', 'u', 'b', '_', 's', '.', 'd', 9, 0,
  /* 2305 */ 'f', 't', 'r', 'u', 'n', 'c', '_', 's', '.', 'd', 9, 0,
  /* 2317 */ 'h', 'a', 'd', 'd', '_', 's', '.', 'd', 9, 0,
  /* 2327 */ 'd', 'p', 'a', 'd', 'd', '_', 's', '.', 'd', 9, 0,
  /* 2338 */ 'm', 'o', 'd', '_', 's', '.', 'd', 9, 0,
  /* 2347 */ 'c', 'l', 'e', '_', 's', '.', 'd', 9, 0,
  /* 2356 */ 'a', 'v', 'e', '_', 's', '.', 'd', 9, 0,
  /* 2365 */ 'c', 'l', 'e', 'i', '_', 's', '.', 'd', 9, 0,
  /* 2375 */ 'm', 'i', 'n', 'i', '_', 's', '.', 'd', 9, 0,
  /* 2385 */ 'c', 'l', 't', 'i', '_', 's', '.', 'd', 9, 0,
  /* 2395 */ 'm', 'a', 'x', 'i', '_', 's', '.', 'd', 9, 0,
  /* 2405 */ 'm', 'i', 'n', '_', 's', '.', 'd', 9, 0,
  /* 2414 */ 'd', 'o', 't', 'p', '_', 's', '.', 'd', 9, 0,
  /* 2424 */ 'a', 'v', 'e', 'r', '_', 's', '.', 'd', 9, 0,
  /* 2434 */ 's', 'u', 'b', 's', '_', 's', '.', 'd', 9, 0,
  /* 2444 */ 'a', 'd', 'd', 's', '_', 's', '.', 'd', 9, 0,
  /* 2454 */ 's', 'a', 't', '_', 's', '.', 'd', 9, 0,
  /* 2463 */ 'c', 'l', 't', '_', 's', '.', 'd', 9, 0,
  /* 2472 */ 'f', 'f', 'i', 'n', 't', '_', 's', '.', 'd', 9, 0,
  /* 2483 */ 'f', 't', 'i', 'n', 't', '_', 's', '.', 'd', 9, 0,
  /* 2494 */ 's', 'u', 'b', 's', 'u', 'u', '_', 's', '.', 'd', 9, 0,
  /* 2506 */ 'd', 'i', 'v', '_', 's', '.', 'd', 9, 0,
  /* 2515 */ 'm', 'a', 'x', '_', 's', '.', 'd', 9, 0,
  /* 2524 */ 'a', 'b', 's', '.', 'd', 9, 0,
  /* 2531 */ 'f', 'c', 'l', 'a', 's', 's', '.', 'd', 9, 0,
  /* 2541 */ 's', 'p', 'l', 'a', 't', '.', 'd', 9, 0,
  /* 2550 */ 'b', 's', 'e', 't', '.', 'd', 9, 0,
  /* 2558 */ 'c', '.', 'n', 'g', 't', '.', 'd', 9, 0,
  /* 2567 */ 'c', '.', 'l', 't', '.', 'd', 9, 0,
  /* 2575 */ 'f', 'c', 'l', 't', '.', 'd', 9, 0,
  /* 2583 */ 'c', '.', 'o', 'l', 't', '.', 'd', 9, 0,
  /* 2592 */ 'f', 's', 'l', 't', '.', 'd', 9, 0,
  /* 2600 */ 'c', '.', 'u', 'l', 't', '.', 'd', 9, 0,
  /* 2609 */ 'f', 'c', 'u', 'l', 't', '.', 'd', 9, 0,
  /* 2618 */ 'f', 's', 'u', 'l', 't', '.', 'd', 9, 0,
  /* 2627 */ 'p', 'c', 'n', 't', '.', 'd', 9, 0,
  /* 2635 */ 'f', 'r', 'i', 'n', 't', '.', 'd', 9, 0,
  /* 2644 */ 'f', 's', 'q', 'r', 't', '.', 'd', 9, 0,
  /* 2653 */ 'f', 'r', 's', 'q', 'r', 't', '.', 'd', 9, 0,
  /* 2663 */ 's', 't', '.', 'd', 9, 0,
  /* 2669 */ 'm', 'o', 'v', 't', '.', 'd', 9, 0,
  /* 2677 */ 'a', 's', 'u', 'b', '_', 'u', '.', 'd', 9, 0,
  /* 2687 */ 'h', 's', 'u', 'b', '_', 'u', '.', 'd', 9, 0,
  /* 2697 */ 'd', 'p', 's', 'u', 'b', '_', 'u', '.', 'd', 9, 0,
  /* 2708 */ 'f', 't', 'r', 'u', 'n', 'c', '_', 'u', '.', 'd', 9, 0,
  /* 2720 */ 'h', 'a', 'd', 'd', '_', 'u', '.', 'd', 9, 0,
  /* 2730 */ 'd', 'p', 'a', 'd', 'd', '_', 'u', '.', 'd', 9, 0,
  /* 2741 */ 'm', 'o', 'd', '_', 'u', '.', 'd', 9, 0,
  /* 2750 */ 'c', 'l', 'e', '_', 'u', '.', 'd', 9, 0,
  /* 2759 */ 'a', 'v', 'e', '_', 'u', '.', 'd', 9, 0,
  /* 2768 */ 'c', 'l', 'e', 'i', '_', 'u', '.', 'd', 9, 0,
  /* 2778 */ 'm', 'i', 'n', 'i', '_', 'u', '.', 'd', 9, 0,
  /* 2788 */ 'c', 'l', 't', 'i', '_', 'u', '.', 'd', 9, 0,
  /* 2798 */ 'm', 'a', 'x', 'i', '_', 'u', '.', 'd', 9, 0,
  /* 2808 */ 'm', 'i', 'n', '_', 'u', '.', 'd', 9, 0,
  /* 2817 */ 'd', 'o', 't', 'p', '_', 'u', '.', 'd', 9, 0,
  /* 2827 */ 'a', 'v', 'e', 'r', '_', 'u', '.', 'd', 9, 0,
  /* 2837 */ 's', 'u', 'b', 's', '_', 'u', '.', 'd', 9, 0,
  /* 2847 */ 'a', 'd', 'd', 's', '_', 'u', '.', 'd', 9, 0,
  /* 2857 */ 's', 'u', 'b', 's', 'u', 's', '_', 'u', '.', 'd', 9, 0,
  /* 2869 */ 's', 'a', 't', '_', 'u', '.', 'd', 9, 0,
  /* 2878 */ 'c', 'l', 't', '_', 'u', '.', 'd', 9, 0,
  /* 2887 */ 'f', 'f', 'i', 'n', 't', '_', 'u', '.', 'd', 9, 0,
  /* 2898 */ 'f', 't', 'i', 'n', 't', '_', 'u', '.', 'd', 9, 0,
  /* 2909 */ 'd', 'i', 'v', '_', 'u', '.', 'd', 9, 0,
  /* 2918 */ 'm', 'a', 'x', '_', 'u', '.', 'd', 9, 0,
  /* 2927 */ 'm', 's', 'u', 'b', 'v', '.', 'd', 9, 0,
  /* 2936 */ 'm', 'a', 'd', 'd', 'v', '.', 'd', 9, 0,
  /* 2945 */ 'p', 'c', 'k', 'e', 'v', '.', 'd', 9, 0,
  /* 2954 */ 'i', 'l', 'v', 'e', 'v', '.', 'd', 9, 0,
  /* 2963 */ 'f', 'd', 'i', 'v', '.', 'd', 9, 0,
  /* 2971 */ 'm', 'u', 'l', 'v', '.', 'd', 9, 0,
  /* 2979 */ 'm', 'o', 'v', '.', 'd', 9, 0,
  /* 2986 */ 't', 'r', 'u', 'n', 'c', '.', 'w', '.', 'd', 9, 0,
  /* 2997 */ 'r', 'o', 'u', 'n', 'd', '.', 'w', '.', 'd', 9, 0,
  /* 3008 */ 'c', 'e', 'i', 'l', '.', 'w', '.', 'd', 9, 0,
  /* 3018 */ 'f', 'l', 'o', 'o', 'r', '.', 'w', '.', 'd', 9, 0,
  /* 3029 */ 'c', 'v', 't', '.', 'w', '.', 'd', 9, 0,
  /* 3038 */ 'f', 'm', 'a', 'x', '.', 'd', 9, 0,
  /* 3046 */ 'l', 'd', 'x', '.', 'd', 9, 0,
  /* 3053 */ 's', 't', 'x', '.', 'd', 9, 0,
  /* 3060 */ 'b', 'z', '.', 'd', 9, 0,
  /* 3066 */ 'b', 'n', 'z', '.', 'd', 9, 0,
  /* 3073 */ 'm', 'o', 'v', 'z', '.', 'd', 9, 0,
  /* 3081 */ 's', 'c', 'd', 9, 0,
  /* 3086 */ 'd', 'a', 'd', 'd', 9, 0,
  /* 3092 */ 'm', 'a', 'd', 'd', 9, 0,
  /* 3098 */ 'd', 's', 'h', 'd', 9, 0,
  /* 3104 */ 'l', 'l', 'd', 9, 0,
  /* 3109 */ 'a', 'n', 'd', 9, 0,
  /* 3114 */ 'p', 'r', 'e', 'p', 'e', 'n', 'd', 9, 0,
  /* 3123 */ 'a', 'p', 'p', 'e', 'n', 'd', 9, 0,
  /* 3131 */ 's', 'd', 9, 0,
  /* 3135 */ 't', 'g', 'e', 9, 0,
  /* 3140 */ 'b', 'n', 'e', 9, 0,
  /* 3145 */ 't', 'n', 'e', 9, 0,
  /* 3150 */ 'r', 'e', 's', 't', 'o', 'r', 'e', 9, 0,
  /* 3159 */ 's', 'a', 'v', 'e', 9, 0,
  /* 3165 */ 'm', 'o', 'v', 'e', 9, 0,
  /* 3171 */ 'b', 'c', '1', 'f', 9, 0,
  /* 3177 */ 'm', 'o', 'v', 'f', 9, 0,
  /* 3183 */ 'n', 'e', 'g', 9, 0,
  /* 3188 */ 'a', 'd', 'd', '_', 'a', '.', 'h', 9, 0,
  /* 3197 */ 'm', 'i', 'n', '_', 'a', '.', 'h', 9, 0,
  /* 3206 */ 'a', 'd', 'd', 's', '_', 'a', '.', 'h', 9, 0,
  /* 3216 */ 'm', 'a', 'x', '_', 'a', '.', 'h', 9, 0,
  /* 3225 */ 's', 'r', 'a', '.', 'h', 9, 0,
  /* 3232 */ 'n', 'l', 'o', 'c', '.', 'h', 9, 0,
  /* 3240 */ 'n', 'l', 'z', 'c', '.', 'h', 9, 0,
  /* 3248 */ 's', 'l', 'd', '.', 'h', 9, 0,
  /* 3255 */ 'p', 'c', 'k', 'o', 'd', '.', 'h', 9, 0,
  /* 3264 */ 'i', 'l', 'v', 'o', 'd', '.', 'h', 9, 0,
  /* 3273 */ 'i', 'n', 's', 'v', 'e', '.', 'h', 9, 0,
  /* 3282 */ 'v', 's', 'h', 'f', '.', 'h', 9, 0,
  /* 3290 */ 'b', 'n', 'e', 'g', '.', 'h', 9, 0,
  /* 3298 */ 's', 'r', 'a', 'i', '.', 'h', 9, 0,
  /* 3306 */ 's', 'l', 'd', 'i', '.', 'h', 9, 0,
  /* 3314 */ 'b', 'n', 'e', 'g', 'i', '.', 'h', 9, 0,
  /* 3323 */ 's', 'l', 'l', 'i', '.', 'h', 9, 0,
  /* 3331 */ 's', 'r', 'l', 'i', '.', 'h', 9, 0,
  /* 3339 */ 'b', 'i', 'n', 's', 'l', 'i', '.', 'h', 9, 0,
  /* 3349 */ 'c', 'e', 'q', 'i', '.', 'h', 9, 0,
  /* 3357 */ 's', 'r', 'a', 'r', 'i', '.', 'h', 9, 0,
  /* 3366 */ 'b', 'c', 'l', 'r', 'i', '.', 'h', 9, 0,
  /* 3375 */ 's', 'r', 'l', 'r', 'i', '.', 'h', 9, 0,
  /* 3384 */ 'b', 'i', 'n', 's', 'r', 'i', '.', 'h', 9, 0,
  /* 3394 */ 's', 'p', 'l', 'a', 't', 'i', '.', 'h', 9, 0,
  /* 3404 */ 'b', 's', 'e', 't', 'i', '.', 'h', 9, 0,
  /* 3413 */ 's', 'u', 'b', 'v', 'i', '.', 'h', 9, 0,
  /* 3422 */ 'a', 'd', 'd', 'v', 'i', '.', 'h', 9, 0,
  /* 3431 */ 'f', 'i', 'l', 'l', '.', 'h', 9, 0,
  /* 3439 */ 's', 'l', 'l', '.', 'h', 9, 0,
  /* 3446 */ 's', 'r', 'l', '.', 'h', 9, 0,
  /* 3453 */ 'b', 'i', 'n', 's', 'l', '.', 'h', 9, 0,
  /* 3462 */ 'i', 'l', 'v', 'l', '.', 'h', 9, 0,
  /* 3470 */ 'f', 'e', 'x', 'd', 'o', '.', 'h', 9, 0,
  /* 3479 */ 'm', 's', 'u', 'b', '_', 'q', '.', 'h', 9, 0,
  /* 3489 */ 'm', 'a', 'd', 'd', '_', 'q', '.', 'h', 9, 0,
  /* 3499 */ 'm', 'u', 'l', '_', 'q', '.', 'h', 9, 0,
  /* 3508 */ 'm', 's', 'u', 'b', 'r', '_', 'q', '.', 'h', 9, 0,
  /* 3519 */ 'm', 'a', 'd', 'd', 'r', '_', 'q', '.', 'h', 9, 0,
  /* 3530 */ 'm', 'u', 'l', 'r', '_', 'q', '.', 'h', 9, 0,
  /* 3540 */ 'c', 'e', 'q', '.', 'h', 9, 0,
  /* 3547 */ 'f', 't', 'q', '.', 'h', 9, 0,
  /* 3554 */ 's', 'r', 'a', 'r', '.', 'h', 9, 0,
  /* 3562 */ 'b', 'c', 'l', 'r', '.', 'h', 9, 0,
  /* 3570 */ 's', 'r', 'l', 'r', '.', 'h', 9, 0,
  /* 3578 */ 'b', 'i', 'n', 's', 'r', '.', 'h', 9, 0,
  /* 3587 */ 'i', 'l', 'v', 'r', '.', 'h', 9, 0,
  /* 3595 */ 'a', 's', 'u', 'b', '_', 's', '.', 'h', 9, 0,
  /* 3605 */ 'h', 's', 'u', 'b', '_', 's', '.', 'h', 9, 0,
  /* 3615 */ 'd', 'p', 's', 'u', 'b', '_', 's', '.', 'h', 9, 0,
  /* 3626 */ 'h', 'a', 'd', 'd', '_', 's', '.', 'h', 9, 0,
  /* 3636 */ 'd', 'p', 'a', 'd', 'd', '_', 's', '.', 'h', 9, 0,
  /* 3647 */ 'm', 'o', 'd', '_', 's', '.', 'h', 9, 0,
  /* 3656 */ 'c', 'l', 'e', '_', 's', '.', 'h', 9, 0,
  /* 3665 */ 'a', 'v', 'e', '_', 's', '.', 'h', 9, 0,
  /* 3674 */ 'c', 'l', 'e', 'i', '_', 's', '.', 'h', 9, 0,
  /* 3684 */ 'm', 'i', 'n', 'i', '_', 's', '.', 'h', 9, 0,
  /* 3694 */ 'c', 'l', 't', 'i', '_', 's', '.', 'h', 9, 0,
  /* 3704 */ 'm', 'a', 'x', 'i', '_', 's', '.', 'h', 9, 0,
  /* 3714 */ 'm', 'i', 'n', '_', 's', '.', 'h', 9, 0,
  /* 3723 */ 'd', 'o', 't', 'p', '_', 's', '.', 'h', 9, 0,
  /* 3733 */ 'a', 'v', 'e', 'r', '_', 's', '.', 'h', 9, 0,
  /* 3743 */ 'e', 'x', 't', 'r', '_', 's', '.', 'h', 9, 0,
  /* 3753 */ 's', 'u', 'b', 's', '_', 's', '.', 'h', 9, 0,
  /* 3763 */ 'a', 'd', 'd', 's', '_', 's', '.', 'h', 9, 0,
  /* 3773 */ 's', 'a', 't', '_', 's', '.', 'h', 9, 0,
  /* 3782 */ 'c', 'l', 't', '_', 's', '.', 'h', 9, 0,
  /* 3791 */ 's', 'u', 'b', 's', 'u', 'u', '_', 's', '.', 'h', 9, 0,
  /* 3803 */ 'd', 'i', 'v', '_', 's', '.', 'h', 9, 0,
  /* 3812 */ 'e', 'x', 't', 'r', 'v', '_', 's', '.', 'h', 9, 0,
  /* 3823 */ 'm', 'a', 'x', '_', 's', '.', 'h', 9, 0,
  /* 3832 */ 'c', 'o', 'p', 'y', '_', 's', '.', 'h', 9, 0,
  /* 3842 */ 's', 'p', 'l', 'a', 't', '.', 'h', 9, 0,
  /* 3851 */ 'b', 's', 'e', 't', '.', 'h', 9, 0,
  /* 3859 */ 'p', 'c', 'n', 't', '.', 'h', 9, 0,
  /* 3867 */ 'i', 'n', 's', 'e', 'r', 't', '.', 'h', 9, 0,
  /* 3877 */ 's', 't', '.', 'h', 9, 0,
  /* 3883 */ 'a', 's', 'u', 'b', '_', 'u', '.', 'h', 9, 0,
  /* 3893 */ 'h', 's', 'u', 'b', '_', 'u', '.', 'h', 9, 0,
  /* 3903 */ 'd', 'p', 's', 'u', 'b', '_', 'u', '.', 'h', 9, 0,
  /* 3914 */ 'h', 'a', 'd', 'd', '_', 'u', '.', 'h', 9, 0,
  /* 3924 */ 'd', 'p', 'a', 'd', 'd', '_', 'u', '.', 'h', 9, 0,
  /* 3935 */ 'm', 'o', 'd', '_', 'u', '.', 'h', 9, 0,
  /* 3944 */ 'c', 'l', 'e', '_', 'u', '.', 'h', 9, 0,
  /* 3953 */ 'a', 'v', 'e', '_', 'u', '.', 'h', 9, 0,
  /* 3962 */ 'c', 'l', 'e', 'i', '_', 'u', '.', 'h', 9, 0,
  /* 3972 */ 'm', 'i', 'n', 'i', '_', 'u', '.', 'h', 9, 0,
  /* 3982 */ 'c', 'l', 't', 'i', '_', 'u', '.', 'h', 9, 0,
  /* 3992 */ 'm', 'a', 'x', 'i', '_', 'u', '.', 'h', 9, 0,
  /* 4002 */ 'm', 'i', 'n', '_', 'u', '.', 'h', 9, 0,
  /* 4011 */ 'd', 'o', 't', 'p', '_', 'u', '.', 'h', 9, 0,
  /* 4021 */ 'a', 'v', 'e', 'r', '_', 'u', '.', 'h', 9, 0,
  /* 4031 */ 's', 'u', 'b', 's', '_', 'u', '.', 'h', 9, 0,
  /* 4041 */ 'a', 'd', 'd', 's', '_', 'u', '.', 'h', 9, 0,
  /* 4051 */ 's', 'u', 'b', 's', 'u', 's', '_', 'u', '.', 'h', 9, 0,
  /* 4063 */ 's', 'a', 't', '_', 'u', '.', 'h', 9, 0,
  /* 4072 */ 'c', 'l', 't', '_', 'u', '.', 'h', 9, 0,
  /* 4081 */ 'd', 'i', 'v', '_', 'u', '.', 'h', 9, 0,
  /* 4090 */ 'm', 'a', 'x', '_', 'u', '.', 'h', 9, 0,
  /* 4099 */ 'c', 'o', 'p', 'y', '_', 'u', '.', 'h', 9, 0,
  /* 4109 */ 'm', 's', 'u', 'b', 'v', '.', 'h', 9, 0,
  /* 4118 */ 'm', 'a', 'd', 'd', 'v', '.', 'h', 9, 0,
  /* 4127 */ 'p', 'c', 'k', 'e', 'v', '.', 'h', 9, 0,
  /* 4136 */ 'i', 'l', 'v', 'e', 'v', '.', 'h', 9, 0,
  /* 4145 */ 'm', 'u', 'l', 'v', '.', 'h', 9, 0,
  /* 4153 */ 'l', 'd', 'x', '.', 'h', 9, 0,
  /* 4160 */ 's', 't', 'x', '.', 'h', 9, 0,
  /* 4167 */ 'b', 'z', '.', 'h', 9, 0,
  /* 4173 */ 'b', 'n', 'z', '.', 'h', 9, 0,
  /* 4180 */ 'd', 's', 'b', 'h', 9, 0,
  /* 4186 */ 'w', 's', 'b', 'h', 9, 0,
  /* 4192 */ 's', 'e', 'h', 9, 0,
  /* 4197 */ 'l', 'h', 9, 0,
  /* 4201 */ 's', 'h', 'r', 'a', '.', 'p', 'h', 9, 0,
  /* 4210 */ 'p', 'r', 'e', 'c', 'r', 'q', '.', 'q', 'b', '.', 'p', 'h', 9, 0,
  /* 4224 */ 'p', 'r', 'e', 'c', 'r', '.', 'q', 'b', '.', 'p', 'h', 9, 0,
  /* 4237 */ 'p', 'r', 'e', 'c', 'r', 'q', 'u', '_', 's', '.', 'q', 'b', '.', 'p', 'h', 9, 0,
  /* 4254 */ 'c', 'm', 'p', '.', 'l', 'e', '.', 'p', 'h', 9, 0,
  /* 4265 */ 's', 'u', 'b', 'q', 'h', '.', 'p', 'h', 9, 0,
  /* 4275 */ 'a', 'd', 'd', 'q', 'h', '.', 'p', 'h', 9, 0,
  /* 4285 */ 'p', 'i', 'c', 'k', '.', 'p', 'h', 9, 0,
  /* 4294 */ 's', 'h', 'l', 'l', '.', 'p', 'h', 9, 0,
  /* 4303 */ 'r', 'e', 'p', 'l', '.', 'p', 'h', 9, 0,
  /* 4312 */ 's', 'h', 'r', 'l', '.', 'p', 'h', 9, 0,
  /* 4321 */ 'p', 'a', 'c', 'k', 'r', 'l', '.', 'p', 'h', 9, 0,
  /* 4332 */ 'm', 'u', 'l', '.', 'p', 'h', 9, 0,
  /* 4340 */ 's', 'u', 'b', 'q', '.', 'p', 'h', 9, 0,
  /* 4349 */ 'a', 'd', 'd', 'q', '.', 'p', 'h', 9, 0,
  /* 4358 */ 'c', 'm', 'p', '.', 'e', 'q', '.', 'p', 'h', 9, 0,
  /* 4369 */ 's', 'h', 'r', 'a', '_', 'r', '.', 'p', 'h', 9, 0,
  /* 4380 */ 's', 'u', 'b', 'q', 'h', '_', 'r', '.', 'p', 'h', 9, 0,
  /* 4392 */ 'a', 'd', 'd', 'q', 'h', '_', 'r', '.', 'p', 'h', 9, 0,
  /* 4404 */ 's', 'h', 'r', 'a', 'v', '_', 'r', '.', 'p', 'h', 9, 0,
  /* 4416 */ 's', 'h', 'l', 'l', '_', 's', '.', 'p', 'h', 9, 0,
  /* 4427 */ 'm', 'u', 'l', '_', 's', '.', 'p', 'h', 9, 0,
  /* 4437 */ 's', 'u', 'b', 'q', '_', 's', '.', 'p', 'h', 9, 0,
  /* 4448 */ 'a', 'd', 'd', 'q', '_', 's', '.', 'p', 'h', 9, 0,
  /* 4459 */ 'm', 'u', 'l', 'q', '_', 's', '.', 'p', 'h', 9, 0,
  /* 4470 */ 'a', 'b', 's', 'q', '_', 's', '.', 'p', 'h', 9, 0,
  /* 4481 */ 's', 'u', 'b', 'u', '_', 's', '.', 'p', 'h', 9, 0,
  /* 4492 */ 'a', 'd', 'd', 'u', '_', 's', '.', 'p', 'h', 9, 0,
  /* 4503 */ 's', 'h', 'l', 'l', 'v', '_', 's', '.', 'p', 'h', 9, 0,
  /* 4515 */ 'm', 'u', 'l', 'q', '_', 'r', 's', '.', 'p', 'h', 9, 0,
  /* 4527 */ 'c', 'm', 'p', '.', 'l', 't', '.', 'p', 'h', 9, 0,
  /* 4538 */ 's', 'u', 'b', 'u', '.', 'p', 'h', 9, 0,
  /* 4547 */ 'a', 'd', 'd', 'u', '.', 'p', 'h', 9, 0,
  /* 4556 */ 's', 'h', 'r', 'a', 'v', '.', 'p', 'h', 9, 0,
  /* 4566 */ 's', 'h', 'l', 'l', 'v', '.', 'p', 'h', 9, 0,
  /* 4576 */ 'r', 'e', 'p', 'l', 'v', '.', 'p', 'h', 9, 0,
  /* 4586 */ 's', 'h', 'r', 'l', 'v', '.', 'p', 'h', 9, 0,
  /* 4596 */ 'd', 'p', 'a', '.', 'w', '.', 'p', 'h', 9, 0,
  /* 4606 */ 'd', 'p', 'a', 'q', 'x', '_', 's', 'a', '.', 'w', '.', 'p', 'h', 9, 0,
  /* 4621 */ 'd', 'p', 's', 'q', 'x', '_', 's', 'a', '.', 'w', '.', 'p', 'h', 9, 0,
  /* 4636 */ 'm', 'u', 'l', 's', 'a', '.', 'w', '.', 'p', 'h', 9, 0,
  /* 4648 */ 'd', 'p', 'a', 'q', '_', 's', '.', 'w', '.', 'p', 'h', 9, 0,
  /* 4661 */ 'm', 'u', 'l', 's', 'a', 'q', '_', 's', '.', 'w', '.', 'p', 'h', 9, 0,
  /* 4676 */ 'd', 'p', 's', 'q', '_', 's', '.', 'w', '.', 'p', 'h', 9, 0,
  /* 4689 */ 'd', 'p', 'a', 'q', 'x', '_', 's', '.', 'w', '.', 'p', 'h', 9, 0,
  /* 4703 */ 'd', 'p', 's', 'q', 'x', '_', 's', '.', 'w', '.', 'p', 'h', 9, 0,
  /* 4717 */ 'd', 'p', 's', '.', 'w', '.', 'p', 'h', 9, 0,
  /* 4727 */ 'd', 'p', 'a', 'x', '.', 'w', '.', 'p', 'h', 9, 0,
  /* 4738 */ 'd', 'p', 's', 'x', '.', 'w', '.', 'p', 'h', 9, 0,
  /* 4749 */ 's', 'h', 9, 0,
  /* 4753 */ 'd', 'a', 'd', 'd', 'i', 9, 0,
  /* 4760 */ 'a', 'n', 'd', 'i', 9, 0,
  /* 4766 */ 't', 'g', 'e', 'i', 9, 0,
  /* 4772 */ 't', 'n', 'e', 'i', 9, 0,
  /* 4778 */ 'm', 'f', 'h', 'i', 9, 0,
  /* 4784 */ 'm', 't', 'h', 'i', 9, 0,
  /* 4790 */ 'l', 'i', 9, 0,
  /* 4794 */ 'c', 'm', 'p', 'i', 9, 0,
  /* 4800 */ 't', 'e', 'q', 'i', 9, 0,
  /* 4806 */ 'x', 'o', 'r', 'i', 9, 0,
  /* 4812 */ 's', 'l', 't', 'i', 9, 0,
  /* 4818 */ 't', 'l', 't', 'i', 9, 0,
  /* 4824 */ 'l', 'u', 'i', 9, 0,
  /* 4829 */ 'j', 9, 0,
  /* 4832 */ 'b', 'r', 'e', 'a', 'k', 9, 0,
  /* 4839 */ 'c', 'v', 't', '.', 'd', '.', 'l', 9, 0,
  /* 4848 */ 'c', 'v', 't', '.', 's', '.', 'l', 9, 0,
  /* 4857 */ 'j', 'a', 'l', 9, 0,
  /* 4862 */ 'b', 'g', 'e', 'z', 'a', 'l', 9, 0,
  /* 4870 */ 'b', 'l', 't', 'z', 'a', 'l', 9, 0,
  /* 4878 */ 'd', 'p', 'a', 'u', '.', 'h', '.', 'q', 'b', 'l', 9, 0,
  /* 4890 */ 'd', 'p', 's', 'u', '.', 'h', '.', 'q', 'b', 'l', 9, 0,
  /* 4902 */ 'm', 'u', 'l', 'e', 'u', '_', 's', '.', 'p', 'h', '.', 'q', 'b', 'l', 9, 0,
  /* 4918 */ 'p', 'r', 'e', 'c', 'e', 'u', '.', 'p', 'h', '.', 'q', 'b', 'l', 9, 0,
  /* 4933 */ 'p', 'r', 'e', 'c', 'e', 'q', 'u', '.', 'p', 'h', '.', 'q', 'b', 'l', 9, 0,
  /* 4949 */ 'l', 'd', 'l', 9, 0,
  /* 4954 */ 's', 'd', 'l', 9, 0,
  /* 4959 */ 'm', 'a', 'q', '_', 's', 'a', '.', 'w', '.', 'p', 'h', 'l', 9, 0,
  /* 4973 */ 'p', 'r', 'e', 'c', 'e', 'q', '.', 'w', '.', 'p', 'h', 'l', 9, 0,
  /* 4987 */ 'm', 'a', 'q', '_', 's', '.', 'w', '.', 'p', 'h', 'l', 9, 0,
  /* 5000 */ 'm', 'u', 'l', 'e', 'q', '_', 's', '.', 'w', '.', 'p', 'h', 'l', 9, 0,
  /* 5015 */ 's', 'y', 's', 'c', 'a', 'l', 'l', 9, 0,
  /* 5024 */ 'd', 's', 'l', 'l', 9, 0,
  /* 5030 */ 'd', 's', 'r', 'l', 9, 0,
  /* 5036 */ 'm', 'u', 'l', 9, 0,
  /* 5041 */ 'l', 'w', 'l', 9, 0,
  /* 5046 */ 's', 'w', 'l', 9, 0,
  /* 5051 */ 'b', 'a', 'l', 'i', 'g', 'n', 9, 0,
  /* 5059 */ 'm', 'o', 'v', 'n', 9, 0,
  /* 5065 */ 'd', 'c', 'l', 'o', 9, 0,
  /* 5071 */ 'm', 'f', 'l', 'o', 9, 0,
  /* 5077 */ 's', 'h', 'i', 'l', 'o', 9, 0,
  /* 5084 */ 'm', 't', 'l', 'o', 9, 0,
  /* 5090 */ 'e', 'x', 't', 'p', 'd', 'p', 9, 0,
  /* 5098 */ 'm', 't', 'h', 'l', 'i', 'p', 9, 0,
  /* 5106 */ 'c', 'm', 'p', 9, 0,
  /* 5111 */ 'l', 'o', 'a', 'd', '_', 'c', 'c', 'o', 'n', 'd', '_', 'd', 's', 'p', 9, 0,
  /* 5127 */ 's', 't', 'o', 'r', 'e', '_', 'c', 'c', 'o', 'n', 'd', '_', 'd', 's', 'p', 9, 0,
  /* 5144 */ 'r', 'd', 'd', 's', 'p', 9, 0,
  /* 5151 */ 'w', 'r', 'd', 's', 'p', 9, 0,
  /* 5158 */ 'e', 'x', 't', 'p', 9, 0,
  /* 5164 */ 'b', 'e', 'q', 9, 0,
  /* 5169 */ 't', 'e', 'q', 9, 0,
  /* 5174 */ 'd', 'p', 'a', 'u', '.', 'h', '.', 'q', 'b', 'r', 9, 0,
  /* 5186 */ 'd', 'p', 's', 'u', '.', 'h', '.', 'q', 'b', 'r', 9, 0,
  /* 5198 */ 'm', 'u', 'l', 'e', 'u', '_', 's', '.', 'p', 'h', '.', 'q', 'b', 'r', 9, 0,
  /* 5214 */ 'p', 'r', 'e', 'c', 'e', 'u', '.', 'p', 'h', '.', 'q', 'b', 'r', 9, 0,
  /* 5229 */ 'p', 'r', 'e', 'c', 'e', 'q', 'u', '.', 'p', 'h', '.', 'q', 'b', 'r', 9, 0,
  /* 5245 */ 'l', 'd', 'r', 9, 0,
  /* 5250 */ 's', 'd', 'r', 9, 0,
  /* 5255 */ 'm', 'a', 'q', '_', 's', 'a', '.', 'w', '.', 'p', 'h', 'r', 9, 0,
  /* 5269 */ 'p', 'r', 'e', 'c', 'e', 'q', '.', 'w', '.', 'p', 'h', 'r', 9, 0,
  /* 5283 */ 'm', 'a', 'q', '_', 's', '.', 'w', '.', 'p', 'h', 'r', 9, 0,
  /* 5296 */ 'm', 'u', 'l', 'e', 'q', '_', 's', '.', 'w', '.', 'p', 'h', 'r', 9, 0,
  /* 5311 */ 'j', 'r', 9, 0,
  /* 5315 */ 'j', 'a', 'l', 'r', 9, 0,
  /* 5321 */ 'n', 'o', 'r', 9, 0,
  /* 5326 */ 'x', 'o', 'r', 9, 0,
  /* 5331 */ 'd', 'r', 'o', 't', 'r', 9, 0,
  /* 5338 */ 'r', 'd', 'h', 'w', 'r', 9, 0,
  /* 5345 */ 'l', 'w', 'r', 9, 0,
  /* 5350 */ 's', 'w', 'r', 9, 0,
  /* 5355 */ 'n', 'm', 's', 'u', 'b', '.', 's', 9, 0,
  /* 5364 */ 'c', 'v', 't', '.', 'd', '.', 's', 9, 0,
  /* 5373 */ 'n', 'm', 'a', 'd', 'd', '.', 's', 9, 0,
  /* 5382 */ 'c', '.', 'n', 'g', 'e', '.', 's', 9, 0,
  /* 5391 */ 'c', '.', 'l', 'e', '.', 's', 9, 0,
  /* 5399 */ 'c', '.', 'n', 'g', 'l', 'e', '.', 's', 9, 0,
  /* 5409 */ 'c', '.', 'o', 'l', 'e', '.', 's', 9, 0,
  /* 5418 */ 'c', '.', 'u', 'l', 'e', '.', 's', 9, 0,
  /* 5427 */ 'c', '.', 'f', '.', 's', 9, 0,
  /* 5434 */ 'c', '.', 's', 'f', '.', 's', 9, 0,
  /* 5442 */ 'm', 'o', 'v', 'f', '.', 's', 9, 0,
  /* 5450 */ 'n', 'e', 'g', '.', 's', 9, 0,
  /* 5457 */ 't', 'r', 'u', 'n', 'c', '.', 'l', '.', 's', 9, 0,
  /* 5468 */ 'r', 'o', 'u', 'n', 'd', '.', 'l', '.', 's', 9, 0,
  /* 5479 */ 'c', 'e', 'i', 'l', '.', 'l', '.', 's', 9, 0,
  /* 5489 */ 'f', 'l', 'o', 'o', 'r', '.', 'l', '.', 's', 9, 0,
  /* 5500 */ 'c', 'v', 't', '.', 'l', '.', 's', 9, 0,
  /* 5509 */ 'c', '.', 'n', 'g', 'l', '.', 's', 9, 0,
  /* 5518 */ 'm', 'u', 'l', '.', 's', 9, 0,
  /* 5525 */ 'c', '.', 'u', 'n', '.', 's', 9, 0,
  /* 5533 */ 'm', 'o', 'v', 'n', '.', 's', 9, 0,
  /* 5541 */ 'c', '.', 'e', 'q', '.', 's', 9, 0,
  /* 5549 */ 'c', '.', 's', 'e', 'q', '.', 's', 9, 0,
  /* 5558 */ 'c', '.', 'u', 'e', 'q', '.', 's', 9, 0,
  /* 5567 */ 'a', 'b', 's', '.', 's', 9, 0,
  /* 5574 */ 'c', '.', 'n', 'g', 't', '.', 's', 9, 0,
  /* 5583 */ 'c', '.', 'l', 't', '.', 's', 9, 0,
  /* 5591 */ 'c', '.', 'o', 'l', 't', '.', 's', 9, 0,
  /* 5600 */ 'c', '.', 'u', 'l', 't', '.', 's', 9, 0,
  /* 5609 */ 's', 'q', 'r', 't', '.', 's', 9, 0,
  /* 5617 */ 'm', 'o', 'v', 't', '.', 's', 9, 0,
  /* 5625 */ 'd', 'i', 'v', '.', 's', 9, 0,
  /* 5632 */ 'm', 'o', 'v', '.', 's', 9, 0,
  /* 5639 */ 't', 'r', 'u', 'n', 'c', '.', 'w', '.', 's', 9, 0,
  /* 5650 */ 'r', 'o', 'u', 'n', 'd', '.', 'w', '.', 's', 9, 0,
  /* 5661 */ 'c', 'e', 'i', 'l', '.', 'w', '.', 's', 9, 0,
  /* 5671 */ 'f', 'l', 'o', 'o', 'r', '.', 'w', '.', 's', 9, 0,
  /* 5682 */ 'c', 'v', 't', '.', 'w', '.', 's', 9, 0,
  /* 5691 */ 'm', 'o', 'v', 'z', '.', 's', 9, 0,
  /* 5699 */ 'b', 'c', '1', 't', 9, 0,
  /* 5705 */ 's', 'l', 't', 9, 0,
  /* 5710 */ 't', 'l', 't', 9, 0,
  /* 5715 */ 'd', 'm', 'u', 'l', 't', 9, 0,
  /* 5722 */ 'n', 'o', 't', 9, 0,
  /* 5727 */ 'm', 'o', 'v', 't', 9, 0,
  /* 5733 */ 'l', 'b', 'u', 9, 0,
  /* 5738 */ 'd', 's', 'u', 'b', 'u', 9, 0,
  /* 5745 */ 'm', 's', 'u', 'b', 'u', 9, 0,
  /* 5752 */ 'd', 'a', 'd', 'd', 'u', 9, 0,
  /* 5759 */ 'm', 'a', 'd', 'd', 'u', 9, 0,
  /* 5766 */ 't', 'g', 'e', 'u', 9, 0,
  /* 5772 */ 'l', 'h', 'u', 9, 0,
  /* 5777 */ 'd', 'a', 'd', 'd', 'i', 'u', 9, 0,
  /* 5785 */ 't', 'g', 'e', 'i', 'u', 9, 0,
  /* 5792 */ 's', 'l', 't', 'i', 'u', 9, 0,
  /* 5799 */ 't', 'l', 't', 'i', 'u', 9, 0,
  /* 5806 */ 's', 'l', 't', 'u', 9, 0,
  /* 5812 */ 't', 'l', 't', 'u', 9, 0,
  /* 5818 */ 'd', 'm', 'u', 'l', 't', 'u', 9, 0,
  /* 5826 */ 'l', 'w', 'u', 9, 0,
  /* 5831 */ 'a', 'n', 'd', '.', 'v', 9, 0,
  /* 5838 */ 'm', 'o', 'v', 'e', '.', 'v', 9, 0,
  /* 5846 */ 'b', 's', 'e', 'l', '.', 'v', 9, 0,
  /* 5854 */ 'n', 'o', 'r', '.', 'v', 9, 0,
  /* 5861 */ 'x', 'o', 'r', '.', 'v', 9, 0,
  /* 5868 */ 'b', 'z', '.', 'v', 9, 0,
  /* 5874 */ 'b', 'm', 'z', '.', 'v', 9, 0,
  /* 5881 */ 'b', 'n', 'z', '.', 'v', 9, 0,
  /* 5888 */ 'b', 'm', 'n', 'z', '.', 'v', 9, 0,
  /* 5896 */ 'd', 's', 'r', 'a', 'v', 9, 0,
  /* 5903 */ 'b', 'i', 't', 'r', 'e', 'v', 9, 0,
  /* 5911 */ 'd', 's', 'l', 'l', 'v', 9, 0,
  /* 5918 */ 'd', 's', 'r', 'l', 'v', 9, 0,
  /* 5925 */ 's', 'h', 'i', 'l', 'o', 'v', 9, 0,
  /* 5933 */ 'e', 'x', 't', 'p', 'd', 'p', 'v', 9, 0,
  /* 5942 */ 'e', 'x', 't', 'p', 'v', 9, 0,
  /* 5949 */ 'd', 'r', 'o', 't', 'r', 'v', 9, 0,
  /* 5957 */ 'i', 'n', 's', 'v', 9, 0,
  /* 5963 */ 'f', 'l', 'o', 'g', '2', '.', 'w', 9, 0,
  /* 5972 */ 'f', 'e', 'x', 'p', '2', '.', 'w', 9, 0,
  /* 5981 */ 'a', 'd', 'd', '_', 'a', '.', 'w', 9, 0,
  /* 5990 */ 'f', 'm', 'i', 'n', '_', 'a', '.', 'w', 9, 0,
  /* 6000 */ 'a', 'd', 'd', 's', '_', 'a', '.', 'w', 9, 0,
  /* 6010 */ 'f', 'm', 'a', 'x', '_', 'a', '.', 'w', 9, 0,
  /* 6020 */ 's', 'r', 'a', '.', 'w', 9, 0,
  /* 6027 */ 'f', 's', 'u', 'b', '.', 'w', 9, 0,
  /* 6035 */ 'f', 'm', 's', 'u', 'b', '.', 'w', 9, 0,
  /* 6044 */ 'n', 'l', 'o', 'c', '.', 'w', 9, 0,
  /* 6052 */ 'n', 'l', 'z', 'c', '.', 'w', 9, 0,
  /* 6060 */ 'c', 'v', 't', '.', 'd', '.', 'w', 9, 0,
  /* 6069 */ 'f', 'a', 'd', 'd', '.', 'w', 9, 0,
  /* 6077 */ 'f', 'm', 'a', 'd', 'd', '.', 'w', 9, 0,
  /* 6086 */ 's', 'l', 'd', '.', 'w', 9, 0,
  /* 6093 */ 'p', 'c', 'k', 'o', 'd', '.', 'w', 9, 0,
  /* 6102 */ 'i', 'l', 'v', 'o', 'd', '.', 'w', 9, 0,
  /* 6111 */ 'f', 'c', 'l', 'e', '.', 'w', 9, 0,
  /* 6119 */ 'f', 's', 'l', 'e', '.', 'w', 9, 0,
  /* 6127 */ 'f', 'c', 'u', 'l', 'e', '.', 'w', 9, 0,
  /* 6136 */ 'f', 's', 'u', 'l', 'e', '.', 'w', 9, 0,
  /* 6145 */ 'f', 'c', 'n', 'e', '.', 'w', 9, 0,
  /* 6153 */ 'f', 's', 'n', 'e', '.', 'w', 9, 0,
  /* 6161 */ 'f', 'c', 'u', 'n', 'e', '.', 'w', 9, 0,
  /* 6170 */ 'f', 's', 'u', 'n', 'e', '.', 'w', 9, 0,
  /* 6179 */ 'i', 'n', 's', 'v', 'e', '.', 'w', 9, 0,
  /* 6188 */ 'f', 'c', 'a', 'f', '.', 'w', 9, 0,
  /* 6196 */ 'f', 's', 'a', 'f', '.', 'w', 9, 0,
  /* 6204 */ 'v', 's', 'h', 'f', '.', 'w', 9, 0,
  /* 6212 */ 'b', 'n', 'e', 'g', '.', 'w', 9, 0,
  /* 6220 */ 'p', 'r', 'e', 'c', 'r', '_', 's', 'r', 'a', '.', 'p', 'h', '.', 'w', 9, 0,
  /* 6236 */ 'p', 'r', 'e', 'c', 'r', 'q', '.', 'p', 'h', '.', 'w', 9, 0,
  /* 6249 */ 'p', 'r', 'e', 'c', 'r', '_', 's', 'r', 'a', '_', 'r', '.', 'p', 'h', '.', 'w', 9, 0,
  /* 6267 */ 'p', 'r', 'e', 'c', 'r', 'q', '_', 'r', 's', '.', 'p', 'h', '.', 'w', 9, 0,
  /* 6283 */ 's', 'u', 'b', 'q', 'h', '.', 'w', 9, 0,
  /* 6292 */ 'a', 'd', 'd', 'q', 'h', '.', 'w', 9, 0,
  /* 6301 */ 's', 'r', 'a', 'i', '.', 'w', 9, 0,
  /* 6309 */ 's', 'l', 'd', 'i', '.', 'w', 9, 0,
  /* 6317 */ 'b', 'n', 'e', 'g', 'i', '.', 'w', 9, 0,
  /* 6326 */ 's', 'l', 'l', 'i', '.', 'w', 9, 0,
  /* 6334 */ 's', 'r', 'l', 'i', '.', 'w', 9, 0,
  /* 6342 */ 'b', 'i', 'n', 's', 'l', 'i', '.', 'w', 9, 0,
  /* 6352 */ 'c', 'e', 'q', 'i', '.', 'w', 9, 0,
  /* 6360 */ 's', 'r', 'a', 'r', 'i', '.', 'w', 9, 0,
  /* 6369 */ 'b', 'c', 'l', 'r', 'i', '.', 'w', 9, 0,
  /* 6378 */ 's', 'r', 'l', 'r', 'i', '.', 'w', 9, 0,
  /* 6387 */ 'b', 'i', 'n', 's', 'r', 'i', '.', 'w', 9, 0,
  /* 6397 */ 's', 'p', 'l', 'a', 't', 'i', '.', 'w', 9, 0,
  /* 6407 */ 'b', 's', 'e', 't', 'i', '.', 'w', 9, 0,
  /* 6416 */ 's', 'u', 'b', 'v', 'i', '.', 'w', 9, 0,
  /* 6425 */ 'a', 'd', 'd', 'v', 'i', '.', 'w', 9, 0,
  /* 6434 */ 'd', 'p', 'a', 'q', '_', 's', 'a', '.', 'l', '.', 'w', 9, 0,
  /* 6447 */ 'd', 'p', 's', 'q', '_', 's', 'a', '.', 'l', '.', 'w', 9, 0,
  /* 6460 */ 'f', 'i', 'l', 'l', '.', 'w', 9, 0,
  /* 6468 */ 's', 'l', 'l', '.', 'w', 9, 0,
  /* 6475 */ 'f', 'e', 'x', 'u', 'p', 'l', '.', 'w', 9, 0,
  /* 6485 */ 'f', 'f', 'q', 'l', '.', 'w', 9, 0,
  /* 6493 */ 's', 'r', 'l', '.', 'w', 9, 0,
  /* 6500 */ 'b', 'i', 'n', 's', 'l', '.', 'w', 9, 0,
  /* 6509 */ 'f', 'm', 'u', 'l', '.', 'w', 9, 0,
  /* 6517 */ 'i', 'l', 'v', 'l', '.', 'w', 9, 0,
  /* 6525 */ 'f', 'm', 'i', 'n', '.', 'w', 9, 0,
  /* 6533 */ 'f', 'c', 'u', 'n', '.', 'w', 9, 0,
  /* 6541 */ 'f', 's', 'u', 'n', '.', 'w', 9, 0,
  /* 6549 */ 'f', 'e', 'x', 'd', 'o', '.', 'w', 9, 0,
  /* 6558 */ 'f', 'r', 'c', 'p', '.', 'w', 9, 0,
  /* 6566 */ 'm', 's', 'u', 'b', '_', 'q', '.', 'w', 9, 0,
  /* 6576 */ 'm', 'a', 'd', 'd', '_', 'q', '.', 'w', 9, 0,
  /* 6586 */ 'm', 'u', 'l', '_', 'q', '.', 'w', 9, 0,
  /* 6595 */ 'm', 's', 'u', 'b', 'r', '_', 'q', '.', 'w', 9, 0,
  /* 6606 */ 'm', 'a', 'd', 'd', 'r', '_', 'q', '.', 'w', 9, 0,
  /* 6617 */ 'm', 'u', 'l', 'r', '_', 'q', '.', 'w', 9, 0,
  /* 6627 */ 'f', 'c', 'e', 'q', '.', 'w', 9, 0,
  /* 6635 */ 'f', 's', 'e', 'q', '.', 'w', 9, 0,
  /* 6643 */ 'f', 'c', 'u', 'e', 'q', '.', 'w', 9, 0,
  /* 6652 */ 'f', 's', 'u', 'e', 'q', '.', 'w', 9, 0,
  /* 6661 */ 'f', 't', 'q', '.', 'w', 9, 0,
  /* 6668 */ 's', 'h', 'r', 'a', '_', 'r', '.', 'w', 9, 0,
  /* 6678 */ 's', 'u', 'b', 'q', 'h', '_', 'r', '.', 'w', 9, 0,
  /* 6689 */ 'a', 'd', 'd', 'q', 'h', '_', 'r', '.', 'w', 9, 0,
  /* 6700 */ 'e', 'x', 't', 'r', '_', 'r', '.', 'w', 9, 0,
  /* 6710 */ 's', 'h', 'r', 'a', 'v', '_', 'r', '.', 'w', 9, 0,
  /* 6721 */ 'e', 'x', 't', 'r', 'v', '_', 'r', '.', 'w', 9, 0,
  /* 6732 */ 's', 'r', 'a', 'r', '.', 'w', 9, 0,
  /* 6740 */ 'b', 'c', 'l', 'r', '.', 'w', 9, 0,
  /* 6748 */ 's', 'r', 'l', 'r', '.', 'w', 9, 0,
  /* 6756 */ 'f', 'c', 'o', 'r', '.', 'w', 9, 0,
  /* 6764 */ 'f', 's', 'o', 'r', '.', 'w', 9, 0,
  /* 6772 */ 'f', 'e', 'x', 'u', 'p', 'r', '.', 'w', 9, 0,
  /* 6782 */ 'f', 'f', 'q', 'r', '.', 'w', 9, 0,
  /* 6790 */ 'b', 'i', 'n', 's', 'r', '.', 'w', 9, 0,
  /* 6799 */ 'e', 'x', 't', 'r', '.', 'w', 9, 0,
  /* 6807 */ 'i', 'l', 'v', 'r', '.', 'w', 9, 0,
  /* 6815 */ 'c', 'v', 't', '.', 's', '.', 'w', 9, 0,
  /* 6824 */ 'a', 's', 'u', 'b', '_', 's', '.', 'w', 9, 0,
  /* 6834 */ 'h', 's', 'u', 'b', '_', 's', '.', 'w', 9, 0,
  /* 6844 */ 'd', 'p', 's', 'u', 'b', '_', 's', '.', 'w', 9, 0,
  /* 6855 */ 'f', 't', 'r', 'u', 'n', 'c', '_', 's', '.', 'w', 9, 0,
  /* 6867 */ 'h', 'a', 'd', 'd', '_', 's', '.', 'w', 9, 0,
  /* 6877 */ 'd', 'p', 'a', 'd', 'd', '_', 's', '.', 'w', 9, 0,
  /* 6888 */ 'm', 'o', 'd', '_', 's', '.', 'w', 9, 0,
  /* 6897 */ 'c', 'l', 'e', '_', 's', '.', 'w', 9, 0,
  /* 6906 */ 'a', 'v', 'e', '_', 's', '.', 'w', 9, 0,
  /* 6915 */ 'c', 'l', 'e', 'i', '_', 's', '.', 'w', 9, 0,
  /* 6925 */ 'm', 'i', 'n', 'i', '_', 's', '.', 'w', 9, 0,
  /* 6935 */ 'c', 'l', 't', 'i', '_', 's', '.', 'w', 9, 0,
  /* 6945 */ 'm', 'a', 'x', 'i', '_', 's', '.', 'w', 9, 0,
  /* 6955 */ 's', 'h', 'l', 'l', '_', 's', '.', 'w', 9, 0,
  /* 6965 */ 'm', 'i', 'n', '_', 's', '.', 'w', 9, 0,
  /* 6974 */ 'd', 'o', 't', 'p', '_', 's', '.', 'w', 9, 0,
  /* 6984 */ 's', 'u', 'b', 'q', '_', 's', '.', 'w', 9, 0,
  /* 6994 */ 'a', 'd', 'd', 'q', '_', 's', '.', 'w', 9, 0,
  /* 7004 */ 'm', 'u', 'l', 'q', '_', 's', '.', 'w', 9, 0,
  /* 7014 */ 'a', 'b', 's', 'q', '_', 's', '.', 'w', 9, 0,
  /* 7024 */ 'a', 'v', 'e', 'r', '_', 's', '.', 'w', 9, 0,
  /* 7034 */ 's', 'u', 'b', 's', '_', 's', '.', 'w', 9, 0,
  /* 7044 */ 'a', 'd', 'd', 's', '_', 's', '.', 'w', 9, 0,
  /* 7054 */ 's', 'a', 't', '_', 's', '.', 'w', 9, 0,
  /* 7063 */ 'c', 'l', 't', '_', 's', '.', 'w', 9, 0,
  /* 7072 */ 'f', 'f', 'i', 'n', 't', '_', 's', '.', 'w', 9, 0,
  /* 7083 */ 'f', 't', 'i', 'n', 't', '_', 's', '.', 'w', 9, 0,
  /* 7094 */ 's', 'u', 'b', 's', 'u', 'u', '_', 's', '.', 'w', 9, 0,
  /* 7106 */ 'd', 'i', 'v', '_', 's', '.', 'w', 9, 0,
  /* 7115 */ 's', 'h', 'l', 'l', 'v', '_', 's', '.', 'w', 9, 0,
  /* 7126 */ 'm', 'a', 'x', '_', 's', '.', 'w', 9, 0,
  /* 7135 */ 'c', 'o', 'p', 'y', '_', 's', '.', 'w', 9, 0,
  /* 7145 */ 'm', 'u', 'l', 'q', '_', 'r', 's', '.', 'w', 9, 0,
  /* 7156 */ 'e', 'x', 't', 'r', '_', 'r', 's', '.', 'w', 9, 0,
  /* 7167 */ 'e', 'x', 't', 'r', 'v', '_', 'r', 's', '.', 'w', 9, 0,
  /* 7179 */ 'f', 'c', 'l', 'a', 's', 's', '.', 'w', 9, 0,
  /* 7189 */ 's', 'p', 'l', 'a', 't', '.', 'w', 9, 0,
  /* 7198 */ 'b', 's', 'e', 't', '.', 'w', 9, 0,
  /* 7206 */ 'f', 'c', 'l', 't', '.', 'w', 9, 0,
  /* 7214 */ 'f', 's', 'l', 't', '.', 'w', 9, 0,
  /* 7222 */ 'f', 'c', 'u', 'l', 't', '.', 'w', 9, 0,
  /* 7231 */ 'f', 's', 'u', 'l', 't', '.', 'w', 9, 0,
  /* 7240 */ 'p', 'c', 'n', 't', '.', 'w', 9, 0,
  /* 7248 */ 'f', 'r', 'i', 'n', 't', '.', 'w', 9, 0,
  /* 7257 */ 'i', 'n', 's', 'e', 'r', 't', '.', 'w', 9, 0,
  /* 7267 */ 'f', 's', 'q', 'r', 't', '.', 'w', 9, 0,
  /* 7276 */ 'f', 'r', 's', 'q', 'r', 't', '.', 'w', 9, 0,
  /* 7286 */ 's', 't', '.', 'w', 9, 0,
  /* 7292 */ 'a', 's', 'u', 'b', '_', 'u', '.', 'w', 9, 0,
  /* 7302 */ 'h', 's', 'u', 'b', '_', 'u', '.', 'w', 9, 0,
  /* 7312 */ 'd', 'p', 's', 'u', 'b', '_', 'u', '.', 'w', 9, 0,
  /* 7323 */ 'f', 't', 'r', 'u', 'n', 'c', '_', 'u', '.', 'w', 9, 0,
  /* 7335 */ 'h', 'a', 'd', 'd', '_', 'u', '.', 'w', 9, 0,
  /* 7345 */ 'd', 'p', 'a', 'd', 'd', '_', 'u', '.', 'w', 9, 0,
  /* 7356 */ 'm', 'o', 'd', '_', 'u', '.', 'w', 9, 0,
  /* 7365 */ 'c', 'l', 'e', '_', 'u', '.', 'w', 9, 0,
  /* 7374 */ 'a', 'v', 'e', '_', 'u', '.', 'w', 9, 0,
  /* 7383 */ 'c', 'l', 'e', 'i', '_', 'u', '.', 'w', 9, 0,
  /* 7393 */ 'm', 'i', 'n', 'i', '_', 'u', '.', 'w', 9, 0,
  /* 7403 */ 'c', 'l', 't', 'i', '_', 'u', '.', 'w', 9, 0,
  /* 7413 */ 'm', 'a', 'x', 'i', '_', 'u', '.', 'w', 9, 0,
  /* 7423 */ 'm', 'i', 'n', '_', 'u', '.', 'w', 9, 0,
  /* 7432 */ 'd', 'o', 't', 'p', '_', 'u', '.', 'w', 9, 0,
  /* 7442 */ 'a', 'v', 'e', 'r', '_', 'u', '.', 'w', 9, 0,
  /* 7452 */ 's', 'u', 'b', 's', '_', 'u', '.', 'w', 9, 0,
  /* 7462 */ 'a', 'd', 'd', 's', '_', 'u', '.', 'w', 9, 0,
  /* 7472 */ 's', 'u', 'b', 's', 'u', 's', '_', 'u', '.', 'w', 9, 0,
  /* 7484 */ 's', 'a', 't', '_', 'u', '.', 'w', 9, 0,
  /* 7493 */ 'c', 'l', 't', '_', 'u', '.', 'w', 9, 0,
  /* 7502 */ 'f', 'f', 'i', 'n', 't', '_', 'u', '.', 'w', 9, 0,
  /* 7513 */ 'f', 't', 'i', 'n', 't', '_', 'u', '.', 'w', 9, 0,
  /* 7524 */ 'd', 'i', 'v', '_', 'u', '.', 'w', 9, 0,
  /* 7533 */ 'm', 'a', 'x', '_', 'u', '.', 'w', 9, 0,
  /* 7542 */ 'c', 'o', 'p', 'y', '_', 'u', '.', 'w', 9, 0,
  /* 7552 */ 'm', 's', 'u', 'b', 'v', '.', 'w', 9, 0,
  /* 7561 */ 'm', 'a', 'd', 'd', 'v', '.', 'w', 9, 0,
  /* 7570 */ 'p', 'c', 'k', 'e', 'v', '.', 'w', 9, 0,
  /* 7579 */ 'i', 'l', 'v', 'e', 'v', '.', 'w', 9, 0,
  /* 7588 */ 'f', 'd', 'i', 'v', '.', 'w', 9, 0,
  /* 7596 */ 'm', 'u', 'l', 'v', '.', 'w', 9, 0,
  /* 7604 */ 'e', 'x', 't', 'r', 'v', '.', 'w', 9, 0,
  /* 7613 */ 'f', 'm', 'a', 'x', '.', 'w', 9, 0,
  /* 7621 */ 'l', 'd', 'x', '.', 'w', 9, 0,
  /* 7628 */ 's', 't', 'x', '.', 'w', 9, 0,
  /* 7635 */ 'b', 'z', '.', 'w', 9, 0,
  /* 7641 */ 'b', 'n', 'z', '.', 'w', 9, 0,
  /* 7648 */ 'l', 'w', 9, 0,
  /* 7652 */ 's', 'w', 9, 0,
  /* 7656 */ 'l', 'h', 'x', 9, 0,
  /* 7661 */ 'l', 'b', 'u', 'x', 9, 0,
  /* 7667 */ 'l', 'w', 'x', 9, 0,
  /* 7672 */ 'b', 'g', 'e', 'z', 9, 0,
  /* 7678 */ 'b', 'l', 'e', 'z', 9, 0,
  /* 7684 */ 'b', 'n', 'e', 'z', 9, 0,
  /* 7690 */ 'b', 't', 'n', 'e', 'z', 9, 0,
  /* 7697 */ 'd', 'c', 'l', 'z', 9, 0,
  /* 7703 */ 'b', 'e', 'q', 'z', 9, 0,
  /* 7709 */ 'b', 't', 'e', 'q', 'z', 9, 0,
  /* 7716 */ 'b', 'g', 't', 'z', 9, 0,
  /* 7722 */ 'b', 'l', 't', 'z', 9, 0,
  /* 7728 */ 'm', 'o', 'v', 'z', 9, 0,
  /* 7734 */ 'j', 'r', 'c', 9, 32, 0,
  /* 7740 */ 'r', 'e', 's', 't', 'o', 'r', 'e', 9, '$', 'r', 'a', ',', 32, 32, '$', 's', '0', ',', 32, '$', 's', '1', ',', 32, '$', 's', '2', ',', 32, 0,
  /* 7770 */ 's', 'a', 'v', 'e', 9, '$', 'r', 'a', ',', 32, '$', 's', '0', ',', 32, '$', 's', '1', ',', 32, '$', 's', '2', ',', 32, 0,
  /* 7796 */ 'd', 'd', 'i', 'v', 'u', 9, '$', 'z', 'e', 'r', 'o', ',', 32, 0,
  /* 7810 */ 'd', 'd', 'i', 'v', 9, '$', 'z', 'e', 'r', 'o', ',', 32, 0,
  /* 7823 */ 'a', 'd', 'd', 'i', 'u', 9, '$', 's', 'p', ',', 32, 0,
  /* 7835 */ 's', 'y', 'n', 'c', 32, 0,
  /* 7841 */ 9, '.', 'w', 'o', 'r', 'd', 32, 0,
  /* 7849 */ 'd', 'i', 'n', 's', 'm', 32, 0,
  /* 7856 */ 'd', 'e', 'x', 't', 'm', 32, 0,
  /* 7863 */ 'd', 'i', 'n', 's', 32, 0,
  /* 7869 */ 'd', 'e', 'x', 't', 32, 0,
  /* 7875 */ 'd', 'i', 'n', 's', 'u', 32, 0,
  /* 7882 */ 'd', 'e', 'x', 't', 'u', 32, 0,
  /* 7889 */ 'c', '.', 0,
  /* 7892 */ 'b', 'r', 'e', 'a', 'k', 32, '0', 0,
  /* 7900 */ 'L', 'I', 'F', 'E', 'T', 'I', 'M', 'E', '_', 'E', 'N', 'D', 0,
  /* 7913 */ 'B', 'U', 'N', 'D', 'L', 'E', 0,
  /* 7920 */ 'D', 'B', 'G', '_', 'V', 'A', 'L', 'U', 'E', 0,
  /* 7930 */ 'L', 'I', 'F', 'E', 'T', 'I', 'M', 'E', '_', 'S', 'T', 'A', 'R', 'T', 0,
  /* 7945 */ 'j', 'r', 'c', 9, 32, '$', 'r', 'a', 0,
  /* 7954 */ 'j', 'r', 9, 32, '$', 'r', 'a', 0,
  /* 7962 */ 'b', 'r', 'e', 'a', 'k', 0,
  /* 7968 */ 'd', 'e', 'r', 'e', 't', 0,
  /* 7974 */ 'w', 'a', 'i', 't', 0,
  };

  O << "\t";

  // Emit the opcode for the instruction.
  uint32_t Bits = OpInfo[MI->getOpcode()];
  assert(Bits != 0 && "Cannot print this instruction.");
  O << AsmStrs+(Bits & 8191)-1;


  // Fragment 0 encoded into 3 bits for 6 unique commands.
  switch ((Bits >> 13) & 7) {
  default:   // unreachable.
  case 0:
    // DBG_VALUE, BUNDLE, LIFETIME_START, LIFETIME_END, Break16, DERET, ERET,...
    return;
    break;
  case 1:
    // ABSQ_S_PH, ABSQ_S_QB, ABSQ_S_W, ADD, ADDQH_PH, ADDQH_R_PH, ADDQH_R_W, ...
    printOperand(MI, 0, O); 
    break;
  case 2:
    // CTC1, DMTC1, MTC1, MTHC1, MTHI_DSP, MTHLIP, MTLO_DSP, MultRxRyRz16, Mu...
    printOperand(MI, 1, O); 
    O << ", "; 
    break;
  case 3:
    // FCMP_D32, FCMP_D64, FCMP_S32
    printFCCOperand(MI, 2, O); 
    break;
  case 4:
    // RestoreIncSpF16, RestoreRaF16, SaveDecSpF16, SaveRaF16
    printUnsignedImm(MI, 0, O); 
    return;
    break;
  case 5:
    // SelBeqZ, SelBneZ, SelTBteqZCmp, SelTBteqZCmpi, SelTBteqZSlt, SelTBteqZ...
    printOperand(MI, 3, O); 
    break;
  }


  // Fragment 1 encoded into 4 bits for 13 unique commands.
  switch ((Bits >> 16) & 15) {
  default:   // unreachable.
  case 0:
    // ABSQ_S_PH, ABSQ_S_QB, ABSQ_S_W, ADD, ADDQH_PH, ADDQH_R_PH, ADDQH_R_W, ...
    O << ", "; 
    break;
  case 1:
    // AddiuRxPcImmX16
    O << ", $pc, "; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 2:
    // AddiuSpImm16
    O << " # 16 bit inst"; 
    return;
    break;
  case 3:
    // AddiuSpImmX16, B, BPOSGE32, BimmX16, BteqzX16, BtnezX16, Constant32, D...
    return;
    break;
  case 4:
    // CTC1, DMTC1, MTC1, MTHC1, MTHI_DSP, MTHLIP, MTLO_DSP
    printOperand(MI, 0, O); 
    return;
    break;
  case 5:
    // FCMP_D32, FCMP_D64
    O << ".d\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 6:
    // FCMP_S32
    O << ".s\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 7:
    // INSERT_B, INSERT_H, INSERT_W, INSVE_B, INSVE_D, INSVE_H, INSVE_W
    O << '['; 
    printUnsignedImm(MI, 2, O); 
    O << "], "; 
    printOperand(MI, 3, O); 
    break;
  case 8:
    // Jal16
    O << "\n\tnop"; 
    return;
    break;
  case 9:
    // LwConstant32
    O << ", 1f\n\tb\t2f\n\t.align\t2\n1: \t.word\t"; 
    printOperand(MI, 1, O); 
    O << "\n2:"; 
    return;
    break;
  case 10:
    // MultRxRyRz16, MultuRxRyRz16, SltCCRxRy16, SltiCCRxImmX16, SltiuCCRxImm...
    printOperand(MI, 2, O); 
    break;
  case 11:
    // SC, SCD
    printMemOperand(MI, 2, O); 
    return;
    break;
  case 12:
    // SelBeqZ, SelBneZ
    O << ", .+4\n\t\n\tmove "; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    return;
    break;
  }


  // Fragment 2 encoded into 4 bits for 10 unique commands.
  switch ((Bits >> 20) & 15) {
  default:   // unreachable.
  case 0:
    // ABSQ_S_PH, ABSQ_S_QB, ABSQ_S_W, ADD, ADDQH_PH, ADDQH_R_PH, ADDQH_R_W, ...
    printOperand(MI, 1, O); 
    break;
  case 1:
    // AddiuRxRxImm16, AddiuRxRxImmX16, AndRxRxRy16, DPADD_S_D, DPADD_S_H, DP...
    printOperand(MI, 2, O); 
    break;
  case 2:
    // AddiuRxRyOffMemX16, LEA_ADDiu, LEA_ADDiu64
    printMemOperandEA(MI, 1, O); 
    return;
    break;
  case 3:
    // INSERT_B, INSERT_H, INSERT_W
    return;
    break;
  case 4:
    // INSVE_B, INSVE_D, INSVE_H, INSVE_W
    O << "[0]"; 
    return;
    break;
  case 5:
    // LB, LB64, LB_MM, LBu, LBu64, LBu_MM, LD, LDC1, LDC164, LDL, LDR, LDX_B...
    printMemOperand(MI, 1, O); 
    return;
    break;
  case 6:
    // LUi, LUi64, LUi_MM, RDDSP, REPL_PH, REPL_QB, TEQI, TGEI, TGEIU, TLTI, ...
    printUnsignedImm(MI, 1, O); 
    return;
    break;
  case 7:
    // MultRxRyRz16, MultuRxRyRz16
    O << "\n\tmflo\t"; 
    printOperand(MI, 0, O); 
    return;
    break;
  case 8:
    // SelTBteqZCmp, SelTBteqZCmpi, SelTBteqZSlt, SelTBteqZSlti, SelTBteqZSlt...
    printOperand(MI, 4, O); 
    break;
  case 9:
    // SltCCRxRy16, SltiCCRxImmX16, SltiuCCRxImmX16, SltuCCRxRy16, SltuRxRyRz...
    O << "\n\tmove\t"; 
    printOperand(MI, 0, O); 
    O << ", $t8"; 
    return;
    break;
  }


  // Fragment 3 encoded into 4 bits for 14 unique commands.
  switch ((Bits >> 24) & 15) {
  default:   // unreachable.
  case 0:
    // ABSQ_S_PH, ABSQ_S_QB, ABSQ_S_W, AddiuRxImmX16, AddiuRxRxImmX16, AndRxR...
    return;
    break;
  case 1:
    // ADD, ADDQH_PH, ADDQH_R_PH, ADDQH_R_W, ADDQH_W, ADDQ_PH, ADDQ_S_PH, ADD...
    O << ", "; 
    break;
  case 2:
    // AddiuRxRxImm16
    O << "\t# 16 bit inst"; 
    return;
    break;
  case 3:
    // BeqzRxImm16, BnezRxImm16
    O << "  # 16 bit inst"; 
    return;
    break;
  case 4:
    // BteqzT8CmpX16, BteqzT8CmpiX16, BteqzT8SltX16, BteqzT8SltiX16, BteqzT8S...
    O << "\n\tbteqz\t"; 
    printOperand(MI, 2, O); 
    return;
    break;
  case 5:
    // BtnezT8CmpX16, BtnezT8CmpiX16, BtnezT8SltX16, BtnezT8SltiX16, BtnezT8S...
    O << "\n\tbtnez\t"; 
    printOperand(MI, 2, O); 
    return;
    break;
  case 6:
    // COPY_S_B, COPY_S_H, COPY_S_W, COPY_U_B, COPY_U_H, COPY_U_W
    O << '['; 
    printUnsignedImm(MI, 2, O); 
    O << ']'; 
    return;
    break;
  case 7:
    // CmpiRxImm16, LiRxImm16, SltiRxImm16, SltiuRxImm16
    O << " \t# 16 bit inst"; 
    return;
    break;
  case 8:
    // DSLL64_32
    O << ", 32"; 
    return;
    break;
  case 9:
    // LBUX, LDXC1, LDXC164, LHX, LUXC1, LUXC164, LWX, LWXC1, SDXC1, SDXC164,...
    O << '('; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 10:
    // LwRxSpImmX16, SwRxSpImmX16
    O << " ( "; 
    printOperand(MI, 1, O); 
    O << " ); "; 
    return;
    break;
  case 11:
    // SLL64_32, SLL64_64
    O << ", 0"; 
    return;
    break;
  case 12:
    // SelTBteqZCmp, SelTBteqZCmpi, SelTBteqZSlt, SelTBteqZSlti, SelTBteqZSlt...
    O << "\n\tbteqz\t.+4\n\tmove "; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    return;
    break;
  case 13:
    // SelTBtneZCmp, SelTBtneZCmpi, SelTBtneZSlt, SelTBtneZSlti, SelTBtneZSlt...
    O << "\n\tbtnez\t.+4\n\tmove "; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    return;
    break;
  }


  // Fragment 4 encoded into 2 bits for 3 unique commands.
  switch ((Bits >> 28) & 3) {
  default:   // unreachable.
  case 0:
    // ADD, ADDQH_PH, ADDQH_R_PH, ADDQH_R_W, ADDQH_W, ADDQ_PH, ADDQ_S_PH, ADD...
    printOperand(MI, 2, O); 
    break;
  case 1:
    // ADDVI_B, ADDVI_D, ADDVI_H, ADDVI_W, ANDI_B, ANDi, ANDi64, ANDi_MM, BCL...
    printUnsignedImm(MI, 2, O); 
    break;
  case 2:
    // DPADD_S_D, DPADD_S_H, DPADD_S_W, DPADD_U_D, DPADD_U_H, DPADD_U_W, DPSU...
    printOperand(MI, 3, O); 
    return;
    break;
  }


  // Fragment 5 encoded into 1 bits for 2 unique commands.
  if ((Bits >> 30) & 1) {
    // DEXT, DEXTM, DEXTU, DINS, DINSM, DINSU, EXT, INS, MADD_D32, MADD_D64, ...
    O << ", "; 
    printOperand(MI, 3, O); 
    return;
  } else {
    // ADD, ADDQH_PH, ADDQH_R_PH, ADDQH_R_W, ADDQH_W, ADDQ_PH, ADDQ_S_PH, ADD...
    return;
  }

}


/// getRegisterName - This method is automatically generated by tblgen
/// from the register set description.  This returns the assembler name
/// for the specified register.
const char *MipsInstPrinter::getRegisterName(unsigned RegNo) {
  assert(RegNo && RegNo < 285 && "Invalid register number!");

  static const char AsmStrs[] = {
  /* 0 */ 'f', '1', '0', 0,
  /* 4 */ 'w', '1', '0', 0,
  /* 8 */ 'f', '2', '0', 0,
  /* 12 */ 'D', 'S', 'P', 'O', 'u', 't', 'F', 'l', 'a', 'g', '2', '0', 0,
  /* 25 */ 'w', '2', '0', 0,
  /* 29 */ 'f', '3', '0', 0,
  /* 33 */ 'w', '3', '0', 0,
  /* 37 */ 'a', 'c', '0', 0,
  /* 41 */ 'f', 'c', 'c', '0', 0,
  /* 46 */ 'f', '0', 0,
  /* 49 */ 'w', '0', 0,
  /* 52 */ 'f', '1', '1', 0,
  /* 56 */ 'w', '1', '1', 0,
  /* 60 */ 'f', '2', '1', 0,
  /* 64 */ 'D', 'S', 'P', 'O', 'u', 't', 'F', 'l', 'a', 'g', '2', '1', 0,
  /* 77 */ 'w', '2', '1', 0,
  /* 81 */ 'f', '3', '1', 0,
  /* 85 */ 'w', '3', '1', 0,
  /* 89 */ 'a', 'c', '1', 0,
  /* 93 */ 'f', 'c', 'c', '1', 0,
  /* 98 */ 'f', '1', 0,
  /* 101 */ 'w', '1', 0,
  /* 104 */ 'f', '1', '2', 0,
  /* 108 */ 'w', '1', '2', 0,
  /* 112 */ 'f', '2', '2', 0,
  /* 116 */ 'D', 'S', 'P', 'O', 'u', 't', 'F', 'l', 'a', 'g', '2', '2', 0,
  /* 129 */ 'w', '2', '2', 0,
  /* 133 */ 'a', 'c', '2', 0,
  /* 137 */ 'f', 'c', 'c', '2', 0,
  /* 142 */ 'f', '2', 0,
  /* 145 */ 'w', '2', 0,
  /* 148 */ 'f', '1', '3', 0,
  /* 152 */ 'w', '1', '3', 0,
  /* 156 */ 'f', '2', '3', 0,
  /* 160 */ 'D', 'S', 'P', 'O', 'u', 't', 'F', 'l', 'a', 'g', '2', '3', 0,
  /* 173 */ 'w', '2', '3', 0,
  /* 177 */ 'a', 'c', '3', 0,
  /* 181 */ 'f', 'c', 'c', '3', 0,
  /* 186 */ 'f', '3', 0,
  /* 189 */ 'w', '3', 0,
  /* 192 */ 'f', '1', '4', 0,
  /* 196 */ 'w', '1', '4', 0,
  /* 200 */ 'f', '2', '4', 0,
  /* 204 */ 'w', '2', '4', 0,
  /* 208 */ 'f', 'c', 'c', '4', 0,
  /* 213 */ 'f', '4', 0,
  /* 216 */ 'w', '4', 0,
  /* 219 */ 'f', '1', '5', 0,
  /* 223 */ 'w', '1', '5', 0,
  /* 227 */ 'f', '2', '5', 0,
  /* 231 */ 'w', '2', '5', 0,
  /* 235 */ 'f', 'c', 'c', '5', 0,
  /* 240 */ 'f', '5', 0,
  /* 243 */ 'w', '5', 0,
  /* 246 */ 'f', '1', '6', 0,
  /* 250 */ 'w', '1', '6', 0,
  /* 254 */ 'f', '2', '6', 0,
  /* 258 */ 'w', '2', '6', 0,
  /* 262 */ 'f', 'c', 'c', '6', 0,
  /* 267 */ 'f', '6', 0,
  /* 270 */ 'w', '6', 0,
  /* 273 */ 'f', '1', '7', 0,
  /* 277 */ 'w', '1', '7', 0,
  /* 281 */ 'f', '2', '7', 0,
  /* 285 */ 'w', '2', '7', 0,
  /* 289 */ 'f', 'c', 'c', '7', 0,
  /* 294 */ 'f', '7', 0,
  /* 297 */ 'w', '7', 0,
  /* 300 */ 'f', '1', '8', 0,
  /* 304 */ 'w', '1', '8', 0,
  /* 308 */ 'f', '2', '8', 0,
  /* 312 */ 'w', '2', '8', 0,
  /* 316 */ 'f', '8', 0,
  /* 319 */ 'w', '8', 0,
  /* 322 */ 'D', 'S', 'P', 'O', 'u', 't', 'F', 'l', 'a', 'g', '1', '6', '_', '1', '9', 0,
  /* 338 */ 'f', '1', '9', 0,
  /* 342 */ 'w', '1', '9', 0,
  /* 346 */ 'f', '2', '9', 0,
  /* 350 */ 'w', '2', '9', 0,
  /* 354 */ 'f', '9', 0,
  /* 357 */ 'w', '9', 0,
  /* 360 */ 'D', 'S', 'P', 'E', 'F', 'I', 0,
  /* 367 */ 'r', 'a', 0,
  /* 370 */ 'p', 'c', 0,
  /* 373 */ 'D', 'S', 'P', 'C', 'C', 'o', 'n', 'd', 0,
  /* 382 */ 'D', 'S', 'P', 'O', 'u', 't', 'F', 'l', 'a', 'g', 0,
  /* 393 */ 'h', 'i', 0,
  /* 396 */ 'l', 'o', 0,
  /* 399 */ 'z', 'e', 'r', 'o', 0,
  /* 404 */ 'f', 'p', 0,
  /* 407 */ 'g', 'p', 0,
  /* 410 */ 's', 'p', 0,
  /* 413 */ 'D', 'S', 'P', 'P', 'o', 's', 0,
  /* 420 */ 'D', 'S', 'P', 'S', 'C', 'o', 'u', 'n', 't', 0,
  /* 430 */ 'D', 'S', 'P', 'C', 'a', 'r', 'r', 'y', 0,
  };

  static const uint32_t RegAsmOffset[] = {
    54, 373, 430, 360, 382, 413, 420, 404, 407, 106, 54, 2, 248, 194, 
    221, 150, 275, 370, 367, 410, 399, 194, 221, 248, 275, 37, 89, 133, 
    177, 54, 46, 142, 213, 267, 316, 0, 104, 192, 246, 300, 8, 112, 
    200, 254, 308, 29, 12, 64, 116, 160, 46, 98, 142, 186, 213, 240, 
    267, 294, 316, 354, 0, 52, 104, 148, 192, 219, 246, 273, 300, 338, 
    8, 60, 112, 156, 200, 227, 254, 281, 308, 346, 29, 81, 41, 93, 
    137, 181, 208, 235, 262, 289, 2, 54, 106, 150, 194, 221, 248, 275, 
    302, 336, 1, 53, 105, 149, 193, 220, 247, 274, 301, 335, 9, 61, 
    113, 157, 201, 228, 255, 282, 309, 347, 30, 82, 404, 46, 98, 142, 
    186, 213, 240, 267, 294, 316, 354, 0, 52, 104, 148, 192, 219, 246, 
    273, 300, 338, 8, 60, 112, 156, 200, 227, 254, 281, 308, 346, 29, 
    81, 407, 37, 89, 133, 177, 347, 255, 282, 37, 89, 133, 177, 367, 
    247, 274, 301, 335, 9, 61, 113, 157, 410, 302, 336, 1, 53, 105, 
    149, 193, 220, 201, 228, 106, 150, 49, 101, 145, 189, 216, 243, 270, 
    297, 319, 357, 4, 56, 108, 152, 196, 223, 250, 277, 304, 342, 25, 
    77, 129, 173, 204, 231, 258, 285, 312, 350, 33, 85, 399, 194, 221, 
    248, 275, 37, 46, 98, 142, 186, 213, 240, 267, 294, 316, 354, 0, 
    52, 104, 148, 192, 219, 246, 273, 300, 338, 8, 60, 112, 156, 200, 
    227, 254, 281, 308, 346, 29, 81, 322, 393, 255, 282, 396, 247, 274, 
    301, 335, 9, 61, 113, 157, 302, 336, 1, 53, 105, 149, 193, 220, 
    201, 228, 106, 150, 
  };

  assert (*(AsmStrs+RegAsmOffset[RegNo-1]) &&
          "Invalid alt name index for register!");
  return AsmStrs+RegAsmOffset[RegNo-1];
}

#ifdef PRINT_ALIAS_INSTR
#undef PRINT_ALIAS_INSTR

static unsigned getMapOperandNumber(const SmallVectorImpl<std::pair<StringRef, unsigned> > &OpMap,
                                    StringRef Name) {
  for (SmallVectorImpl<std::pair<StringRef, unsigned> >::const_iterator
         I = OpMap.begin(), E = OpMap.end(); I != E; ++I)
    if (I->first == Name)
      return I->second;
  llvm_unreachable("Operand not in map!");
}

bool MipsInstPrinter::printAliasInstr(const MCInst *MI, raw_ostream &OS) {
  StringRef AsmString;
  SmallVector<std::pair<StringRef, unsigned>, 4> OpMap;
  switch (MI->getOpcode()) {
  default: return false;
  case Mips::ADDu:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == Mips::ZERO) {
      // (ADDu GPR32Opnd:$dst, GPR32Opnd:$src, ZERO)
      AsmString = "move $dst, $src";
      OpMap.push_back(std::make_pair("dst", 0));
      OpMap.push_back(std::make_pair("src", 1));
      break;
    }
    return false;
  case Mips::BREAK:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0 &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 0) {
      // (BREAK 0, 0)
      AsmString = "break";
      break;
    }
    return false;
  case Mips::DADDu:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == Mips::ZERO_64) {
      // (DADDu GPR64Opnd:$dst, GPR64Opnd:$src, ZERO_64)
      AsmString = "move $dst, $src";
      OpMap.push_back(std::make_pair("dst", 0));
      OpMap.push_back(std::make_pair("src", 1));
      break;
    }
    return false;
  case Mips::DI:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).getReg() == Mips::ZERO) {
      // (DI ZERO)
      AsmString = "di";
      break;
    }
    return false;
  case Mips::EI:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).getReg() == Mips::ZERO) {
      // (EI ZERO)
      AsmString = "ei";
      break;
    }
    return false;
  case Mips::SLL:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::ZERO &&
        MI->getOperand(1).getReg() == Mips::ZERO &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (SLL ZERO, ZERO, 0)
      AsmString = "nop";
      break;
    }
    return false;
  case Mips::SUB:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == Mips::ZERO &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (SUB GPR32Opnd:$rt, ZERO, GPR32Opnd:$rs)
      AsmString = "neg $rt, $rs";
      OpMap.push_back(std::make_pair("rs", 2));
      OpMap.push_back(std::make_pair("rt", 0));
      break;
    }
    return false;
  case Mips::SUBu:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == Mips::ZERO &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (SUBu GPR32Opnd:$rt, ZERO, GPR32Opnd:$rs)
      AsmString = "negu $rt, $rs";
      OpMap.push_back(std::make_pair("rs", 2));
      OpMap.push_back(std::make_pair("rt", 0));
      break;
    }
    return false;
  case Mips::SYSCALL:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0) {
      // (SYSCALL 0)
      AsmString = "syscall";
      break;
    }
    return false;
  case Mips::TEQ:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (TEQ GPR32Opnd:$rs, GPR32Opnd:$rt, 0)
      AsmString = "teq $rs, $rt";
      OpMap.push_back(std::make_pair("rs", 0));
      OpMap.push_back(std::make_pair("rt", 1));
      break;
    }
    return false;
  case Mips::TGE:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (TGE GPR32Opnd:$rs, GPR32Opnd:$rt, 0)
      AsmString = "tge $rs, $rt";
      OpMap.push_back(std::make_pair("rs", 0));
      OpMap.push_back(std::make_pair("rt", 1));
      break;
    }
    return false;
  case Mips::TGEU:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (TGEU GPR32Opnd:$rs, GPR32Opnd:$rt, 0)
      AsmString = "tgeu $rs, $rt";
      OpMap.push_back(std::make_pair("rs", 0));
      OpMap.push_back(std::make_pair("rt", 1));
      break;
    }
    return false;
  case Mips::TLT:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (TLT GPR32Opnd:$rs, GPR32Opnd:$rt, 0)
      AsmString = "tlt $rs, $rt";
      OpMap.push_back(std::make_pair("rs", 0));
      OpMap.push_back(std::make_pair("rt", 1));
      break;
    }
    return false;
  case Mips::TLTU:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (TLTU GPR32Opnd:$rs, GPR32Opnd:$rt, 0)
      AsmString = "tltu $rs, $rt";
      OpMap.push_back(std::make_pair("rs", 0));
      OpMap.push_back(std::make_pair("rt", 1));
      break;
    }
    return false;
  case Mips::TNE:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (TNE GPR32Opnd:$rs, GPR32Opnd:$rt, 0)
      AsmString = "tne $rs, $rt";
      OpMap.push_back(std::make_pair("rs", 0));
      OpMap.push_back(std::make_pair("rt", 1));
      break;
    }
    return false;
  }

  std::pair<StringRef, StringRef> ASM = AsmString.split(' ');
  OS << '\t' << ASM.first;
  if (!ASM.second.empty()) {
    OS << '\t';
    for (StringRef::iterator
         I = ASM.second.begin(), E = ASM.second.end(); I != E; ) {
      if (*I == '$') {
        StringRef::iterator Start = ++I;
        while (I != E &&
               ((*I >= 'a' && *I <= 'z') ||
                (*I >= 'A' && *I <= 'Z') ||
                (*I >= '0' && *I <= '9') ||
                *I == '_'))
          ++I;
        StringRef Name(Start, I - Start);
        printOperand(MI, getMapOperandNumber(OpMap, Name), OS);
      } else {
        OS << *I++;
      }
    }
  }

  return true;
}

#endif // PRINT_ALIAS_INSTR
