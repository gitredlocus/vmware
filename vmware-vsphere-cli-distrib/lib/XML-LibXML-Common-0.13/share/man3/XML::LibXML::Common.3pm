.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.14
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Common 3"
.TH Common 3 "2003-02-27" "perl v5.8.5" "User Contributed Perl Documentation"
.SH "NAME"
XML::LibXML::Common \- Routines and Constants common for XML::LibXML and XML::GDOME
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use XML::LibXML::Common;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
XML::LibXML and \s-1XML::GDOME\s0 share some of the same functionality. This
package should bundle some shared constansts and functions, so both
modules may coexist within the same scripts.
.PP
XML::LibXML::Common defines all node types as constants. While
XML::LibXML and \s-1XML::GDOME\s0 originally declared their own node type
definitions, one may want to use XML::LibXML::Common in its
compatibility mode:
.IP "* use XML::LibXML::Common qw(:libxml);" 4
.IX Item "use XML::LibXML::Common qw(:libxml);"
:libxml will use the XML::LibXML Compatibility mode, which defines the
old '\s-1XML_\s0' node-type definitions
.IP "* use XML::LibXML::Common qw(:gdome);" 4
.IX Item "use XML::LibXML::Common qw(:gdome);"
This allows one to use the XML::LibXML Compatibility mode, which
defines the old '\s-1GDOME_\s0' node-type definitions
.IP "* use XML::LibXML::Common qw(:w3c);" 4
.IX Item "use XML::LibXML::Common qw(:w3c);"
This uses the nodetype definition names as specified for \s-1DOM\s0.
.IP "* use XML::LibXML::Common qw(:encoding);" 4
.IX Item "use XML::LibXML::Common qw(:encoding);"
This is ment if only the encoding functions of XML::LibXML::Common
should be used.
.PP
By default the W3 definitions as defined in the \s-1DOM\s0 specifications and
the encoding functions are exported by XML::LibXML::Common.
.Sh "encoding functions"
.IX Subsection "encoding functions"
To encode or decode a string to or from \s-1UTF\-8\s0 XML::LibXML::Common exports
two functions, which use the encoding mechanism of the underlaying
implementation. These functions should be used, if external encoding
is required (e.g. for queryfunctions).
.Sh "encodeToUTF8"
.IX Subsection "encodeToUTF8"
.Vb 1
\&    $encodedstring = encodeToUTF8( $name_of_encoding, $sting_to_encode );
.Ve
.PP
The function will encode a string from the specified encoding to \s-1UTF\-8\s0.
.Sh "decodeFromUTF8"
.IX Subsection "decodeFromUTF8"
.Vb 1
\&    $decodedstring = decodeFromUTF8($name_of_encoding, $string_to_decode );
.Ve
.PP
This Function transforms an \s-1UTF\-8\s0 encoded string the specified
encoding.  While transforms to \s-1ISO\s0 encodings may cause errors if the
given stirng contains unsupported characters, both functions can
transform to \s-1UTF\-16\s0 encodings as well.
.PP
Note that both encoding functions report their errors on the standard
error. If an error occours the function will \fIcroak()\fR. To catch the
error information it is required to call the encoding function from
within an eval block to avoid a script to stop.
.SH "AUTHOR"
.IX Header "AUTHOR"
Christian Glahn, (christian.glahn@uibk.ac.at) Innsbruck University
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
(c) 2002 Christian Glahn. All rights reserved. 
.PP
This program is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
perl, XML::LibXML, \s-1XML::GDOME\s0
