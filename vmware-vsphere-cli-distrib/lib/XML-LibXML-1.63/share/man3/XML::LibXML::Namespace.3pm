.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.14
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "XML::LibXML::Namespace 3"
.TH XML::LibXML::Namespace 3 "2007-04-16" "perl v5.8.5" "User Contributed Perl Documentation"
.SH "NAME"
XML::LibXML::Namespace \- XML::LibXML Namespace Implementation
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 11
\&  my $ns = XML::LibXML::Namespace->new($nsURI);
\&  print $ns->getName();
\&  print $ns->name();
\&  print $ns->prefix();
\&  $localname = $ns->getLocalName();
\&  print $ns->getData();
\&  print $ns->getValue();
\&  print $ns->value();
\&  print $ns->uri();
\&  $known_uri = $ns->getNamespaceURI();
\&  $known_prefix = $ns->getPrefix();
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Namespace nodes are returned by both \f(CW$element\fR\->findnodes('namespace::foo') or
by \f(CW$node\fR\->\fIgetNamespaces()\fR.
.PP
The namespace node \s-1API\s0 is not part of any current \s-1DOM\s0 \s-1API\s0, and so it is quite
minimal. It should be noted that namespace nodes are not a sub class of
XML::LibXML::Node, however Namespace nodes act a lot like attribute nodes, and
similarly named methods will return what you would expect if you treated the
namespace node as an attribute.
.IP "\fBnew\fR" 4
.IX Item "new"
.Vb 1
\&  my $ns = XML::LibXML::Namespace->new($nsURI);
.Ve
.Sp
Creates a new Namespace node. Note that this is not a 'node' as an attribute or
an element node. Therefore you can't do call all XML::LibXML::Node Functions.
All functions available for this node are listed below.
.Sp
Optionally you can pass the prefix to the namespace constructor. If this second
parameter is omitted you will create a so called default namespace. Note, the
newly created namespace is not bound to any document or node, therefore you
should not expect it to be available in an existing document.
.IP "\fBgetName\fR" 4
.IX Item "getName"
.Vb 1
\&  print $ns->getName();
.Ve
.Sp
Returns \*(L"xmlns:prefix\*(R", where prefix is the prefix for this namespace.
.IP "\fBname\fR" 4
.IX Item "name"
.Vb 1
\&  print $ns->name();
.Ve
.Sp
Alias for \fIgetName()\fR
.IP "\fBprefix\fR" 4
.IX Item "prefix"
.Vb 1
\&  print $ns->prefix();
.Ve
.Sp
Returns the prefix bound to this namespace declaration.
.IP "\fBgetLocalName\fR" 4
.IX Item "getLocalName"
.Vb 1
\&  $localname = $ns->getLocalName();
.Ve
.Sp
Alias for \fIprefix()\fR
.IP "\fBgetData\fR" 4
.IX Item "getData"
.Vb 1
\&  print $ns->getData();
.Ve
.Sp
Returns the \s-1URI\s0 of the namespace.
.IP "\fBgetValue\fR" 4
.IX Item "getValue"
.Vb 1
\&  print $ns->getValue();
.Ve
.Sp
Alias for \fIgetData()\fR
.IP "\fBvalue\fR" 4
.IX Item "value"
.Vb 1
\&  print $ns->value();
.Ve
.Sp
Alias for \fIgetData()\fR
.IP "\fBuri\fR" 4
.IX Item "uri"
.Vb 1
\&  print $ns->uri();
.Ve
.Sp
Alias for \fIgetData()\fR
.IP "\fBgetNamespaceURI\fR" 4
.IX Item "getNamespaceURI"
.Vb 1
\&  $known_uri = $ns->getNamespaceURI();
.Ve
.Sp
Returns the string \*(L"http://www.w3.org/2000/xmlns/\*(R"
.IP "\fBgetPrefix\fR" 4
.IX Item "getPrefix"
.Vb 1
\&  $known_prefix = $ns->getPrefix();
.Ve
.Sp
Returns the string \*(L"xmlns\*(R"
.SH "AUTHORS"
.IX Header "AUTHORS"
Matt Sergeant, 
Christian Glahn, 
Petr Pajas, 
.SH "VERSION"
.IX Header "VERSION"
1.63
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
2001\-2007, AxKit.com Ltd; 2002\-2006 Christian Glahn; 2006\-2007 Petr Pajas, All rights reserved.
