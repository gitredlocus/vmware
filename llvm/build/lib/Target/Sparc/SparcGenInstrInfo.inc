/*===- TableGen'erated file -------------------------------------*- C++ -*-===*\
|*                                                                            *|
|*Target Instruction Enum Values                                              *|
|*                                                                            *|
|* Automatically generated file, do not edit!                                 *|
|*                                                                            *|
\*===----------------------------------------------------------------------===*/


#ifdef GET_INSTRINFO_ENUM
#undef GET_INSTRINFO_ENUM
namespace llvm {

namespace SP {
  enum {
    PHI	= 0,
    INLINEASM	= 1,
    PROLOG_LABEL	= 2,
    EH_LABEL	= 3,
    GC_LABEL	= 4,
    KILL	= 5,
    EXTRACT_SUBREG	= 6,
    INSERT_SUBREG	= 7,
    IMPLICIT_DEF	= 8,
    SUBREG_TO_REG	= 9,
    COPY_TO_REGCLASS	= 10,
    DBG_VALUE	= 11,
    REG_SEQUENCE	= 12,
    COPY	= 13,
    BUNDLE	= 14,
    LIFETIME_START	= 15,
    LIFETIME_END	= 16,
    ADDCCri	= 17,
    ADDCCrr	= 18,
    ADDXri	= 19,
    ADDXrr	= 20,
    ADDri	= 21,
    ADDrr	= 22,
    ADJCALLSTACKDOWN	= 23,
    ADJCALLSTACKUP	= 24,
    ANDNri	= 25,
    ANDNrr	= 26,
    ANDri	= 27,
    ANDrr	= 28,
    BA	= 29,
    BCOND	= 30,
    BINDri	= 31,
    BINDrr	= 32,
    BPXCC	= 33,
    CALL	= 34,
    CMPri	= 35,
    CMPrr	= 36,
    FABSD	= 37,
    FABSQ	= 38,
    FABSS	= 39,
    FADDD	= 40,
    FADDQ	= 41,
    FADDS	= 42,
    FBCOND	= 43,
    FCMPD	= 44,
    FCMPQ	= 45,
    FCMPS	= 46,
    FDIVD	= 47,
    FDIVQ	= 48,
    FDIVS	= 49,
    FDMULQ	= 50,
    FDTOI	= 51,
    FDTOQ	= 52,
    FDTOS	= 53,
    FITOD	= 54,
    FITOQ	= 55,
    FITOS	= 56,
    FLUSHW	= 57,
    FMOVD	= 58,
    FMOVD_FCC	= 59,
    FMOVD_ICC	= 60,
    FMOVD_XCC	= 61,
    FMOVQ	= 62,
    FMOVS	= 63,
    FMOVS_FCC	= 64,
    FMOVS_ICC	= 65,
    FMOVS_XCC	= 66,
    FMULD	= 67,
    FMULQ	= 68,
    FMULS	= 69,
    FNEGD	= 70,
    FNEGQ	= 71,
    FNEGS	= 72,
    FQTOD	= 73,
    FQTOI	= 74,
    FQTOS	= 75,
    FSMULD	= 76,
    FSQRTD	= 77,
    FSQRTQ	= 78,
    FSQRTS	= 79,
    FSTOD	= 80,
    FSTOI	= 81,
    FSTOQ	= 82,
    FSUBD	= 83,
    FSUBQ	= 84,
    FSUBS	= 85,
    GETPCX	= 86,
    JMPLri	= 87,
    JMPLrr	= 88,
    LDDFri	= 89,
    LDDFrr	= 90,
    LDFri	= 91,
    LDFrr	= 92,
    LDQFri	= 93,
    LDQFrr	= 94,
    LDSBri	= 95,
    LDSBrr	= 96,
    LDSHri	= 97,
    LDSHrr	= 98,
    LDSWri	= 99,
    LDSWrr	= 100,
    LDUBri	= 101,
    LDUBrr	= 102,
    LDUHri	= 103,
    LDUHrr	= 104,
    LDXri	= 105,
    LDXrr	= 106,
    LDri	= 107,
    LDrr	= 108,
    LEA_ADDri	= 109,
    MOVFCCri	= 110,
    MOVFCCrr	= 111,
    MOVICCri	= 112,
    MOVICCrr	= 113,
    MOVXCCri	= 114,
    MOVXCCrr	= 115,
    MULXri	= 116,
    MULXrr	= 117,
    NOP	= 118,
    ORNri	= 119,
    ORNrr	= 120,
    ORri	= 121,
    ORrr	= 122,
    POPCrr	= 123,
    RDY	= 124,
    RESTOREri	= 125,
    RESTORErr	= 126,
    RET	= 127,
    RETL	= 128,
    SAVEri	= 129,
    SAVErr	= 130,
    SDIVXri	= 131,
    SDIVXrr	= 132,
    SDIVri	= 133,
    SDIVrr	= 134,
    SELECT_CC_DFP_FCC	= 135,
    SELECT_CC_DFP_ICC	= 136,
    SELECT_CC_FP_FCC	= 137,
    SELECT_CC_FP_ICC	= 138,
    SELECT_CC_Int_FCC	= 139,
    SELECT_CC_Int_ICC	= 140,
    SETHIi	= 141,
    SLLXri	= 142,
    SLLXrr	= 143,
    SLLri	= 144,
    SLLrr	= 145,
    SMULri	= 146,
    SMULrr	= 147,
    SRAXri	= 148,
    SRAXrr	= 149,
    SRAri	= 150,
    SRArr	= 151,
    SRLXri	= 152,
    SRLXrr	= 153,
    SRLri	= 154,
    SRLrr	= 155,
    STBri	= 156,
    STBrr	= 157,
    STDFri	= 158,
    STDFrr	= 159,
    STFri	= 160,
    STFrr	= 161,
    STHri	= 162,
    STHrr	= 163,
    STQFri	= 164,
    STQFrr	= 165,
    STXri	= 166,
    STXrr	= 167,
    STri	= 168,
    STrr	= 169,
    SUBCCri	= 170,
    SUBCCrr	= 171,
    SUBXCCrr	= 172,
    SUBXri	= 173,
    SUBXrr	= 174,
    SUBri	= 175,
    SUBrr	= 176,
    TA3	= 177,
    UDIVXri	= 178,
    UDIVXrr	= 179,
    UDIVri	= 180,
    UDIVrr	= 181,
    UMULri	= 182,
    UMULrr	= 183,
    UNIMP	= 184,
    WRYri	= 185,
    WRYrr	= 186,
    XNORri	= 187,
    XNORrr	= 188,
    XORri	= 189,
    XORrr	= 190,
    INSTRUCTION_LIST_END = 191
  };
}
} // End llvm namespace 
#endif // GET_INSTRINFO_ENUM

/*===- TableGen'erated file -------------------------------------*- C++ -*-===*\
|*                                                                            *|
|*Target Instruction Descriptors                                              *|
|*                                                                            *|
|* Automatically generated file, do not edit!                                 *|
|*                                                                            *|
\*===----------------------------------------------------------------------===*/


#ifdef GET_INSTRINFO_MC_DESC
#undef GET_INSTRINFO_MC_DESC
namespace llvm {

static const uint16_t ImplicitList1[] = { SP::ICC, 0 };
static const uint16_t ImplicitList2[] = { SP::O6, 0 };
static const uint16_t ImplicitList3[] = { SP::FCC, 0 };
static const uint16_t ImplicitList4[] = { SP::O7, 0 };
static const uint16_t ImplicitList5[] = { SP::Y, 0 };

static const MCOperandInfo OperandInfo2[] = { { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo3[] = { { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo4[] = { { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, ((0 << 16) | (1 << MCOI::TIED_TO)) }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo5[] = { { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo6[] = { { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo7[] = { { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo8[] = { { SP::IntRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SP::IntRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo9[] = { { SP::IntRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SP::IntRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SP::IntRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo10[] = { { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo11[] = { { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo12[] = { { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo13[] = { { SP::IntRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo14[] = { { SP::IntRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SP::IntRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo15[] = { { SP::DFPRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SP::DFPRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo16[] = { { SP::QFPRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SP::QFPRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo17[] = { { SP::FPRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SP::FPRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo18[] = { { SP::DFPRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SP::DFPRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SP::DFPRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo19[] = { { SP::QFPRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SP::QFPRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SP::QFPRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo20[] = { { SP::FPRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SP::FPRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SP::FPRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo21[] = { { SP::QFPRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SP::DFPRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SP::DFPRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo22[] = { { SP::FPRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SP::DFPRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo23[] = { { SP::QFPRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SP::DFPRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo24[] = { { SP::DFPRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SP::FPRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo25[] = { { SP::QFPRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SP::FPRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo26[] = { { SP::DFPRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SP::DFPRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SP::DFPRegsRegClassID, 0, MCOI::OPERAND_REGISTER, ((0 << 16) | (1 << MCOI::TIED_TO)) }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo27[] = { { SP::FPRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SP::FPRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SP::FPRegsRegClassID, 0, MCOI::OPERAND_REGISTER, ((0 << 16) | (1 << MCOI::TIED_TO)) }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo28[] = { { SP::DFPRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SP::QFPRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo29[] = { { SP::FPRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SP::QFPRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo30[] = { { SP::DFPRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SP::FPRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SP::FPRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo31[] = { { SP::DFPRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo32[] = { { SP::DFPRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo33[] = { { SP::FPRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo34[] = { { SP::FPRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo35[] = { { SP::QFPRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo36[] = { { SP::QFPRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo37[] = { { SP::IntRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo38[] = { { SP::IntRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo39[] = { { SP::I64RegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo40[] = { { SP::I64RegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo41[] = { { SP::IntRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { SP::IntRegsRegClassID, 0, MCOI::OPERAND_REGISTER, ((0 << 16) | (1 << MCOI::TIED_TO)) }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo42[] = { { SP::IntRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SP::IntRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SP::IntRegsRegClassID, 0, MCOI::OPERAND_REGISTER, ((0 << 16) | (1 << MCOI::TIED_TO)) }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo43[] = { { SP::I64RegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SP::I64RegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SP::I64RegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo44[] = { { SP::IntRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo45[] = { { SP::DFPRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SP::DFPRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SP::DFPRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo46[] = { { SP::FPRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SP::FPRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SP::FPRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo47[] = { { SP::IntRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SP::IntRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SP::IntRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo48[] = { { SP::I64RegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SP::I64RegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo49[] = { { SP::I64RegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SP::I64RegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SP::IntRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo50[] = { { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { SP::IntRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo51[] = { { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { SP::IntRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo52[] = { { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { SP::DFPRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo53[] = { { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { SP::DFPRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo54[] = { { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { SP::FPRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo55[] = { { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { SP::FPRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo56[] = { { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { SP::QFPRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo57[] = { { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { SP::QFPRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo58[] = { { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { SP::I64RegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo59[] = { { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { SP::I64RegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };

extern const MCInstrDesc SparcInsts[] = {
  { 0,	0,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::Variadic)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, 0 },  // Inst #0 = PHI
  { 1,	0,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::Variadic), 0x0ULL, NULL, NULL, 0 },  // Inst #1 = INLINEASM
  { 2,	1,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::NotDuplicable)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo2 },  // Inst #2 = PROLOG_LABEL
  { 3,	1,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::NotDuplicable)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo2 },  // Inst #3 = EH_LABEL
  { 4,	1,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::NotDuplicable)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo2 },  // Inst #4 = GC_LABEL
  { 5,	0,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::Variadic), 0x0ULL, NULL, NULL, 0 },  // Inst #5 = KILL
  { 6,	3,	1,	0,	0,	0|(1<<MCID::Pseudo), 0x0ULL, NULL, NULL, OperandInfo3 },  // Inst #6 = EXTRACT_SUBREG
  { 7,	4,	1,	0,	0,	0|(1<<MCID::Pseudo), 0x0ULL, NULL, NULL, OperandInfo4 },  // Inst #7 = INSERT_SUBREG
  { 8,	1,	1,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::Rematerializable)|(1<<MCID::CheapAsAMove), 0x0ULL, NULL, NULL, OperandInfo5 },  // Inst #8 = IMPLICIT_DEF
  { 9,	4,	1,	0,	0,	0|(1<<MCID::Pseudo), 0x0ULL, NULL, NULL, OperandInfo6 },  // Inst #9 = SUBREG_TO_REG
  { 10,	3,	1,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::CheapAsAMove), 0x0ULL, NULL, NULL, OperandInfo3 },  // Inst #10 = COPY_TO_REGCLASS
  { 11,	0,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::Variadic), 0x0ULL, NULL, NULL, 0 },  // Inst #11 = DBG_VALUE
  { 12,	1,	1,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::Variadic)|(1<<MCID::CheapAsAMove), 0x0ULL, NULL, NULL, OperandInfo5 },  // Inst #12 = REG_SEQUENCE
  { 13,	2,	1,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::CheapAsAMove), 0x0ULL, NULL, NULL, OperandInfo7 },  // Inst #13 = COPY
  { 14,	0,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::Variadic)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, 0 },  // Inst #14 = BUNDLE
  { 15,	1,	0,	0,	0,	0|(1<<MCID::Pseudo), 0x0ULL, NULL, NULL, OperandInfo2 },  // Inst #15 = LIFETIME_START
  { 16,	1,	0,	0,	0,	0|(1<<MCID::Pseudo), 0x0ULL, NULL, NULL, OperandInfo2 },  // Inst #16 = LIFETIME_END
  { 17,	3,	1,	0,	0,	0, 0x0ULL, NULL, ImplicitList1, OperandInfo8 },  // Inst #17 = ADDCCri
  { 18,	3,	1,	0,	0,	0, 0x0ULL, NULL, ImplicitList1, OperandInfo9 },  // Inst #18 = ADDCCrr
  { 19,	3,	1,	0,	0,	0, 0x0ULL, ImplicitList1, NULL, OperandInfo8 },  // Inst #19 = ADDXri
  { 20,	3,	1,	0,	0,	0, 0x0ULL, ImplicitList1, NULL, OperandInfo9 },  // Inst #20 = ADDXrr
  { 21,	3,	1,	0,	0,	0, 0x0ULL, NULL, NULL, OperandInfo8 },  // Inst #21 = ADDri
  { 22,	3,	1,	0,	0,	0, 0x0ULL, NULL, NULL, OperandInfo9 },  // Inst #22 = ADDrr
  { 23,	1,	0,	0,	0,	0, 0x0ULL, ImplicitList2, ImplicitList2, OperandInfo2 },  // Inst #23 = ADJCALLSTACKDOWN
  { 24,	2,	0,	0,	0,	0, 0x0ULL, ImplicitList2, ImplicitList2, OperandInfo10 },  // Inst #24 = ADJCALLSTACKUP
  { 25,	3,	1,	0,	0,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo8 },  // Inst #25 = ANDNri
  { 26,	3,	1,	0,	0,	0, 0x0ULL, NULL, NULL, OperandInfo9 },  // Inst #26 = ANDNrr
  { 27,	3,	1,	0,	0,	0, 0x0ULL, NULL, NULL, OperandInfo8 },  // Inst #27 = ANDri
  { 28,	3,	1,	0,	0,	0, 0x0ULL, NULL, NULL, OperandInfo9 },  // Inst #28 = ANDrr
  { 29,	1,	0,	0,	0,	0|(1<<MCID::Branch)|(1<<MCID::Barrier)|(1<<MCID::DelaySlot)|(1<<MCID::Terminator), 0x0ULL, NULL, NULL, OperandInfo5 },  // Inst #29 = BA
  { 30,	2,	0,	0,	0,	0|(1<<MCID::Branch)|(1<<MCID::DelaySlot)|(1<<MCID::Terminator), 0x0ULL, ImplicitList1, NULL, OperandInfo7 },  // Inst #30 = BCOND
  { 31,	2,	0,	0,	0,	0|(1<<MCID::Branch)|(1<<MCID::IndirectBranch)|(1<<MCID::Barrier)|(1<<MCID::DelaySlot)|(1<<MCID::Terminator), 0x0ULL, NULL, NULL, OperandInfo11 },  // Inst #31 = BINDri
  { 32,	2,	0,	0,	0,	0|(1<<MCID::Branch)|(1<<MCID::IndirectBranch)|(1<<MCID::Barrier)|(1<<MCID::DelaySlot)|(1<<MCID::Terminator), 0x0ULL, NULL, NULL, OperandInfo12 },  // Inst #32 = BINDrr
  { 33,	2,	0,	0,	0,	0|(1<<MCID::Branch)|(1<<MCID::DelaySlot)|(1<<MCID::Terminator), 0x0ULL, ImplicitList1, NULL, OperandInfo7 },  // Inst #33 = BPXCC
  { 34,	1,	0,	0,	0,	0|(1<<MCID::DelaySlot)|(1<<MCID::Call)|(1<<MCID::Variadic), 0x0ULL, ImplicitList2, NULL, OperandInfo5 },  // Inst #34 = CALL
  { 35,	2,	0,	0,	0,	0, 0x0ULL, NULL, ImplicitList1, OperandInfo13 },  // Inst #35 = CMPri
  { 36,	2,	0,	0,	0,	0, 0x0ULL, NULL, ImplicitList1, OperandInfo14 },  // Inst #36 = CMPrr
  { 37,	2,	1,	0,	0,	0, 0x0ULL, NULL, NULL, OperandInfo15 },  // Inst #37 = FABSD
  { 38,	2,	1,	0,	0,	0, 0x0ULL, NULL, NULL, OperandInfo16 },  // Inst #38 = FABSQ
  { 39,	2,	1,	0,	0,	0, 0x0ULL, NULL, NULL, OperandInfo17 },  // Inst #39 = FABSS
  { 40,	3,	1,	0,	0,	0, 0x0ULL, NULL, NULL, OperandInfo18 },  // Inst #40 = FADDD
  { 41,	3,	1,	0,	0,	0, 0x0ULL, NULL, NULL, OperandInfo19 },  // Inst #41 = FADDQ
  { 42,	3,	1,	0,	0,	0, 0x0ULL, NULL, NULL, OperandInfo20 },  // Inst #42 = FADDS
  { 43,	2,	0,	0,	0,	0|(1<<MCID::Branch)|(1<<MCID::DelaySlot)|(1<<MCID::Terminator), 0x0ULL, ImplicitList3, NULL, OperandInfo7 },  // Inst #43 = FBCOND
  { 44,	2,	0,	0,	0,	0, 0x0ULL, NULL, ImplicitList3, OperandInfo15 },  // Inst #44 = FCMPD
  { 45,	2,	0,	0,	0,	0, 0x0ULL, NULL, ImplicitList3, OperandInfo16 },  // Inst #45 = FCMPQ
  { 46,	2,	0,	0,	0,	0, 0x0ULL, NULL, ImplicitList3, OperandInfo17 },  // Inst #46 = FCMPS
  { 47,	3,	1,	0,	0,	0, 0x0ULL, NULL, NULL, OperandInfo18 },  // Inst #47 = FDIVD
  { 48,	3,	1,	0,	0,	0, 0x0ULL, NULL, NULL, OperandInfo19 },  // Inst #48 = FDIVQ
  { 49,	3,	1,	0,	0,	0, 0x0ULL, NULL, NULL, OperandInfo20 },  // Inst #49 = FDIVS
  { 50,	3,	1,	0,	0,	0, 0x0ULL, NULL, NULL, OperandInfo21 },  // Inst #50 = FDMULQ
  { 51,	2,	1,	0,	0,	0, 0x0ULL, NULL, NULL, OperandInfo22 },  // Inst #51 = FDTOI
  { 52,	2,	1,	0,	0,	0, 0x0ULL, NULL, NULL, OperandInfo23 },  // Inst #52 = FDTOQ
  { 53,	2,	1,	0,	0,	0, 0x0ULL, NULL, NULL, OperandInfo22 },  // Inst #53 = FDTOS
  { 54,	2,	1,	0,	0,	0, 0x0ULL, NULL, NULL, OperandInfo24 },  // Inst #54 = FITOD
  { 55,	2,	1,	0,	0,	0, 0x0ULL, NULL, NULL, OperandInfo25 },  // Inst #55 = FITOQ
  { 56,	2,	1,	0,	0,	0, 0x0ULL, NULL, NULL, OperandInfo17 },  // Inst #56 = FITOS
  { 57,	0,	0,	0,	0,	0|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, 0 },  // Inst #57 = FLUSHW
  { 58,	2,	1,	0,	0,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo15 },  // Inst #58 = FMOVD
  { 59,	4,	1,	0,	0,	0, 0x0ULL, ImplicitList3, NULL, OperandInfo26 },  // Inst #59 = FMOVD_FCC
  { 60,	4,	1,	0,	0,	0, 0x0ULL, ImplicitList1, NULL, OperandInfo26 },  // Inst #60 = FMOVD_ICC
  { 61,	4,	1,	0,	0,	0, 0x0ULL, ImplicitList1, NULL, OperandInfo26 },  // Inst #61 = FMOVD_XCC
  { 62,	2,	1,	0,	0,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo16 },  // Inst #62 = FMOVQ
  { 63,	2,	1,	0,	0,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo17 },  // Inst #63 = FMOVS
  { 64,	4,	1,	0,	0,	0, 0x0ULL, ImplicitList3, NULL, OperandInfo27 },  // Inst #64 = FMOVS_FCC
  { 65,	4,	1,	0,	0,	0, 0x0ULL, ImplicitList1, NULL, OperandInfo27 },  // Inst #65 = FMOVS_ICC
  { 66,	4,	1,	0,	0,	0, 0x0ULL, ImplicitList1, NULL, OperandInfo27 },  // Inst #66 = FMOVS_XCC
  { 67,	3,	1,	0,	0,	0, 0x0ULL, NULL, NULL, OperandInfo18 },  // Inst #67 = FMULD
  { 68,	3,	1,	0,	0,	0, 0x0ULL, NULL, NULL, OperandInfo19 },  // Inst #68 = FMULQ
  { 69,	3,	1,	0,	0,	0, 0x0ULL, NULL, NULL, OperandInfo20 },  // Inst #69 = FMULS
  { 70,	2,	1,	0,	0,	0, 0x0ULL, NULL, NULL, OperandInfo15 },  // Inst #70 = FNEGD
  { 71,	2,	1,	0,	0,	0, 0x0ULL, NULL, NULL, OperandInfo16 },  // Inst #71 = FNEGQ
  { 72,	2,	1,	0,	0,	0, 0x0ULL, NULL, NULL, OperandInfo17 },  // Inst #72 = FNEGS
  { 73,	2,	1,	0,	0,	0, 0x0ULL, NULL, NULL, OperandInfo28 },  // Inst #73 = FQTOD
  { 74,	2,	1,	0,	0,	0, 0x0ULL, NULL, NULL, OperandInfo29 },  // Inst #74 = FQTOI
  { 75,	2,	1,	0,	0,	0, 0x0ULL, NULL, NULL, OperandInfo29 },  // Inst #75 = FQTOS
  { 76,	3,	1,	0,	0,	0, 0x0ULL, NULL, NULL, OperandInfo30 },  // Inst #76 = FSMULD
  { 77,	2,	1,	0,	0,	0, 0x0ULL, NULL, NULL, OperandInfo15 },  // Inst #77 = FSQRTD
  { 78,	2,	1,	0,	0,	0, 0x0ULL, NULL, NULL, OperandInfo16 },  // Inst #78 = FSQRTQ
  { 79,	2,	1,	0,	0,	0, 0x0ULL, NULL, NULL, OperandInfo17 },  // Inst #79 = FSQRTS
  { 80,	2,	1,	0,	0,	0, 0x0ULL, NULL, NULL, OperandInfo24 },  // Inst #80 = FSTOD
  { 81,	2,	1,	0,	0,	0, 0x0ULL, NULL, NULL, OperandInfo17 },  // Inst #81 = FSTOI
  { 82,	2,	1,	0,	0,	0, 0x0ULL, NULL, NULL, OperandInfo25 },  // Inst #82 = FSTOQ
  { 83,	3,	1,	0,	0,	0, 0x0ULL, NULL, NULL, OperandInfo18 },  // Inst #83 = FSUBD
  { 84,	3,	1,	0,	0,	0, 0x0ULL, NULL, NULL, OperandInfo19 },  // Inst #84 = FSUBQ
  { 85,	3,	1,	0,	0,	0, 0x0ULL, NULL, NULL, OperandInfo20 },  // Inst #85 = FSUBS
  { 86,	1,	1,	0,	0,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, ImplicitList4, OperandInfo5 },  // Inst #86 = GETPCX
  { 87,	2,	0,	0,	0,	0|(1<<MCID::DelaySlot)|(1<<MCID::Call)|(1<<MCID::Variadic), 0x0ULL, ImplicitList2, NULL, OperandInfo11 },  // Inst #87 = JMPLri
  { 88,	2,	0,	0,	0,	0|(1<<MCID::DelaySlot)|(1<<MCID::Call)|(1<<MCID::Variadic), 0x0ULL, ImplicitList2, NULL, OperandInfo12 },  // Inst #88 = JMPLrr
  { 89,	3,	1,	0,	0,	0|(1<<MCID::MayLoad), 0x0ULL, NULL, NULL, OperandInfo31 },  // Inst #89 = LDDFri
  { 90,	3,	1,	0,	0,	0|(1<<MCID::MayLoad), 0x0ULL, NULL, NULL, OperandInfo32 },  // Inst #90 = LDDFrr
  { 91,	3,	1,	0,	0,	0|(1<<MCID::MayLoad), 0x0ULL, NULL, NULL, OperandInfo33 },  // Inst #91 = LDFri
  { 92,	3,	1,	0,	0,	0|(1<<MCID::MayLoad), 0x0ULL, NULL, NULL, OperandInfo34 },  // Inst #92 = LDFrr
  { 93,	3,	1,	0,	0,	0|(1<<MCID::MayLoad), 0x0ULL, NULL, NULL, OperandInfo35 },  // Inst #93 = LDQFri
  { 94,	3,	1,	0,	0,	0|(1<<MCID::MayLoad), 0x0ULL, NULL, NULL, OperandInfo36 },  // Inst #94 = LDQFrr
  { 95,	3,	1,	0,	0,	0|(1<<MCID::MayLoad), 0x0ULL, NULL, NULL, OperandInfo37 },  // Inst #95 = LDSBri
  { 96,	3,	1,	0,	0,	0|(1<<MCID::MayLoad), 0x0ULL, NULL, NULL, OperandInfo38 },  // Inst #96 = LDSBrr
  { 97,	3,	1,	0,	0,	0|(1<<MCID::MayLoad), 0x0ULL, NULL, NULL, OperandInfo37 },  // Inst #97 = LDSHri
  { 98,	3,	1,	0,	0,	0|(1<<MCID::MayLoad), 0x0ULL, NULL, NULL, OperandInfo38 },  // Inst #98 = LDSHrr
  { 99,	3,	1,	0,	0,	0|(1<<MCID::MayLoad), 0x0ULL, NULL, NULL, OperandInfo39 },  // Inst #99 = LDSWri
  { 100,	3,	1,	0,	0,	0|(1<<MCID::MayLoad), 0x0ULL, NULL, NULL, OperandInfo40 },  // Inst #100 = LDSWrr
  { 101,	3,	1,	0,	0,	0|(1<<MCID::MayLoad), 0x0ULL, NULL, NULL, OperandInfo37 },  // Inst #101 = LDUBri
  { 102,	3,	1,	0,	0,	0|(1<<MCID::MayLoad), 0x0ULL, NULL, NULL, OperandInfo38 },  // Inst #102 = LDUBrr
  { 103,	3,	1,	0,	0,	0|(1<<MCID::MayLoad), 0x0ULL, NULL, NULL, OperandInfo37 },  // Inst #103 = LDUHri
  { 104,	3,	1,	0,	0,	0|(1<<MCID::MayLoad), 0x0ULL, NULL, NULL, OperandInfo38 },  // Inst #104 = LDUHrr
  { 105,	3,	1,	0,	0,	0|(1<<MCID::MayLoad), 0x0ULL, NULL, NULL, OperandInfo39 },  // Inst #105 = LDXri
  { 106,	3,	1,	0,	0,	0|(1<<MCID::MayLoad), 0x0ULL, NULL, NULL, OperandInfo40 },  // Inst #106 = LDXrr
  { 107,	3,	1,	0,	0,	0|(1<<MCID::MayLoad), 0x0ULL, NULL, NULL, OperandInfo37 },  // Inst #107 = LDri
  { 108,	3,	1,	0,	0,	0|(1<<MCID::MayLoad), 0x0ULL, NULL, NULL, OperandInfo38 },  // Inst #108 = LDrr
  { 109,	3,	1,	0,	0,	0, 0x0ULL, NULL, NULL, OperandInfo37 },  // Inst #109 = LEA_ADDri
  { 110,	4,	1,	0,	0,	0, 0x0ULL, ImplicitList3, NULL, OperandInfo41 },  // Inst #110 = MOVFCCri
  { 111,	4,	1,	0,	0,	0, 0x0ULL, ImplicitList3, NULL, OperandInfo42 },  // Inst #111 = MOVFCCrr
  { 112,	4,	1,	0,	0,	0, 0x0ULL, ImplicitList1, NULL, OperandInfo41 },  // Inst #112 = MOVICCri
  { 113,	4,	1,	0,	0,	0, 0x0ULL, ImplicitList1, NULL, OperandInfo42 },  // Inst #113 = MOVICCrr
  { 114,	4,	1,	0,	0,	0, 0x0ULL, ImplicitList1, NULL, OperandInfo41 },  // Inst #114 = MOVXCCri
  { 115,	4,	1,	0,	0,	0, 0x0ULL, ImplicitList1, NULL, OperandInfo42 },  // Inst #115 = MOVXCCrr
  { 116,	3,	1,	0,	0,	0, 0x0ULL, NULL, NULL, OperandInfo8 },  // Inst #116 = MULXri
  { 117,	3,	1,	0,	0,	0, 0x0ULL, NULL, NULL, OperandInfo43 },  // Inst #117 = MULXrr
  { 118,	0,	0,	0,	0,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, 0 },  // Inst #118 = NOP
  { 119,	3,	1,	0,	0,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo8 },  // Inst #119 = ORNri
  { 120,	3,	1,	0,	0,	0, 0x0ULL, NULL, NULL, OperandInfo9 },  // Inst #120 = ORNrr
  { 121,	3,	1,	0,	0,	0, 0x0ULL, NULL, NULL, OperandInfo8 },  // Inst #121 = ORri
  { 122,	3,	1,	0,	0,	0, 0x0ULL, NULL, NULL, OperandInfo9 },  // Inst #122 = ORrr
  { 123,	2,	1,	0,	0,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo14 },  // Inst #123 = POPCrr
  { 124,	1,	1,	0,	0,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList5, NULL, OperandInfo44 },  // Inst #124 = RDY
  { 125,	3,	1,	0,	0,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo8 },  // Inst #125 = RESTOREri
  { 126,	3,	1,	0,	0,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo9 },  // Inst #126 = RESTORErr
  { 127,	1,	0,	0,	0,	0|(1<<MCID::Return)|(1<<MCID::Barrier)|(1<<MCID::DelaySlot)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo2 },  // Inst #127 = RET
  { 128,	1,	0,	0,	0,	0|(1<<MCID::Return)|(1<<MCID::Barrier)|(1<<MCID::DelaySlot)|(1<<MCID::Terminator), 0x0ULL, NULL, NULL, OperandInfo2 },  // Inst #128 = RETL
  { 129,	3,	1,	0,	0,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo8 },  // Inst #129 = SAVEri
  { 130,	3,	1,	0,	0,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo9 },  // Inst #130 = SAVErr
  { 131,	3,	1,	0,	0,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo8 },  // Inst #131 = SDIVXri
  { 132,	3,	1,	0,	0,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo43 },  // Inst #132 = SDIVXrr
  { 133,	3,	1,	0,	0,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, ImplicitList5, OperandInfo8 },  // Inst #133 = SDIVri
  { 134,	3,	1,	0,	0,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, ImplicitList5, OperandInfo9 },  // Inst #134 = SDIVrr
  { 135,	4,	1,	0,	0,	0|(1<<MCID::UsesCustomInserter), 0x0ULL, ImplicitList3, NULL, OperandInfo45 },  // Inst #135 = SELECT_CC_DFP_FCC
  { 136,	4,	1,	0,	0,	0|(1<<MCID::UsesCustomInserter), 0x0ULL, ImplicitList1, NULL, OperandInfo45 },  // Inst #136 = SELECT_CC_DFP_ICC
  { 137,	4,	1,	0,	0,	0|(1<<MCID::UsesCustomInserter), 0x0ULL, ImplicitList3, NULL, OperandInfo46 },  // Inst #137 = SELECT_CC_FP_FCC
  { 138,	4,	1,	0,	0,	0|(1<<MCID::UsesCustomInserter), 0x0ULL, ImplicitList1, NULL, OperandInfo46 },  // Inst #138 = SELECT_CC_FP_ICC
  { 139,	4,	1,	0,	0,	0|(1<<MCID::UsesCustomInserter), 0x0ULL, ImplicitList3, NULL, OperandInfo47 },  // Inst #139 = SELECT_CC_Int_FCC
  { 140,	4,	1,	0,	0,	0|(1<<MCID::UsesCustomInserter), 0x0ULL, ImplicitList1, NULL, OperandInfo47 },  // Inst #140 = SELECT_CC_Int_ICC
  { 141,	2,	1,	0,	0,	0, 0x0ULL, NULL, NULL, OperandInfo13 },  // Inst #141 = SETHIi
  { 142,	3,	1,	0,	0,	0, 0x0ULL, NULL, NULL, OperandInfo48 },  // Inst #142 = SLLXri
  { 143,	3,	1,	0,	0,	0, 0x0ULL, NULL, NULL, OperandInfo49 },  // Inst #143 = SLLXrr
  { 144,	3,	1,	0,	0,	0, 0x0ULL, NULL, NULL, OperandInfo8 },  // Inst #144 = SLLri
  { 145,	3,	1,	0,	0,	0, 0x0ULL, NULL, NULL, OperandInfo9 },  // Inst #145 = SLLrr
  { 146,	3,	1,	0,	0,	0, 0x0ULL, NULL, ImplicitList5, OperandInfo8 },  // Inst #146 = SMULri
  { 147,	3,	1,	0,	0,	0, 0x0ULL, NULL, ImplicitList5, OperandInfo9 },  // Inst #147 = SMULrr
  { 148,	3,	1,	0,	0,	0, 0x0ULL, NULL, NULL, OperandInfo48 },  // Inst #148 = SRAXri
  { 149,	3,	1,	0,	0,	0, 0x0ULL, NULL, NULL, OperandInfo49 },  // Inst #149 = SRAXrr
  { 150,	3,	1,	0,	0,	0, 0x0ULL, NULL, NULL, OperandInfo8 },  // Inst #150 = SRAri
  { 151,	3,	1,	0,	0,	0, 0x0ULL, NULL, NULL, OperandInfo9 },  // Inst #151 = SRArr
  { 152,	3,	1,	0,	0,	0, 0x0ULL, NULL, NULL, OperandInfo48 },  // Inst #152 = SRLXri
  { 153,	3,	1,	0,	0,	0, 0x0ULL, NULL, NULL, OperandInfo49 },  // Inst #153 = SRLXrr
  { 154,	3,	1,	0,	0,	0, 0x0ULL, NULL, NULL, OperandInfo8 },  // Inst #154 = SRLri
  { 155,	3,	1,	0,	0,	0, 0x0ULL, NULL, NULL, OperandInfo9 },  // Inst #155 = SRLrr
  { 156,	3,	0,	0,	0,	0|(1<<MCID::MayStore), 0x0ULL, NULL, NULL, OperandInfo50 },  // Inst #156 = STBri
  { 157,	3,	0,	0,	0,	0|(1<<MCID::MayStore), 0x0ULL, NULL, NULL, OperandInfo51 },  // Inst #157 = STBrr
  { 158,	3,	0,	0,	0,	0|(1<<MCID::MayStore), 0x0ULL, NULL, NULL, OperandInfo52 },  // Inst #158 = STDFri
  { 159,	3,	0,	0,	0,	0|(1<<MCID::MayStore), 0x0ULL, NULL, NULL, OperandInfo53 },  // Inst #159 = STDFrr
  { 160,	3,	0,	0,	0,	0|(1<<MCID::MayStore), 0x0ULL, NULL, NULL, OperandInfo54 },  // Inst #160 = STFri
  { 161,	3,	0,	0,	0,	0|(1<<MCID::MayStore), 0x0ULL, NULL, NULL, OperandInfo55 },  // Inst #161 = STFrr
  { 162,	3,	0,	0,	0,	0|(1<<MCID::MayStore), 0x0ULL, NULL, NULL, OperandInfo50 },  // Inst #162 = STHri
  { 163,	3,	0,	0,	0,	0|(1<<MCID::MayStore), 0x0ULL, NULL, NULL, OperandInfo51 },  // Inst #163 = STHrr
  { 164,	3,	0,	0,	0,	0|(1<<MCID::MayStore), 0x0ULL, NULL, NULL, OperandInfo56 },  // Inst #164 = STQFri
  { 165,	3,	0,	0,	0,	0|(1<<MCID::MayStore), 0x0ULL, NULL, NULL, OperandInfo57 },  // Inst #165 = STQFrr
  { 166,	3,	0,	0,	0,	0|(1<<MCID::MayStore), 0x0ULL, NULL, NULL, OperandInfo58 },  // Inst #166 = STXri
  { 167,	3,	0,	0,	0,	0|(1<<MCID::MayStore), 0x0ULL, NULL, NULL, OperandInfo59 },  // Inst #167 = STXrr
  { 168,	3,	0,	0,	0,	0|(1<<MCID::MayStore), 0x0ULL, NULL, NULL, OperandInfo50 },  // Inst #168 = STri
  { 169,	3,	0,	0,	0,	0|(1<<MCID::MayStore), 0x0ULL, NULL, NULL, OperandInfo51 },  // Inst #169 = STrr
  { 170,	3,	1,	0,	0,	0, 0x0ULL, NULL, ImplicitList1, OperandInfo8 },  // Inst #170 = SUBCCri
  { 171,	3,	1,	0,	0,	0, 0x0ULL, NULL, ImplicitList1, OperandInfo9 },  // Inst #171 = SUBCCrr
  { 172,	3,	1,	0,	0,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo9 },  // Inst #172 = SUBXCCrr
  { 173,	3,	1,	0,	0,	0, 0x0ULL, ImplicitList1, NULL, OperandInfo8 },  // Inst #173 = SUBXri
  { 174,	3,	1,	0,	0,	0, 0x0ULL, ImplicitList1, NULL, OperandInfo9 },  // Inst #174 = SUBXrr
  { 175,	3,	1,	0,	0,	0, 0x0ULL, NULL, NULL, OperandInfo8 },  // Inst #175 = SUBri
  { 176,	3,	1,	0,	0,	0, 0x0ULL, NULL, NULL, OperandInfo9 },  // Inst #176 = SUBrr
  { 177,	0,	0,	0,	0,	0|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, 0 },  // Inst #177 = TA3
  { 178,	3,	1,	0,	0,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo8 },  // Inst #178 = UDIVXri
  { 179,	3,	1,	0,	0,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo43 },  // Inst #179 = UDIVXrr
  { 180,	3,	1,	0,	0,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, ImplicitList5, OperandInfo8 },  // Inst #180 = UDIVri
  { 181,	3,	1,	0,	0,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, ImplicitList5, OperandInfo9 },  // Inst #181 = UDIVrr
  { 182,	3,	1,	0,	0,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, ImplicitList5, OperandInfo8 },  // Inst #182 = UMULri
  { 183,	3,	1,	0,	0,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, ImplicitList5, OperandInfo9 },  // Inst #183 = UMULrr
  { 184,	1,	0,	0,	0,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo2 },  // Inst #184 = UNIMP
  { 185,	2,	0,	0,	0,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, ImplicitList5, OperandInfo13 },  // Inst #185 = WRYri
  { 186,	2,	0,	0,	0,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, ImplicitList5, OperandInfo14 },  // Inst #186 = WRYrr
  { 187,	3,	1,	0,	0,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo8 },  // Inst #187 = XNORri
  { 188,	3,	1,	0,	0,	0, 0x0ULL, NULL, NULL, OperandInfo9 },  // Inst #188 = XNORrr
  { 189,	3,	1,	0,	0,	0, 0x0ULL, NULL, NULL, OperandInfo8 },  // Inst #189 = XORri
  { 190,	3,	1,	0,	0,	0, 0x0ULL, NULL, NULL, OperandInfo9 },  // Inst #190 = XORrr
};

extern const char SparcInstrNameData[] = {
  /* 0 */ 'T', 'A', '3', 0,
  /* 4 */ 'B', 'A', 0,
  /* 7 */ 'F', 'M', 'O', 'V', 'D', '_', 'F', 'C', 'C', 0,
  /* 17 */ 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'D', 'F', 'P', '_', 'F', 'C', 'C', 0,
  /* 35 */ 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'F', 'P', '_', 'F', 'C', 'C', 0,
  /* 52 */ 'F', 'M', 'O', 'V', 'S', '_', 'F', 'C', 'C', 0,
  /* 62 */ 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'I', 'n', 't', '_', 'F', 'C', 'C', 0,
  /* 80 */ 'F', 'M', 'O', 'V', 'D', '_', 'I', 'C', 'C', 0,
  /* 90 */ 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'D', 'F', 'P', '_', 'I', 'C', 'C', 0,
  /* 108 */ 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'F', 'P', '_', 'I', 'C', 'C', 0,
  /* 125 */ 'F', 'M', 'O', 'V', 'S', '_', 'I', 'C', 'C', 0,
  /* 135 */ 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'I', 'n', 't', '_', 'I', 'C', 'C', 0,
  /* 153 */ 'B', 'P', 'X', 'C', 'C', 0,
  /* 159 */ 'F', 'M', 'O', 'V', 'D', '_', 'X', 'C', 'C', 0,
  /* 169 */ 'F', 'M', 'O', 'V', 'S', '_', 'X', 'C', 'C', 0,
  /* 179 */ 'F', 'S', 'U', 'B', 'D', 0,
  /* 185 */ 'F', 'A', 'D', 'D', 'D', 0,
  /* 191 */ 'F', 'N', 'E', 'G', 'D', 0,
  /* 197 */ 'F', 'M', 'U', 'L', 'D', 0,
  /* 203 */ 'F', 'S', 'M', 'U', 'L', 'D', 0,
  /* 210 */ 'L', 'I', 'F', 'E', 'T', 'I', 'M', 'E', '_', 'E', 'N', 'D', 0,
  /* 223 */ 'F', 'B', 'C', 'O', 'N', 'D', 0,
  /* 230 */ 'F', 'I', 'T', 'O', 'D', 0,
  /* 236 */ 'F', 'Q', 'T', 'O', 'D', 0,
  /* 242 */ 'F', 'S', 'T', 'O', 'D', 0,
  /* 248 */ 'F', 'C', 'M', 'P', 'D', 0,
  /* 254 */ 'F', 'A', 'B', 'S', 'D', 0,
  /* 260 */ 'F', 'S', 'Q', 'R', 'T', 'D', 0,
  /* 267 */ 'F', 'D', 'I', 'V', 'D', 0,
  /* 273 */ 'F', 'M', 'O', 'V', 'D', 0,
  /* 279 */ 'R', 'E', 'G', '_', 'S', 'E', 'Q', 'U', 'E', 'N', 'C', 'E', 0,
  /* 292 */ 'B', 'U', 'N', 'D', 'L', 'E', 0,
  /* 299 */ 'D', 'B', 'G', '_', 'V', 'A', 'L', 'U', 'E', 0,
  /* 309 */ 'I', 'M', 'P', 'L', 'I', 'C', 'I', 'T', '_', 'D', 'E', 'F', 0,
  /* 322 */ 'E', 'X', 'T', 'R', 'A', 'C', 'T', '_', 'S', 'U', 'B', 'R', 'E', 'G', 0,
  /* 337 */ 'I', 'N', 'S', 'E', 'R', 'T', '_', 'S', 'U', 'B', 'R', 'E', 'G', 0,
  /* 351 */ 'S', 'U', 'B', 'R', 'E', 'G', '_', 'T', 'O', '_', 'R', 'E', 'G', 0,
  /* 365 */ 'P', 'H', 'I', 0,
  /* 369 */ 'F', 'D', 'T', 'O', 'I', 0,
  /* 375 */ 'F', 'Q', 'T', 'O', 'I', 0,
  /* 381 */ 'F', 'S', 'T', 'O', 'I', 0,
  /* 387 */ 'G', 'C', '_', 'L', 'A', 'B', 'E', 'L', 0,
  /* 396 */ 'P', 'R', 'O', 'L', 'O', 'G', '_', 'L', 'A', 'B', 'E', 'L', 0,
  /* 409 */ 'E', 'H', '_', 'L', 'A', 'B', 'E', 'L', 0,
  /* 418 */ 'C', 'A', 'L', 'L', 0,
  /* 423 */ 'K', 'I', 'L', 'L', 0,
  /* 428 */ 'R', 'E', 'T', 'L', 0,
  /* 433 */ 'I', 'N', 'L', 'I', 'N', 'E', 'A', 'S', 'M', 0,
  /* 443 */ 'A', 'D', 'J', 'C', 'A', 'L', 'L', 'S', 'T', 'A', 'C', 'K', 'D', 'O', 'W', 'N', 0,
  /* 460 */ 'U', 'N', 'I', 'M', 'P', 0,
  /* 466 */ 'N', 'O', 'P', 0,
  /* 470 */ 'A', 'D', 'J', 'C', 'A', 'L', 'L', 'S', 'T', 'A', 'C', 'K', 'U', 'P', 0,
  /* 485 */ 'F', 'S', 'U', 'B', 'Q', 0,
  /* 491 */ 'F', 'A', 'D', 'D', 'Q', 0,
  /* 497 */ 'F', 'N', 'E', 'G', 'Q', 0,
  /* 503 */ 'F', 'D', 'M', 'U', 'L', 'Q', 0,
  /* 510 */ 'F', 'M', 'U', 'L', 'Q', 0,
  /* 516 */ 'F', 'D', 'T', 'O', 'Q', 0,
  /* 522 */ 'F', 'I', 'T', 'O', 'Q', 0,
  /* 528 */ 'F', 'S', 'T', 'O', 'Q', 0,
  /* 534 */ 'F', 'C', 'M', 'P', 'Q', 0,
  /* 540 */ 'F', 'A', 'B', 'S', 'Q', 0,
  /* 546 */ 'F', 'S', 'Q', 'R', 'T', 'Q', 0,
  /* 553 */ 'F', 'D', 'I', 'V', 'Q', 0,
  /* 559 */ 'F', 'M', 'O', 'V', 'Q', 0,
  /* 565 */ 'F', 'S', 'U', 'B', 'S', 0,
  /* 571 */ 'F', 'A', 'D', 'D', 'S', 0,
  /* 577 */ 'F', 'N', 'E', 'G', 'S', 0,
  /* 583 */ 'F', 'M', 'U', 'L', 'S', 0,
  /* 589 */ 'F', 'D', 'T', 'O', 'S', 0,
  /* 595 */ 'F', 'I', 'T', 'O', 'S', 0,
  /* 601 */ 'F', 'Q', 'T', 'O', 'S', 0,
  /* 607 */ 'F', 'C', 'M', 'P', 'S', 0,
  /* 613 */ 'C', 'O', 'P', 'Y', '_', 'T', 'O', '_', 'R', 'E', 'G', 'C', 'L', 'A', 'S', 'S', 0,
  /* 630 */ 'F', 'A', 'B', 'S', 'S', 0,
  /* 636 */ 'F', 'S', 'Q', 'R', 'T', 'S', 0,
  /* 643 */ 'F', 'D', 'I', 'V', 'S', 0,
  /* 649 */ 'F', 'M', 'O', 'V', 'S', 0,
  /* 655 */ 'R', 'E', 'T', 0,
  /* 659 */ 'L', 'I', 'F', 'E', 'T', 'I', 'M', 'E', '_', 'S', 'T', 'A', 'R', 'T', 0,
  /* 674 */ 'F', 'L', 'U', 'S', 'H', 'W', 0,
  /* 681 */ 'G', 'E', 'T', 'P', 'C', 'X', 0,
  /* 688 */ 'R', 'D', 'Y', 0,
  /* 692 */ 'C', 'O', 'P', 'Y', 0,
  /* 697 */ 'S', 'E', 'T', 'H', 'I', 'i', 0,
  /* 704 */ 'S', 'R', 'A', 'r', 'i', 0,
  /* 710 */ 'L', 'D', 'S', 'B', 'r', 'i', 0,
  /* 717 */ 'S', 'T', 'B', 'r', 'i', 0,
  /* 723 */ 'L', 'D', 'U', 'B', 'r', 'i', 0,
  /* 730 */ 'S', 'U', 'B', 'r', 'i', 0,
  /* 736 */ 'S', 'U', 'B', 'C', 'C', 'r', 'i', 0,
  /* 744 */ 'A', 'D', 'D', 'C', 'C', 'r', 'i', 0,
  /* 752 */ 'M', 'O', 'V', 'F', 'C', 'C', 'r', 'i', 0,
  /* 761 */ 'M', 'O', 'V', 'I', 'C', 'C', 'r', 'i', 0,
  /* 770 */ 'M', 'O', 'V', 'X', 'C', 'C', 'r', 'i', 0,
  /* 779 */ 'L', 'E', 'A', '_', 'A', 'D', 'D', 'r', 'i', 0,
  /* 789 */ 'L', 'D', 'r', 'i', 0,
  /* 794 */ 'A', 'N', 'D', 'r', 'i', 0,
  /* 800 */ 'B', 'I', 'N', 'D', 'r', 'i', 0,
  /* 807 */ 'R', 'E', 'S', 'T', 'O', 'R', 'E', 'r', 'i', 0,
  /* 817 */ 'S', 'A', 'V', 'E', 'r', 'i', 0,
  /* 824 */ 'L', 'D', 'D', 'F', 'r', 'i', 0,
  /* 831 */ 'L', 'D', 'F', 'r', 'i', 0,
  /* 837 */ 'S', 'T', 'D', 'F', 'r', 'i', 0,
  /* 844 */ 'L', 'D', 'Q', 'F', 'r', 'i', 0,
  /* 851 */ 'S', 'T', 'Q', 'F', 'r', 'i', 0,
  /* 858 */ 'S', 'T', 'F', 'r', 'i', 0,
  /* 864 */ 'L', 'D', 'S', 'H', 'r', 'i', 0,
  /* 871 */ 'S', 'T', 'H', 'r', 'i', 0,
  /* 877 */ 'L', 'D', 'U', 'H', 'r', 'i', 0,
  /* 884 */ 'S', 'L', 'L', 'r', 'i', 0,
  /* 890 */ 'J', 'M', 'P', 'L', 'r', 'i', 0,
  /* 897 */ 'S', 'R', 'L', 'r', 'i', 0,
  /* 903 */ 'S', 'M', 'U', 'L', 'r', 'i', 0,
  /* 910 */ 'U', 'M', 'U', 'L', 'r', 'i', 0,
  /* 917 */ 'A', 'N', 'D', 'N', 'r', 'i', 0,
  /* 924 */ 'O', 'R', 'N', 'r', 'i', 0,
  /* 930 */ 'C', 'M', 'P', 'r', 'i', 0,
  /* 936 */ 'X', 'N', 'O', 'R', 'r', 'i', 0,
  /* 943 */ 'X', 'O', 'R', 'r', 'i', 0,
  /* 949 */ 'S', 'T', 'r', 'i', 0,
  /* 954 */ 'S', 'D', 'I', 'V', 'r', 'i', 0,
  /* 961 */ 'U', 'D', 'I', 'V', 'r', 'i', 0,
  /* 968 */ 'L', 'D', 'S', 'W', 'r', 'i', 0,
  /* 975 */ 'S', 'R', 'A', 'X', 'r', 'i', 0,
  /* 982 */ 'S', 'U', 'B', 'X', 'r', 'i', 0,
  /* 989 */ 'A', 'D', 'D', 'X', 'r', 'i', 0,
  /* 996 */ 'L', 'D', 'X', 'r', 'i', 0,
  /* 1002 */ 'S', 'L', 'L', 'X', 'r', 'i', 0,
  /* 1009 */ 'S', 'R', 'L', 'X', 'r', 'i', 0,
  /* 1016 */ 'M', 'U', 'L', 'X', 'r', 'i', 0,
  /* 1023 */ 'S', 'T', 'X', 'r', 'i', 0,
  /* 1029 */ 'S', 'D', 'I', 'V', 'X', 'r', 'i', 0,
  /* 1037 */ 'U', 'D', 'I', 'V', 'X', 'r', 'i', 0,
  /* 1045 */ 'W', 'R', 'Y', 'r', 'i', 0,
  /* 1051 */ 'S', 'R', 'A', 'r', 'r', 0,
  /* 1057 */ 'L', 'D', 'S', 'B', 'r', 'r', 0,
  /* 1064 */ 'S', 'T', 'B', 'r', 'r', 0,
  /* 1070 */ 'L', 'D', 'U', 'B', 'r', 'r', 0,
  /* 1077 */ 'S', 'U', 'B', 'r', 'r', 0,
  /* 1083 */ 'S', 'U', 'B', 'C', 'C', 'r', 'r', 0,
  /* 1091 */ 'A', 'D', 'D', 'C', 'C', 'r', 'r', 0,
  /* 1099 */ 'M', 'O', 'V', 'F', 'C', 'C', 'r', 'r', 0,
  /* 1108 */ 'M', 'O', 'V', 'I', 'C', 'C', 'r', 'r', 0,
  /* 1117 */ 'S', 'U', 'B', 'X', 'C', 'C', 'r', 'r', 0,
  /* 1126 */ 'M', 'O', 'V', 'X', 'C', 'C', 'r', 'r', 0,
  /* 1135 */ 'P', 'O', 'P', 'C', 'r', 'r', 0,
  /* 1142 */ 'A', 'D', 'D', 'r', 'r', 0,
  /* 1148 */ 'L', 'D', 'r', 'r', 0,
  /* 1153 */ 'A', 'N', 'D', 'r', 'r', 0,
  /* 1159 */ 'B', 'I', 'N', 'D', 'r', 'r', 0,
  /* 1166 */ 'R', 'E', 'S', 'T', 'O', 'R', 'E', 'r', 'r', 0,
  /* 1176 */ 'S', 'A', 'V', 'E', 'r', 'r', 0,
  /* 1183 */ 'L', 'D', 'D', 'F', 'r', 'r', 0,
  /* 1190 */ 'L', 'D', 'F', 'r', 'r', 0,
  /* 1196 */ 'S', 'T', 'D', 'F', 'r', 'r', 0,
  /* 1203 */ 'L', 'D', 'Q', 'F', 'r', 'r', 0,
  /* 1210 */ 'S', 'T', 'Q', 'F', 'r', 'r', 0,
  /* 1217 */ 'S', 'T', 'F', 'r', 'r', 0,
  /* 1223 */ 'L', 'D', 'S', 'H', 'r', 'r', 0,
  /* 1230 */ 'S', 'T', 'H', 'r', 'r', 0,
  /* 1236 */ 'L', 'D', 'U', 'H', 'r', 'r', 0,
  /* 1243 */ 'S', 'L', 'L', 'r', 'r', 0,
  /* 1249 */ 'J', 'M', 'P', 'L', 'r', 'r', 0,
  /* 1256 */ 'S', 'R', 'L', 'r', 'r', 0,
  /* 1262 */ 'S', 'M', 'U', 'L', 'r', 'r', 0,
  /* 1269 */ 'U', 'M', 'U', 'L', 'r', 'r', 0,
  /* 1276 */ 'A', 'N', 'D', 'N', 'r', 'r', 0,
  /* 1283 */ 'O', 'R', 'N', 'r', 'r', 0,
  /* 1289 */ 'C', 'M', 'P', 'r', 'r', 0,
  /* 1295 */ 'X', 'N', 'O', 'R', 'r', 'r', 0,
  /* 1302 */ 'X', 'O', 'R', 'r', 'r', 0,
  /* 1308 */ 'S', 'T', 'r', 'r', 0,
  /* 1313 */ 'S', 'D', 'I', 'V', 'r', 'r', 0,
  /* 1320 */ 'U', 'D', 'I', 'V', 'r', 'r', 0,
  /* 1327 */ 'L', 'D', 'S', 'W', 'r', 'r', 0,
  /* 1334 */ 'S', 'R', 'A', 'X', 'r', 'r', 0,
  /* 1341 */ 'S', 'U', 'B', 'X', 'r', 'r', 0,
  /* 1348 */ 'A', 'D', 'D', 'X', 'r', 'r', 0,
  /* 1355 */ 'L', 'D', 'X', 'r', 'r', 0,
  /* 1361 */ 'S', 'L', 'L', 'X', 'r', 'r', 0,
  /* 1368 */ 'S', 'R', 'L', 'X', 'r', 'r', 0,
  /* 1375 */ 'M', 'U', 'L', 'X', 'r', 'r', 0,
  /* 1382 */ 'S', 'T', 'X', 'r', 'r', 0,
  /* 1388 */ 'S', 'D', 'I', 'V', 'X', 'r', 'r', 0,
  /* 1396 */ 'U', 'D', 'I', 'V', 'X', 'r', 'r', 0,
  /* 1404 */ 'W', 'R', 'Y', 'r', 'r', 0,
};

extern const unsigned SparcInstrNameIndices[] = {
    365U, 433U, 396U, 409U, 387U, 423U, 322U, 337U, 
    309U, 351U, 613U, 299U, 279U, 692U, 292U, 659U, 
    210U, 744U, 1091U, 989U, 1348U, 783U, 1142U, 443U, 
    470U, 917U, 1276U, 794U, 1153U, 4U, 224U, 800U, 
    1159U, 153U, 418U, 930U, 1289U, 254U, 540U, 630U, 
    185U, 491U, 571U, 223U, 248U, 534U, 607U, 267U, 
    553U, 643U, 503U, 369U, 516U, 589U, 230U, 522U, 
    595U, 674U, 273U, 7U, 80U, 159U, 559U, 649U, 
    52U, 125U, 169U, 197U, 510U, 583U, 191U, 497U, 
    577U, 236U, 375U, 601U, 203U, 260U, 546U, 636U, 
    242U, 381U, 528U, 179U, 485U, 565U, 681U, 890U, 
    1249U, 824U, 1183U, 831U, 1190U, 844U, 1203U, 710U, 
    1057U, 864U, 1223U, 968U, 1327U, 723U, 1070U, 877U, 
    1236U, 996U, 1355U, 789U, 1148U, 779U, 752U, 1099U, 
    761U, 1108U, 770U, 1126U, 1016U, 1375U, 466U, 924U, 
    1283U, 938U, 1297U, 1135U, 688U, 807U, 1166U, 655U, 
    428U, 817U, 1176U, 1029U, 1388U, 954U, 1313U, 17U, 
    90U, 35U, 108U, 62U, 135U, 697U, 1002U, 1361U, 
    884U, 1243U, 903U, 1262U, 975U, 1334U, 704U, 1051U, 
    1009U, 1368U, 897U, 1256U, 717U, 1064U, 837U, 1196U, 
    858U, 1217U, 871U, 1230U, 851U, 1210U, 1023U, 1382U, 
    949U, 1308U, 736U, 1083U, 1117U, 982U, 1341U, 730U, 
    1077U, 0U, 1037U, 1396U, 961U, 1320U, 910U, 1269U, 
    460U, 1045U, 1404U, 936U, 1295U, 943U, 1302U, 
};

static inline void InitSparcMCInstrInfo(MCInstrInfo *II) {
  II->InitMCInstrInfo(SparcInsts, SparcInstrNameIndices, SparcInstrNameData, 191);
}

} // End llvm namespace 
#endif // GET_INSTRINFO_MC_DESC


#ifdef GET_INSTRINFO_HEADER
#undef GET_INSTRINFO_HEADER
namespace llvm {
struct SparcGenInstrInfo : public TargetInstrInfo {
  explicit SparcGenInstrInfo(int SO = -1, int DO = -1);
};
} // End llvm namespace 
#endif // GET_INSTRINFO_HEADER


#ifdef GET_INSTRINFO_CTOR
#undef GET_INSTRINFO_CTOR
namespace llvm {
extern const MCInstrDesc SparcInsts[];
extern const unsigned SparcInstrNameIndices[];
extern const char SparcInstrNameData[];
SparcGenInstrInfo::SparcGenInstrInfo(int SO, int DO)
  : TargetInstrInfo(SO, DO) {
  InitMCInstrInfo(SparcInsts, SparcInstrNameIndices, SparcInstrNameData, 191);
}
} // End llvm namespace 
#endif // GET_INSTRINFO_CTOR

#ifdef GET_INSTRINFO_OPERAND_ENUM
#undef GET_INSTRINFO_OPERAND_ENUM
namespace llvm {namespace SP {
namespace OpName { 
enum {
OPERAND_LAST
};
} // End namespace OpName
} // End namespace SP
} // End namespace llvm
#endif //GET_INSTRINFO_OPERAND_ENUM
#ifdef GET_INSTRINFO_NAMED_OPS
#undef GET_INSTRINFO_NAMED_OPS
namespace llvm {namespace SP {
int16_t getNamedOperandIdx(uint16_t Opcode, uint16_t NamedIdx) {
  return -1;
}
} // End namespace SP
} // End namespace llvm
#endif //GET_INSTRINFO_NAMED_OPS
