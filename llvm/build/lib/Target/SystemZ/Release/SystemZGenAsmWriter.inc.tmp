/*===- TableGen'erated file -------------------------------------*- C++ -*-===*\
|*                                                                            *|
|*Assembly Writer Source Fragment                                             *|
|*                                                                            *|
|* Automatically generated file, do not edit!                                 *|
|*                                                                            *|
\*===----------------------------------------------------------------------===*/

/// printInstruction - This method is automatically generated by tablegen
/// from the instruction set description.
void SystemZInstPrinter::printInstruction(const MCInst *MI, raw_ostream &O) {
  static const uint32_t OpInfo[] = {
    0U,	// PHI
    0U,	// INLINEASM
    0U,	// PROLOG_LABEL
    0U,	// EH_LABEL
    0U,	// GC_LABEL
    0U,	// KILL
    0U,	// EXTRACT_SUBREG
    0U,	// INSERT_SUBREG
    0U,	// IMPLICIT_DEF
    0U,	// SUBREG_TO_REG
    0U,	// COPY_TO_REGCLASS
    3257U,	// DBG_VALUE
    0U,	// REG_SEQUENCE
    0U,	// COPY
    3250U,	// BUNDLE
    3267U,	// LIFETIME_START
    3237U,	// LIFETIME_END
    4098U,	// A
    4131U,	// ADB
    1054994U,	// ADBR
    0U,	// ADJCALLSTACKDOWN
    0U,	// ADJCALLSTACKUP
    0U,	// ADJDYNALLOC
    4176U,	// AEB
    1055097U,	// AEBR
    0U,	// AEXT128_64
    2102709U,	// AFI
    4939U,	// AG
    4823U,	// AGF
    2102719U,	// AGFI
    1055396U,	// AGFR
    3151369U,	// AGHI
    37754542U,	// AGHIK
    1055472U,	// AGR
    171972311U,	// AGRK
    75345U,	// AGSI
    5127U,	// AH
    3151359U,	// AHI
    37754536U,	// AHIK
    7181U,	// AHY
    5923U,	// AL
    4242U,	// ALC
    4977U,	// ALCG
    1055484U,	// ALCGR
    1055343U,	// ALCR
    5248487U,	// ALFI
    5008U,	// ALG
    4833U,	// ALGF
    5248459U,	// ALGFI
    1055409U,	// ALGFR
    37754549U,	// ALGHSIK
    1055504U,	// ALGR
    171972317U,	// ALGRK
    37754558U,	// ALHSIK
    1055596U,	// ALR
    171972355U,	// ALRK
    7239U,	// ALY
    1054989U,	// AR
    171972306U,	// ARK
    75340U,	// ASI
    0U,	// ATOMIC_CMP_SWAPW
    0U,	// ATOMIC_LOADW_AFI
    0U,	// ATOMIC_LOADW_AR
    0U,	// ATOMIC_LOADW_MAX
    0U,	// ATOMIC_LOADW_MIN
    0U,	// ATOMIC_LOADW_NILH
    0U,	// ATOMIC_LOADW_NILHi
    0U,	// ATOMIC_LOADW_NR
    0U,	// ATOMIC_LOADW_NRi
    0U,	// ATOMIC_LOADW_OILH
    0U,	// ATOMIC_LOADW_OR
    0U,	// ATOMIC_LOADW_SR
    0U,	// ATOMIC_LOADW_UMAX
    0U,	// ATOMIC_LOADW_UMIN
    0U,	// ATOMIC_LOADW_XILF
    0U,	// ATOMIC_LOADW_XR
    0U,	// ATOMIC_LOAD_AFI
    0U,	// ATOMIC_LOAD_AGFI
    0U,	// ATOMIC_LOAD_AGHI
    0U,	// ATOMIC_LOAD_AGR
    0U,	// ATOMIC_LOAD_AHI
    0U,	// ATOMIC_LOAD_AR
    0U,	// ATOMIC_LOAD_MAX_32
    0U,	// ATOMIC_LOAD_MAX_64
    0U,	// ATOMIC_LOAD_MIN_32
    0U,	// ATOMIC_LOAD_MIN_64
    0U,	// ATOMIC_LOAD_NGR
    0U,	// ATOMIC_LOAD_NGRi
    0U,	// ATOMIC_LOAD_NIHF
    0U,	// ATOMIC_LOAD_NIHFi
    0U,	// ATOMIC_LOAD_NIHH
    0U,	// ATOMIC_LOAD_NIHHi
    0U,	// ATOMIC_LOAD_NIHL
    0U,	// ATOMIC_LOAD_NIHLi
    0U,	// ATOMIC_LOAD_NILF
    0U,	// ATOMIC_LOAD_NILF32
    0U,	// ATOMIC_LOAD_NILF32i
    0U,	// ATOMIC_LOAD_NILFi
    0U,	// ATOMIC_LOAD_NILH
    0U,	// ATOMIC_LOAD_NILH32
    0U,	// ATOMIC_LOAD_NILH32i
    0U,	// ATOMIC_LOAD_NILHi
    0U,	// ATOMIC_LOAD_NILL
    0U,	// ATOMIC_LOAD_NILL32
    0U,	// ATOMIC_LOAD_NILL32i
    0U,	// ATOMIC_LOAD_NILLi
    0U,	// ATOMIC_LOAD_NR
    0U,	// ATOMIC_LOAD_NRi
    0U,	// ATOMIC_LOAD_OGR
    0U,	// ATOMIC_LOAD_OIHF
    0U,	// ATOMIC_LOAD_OIHH
    0U,	// ATOMIC_LOAD_OIHL
    0U,	// ATOMIC_LOAD_OILF
    0U,	// ATOMIC_LOAD_OILF32
    0U,	// ATOMIC_LOAD_OILH
    0U,	// ATOMIC_LOAD_OILH32
    0U,	// ATOMIC_LOAD_OILL
    0U,	// ATOMIC_LOAD_OILL32
    0U,	// ATOMIC_LOAD_OR
    0U,	// ATOMIC_LOAD_SGR
    0U,	// ATOMIC_LOAD_SR
    0U,	// ATOMIC_LOAD_UMAX_32
    0U,	// ATOMIC_LOAD_UMAX_64
    0U,	// ATOMIC_LOAD_UMIN_32
    0U,	// ATOMIC_LOAD_UMIN_64
    0U,	// ATOMIC_LOAD_XGR
    0U,	// ATOMIC_LOAD_XIHF
    0U,	// ATOMIC_LOAD_XILF
    0U,	// ATOMIC_LOAD_XILF32
    0U,	// ATOMIC_LOAD_XR
    0U,	// ATOMIC_SWAPW
    0U,	// ATOMIC_SWAP_32
    0U,	// ATOMIC_SWAP_64
    1055248U,	// AXBR
    7144U,	// AY
    4201358U,	// AsmBASR
    6298543U,	// AsmBRAS
    6297741U,	// AsmBRASL
    143532U,	// AsmBRC
    145204U,	// AsmBRCL
    74454673U,	// AsmCGIJ
    306189980U,	// AsmCGRJ
    74454668U,	// AsmCIJ
    306189975U,	// AsmCRJ
    16801U,	// AsmEJ
    16613U,	// AsmEJG
    8392905U,	// AsmELOC
    8392918U,	// AsmELOCG
    1053386U,	// AsmELOCGR
    1053379U,	// AsmELOCR
    9441487U,	// AsmESTOC
    9441501U,	// AsmESTOCG
    16658U,	// AsmHEJ
    16650U,	// AsmHEJG
    8392938U,	// AsmHELOC
    8392953U,	// AsmHELOCG
    1053078U,	// AsmHELOCGR
    1053070U,	// AsmHELOCR
    9441521U,	// AsmHESTOC
    9441537U,	// AsmHESTOCG
    17491U,	// AsmHJ
    17447U,	// AsmHJG
    8393739U,	// AsmHLOC
    8393752U,	// AsmHLOCG
    1054116U,	// AsmHLOCGR
    1054109U,	// AsmHLOCR
    9442321U,	// AsmHSTOC
    9442335U,	// AsmHSTOCG
    108008710U,	// AsmJEAltCGI
    440407319U,	// AsmJEAltCGR
    108008702U,	// AsmJEAltCI
    440407311U,	// AsmJEAltCR
    108007845U,	// AsmJECGI
    440406450U,	// AsmJECGR
    108007839U,	// AsmJECI
    440406444U,	// AsmJECR
    108007984U,	// AsmJHAltCGI
    440406593U,	// AsmJHAltCGR
    108007976U,	// AsmJHAltCI
    440406585U,	// AsmJHAltCR
    108008535U,	// AsmJHCGI
    440407140U,	// AsmJHCGR
    108008529U,	// AsmJHCI
    440407134U,	// AsmJHCR
    108009441U,	// AsmJHEAltCGI
    440408048U,	// AsmJHEAltCGR
    108009434U,	// AsmJHEAltCI
    440408041U,	// AsmJHEAltCR
    108007703U,	// AsmJHECGI
    440406310U,	// AsmJHECGR
    108007696U,	// AsmJHECI
    440406303U,	// AsmJHECR
    108007777U,	// AsmJLAltCGI
    440406386U,	// AsmJLAltCGR
    108007769U,	// AsmJLAltCI
    440406378U,	// AsmJLAltCR
    108009335U,	// AsmJLCGI
    440407940U,	// AsmJLCGR
    108009329U,	// AsmJLCI
    440407934U,	// AsmJLCR
    108008821U,	// AsmJLEAltCGI
    440407428U,	// AsmJLEAltCGR
    108008814U,	// AsmJLEAltCI
    440407421U,	// AsmJLEAltCR
    108007910U,	// AsmJLECGI
    440406517U,	// AsmJLECGR
    108007903U,	// AsmJLECI
    440406510U,	// AsmJLECR
    108008091U,	// AsmJLHAltCGI
    440406698U,	// AsmJLHAltCGR
    108008084U,	// AsmJLHAltCI
    440406691U,	// AsmJLHAltCR
    108008625U,	// AsmJLHCGI
    440407232U,	// AsmJLHCGR
    108008618U,	// AsmJLHCI
    440407225U,	// AsmJLHCR
    16865U,	// AsmLEJ
    16857U,	// AsmLEJG
    8393145U,	// AsmLELOC
    8393160U,	// AsmLELOCG
    1053285U,	// AsmLELOCGR
    1053277U,	// AsmLELOCR
    9441728U,	// AsmLESTOC
    9441744U,	// AsmLESTOCG
    17580U,	// AsmLHJ
    17547U,	// AsmLHJG
    8393835U,	// AsmLHLOC
    8393850U,	// AsmLHLOCG
    1054011U,	// AsmLHLOCGR
    1054003U,	// AsmLHLOCR
    9442418U,	// AsmLHSTOC
    9442434U,	// AsmLHSTOCG
    18291U,	// AsmLJ
    18253U,	// AsmLJG
    8394535U,	// AsmLLOC
    8394558U,	// AsmLLOCG
    1054772U,	// AsmLLOCGR
    1054735U,	// AsmLLOCR
    578818209U,	// AsmLOC
    578818935U,	// AsmLOCG
    705698563U,	// AsmLOCGR
    705698427U,	// AsmLOCR
    9443117U,	// AsmLSTOC
    9443141U,	// AsmLSTOCG
    17046U,	// AsmNEJ
    17038U,	// AsmNEJG
    8393326U,	// AsmNELOC
    8393341U,	// AsmNELOCG
    1053370U,	// AsmNELOCGR
    1053362U,	// AsmNELOCR
    9441909U,	// AsmNESTOC
    9441925U,	// AsmNESTOCG
    16731U,	// AsmNHEJ
    16722U,	// AsmNHEJG
    8393006U,	// AsmNHELOC
    8393023U,	// AsmNHELOCG
    1053060U,	// AsmNHELOCGR
    1053051U,	// AsmNHELOCR
    9441590U,	// AsmNHESTOC
    9441608U,	// AsmNHESTOCG
    17776U,	// AsmNHJ
    17768U,	// AsmNHJG
    8394056U,	// AsmNHLOC
    8394071U,	// AsmNHLOCG
    1054100U,	// AsmNHLOCGR
    1054092U,	// AsmNHLOCR
    9442639U,	// AsmNHSTOC
    9442655U,	// AsmNHSTOCG
    16938U,	// AsmNLEJ
    16929U,	// AsmNLEJG
    8393213U,	// AsmNLELOC
    8393230U,	// AsmNLELOCG
    1053267U,	// AsmNLELOCGR
    1053258U,	// AsmNLELOCR
    9441797U,	// AsmNLESTOC
    9441815U,	// AsmNLESTOCG
    17664U,	// AsmNLHJ
    17655U,	// AsmNLHJG
    8393939U,	// AsmNLHLOC
    8393956U,	// AsmNLHLOCG
    1053993U,	// AsmNLHLOCGR
    1053984U,	// AsmNLHLOCR
    9442523U,	// AsmNLHSTOC
    9442541U,	// AsmNLHSTOCG
    18396U,	// AsmNLJ
    18388U,	// AsmNLJG
    8394676U,	// AsmNLLOC
    8394691U,	// AsmNLLOCG
    1054720U,	// AsmNLLOCGR
    1054712U,	// AsmNLLOCR
    9443259U,	// AsmNLSTOC
    9443275U,	// AsmNLSTOCG
    18663U,	// AsmNOJ
    18657U,	// AsmNOJG
    8394945U,	// AsmNOLOC
    8394960U,	// AsmNOLOCG
    1054964U,	// AsmNOLOCGR
    1054956U,	// AsmNOLOCR
    9443528U,	// AsmNOSTOC
    9443544U,	// AsmNOSTOCG
    18621U,	// AsmOJ
    18616U,	// AsmOJG
    8394908U,	// AsmOLOC
    8394921U,	// AsmOLOCG
    1054980U,	// AsmOLOCGR
    1054973U,	// AsmOLOCR
    9443490U,	// AsmOSTOC
    9443504U,	// AsmOSTOCG
    714084518U,	// AsmSTOC
    714085245U,	// AsmSTOCG
    203902U,	// BASR
    203028U,	// BR
    23690U,	// BRAS
    23665U,	// BRASL
    27883U,	// BRC
    27878U,	// BRCL
    10492861U,	// BRCT
    10490853U,	// BRCTG
    11538571U,	// C
    11538472U,	// CDB
    4200729U,	// CDBR
    4200922U,	// CDFBR
    4200943U,	// CDGBR
    11538517U,	// CEB
    4200832U,	// CEBR
    4200929U,	// CEFBR
    4200950U,	// CEGBR
    12589356U,	// CFDBR
    12589467U,	// CFEBR
    13637050U,	// CFI
    12589611U,	// CFXBR
    11539315U,	// CG
    12589363U,	// CGDBR
    12589474U,	// CGEBR
    11539164U,	// CGF
    13637061U,	// CGFI
    4201131U,	// CGFR
    6297629U,	// CGFRL
    11539482U,	// CGH
    14685711U,	// CGHI
    6297680U,	// CGHRL
    271973U,	// CGHSI
    359661U,	// CGIJ
    4201214U,	// CGR
    425206U,	// CGRJ
    6297654U,	// CGRL
    12589618U,	// CGXBR
    11539469U,	// CH
    271988U,	// CHHSI
    14685700U,	// CHI
    6297674U,	// CHRL
    271959U,	// CHSI
    11541522U,	// CHY
    359657U,	// CIJ
    11540265U,	// CL
    32919U,	// CLC
    0U,	// CLCLoop
    0U,	// CLCSequence
    468573U,	// CLFHSI
    15734253U,	// CLFI
    11539357U,	// CLG
    11539175U,	// CLGF
    15734226U,	// CLGFI
    4201144U,	// CLGFR
    6297636U,	// CLGFRL
    6297687U,	// CLGHRL
    468588U,	// CLGHSI
    4201238U,	// CLGR
    6297660U,	// CLGRL
    468603U,	// CLHHSI
    6297703U,	// CLHRL
    534079U,	// CLI
    535596U,	// CLIY
    4201329U,	// CLR
    6297724U,	// CLRL
    4201415U,	// CLST
    0U,	// CLSTLoop
    11541580U,	// CLY
    171973260U,	// CPSDRdd
    171973260U,	// CPSDRds
    171973260U,	// CPSDRsd
    171973260U,	// CPSDRss
    4201067U,	// CR
    425202U,	// CRJ
    6297617U,	// CRL
    839916469U,	// CS
    839914454U,	// CSG
    839916638U,	// CSY
    4200983U,	// CXBR
    4200936U,	// CXFBR
    4200963U,	// CXGBR
    11541485U,	// CY
    3222U,	// CallBR
    21388U,	// CallJG
    0U,	// CondStore16
    0U,	// CondStore16Inv
    0U,	// CondStore16_32
    0U,	// CondStore16_32Inv
    0U,	// CondStore32
    0U,	// CondStore32Inv
    0U,	// CondStore32_32
    0U,	// CondStore32_32Inv
    0U,	// CondStore64
    0U,	// CondStore64Inv
    0U,	// CondStore8
    0U,	// CondStore8Inv
    0U,	// CondStore8_32
    0U,	// CondStore8_32Inv
    0U,	// CondStoreF32
    0U,	// CondStoreF32Inv
    0U,	// CondStoreF64
    0U,	// CondStoreF64Inv
    4141U,	// DDB
    1055007U,	// DDBR
    4187U,	// DEB
    1055111U,	// DEBR
    5946U,	// DL
    5026U,	// DLG
    1055516U,	// DLGR
    1055606U,	// DLR
    5083U,	// DSG
    4857U,	// DSGF
    1055451U,	// DSGFR
    1055553U,	// DSGR
    1055262U,	// DXBR
    16783628U,	// EAR
    12589370U,	// FIDBR
    717230085U,	// FIDBRA
    12589481U,	// FIEBR
    717230093U,	// FIEBRA
    12589625U,	// FIXBR
    717230101U,	// FIXBRA
    4201268U,	// FLOGR
    4238U,	// IC
    4238U,	// IC32
    7148U,	// IC32Y
    7148U,	// ICY
    5247755U,	// IIHF
    17830962U,	// IIHH
    17831762U,	// IIHL
    5247786U,	// IILF
    15733546U,	// IILF32
    17831057U,	// IILH
    17831057U,	// IILH32
    17831819U,	// IILL
    17831819U,	// IILL32
    202900U,	// IPM
    18062U,	// J
    17292U,	// JG
    11540260U,	// L
    0U,	// L128
    11538433U,	// LA
    6297609U,	// LARL
    11541479U,	// LAY
    11538564U,	// LB
    4200971U,	// LBR
    4200728U,	// LCDBR
    4200831U,	// LCEBR
    4201130U,	// LCGFR
    4201213U,	// LCGR
    4201072U,	// LCR
    4200982U,	// LCXBR
    11538624U,	// LD
    11538522U,	// LDEB
    4200838U,	// LDEBR
    4201226U,	// LDGR
    4201095U,	// LDR
    4200989U,	// LDXBR
    11541495U,	// LDY
    11538876U,	// LE
    4200741U,	// LEDBR
    4201113U,	// LER
    4200996U,	// LEXBR
    11541506U,	// LEY
    11539345U,	// LG
    11538558U,	// LGB
    4200957U,	// LGBR
    4201089U,	// LGDR
    11539170U,	// LGF
    13637068U,	// LGFI
    4201138U,	// LGFR
    6297637U,	// LGFRL
    11539501U,	// LGH
    14685717U,	// LGHI
    4201312U,	// LGHR
    6297688U,	// LGHRL
    4201233U,	// LGR
    6297661U,	// LGRL
    11539566U,	// LH
    14685743U,	// LHI
    4201319U,	// LHR
    6297704U,	// LHRL
    11541527U,	// LHY
    11538588U,	// LLC
    4201077U,	// LLCR
    11538568U,	// LLGC
    4201064U,	// LLGCR
    11539181U,	// LLGF
    4201151U,	// LLGFR
    6297644U,	// LLGFRL
    11539500U,	// LLGH
    4201311U,	// LLGHR
    6297695U,	// LLGHRL
    11539656U,	// LLH
    4201318U,	// LLHR
    6297710U,	// LLHRL
    15733521U,	// LLIHF
    18879544U,	// LLIHH
    18880344U,	// LLIHL
    15733552U,	// LLILF
    18879639U,	// LLILH
    18880401U,	// LLILL
    977277891U,	// LMG
    4200775U,	// LNDBR
    4200880U,	// LNEBR
    4201165U,	// LNGFR
    4201262U,	// LNGR
    4201344U,	// LNR
    4201030U,	// LNXBR
    40146U,	// LOC
    40155U,	// LOCG
    44288U,	// LOCGR
    44283U,	// LOCR
    4200782U,	// LPDBR
    4200887U,	// LPEBR
    4201172U,	// LPGFR
    4201275U,	// LPGR
    4201353U,	// LPR
    4201037U,	// LPXBR
    4201325U,	// LR
    6297725U,	// LRL
    11541465U,	// LRV
    11539446U,	// LRVG
    4201299U,	// LRVGR
    4201374U,	// LRVR
    11541443U,	// LT
    4200803U,	// LTDBR
    4200803U,	// LTDBRCompare
    4200908U,	// LTEBR
    4200908U,	// LTEBRCompare
    11539436U,	// LTG
    11539205U,	// LTGF
    4201193U,	// LTGFR
    4201293U,	// LTGR
    4201369U,	// LTR
    4201057U,	// LTXBR
    4201057U,	// LTXBRCompare
    0U,	// LX
    11538499U,	// LXDB
    4200810U,	// LXDBR
    11538552U,	// LXEB
    4200915U,	// LXEBR
    4201380U,	// LXR
    11541576U,	// LY
    203411U,	// LZDR
    203422U,	// LZER
    203689U,	// LZXR
    1108348962U,	// MADB
    1242568977U,	// MADBR
    1108349007U,	// MAEB
    1242569080U,	// MAEBR
    4146U,	// MDB
    1055041U,	// MDBR
    4192U,	// MDEB
    1055117U,	// MDEBR
    4198U,	// MEEB
    1055124U,	// MEEBR
    3151387U,	// MGHI
    5444U,	// MH
    3151412U,	// MHI
    7196U,	// MHY
    5043U,	// MLG
    1055522U,	// MLGR
    7097U,	// MS
    1108348989U,	// MSDB
    1242569052U,	// MSDBR
    1108349042U,	// MSEB
    1242569157U,	// MSEBR
    2102777U,	// MSFI
    5088U,	// MSG
    4863U,	// MSGF
    2102752U,	// MSGFI
    1055458U,	// MSGFR
    1055559U,	// MSGR
    1055636U,	// MSR
    7267U,	// MSY
    32950U,	// MVC
    0U,	// MVCLoop
    0U,	// MVCSequence
    271905U,	// MVGHI
    271912U,	// MVHHI
    271929U,	// MVHI
    534147U,	// MVI
    535612U,	// MVIY
    4201427U,	// MVST
    0U,	// MVSTLoop
    1055296U,	// MXBR
    4169U,	// MXDB
    1055089U,	// MXDBR
    6297U,	// N
    5070U,	// NG
    1055535U,	// NGR
    171972331U,	// NGRK
    534084U,	// NI
    5247768U,	// NIHF
    17830975U,	// NIHH
    17831775U,	// NIHL
    5247799U,	// NILF
    5247799U,	// NILF32
    17831070U,	// NILH
    17831070U,	// NILH32
    17831832U,	// NILL
    17831832U,	// NILL32
    535602U,	// NIY
    1055617U,	// NR
    171972367U,	// NRK
    7254U,	// NY
    6303U,	// O
    5074U,	// OG
    1055542U,	// OGR
    171972337U,	// OGRK
    534088U,	// OI
    5247774U,	// OIHF
    17830981U,	// OIHH
    17831781U,	// OIHL
    5247805U,	// OILF
    5247805U,	// OILF32
    17831076U,	// OILH
    17831076U,	// OILH32
    17831838U,	// OILL
    17831838U,	// OILL32
    535607U,	// OIY
    1055621U,	// OR
    171972372U,	// ORK
    7258U,	// OY
    602299U,	// PFD
    145430U,	// PFDRL
    3229U,	// RET
    1376785237U,	// RISBG
    1376785237U,	// RISBG32
    1376785284U,	// RISBHG
    1376785301U,	// RISBLG
    1376785301U,	// RISBLG32
    977278890U,	// RLL
    977277863U,	// RLLG
    1376785244U,	// RNSBG
    1376785251U,	// ROSBG
    1376785258U,	// RXSBG
    7090U,	// S
    4158U,	// SDB
    1055069U,	// SDBR
    4211U,	// SEB
    1055174U,	// SEBR
    5079U,	// SG
    4858U,	// SGF
    1055452U,	// SGFR
    1055554U,	// SGR
    171972343U,	// SGRK
    5548U,	// SH
    7201U,	// SHY
    6288U,	// SL
    4227U,	// SLB
    4943U,	// SLBG
    1055242U,	// SLBR
    5248499U,	// SLFI
    5054U,	// SLG
    1055477U,	// SLGBR
    4851U,	// SLGF
    5248473U,	// SLGFI
    1055430U,	// SLGFR
    1055528U,	// SLGR
    171972324U,	// SLGRK
    8394671U,	// SLL
    977277869U,	// SLLG
    977278662U,	// SLLK
    1055611U,	// SLR
    171972361U,	// SLRK
    7249U,	// SLY
    11538487U,	// SQDB
    4200789U,	// SQDBR
    11538540U,	// SQEB
    4200894U,	// SQEBR
    4201044U,	// SQXBR
    1055632U,	// SR
    8392733U,	// SRA
    977277769U,	// SRAG
    977278626U,	// SRAK
    171972377U,	// SRK
    8394882U,	// SRL
    977277880U,	// SRLG
    977278668U,	// SRLK
    4201421U,	// SRST
    0U,	// SRSTLoop
    11541449U,	// ST
    0U,	// ST128
    11541449U,	// ST32
    11541608U,	// ST32Y
    11538609U,	// STC
    11538609U,	// STC32
    11541489U,	// STC32Y
    11541489U,	// STCY
    11538628U,	// STD
    11541500U,	// STDY
    11539154U,	// STE
    11541511U,	// STEY
    11539441U,	// STG
    6297667U,	// STGRL
    11539888U,	// STH
    11539888U,	// STH32
    11541542U,	// STH32Y
    6297717U,	// STHRL
    6297717U,	// STHRL32
    11541542U,	// STHY
    977277896U,	// STMG
    48342U,	// STOC
    48342U,	// STOC32
    48352U,	// STOCG
    6297735U,	// STRL
    6297735U,	// STRL32
    11541470U,	// STRV
    11539452U,	// STRVG
    0U,	// STX
    11541608U,	// STY
    1055323U,	// SXBR
    7263U,	// SY
    0U,	// Select32
    0U,	// Select64
    0U,	// SelectF128
    0U,	// SelectF32
    0U,	// SelectF64
    18879563U,	// TMHH
    18880363U,	// TMHL
    18879693U,	// TMLH
    18879693U,	// TMLH32
    18880420U,	// TMLL
    18880420U,	// TMLL32
    7140U,	// X
    5123U,	// XG
    1055578U,	// XGR
    171972349U,	// XGRK
    534152U,	// XI
    5247780U,	// XIHF
    5247811U,	// XILF
    5247811U,	// XILF32
    535618U,	// XIY
    1055653U,	// XR
    171972382U,	// XRK
    7277U,	// XY
    0U,	// ZEXT128_32
    0U,	// ZEXT128_64
    0U
  };

  const char AsmStrs[] = {
  /* 0 */ 'l', 'a', 9, 0,
  /* 4 */ 'f', 'i', 'd', 'b', 'r', 'a', 9, 0,
  /* 12 */ 'f', 'i', 'e', 'b', 'r', 'a', 9, 0,
  /* 20 */ 'f', 'i', 'x', 'b', 'r', 'a', 9, 0,
  /* 28 */ 's', 'r', 'a', 9, 0,
  /* 33 */ 'm', 'a', 'd', 'b', 9, 0,
  /* 39 */ 'c', 'd', 'b', 9, 0,
  /* 44 */ 'd', 'd', 'b', 9, 0,
  /* 49 */ 'm', 'd', 'b', 9, 0,
  /* 54 */ 's', 'q', 'd', 'b', 9, 0,
  /* 60 */ 'm', 's', 'd', 'b', 9, 0,
  /* 66 */ 'l', 'x', 'd', 'b', 9, 0,
  /* 72 */ 'm', 'x', 'd', 'b', 9, 0,
  /* 78 */ 'm', 'a', 'e', 'b', 9, 0,
  /* 84 */ 'c', 'e', 'b', 9, 0,
  /* 89 */ 'l', 'd', 'e', 'b', 9, 0,
  /* 95 */ 'm', 'd', 'e', 'b', 9, 0,
  /* 101 */ 'm', 'e', 'e', 'b', 9, 0,
  /* 107 */ 's', 'q', 'e', 'b', 9, 0,
  /* 113 */ 'm', 's', 'e', 'b', 9, 0,
  /* 119 */ 'l', 'x', 'e', 'b', 9, 0,
  /* 125 */ 'l', 'g', 'b', 9, 0,
  /* 130 */ 's', 'l', 'b', 9, 0,
  /* 135 */ 'l', 'l', 'g', 'c', 9, 0,
  /* 141 */ 'i', 'c', 9, 0,
  /* 145 */ 'a', 'l', 'c', 9, 0,
  /* 150 */ 'c', 'l', 'c', 9, 0,
  /* 155 */ 'l', 'l', 'c', 9, 0,
  /* 160 */ 'l', 'o', 'c', 9, 0,
  /* 165 */ 's', 't', 'o', 'c', 9, 0,
  /* 171 */ 'b', 'r', 'c', 9, 0,
  /* 176 */ 's', 't', 'c', 9, 0,
  /* 181 */ 'm', 'v', 'c', 9, 0,
  /* 186 */ 'p', 'f', 'd', 9, 0,
  /* 191 */ 'l', 'd', 9, 0,
  /* 195 */ 's', 't', 'd', 9, 0,
  /* 200 */ 'l', 'o', 'c', 'e', 9, 0,
  /* 206 */ 's', 't', 'o', 'c', 'e', 9, 0,
  /* 213 */ 'l', 'o', 'c', 'g', 'e', 9, 0,
  /* 220 */ 's', 't', 'o', 'c', 'g', 'e', 9, 0,
  /* 228 */ 'j', 'g', 'e', 9, 0,
  /* 233 */ 'l', 'o', 'c', 'h', 'e', 9, 0,
  /* 240 */ 's', 't', 'o', 'c', 'h', 'e', 9, 0,
  /* 248 */ 'l', 'o', 'c', 'g', 'h', 'e', 9, 0,
  /* 256 */ 's', 't', 'o', 'c', 'g', 'h', 'e', 9, 0,
  /* 265 */ 'j', 'g', 'h', 'e', 9, 0,
  /* 271 */ 'c', 'i', 'j', 'h', 'e', 9, 0,
  /* 278 */ 'c', 'g', 'i', 'j', 'h', 'e', 9, 0,
  /* 286 */ 'c', 'r', 'j', 'h', 'e', 9, 0,
  /* 293 */ 'c', 'g', 'r', 'j', 'h', 'e', 9, 0,
  /* 301 */ 'l', 'o', 'c', 'n', 'h', 'e', 9, 0,
  /* 309 */ 's', 't', 'o', 'c', 'n', 'h', 'e', 9, 0,
  /* 318 */ 'l', 'o', 'c', 'g', 'n', 'h', 'e', 9, 0,
  /* 327 */ 's', 't', 'o', 'c', 'g', 'n', 'h', 'e', 9, 0,
  /* 337 */ 'j', 'g', 'n', 'h', 'e', 9, 0,
  /* 344 */ 'c', 'i', 'j', 'n', 'h', 'e', 9, 0,
  /* 352 */ 'c', 'g', 'i', 'j', 'n', 'h', 'e', 9, 0,
  /* 361 */ 'c', 'r', 'j', 'n', 'h', 'e', 9, 0,
  /* 369 */ 'c', 'g', 'r', 'j', 'n', 'h', 'e', 9, 0,
  /* 378 */ 'l', 'o', 'c', 'r', 'n', 'h', 'e', 9, 0,
  /* 387 */ 'l', 'o', 'c', 'g', 'r', 'n', 'h', 'e', 9, 0,
  /* 397 */ 'l', 'o', 'c', 'r', 'h', 'e', 9, 0,
  /* 405 */ 'l', 'o', 'c', 'g', 'r', 'h', 'e', 9, 0,
  /* 414 */ 'c', 'i', 'j', 'e', 9, 0,
  /* 420 */ 'c', 'g', 'i', 'j', 'e', 9, 0,
  /* 427 */ 'c', 'r', 'j', 'e', 9, 0,
  /* 433 */ 'c', 'g', 'r', 'j', 'e', 9, 0,
  /* 440 */ 'l', 'o', 'c', 'l', 'e', 9, 0,
  /* 447 */ 's', 't', 'o', 'c', 'l', 'e', 9, 0,
  /* 455 */ 'l', 'o', 'c', 'g', 'l', 'e', 9, 0,
  /* 463 */ 's', 't', 'o', 'c', 'g', 'l', 'e', 9, 0,
  /* 472 */ 'j', 'g', 'l', 'e', 9, 0,
  /* 478 */ 'c', 'i', 'j', 'l', 'e', 9, 0,
  /* 485 */ 'c', 'g', 'i', 'j', 'l', 'e', 9, 0,
  /* 493 */ 'c', 'r', 'j', 'l', 'e', 9, 0,
  /* 500 */ 'c', 'g', 'r', 'j', 'l', 'e', 9, 0,
  /* 508 */ 'l', 'o', 'c', 'n', 'l', 'e', 9, 0,
  /* 516 */ 's', 't', 'o', 'c', 'n', 'l', 'e', 9, 0,
  /* 525 */ 'l', 'o', 'c', 'g', 'n', 'l', 'e', 9, 0,
  /* 534 */ 's', 't', 'o', 'c', 'g', 'n', 'l', 'e', 9, 0,
  /* 544 */ 'j', 'g', 'n', 'l', 'e', 9, 0,
  /* 551 */ 'c', 'i', 'j', 'n', 'l', 'e', 9, 0,
  /* 559 */ 'c', 'g', 'i', 'j', 'n', 'l', 'e', 9, 0,
  /* 568 */ 'c', 'r', 'j', 'n', 'l', 'e', 9, 0,
  /* 576 */ 'c', 'g', 'r', 'j', 'n', 'l', 'e', 9, 0,
  /* 585 */ 'l', 'o', 'c', 'r', 'n', 'l', 'e', 9, 0,
  /* 594 */ 'l', 'o', 'c', 'g', 'r', 'n', 'l', 'e', 9, 0,
  /* 604 */ 'l', 'o', 'c', 'r', 'l', 'e', 9, 0,
  /* 612 */ 'l', 'o', 'c', 'g', 'r', 'l', 'e', 9, 0,
  /* 621 */ 'l', 'o', 'c', 'n', 'e', 9, 0,
  /* 628 */ 's', 't', 'o', 'c', 'n', 'e', 9, 0,
  /* 636 */ 'l', 'o', 'c', 'g', 'n', 'e', 9, 0,
  /* 644 */ 's', 't', 'o', 'c', 'g', 'n', 'e', 9, 0,
  /* 653 */ 'j', 'g', 'n', 'e', 9, 0,
  /* 659 */ 'c', 'i', 'j', 'n', 'e', 9, 0,
  /* 666 */ 'c', 'g', 'i', 'j', 'n', 'e', 9, 0,
  /* 674 */ 'c', 'r', 'j', 'n', 'e', 9, 0,
  /* 681 */ 'c', 'g', 'r', 'j', 'n', 'e', 9, 0,
  /* 689 */ 'l', 'o', 'c', 'r', 'n', 'e', 9, 0,
  /* 697 */ 'l', 'o', 'c', 'g', 'r', 'n', 'e', 9, 0,
  /* 706 */ 'l', 'o', 'c', 'r', 'e', 9, 0,
  /* 713 */ 'l', 'o', 'c', 'g', 'r', 'e', 9, 0,
  /* 721 */ 's', 't', 'e', 9, 0,
  /* 726 */ 'a', 'g', 'f', 9, 0,
  /* 731 */ 'c', 'g', 'f', 9, 0,
  /* 736 */ 'a', 'l', 'g', 'f', 9, 0,
  /* 742 */ 'c', 'l', 'g', 'f', 9, 0,
  /* 748 */ 'l', 'l', 'g', 'f', 9, 0,
  /* 754 */ 's', 'l', 'g', 'f', 9, 0,
  /* 760 */ 'd', 's', 'g', 'f', 9, 0,
  /* 766 */ 'm', 's', 'g', 'f', 9, 0,
  /* 772 */ 'l', 't', 'g', 'f', 9, 0,
  /* 778 */ 'i', 'i', 'h', 'f', 9, 0,
  /* 784 */ 'l', 'l', 'i', 'h', 'f', 9, 0,
  /* 791 */ 'n', 'i', 'h', 'f', 9, 0,
  /* 797 */ 'o', 'i', 'h', 'f', 9, 0,
  /* 803 */ 'x', 'i', 'h', 'f', 9, 0,
  /* 809 */ 'i', 'i', 'l', 'f', 9, 0,
  /* 815 */ 'l', 'l', 'i', 'l', 'f', 9, 0,
  /* 822 */ 'n', 'i', 'l', 'f', 9, 0,
  /* 828 */ 'o', 'i', 'l', 'f', 9, 0,
  /* 834 */ 'x', 'i', 'l', 'f', 9, 0,
  /* 840 */ 's', 'r', 'a', 'g', 9, 0,
  /* 846 */ 's', 'l', 'b', 'g', 9, 0,
  /* 852 */ 'r', 'i', 's', 'b', 'g', 9, 0,
  /* 859 */ 'r', 'n', 's', 'b', 'g', 9, 0,
  /* 866 */ 'r', 'o', 's', 'b', 'g', 9, 0,
  /* 873 */ 'r', 'x', 's', 'b', 'g', 9, 0,
  /* 880 */ 'a', 'l', 'c', 'g', 9, 0,
  /* 886 */ 'l', 'o', 'c', 'g', 9, 0,
  /* 892 */ 's', 't', 'o', 'c', 'g', 9, 0,
  /* 899 */ 'r', 'i', 's', 'b', 'h', 'g', 9, 0,
  /* 907 */ 'j', 'g', 9, 0,
  /* 911 */ 'a', 'l', 'g', 9, 0,
  /* 916 */ 'r', 'i', 's', 'b', 'l', 'g', 9, 0,
  /* 924 */ 'c', 'l', 'g', 9, 0,
  /* 929 */ 'd', 'l', 'g', 9, 0,
  /* 934 */ 'r', 'l', 'l', 'g', 9, 0,
  /* 940 */ 's', 'l', 'l', 'g', 9, 0,
  /* 946 */ 'm', 'l', 'g', 9, 0,
  /* 951 */ 's', 'r', 'l', 'g', 9, 0,
  /* 957 */ 's', 'l', 'g', 9, 0,
  /* 962 */ 'l', 'm', 'g', 9, 0,
  /* 967 */ 's', 't', 'm', 'g', 9, 0,
  /* 973 */ 'n', 'g', 9, 0,
  /* 977 */ 'o', 'g', 9, 0,
  /* 981 */ 'c', 's', 'g', 9, 0,
  /* 986 */ 'd', 's', 'g', 9, 0,
  /* 991 */ 'm', 's', 'g', 9, 0,
  /* 996 */ 'b', 'r', 'c', 't', 'g', 9, 0,
  /* 1003 */ 'l', 't', 'g', 9, 0,
  /* 1008 */ 's', 't', 'g', 9, 0,
  /* 1013 */ 'l', 'r', 'v', 'g', 9, 0,
  /* 1019 */ 's', 't', 'r', 'v', 'g', 9, 0,
  /* 1026 */ 'x', 'g', 9, 0,
  /* 1030 */ 'a', 'h', 9, 0,
  /* 1034 */ 'l', 'o', 'c', 'h', 9, 0,
  /* 1040 */ 's', 't', 'o', 'c', 'h', 9, 0,
  /* 1047 */ 'l', 'o', 'c', 'g', 'h', 9, 0,
  /* 1054 */ 's', 't', 'o', 'c', 'g', 'h', 9, 0,
  /* 1062 */ 'j', 'g', 'h', 9, 0,
  /* 1067 */ 'l', 'l', 'g', 'h', 9, 0,
  /* 1073 */ 'i', 'i', 'h', 'h', 9, 0,
  /* 1079 */ 'l', 'l', 'i', 'h', 'h', 9, 0,
  /* 1086 */ 'n', 'i', 'h', 'h', 9, 0,
  /* 1092 */ 'o', 'i', 'h', 'h', 9, 0,
  /* 1098 */ 't', 'm', 'h', 'h', 9, 0,
  /* 1104 */ 'c', 'i', 'j', 'h', 9, 0,
  /* 1110 */ 'c', 'g', 'i', 'j', 'h', 9, 0,
  /* 1117 */ 'c', 'r', 'j', 'h', 9, 0,
  /* 1123 */ 'c', 'g', 'r', 'j', 'h', 9, 0,
  /* 1130 */ 'l', 'o', 'c', 'l', 'h', 9, 0,
  /* 1137 */ 's', 't', 'o', 'c', 'l', 'h', 9, 0,
  /* 1145 */ 'l', 'o', 'c', 'g', 'l', 'h', 9, 0,
  /* 1153 */ 's', 't', 'o', 'c', 'g', 'l', 'h', 9, 0,
  /* 1162 */ 'j', 'g', 'l', 'h', 9, 0,
  /* 1168 */ 'i', 'i', 'l', 'h', 9, 0,
  /* 1174 */ 'l', 'l', 'i', 'l', 'h', 9, 0,
  /* 1181 */ 'n', 'i', 'l', 'h', 9, 0,
  /* 1187 */ 'o', 'i', 'l', 'h', 9, 0,
  /* 1193 */ 'c', 'i', 'j', 'l', 'h', 9, 0,
  /* 1200 */ 'c', 'g', 'i', 'j', 'l', 'h', 9, 0,
  /* 1208 */ 'c', 'r', 'j', 'l', 'h', 9, 0,
  /* 1215 */ 'c', 'g', 'r', 'j', 'l', 'h', 9, 0,
  /* 1223 */ 'l', 'l', 'h', 9, 0,
  /* 1228 */ 't', 'm', 'l', 'h', 9, 0,
  /* 1234 */ 'l', 'o', 'c', 'n', 'l', 'h', 9, 0,
  /* 1242 */ 's', 't', 'o', 'c', 'n', 'l', 'h', 9, 0,
  /* 1251 */ 'l', 'o', 'c', 'g', 'n', 'l', 'h', 9, 0,
  /* 1260 */ 's', 't', 'o', 'c', 'g', 'n', 'l', 'h', 9, 0,
  /* 1270 */ 'j', 'g', 'n', 'l', 'h', 9, 0,
  /* 1277 */ 'c', 'i', 'j', 'n', 'l', 'h', 9, 0,
  /* 1285 */ 'c', 'g', 'i', 'j', 'n', 'l', 'h', 9, 0,
  /* 1294 */ 'c', 'r', 'j', 'n', 'l', 'h', 9, 0,
  /* 1302 */ 'c', 'g', 'r', 'j', 'n', 'l', 'h', 9, 0,
  /* 1311 */ 'l', 'o', 'c', 'r', 'n', 'l', 'h', 9, 0,
  /* 1320 */ 'l', 'o', 'c', 'g', 'r', 'n', 'l', 'h', 9, 0,
  /* 1330 */ 'l', 'o', 'c', 'r', 'l', 'h', 9, 0,
  /* 1338 */ 'l', 'o', 'c', 'g', 'r', 'l', 'h', 9, 0,
  /* 1347 */ 'm', 'h', 9, 0,
  /* 1351 */ 'l', 'o', 'c', 'n', 'h', 9, 0,
  /* 1358 */ 's', 't', 'o', 'c', 'n', 'h', 9, 0,
  /* 1366 */ 'l', 'o', 'c', 'g', 'n', 'h', 9, 0,
  /* 1374 */ 's', 't', 'o', 'c', 'g', 'n', 'h', 9, 0,
  /* 1383 */ 'j', 'g', 'n', 'h', 9, 0,
  /* 1389 */ 'c', 'i', 'j', 'n', 'h', 9, 0,
  /* 1396 */ 'c', 'g', 'i', 'j', 'n', 'h', 9, 0,
  /* 1404 */ 'c', 'r', 'j', 'n', 'h', 9, 0,
  /* 1411 */ 'c', 'g', 'r', 'j', 'n', 'h', 9, 0,
  /* 1419 */ 'l', 'o', 'c', 'r', 'n', 'h', 9, 0,
  /* 1427 */ 'l', 'o', 'c', 'g', 'r', 'n', 'h', 9, 0,
  /* 1436 */ 'l', 'o', 'c', 'r', 'h', 9, 0,
  /* 1443 */ 'l', 'o', 'c', 'g', 'r', 'h', 9, 0,
  /* 1451 */ 's', 'h', 9, 0,
  /* 1455 */ 's', 't', 'h', 9, 0,
  /* 1460 */ 'a', 'f', 'i', 9, 0,
  /* 1465 */ 'c', 'f', 'i', 9, 0,
  /* 1470 */ 'a', 'g', 'f', 'i', 9, 0,
  /* 1476 */ 'c', 'g', 'f', 'i', 9, 0,
  /* 1482 */ 'a', 'l', 'g', 'f', 'i', 9, 0,
  /* 1489 */ 'c', 'l', 'g', 'f', 'i', 9, 0,
  /* 1496 */ 's', 'l', 'g', 'f', 'i', 9, 0,
  /* 1503 */ 'm', 's', 'g', 'f', 'i', 9, 0,
  /* 1510 */ 'a', 'l', 'f', 'i', 9, 0,
  /* 1516 */ 'c', 'l', 'f', 'i', 9, 0,
  /* 1522 */ 's', 'l', 'f', 'i', 9, 0,
  /* 1528 */ 'm', 's', 'f', 'i', 9, 0,
  /* 1534 */ 'a', 'h', 'i', 9, 0,
  /* 1539 */ 'c', 'h', 'i', 9, 0,
  /* 1544 */ 'a', 'g', 'h', 'i', 9, 0,
  /* 1550 */ 'c', 'g', 'h', 'i', 9, 0,
  /* 1556 */ 'l', 'g', 'h', 'i', 9, 0,
  /* 1562 */ 'm', 'g', 'h', 'i', 9, 0,
  /* 1568 */ 'm', 'v', 'g', 'h', 'i', 9, 0,
  /* 1575 */ 'm', 'v', 'h', 'h', 'i', 9, 0,
  /* 1582 */ 'l', 'h', 'i', 9, 0,
  /* 1587 */ 'm', 'h', 'i', 9, 0,
  /* 1592 */ 'm', 'v', 'h', 'i', 9, 0,
  /* 1598 */ 'c', 'l', 'i', 9, 0,
  /* 1603 */ 'n', 'i', 9, 0,
  /* 1607 */ 'o', 'i', 9, 0,
  /* 1611 */ 'a', 's', 'i', 9, 0,
  /* 1616 */ 'a', 'g', 's', 'i', 9, 0,
  /* 1622 */ 'c', 'h', 's', 'i', 9, 0,
  /* 1628 */ 'c', 'l', 'f', 'h', 's', 'i', 9, 0,
  /* 1636 */ 'c', 'g', 'h', 's', 'i', 9, 0,
  /* 1643 */ 'c', 'l', 'g', 'h', 's', 'i', 9, 0,
  /* 1651 */ 'c', 'h', 'h', 's', 'i', 9, 0,
  /* 1658 */ 'c', 'l', 'h', 'h', 's', 'i', 9, 0,
  /* 1666 */ 'm', 'v', 'i', 9, 0,
  /* 1671 */ 'x', 'i', 9, 0,
  /* 1675 */ 'c', 'i', 'j', 9, 0,
  /* 1680 */ 'c', 'g', 'i', 'j', 9, 0,
  /* 1686 */ 'c', 'r', 'j', 9, 0,
  /* 1691 */ 'c', 'g', 'r', 'j', 9, 0,
  /* 1697 */ 's', 'r', 'a', 'k', 9, 0,
  /* 1703 */ 'a', 'h', 'i', 'k', 9, 0,
  /* 1709 */ 'a', 'g', 'h', 'i', 'k', 9, 0,
  /* 1716 */ 'a', 'l', 'g', 'h', 's', 'i', 'k', 9, 0,
  /* 1725 */ 'a', 'l', 'h', 's', 'i', 'k', 9, 0,
  /* 1733 */ 's', 'l', 'l', 'k', 9, 0,
  /* 1739 */ 's', 'r', 'l', 'k', 9, 0,
  /* 1745 */ 'a', 'r', 'k', 9, 0,
  /* 1750 */ 'a', 'g', 'r', 'k', 9, 0,
  /* 1756 */ 'a', 'l', 'g', 'r', 'k', 9, 0,
  /* 1763 */ 's', 'l', 'g', 'r', 'k', 9, 0,
  /* 1770 */ 'n', 'g', 'r', 'k', 9, 0,
  /* 1776 */ 'o', 'g', 'r', 'k', 9, 0,
  /* 1782 */ 's', 'g', 'r', 'k', 9, 0,
  /* 1788 */ 'x', 'g', 'r', 'k', 9, 0,
  /* 1794 */ 'a', 'l', 'r', 'k', 9, 0,
  /* 1800 */ 's', 'l', 'r', 'k', 9, 0,
  /* 1806 */ 'n', 'r', 'k', 9, 0,
  /* 1811 */ 'o', 'r', 'k', 9, 0,
  /* 1816 */ 's', 'r', 'k', 9, 0,
  /* 1821 */ 'x', 'r', 'k', 9, 0,
  /* 1826 */ 'a', 'l', 9, 0,
  /* 1830 */ 'l', 'o', 'c', 'l', 9, 0,
  /* 1836 */ 's', 't', 'o', 'c', 'l', 9, 0,
  /* 1843 */ 'b', 'r', 'c', 'l', 9, 0,
  /* 1849 */ 'd', 'l', 9, 0,
  /* 1853 */ 'l', 'o', 'c', 'g', 'l', 9, 0,
  /* 1860 */ 's', 't', 'o', 'c', 'g', 'l', 9, 0,
  /* 1868 */ 'j', 'g', 'l', 9, 0,
  /* 1873 */ 'i', 'i', 'h', 'l', 9, 0,
  /* 1879 */ 'l', 'l', 'i', 'h', 'l', 9, 0,
  /* 1886 */ 'n', 'i', 'h', 'l', 9, 0,
  /* 1892 */ 'o', 'i', 'h', 'l', 9, 0,
  /* 1898 */ 't', 'm', 'h', 'l', 9, 0,
  /* 1904 */ 'c', 'i', 'j', 'l', 9, 0,
  /* 1910 */ 'c', 'g', 'i', 'j', 'l', 9, 0,
  /* 1917 */ 'c', 'r', 'j', 'l', 9, 0,
  /* 1923 */ 'c', 'g', 'r', 'j', 'l', 9, 0,
  /* 1930 */ 'i', 'i', 'l', 'l', 9, 0,
  /* 1936 */ 'l', 'l', 'i', 'l', 'l', 9, 0,
  /* 1943 */ 'n', 'i', 'l', 'l', 9, 0,
  /* 1949 */ 'o', 'i', 'l', 'l', 9, 0,
  /* 1955 */ 't', 'm', 'l', 'l', 9, 0,
  /* 1961 */ 'r', 'l', 'l', 9, 0,
  /* 1966 */ 's', 'l', 'l', 9, 0,
  /* 1971 */ 'l', 'o', 'c', 'n', 'l', 9, 0,
  /* 1978 */ 's', 't', 'o', 'c', 'n', 'l', 9, 0,
  /* 1986 */ 'l', 'o', 'c', 'g', 'n', 'l', 9, 0,
  /* 1994 */ 's', 't', 'o', 'c', 'g', 'n', 'l', 9, 0,
  /* 2003 */ 'j', 'g', 'n', 'l', 9, 0,
  /* 2009 */ 'c', 'i', 'j', 'n', 'l', 9, 0,
  /* 2016 */ 'c', 'g', 'i', 'j', 'n', 'l', 9, 0,
  /* 2024 */ 'c', 'r', 'j', 'n', 'l', 9, 0,
  /* 2031 */ 'c', 'g', 'r', 'j', 'n', 'l', 9, 0,
  /* 2039 */ 'l', 'o', 'c', 'r', 'n', 'l', 9, 0,
  /* 2047 */ 'l', 'o', 'c', 'g', 'r', 'n', 'l', 9, 0,
  /* 2056 */ 'l', 'a', 'r', 'l', 9, 0,
  /* 2062 */ 'l', 'o', 'c', 'r', 'l', 9, 0,
  /* 2069 */ 'p', 'f', 'd', 'r', 'l', 9, 0,
  /* 2076 */ 'c', 'g', 'f', 'r', 'l', 9, 0,
  /* 2083 */ 'c', 'l', 'g', 'f', 'r', 'l', 9, 0,
  /* 2091 */ 'l', 'l', 'g', 'f', 'r', 'l', 9, 0,
  /* 2099 */ 'l', 'o', 'c', 'g', 'r', 'l', 9, 0,
  /* 2107 */ 'c', 'l', 'g', 'r', 'l', 9, 0,
  /* 2114 */ 's', 't', 'g', 'r', 'l', 9, 0,
  /* 2121 */ 'c', 'h', 'r', 'l', 9, 0,
  /* 2127 */ 'c', 'g', 'h', 'r', 'l', 9, 0,
  /* 2134 */ 'c', 'l', 'g', 'h', 'r', 'l', 9, 0,
  /* 2142 */ 'l', 'l', 'g', 'h', 'r', 'l', 9, 0,
  /* 2150 */ 'c', 'l', 'h', 'r', 'l', 9, 0,
  /* 2157 */ 'l', 'l', 'h', 'r', 'l', 9, 0,
  /* 2164 */ 's', 't', 'h', 'r', 'l', 9, 0,
  /* 2171 */ 'c', 'l', 'r', 'l', 9, 0,
  /* 2177 */ 's', 'r', 'l', 9, 0,
  /* 2182 */ 's', 't', 'r', 'l', 9, 0,
  /* 2188 */ 'b', 'r', 'a', 's', 'l', 9, 0,
  /* 2195 */ 'i', 'p', 'm', 9, 0,
  /* 2200 */ 'n', 9, 0,
  /* 2203 */ 'l', 'o', 'c', 'o', 9, 0,
  /* 2209 */ 's', 't', 'o', 'c', 'o', 9, 0,
  /* 2216 */ 'l', 'o', 'c', 'g', 'o', 9, 0,
  /* 2223 */ 's', 't', 'o', 'c', 'g', 'o', 9, 0,
  /* 2231 */ 'j', 'g', 'o', 9, 0,
  /* 2236 */ 'j', 'o', 9, 0,
  /* 2240 */ 'l', 'o', 'c', 'n', 'o', 9, 0,
  /* 2247 */ 's', 't', 'o', 'c', 'n', 'o', 9, 0,
  /* 2255 */ 'l', 'o', 'c', 'g', 'n', 'o', 9, 0,
  /* 2263 */ 's', 't', 'o', 'c', 'g', 'n', 'o', 9, 0,
  /* 2272 */ 'j', 'g', 'n', 'o', 9, 0,
  /* 2278 */ 'j', 'n', 'o', 9, 0,
  /* 2283 */ 'l', 'o', 'c', 'r', 'n', 'o', 9, 0,
  /* 2291 */ 'l', 'o', 'c', 'g', 'r', 'n', 'o', 9, 0,
  /* 2300 */ 'l', 'o', 'c', 'r', 'o', 9, 0,
  /* 2307 */ 'l', 'o', 'c', 'g', 'r', 'o', 9, 0,
  /* 2315 */ 'e', 'a', 'r', 9, 0,
  /* 2320 */ 'm', 'a', 'd', 'b', 'r', 9, 0,
  /* 2327 */ 'l', 'c', 'd', 'b', 'r', 9, 0,
  /* 2334 */ 'd', 'd', 'b', 'r', 9, 0,
  /* 2340 */ 'l', 'e', 'd', 'b', 'r', 9, 0,
  /* 2347 */ 'c', 'f', 'd', 'b', 'r', 9, 0,
  /* 2354 */ 'c', 'g', 'd', 'b', 'r', 9, 0,
  /* 2361 */ 'f', 'i', 'd', 'b', 'r', 9, 0,
  /* 2368 */ 'm', 'd', 'b', 'r', 9, 0,
  /* 2374 */ 'l', 'n', 'd', 'b', 'r', 9, 0,
  /* 2381 */ 'l', 'p', 'd', 'b', 'r', 9, 0,
  /* 2388 */ 's', 'q', 'd', 'b', 'r', 9, 0,
  /* 2395 */ 'm', 's', 'd', 'b', 'r', 9, 0,
  /* 2402 */ 'l', 't', 'd', 'b', 'r', 9, 0,
  /* 2409 */ 'l', 'x', 'd', 'b', 'r', 9, 0,
  /* 2416 */ 'm', 'x', 'd', 'b', 'r', 9, 0,
  /* 2423 */ 'm', 'a', 'e', 'b', 'r', 9, 0,
  /* 2430 */ 'l', 'c', 'e', 'b', 'r', 9, 0,
  /* 2437 */ 'l', 'd', 'e', 'b', 'r', 9, 0,
  /* 2444 */ 'm', 'd', 'e', 'b', 'r', 9, 0,
  /* 2451 */ 'm', 'e', 'e', 'b', 'r', 9, 0,
  /* 2458 */ 'c', 'f', 'e', 'b', 'r', 9, 0,
  /* 2465 */ 'c', 'g', 'e', 'b', 'r', 9, 0,
  /* 2472 */ 'f', 'i', 'e', 'b', 'r', 9, 0,
  /* 2479 */ 'l', 'n', 'e', 'b', 'r', 9, 0,
  /* 2486 */ 'l', 'p', 'e', 'b', 'r', 9, 0,
  /* 2493 */ 's', 'q', 'e', 'b', 'r', 9, 0,
  /* 2500 */ 'm', 's', 'e', 'b', 'r', 9, 0,
  /* 2507 */ 'l', 't', 'e', 'b', 'r', 9, 0,
  /* 2514 */ 'l', 'x', 'e', 'b', 'r', 9, 0,
  /* 2521 */ 'c', 'd', 'f', 'b', 'r', 9, 0,
  /* 2528 */ 'c', 'e', 'f', 'b', 'r', 9, 0,
  /* 2535 */ 'c', 'x', 'f', 'b', 'r', 9, 0,
  /* 2542 */ 'c', 'd', 'g', 'b', 'r', 9, 0,
  /* 2549 */ 'c', 'e', 'g', 'b', 'r', 9, 0,
  /* 2556 */ 'l', 'g', 'b', 'r', 9, 0,
  /* 2562 */ 'c', 'x', 'g', 'b', 'r', 9, 0,
  /* 2569 */ 's', 'l', 'b', 'r', 9, 0,
  /* 2575 */ 'a', 'x', 'b', 'r', 9, 0,
  /* 2581 */ 'l', 'c', 'x', 'b', 'r', 9, 0,
  /* 2588 */ 'l', 'd', 'x', 'b', 'r', 9, 0,
  /* 2595 */ 'l', 'e', 'x', 'b', 'r', 9, 0,
  /* 2602 */ 'c', 'f', 'x', 'b', 'r', 9, 0,
  /* 2609 */ 'c', 'g', 'x', 'b', 'r', 9, 0,
  /* 2616 */ 'f', 'i', 'x', 'b', 'r', 9, 0,
  /* 2623 */ 'm', 'x', 'b', 'r', 9, 0,
  /* 2629 */ 'l', 'n', 'x', 'b', 'r', 9, 0,
  /* 2636 */ 'l', 'p', 'x', 'b', 'r', 9, 0,
  /* 2643 */ 's', 'q', 'x', 'b', 'r', 9, 0,
  /* 2650 */ 's', 'x', 'b', 'r', 9, 0,
  /* 2656 */ 'l', 't', 'x', 'b', 'r', 9, 0,
  /* 2663 */ 'l', 'l', 'g', 'c', 'r', 9, 0,
  /* 2670 */ 'a', 'l', 'c', 'r', 9, 0,
  /* 2676 */ 'l', 'l', 'c', 'r', 9, 0,
  /* 2682 */ 'l', 'o', 'c', 'r', 9, 0,
  /* 2688 */ 'l', 'g', 'd', 'r', 9, 0,
  /* 2694 */ 'l', 'd', 'r', 9, 0,
  /* 2699 */ 'c', 'p', 's', 'd', 'r', 9, 0,
  /* 2706 */ 'l', 'z', 'd', 'r', 9, 0,
  /* 2712 */ 'l', 'e', 'r', 9, 0,
  /* 2717 */ 'l', 'z', 'e', 'r', 9, 0,
  /* 2723 */ 'a', 'g', 'f', 'r', 9, 0,
  /* 2729 */ 'l', 'c', 'g', 'f', 'r', 9, 0,
  /* 2736 */ 'a', 'l', 'g', 'f', 'r', 9, 0,
  /* 2743 */ 'c', 'l', 'g', 'f', 'r', 9, 0,
  /* 2750 */ 'l', 'l', 'g', 'f', 'r', 9, 0,
  /* 2757 */ 's', 'l', 'g', 'f', 'r', 9, 0,
  /* 2764 */ 'l', 'n', 'g', 'f', 'r', 9, 0,
  /* 2771 */ 'l', 'p', 'g', 'f', 'r', 9, 0,
  /* 2778 */ 'd', 's', 'g', 'f', 'r', 9, 0,
  /* 2785 */ 'm', 's', 'g', 'f', 'r', 9, 0,
  /* 2792 */ 'l', 't', 'g', 'f', 'r', 9, 0,
  /* 2799 */ 'a', 'g', 'r', 9, 0,
  /* 2804 */ 's', 'l', 'b', 'g', 'r', 9, 0,
  /* 2811 */ 'a', 'l', 'c', 'g', 'r', 9, 0,
  /* 2818 */ 'l', 'o', 'c', 'g', 'r', 9, 0,
  /* 2825 */ 'l', 'd', 'g', 'r', 9, 0,
  /* 2831 */ 'a', 'l', 'g', 'r', 9, 0,
  /* 2837 */ 'c', 'l', 'g', 'r', 9, 0,
  /* 2843 */ 'd', 'l', 'g', 'r', 9, 0,
  /* 2849 */ 'm', 'l', 'g', 'r', 9, 0,
  /* 2855 */ 's', 'l', 'g', 'r', 9, 0,
  /* 2861 */ 'l', 'n', 'g', 'r', 9, 0,
  /* 2867 */ 'f', 'l', 'o', 'g', 'r', 9, 0,
  /* 2874 */ 'l', 'p', 'g', 'r', 9, 0,
  /* 2880 */ 'd', 's', 'g', 'r', 9, 0,
  /* 2886 */ 'm', 's', 'g', 'r', 9, 0,
  /* 2892 */ 'l', 't', 'g', 'r', 9, 0,
  /* 2898 */ 'l', 'r', 'v', 'g', 'r', 9, 0,
  /* 2905 */ 'x', 'g', 'r', 9, 0,
  /* 2910 */ 'l', 'l', 'g', 'h', 'r', 9, 0,
  /* 2917 */ 'l', 'l', 'h', 'r', 9, 0,
  /* 2923 */ 'a', 'l', 'r', 9, 0,
  /* 2928 */ 'c', 'l', 'r', 9, 0,
  /* 2933 */ 'd', 'l', 'r', 9, 0,
  /* 2938 */ 's', 'l', 'r', 9, 0,
  /* 2943 */ 'l', 'n', 'r', 9, 0,
  /* 2948 */ 'o', 'r', 9, 0,
  /* 2952 */ 'l', 'p', 'r', 9, 0,
  /* 2957 */ 'b', 'a', 's', 'r', 9, 0,
  /* 2963 */ 'm', 's', 'r', 9, 0,
  /* 2968 */ 'l', 't', 'r', 9, 0,
  /* 2973 */ 'l', 'r', 'v', 'r', 9, 0,
  /* 2979 */ 'l', 'x', 'r', 9, 0,
  /* 2984 */ 'l', 'z', 'x', 'r', 9, 0,
  /* 2990 */ 'b', 'r', 'a', 's', 9, 0,
  /* 2996 */ 'c', 's', 9, 0,
  /* 3000 */ 'm', 's', 9, 0,
  /* 3004 */ 'b', 'r', 'c', 't', 9, 0,
  /* 3010 */ 'l', 't', 9, 0,
  /* 3014 */ 'c', 'l', 's', 't', 9, 0,
  /* 3020 */ 's', 'r', 's', 't', 9, 0,
  /* 3026 */ 'm', 'v', 's', 't', 9, 0,
  /* 3032 */ 'l', 'r', 'v', 9, 0,
  /* 3037 */ 's', 't', 'r', 'v', 9, 0,
  /* 3043 */ 'x', 9, 0,
  /* 3046 */ 'l', 'a', 'y', 9, 0,
  /* 3051 */ 'i', 'c', 'y', 9, 0,
  /* 3056 */ 's', 't', 'c', 'y', 9, 0,
  /* 3062 */ 'l', 'd', 'y', 9, 0,
  /* 3067 */ 's', 't', 'd', 'y', 9, 0,
  /* 3073 */ 'l', 'e', 'y', 9, 0,
  /* 3078 */ 's', 't', 'e', 'y', 9, 0,
  /* 3084 */ 'a', 'h', 'y', 9, 0,
  /* 3089 */ 'c', 'h', 'y', 9, 0,
  /* 3094 */ 'l', 'h', 'y', 9, 0,
  /* 3099 */ 'm', 'h', 'y', 9, 0,
  /* 3104 */ 's', 'h', 'y', 9, 0,
  /* 3109 */ 's', 't', 'h', 'y', 9, 0,
  /* 3115 */ 'c', 'l', 'i', 'y', 9, 0,
  /* 3121 */ 'n', 'i', 'y', 9, 0,
  /* 3126 */ 'o', 'i', 'y', 9, 0,
  /* 3131 */ 'm', 'v', 'i', 'y', 9, 0,
  /* 3137 */ 'x', 'i', 'y', 9, 0,
  /* 3142 */ 'a', 'l', 'y', 9, 0,
  /* 3147 */ 'c', 'l', 'y', 9, 0,
  /* 3152 */ 's', 'l', 'y', 9, 0,
  /* 3157 */ 'n', 'y', 9, 0,
  /* 3161 */ 'o', 'y', 9, 0,
  /* 3165 */ 'c', 's', 'y', 9, 0,
  /* 3170 */ 'm', 's', 'y', 9, 0,
  /* 3175 */ 's', 't', 'y', 9, 0,
  /* 3180 */ 'x', 'y', 9, 0,
  /* 3184 */ 'b', 'r', 'a', 's', 'l', 9, '%', 'r', '1', '4', ',', 32, 0,
  /* 3197 */ 'b', 'a', 's', 'r', 9, '%', 'r', '1', '4', ',', 32, 0,
  /* 3209 */ 'b', 'r', 'a', 's', 9, '%', 'r', '1', '4', ',', 32, 0,
  /* 3221 */ 'b', 'r', 9, '%', 'r', '1', 0,
  /* 3228 */ 'b', 'r', 9, '%', 'r', '1', '4', 0,
  /* 3236 */ 'L', 'I', 'F', 'E', 'T', 'I', 'M', 'E', '_', 'E', 'N', 'D', 0,
  /* 3249 */ 'B', 'U', 'N', 'D', 'L', 'E', 0,
  /* 3256 */ 'D', 'B', 'G', '_', 'V', 'A', 'L', 'U', 'E', 0,
  /* 3266 */ 'L', 'I', 'F', 'E', 'T', 'I', 'M', 'E', '_', 'S', 'T', 'A', 'R', 'T', 0,
  /* 3281 */ 'l', 'o', 'c', 0,
  /* 3285 */ 's', 't', 'o', 'c', 0,
  /* 3290 */ 'l', 'o', 'c', 'g', 0,
  /* 3295 */ 's', 't', 'o', 'c', 'g', 0,
  /* 3301 */ 'j', 'g', 0,
  /* 3304 */ 'c', 'i', 'j', 0,
  /* 3308 */ 'c', 'g', 'i', 'j', 0,
  /* 3313 */ 'c', 'r', 'j', 0,
  /* 3317 */ 'c', 'g', 'r', 'j', 0,
  /* 3322 */ 'l', 'o', 'c', 'r', 0,
  /* 3327 */ 'l', 'o', 'c', 'g', 'r', 0,
  };

  O << "\t";

  // Emit the opcode for the instruction.
  uint32_t Bits = OpInfo[MI->getOpcode()];
  assert(Bits != 0 && "Cannot print this instruction.");
  O << AsmStrs+(Bits & 4095)-1;


  // Fragment 0 encoded into 4 bits for 12 unique commands.
  switch ((Bits >> 12) & 15) {
  default:   // unreachable.
  case 0:
    // DBG_VALUE, BUNDLE, LIFETIME_START, LIFETIME_END, CallBR, RET
    return;
    break;
  case 1:
    // A, ADB, ADBR, AEB, AEBR, AFI, AG, AGF, AGFI, AGFR, AGHI, AGHIK, AGR, A...
    printOperand(MI, 0, O); 
    break;
  case 2:
    // AGSI, ASI, CGHSI, CHHSI, CHSI, CLFHSI, CLGHSI, CLHHSI, CLI, CLIY, MVGH...
    printBDAddrOperand(MI, 0, O); 
    O << ", "; 
    break;
  case 3:
    // AsmBRC, AsmBRCL, PFD, PFDRL
    printU4ImmOperand(MI, 0, O); 
    O << ", "; 
    break;
  case 4:
    // AsmEJ, AsmEJG, AsmHEJ, AsmHEJG, AsmHJ, AsmHJG, AsmLEJ, AsmLEJG, AsmLHJ...
    printPCRelOperand(MI, 0, O); 
    return;
    break;
  case 5:
    // BRAS, BRASL, CallJG
    printCallOperand(MI, 0, O); 
    return;
    break;
  case 6:
    // BRC, BRCL
    printCond4Operand(MI, 1, O); 
    O << "\t"; 
    printPCRelOperand(MI, 2, O); 
    return;
    break;
  case 7:
    // CGIJ, CGRJ, CIJ, CRJ
    printCond4Operand(MI, 2, O); 
    O << "\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    break;
  case 8:
    // CLC, MVC
    printBDLAddrOperand(MI, 0, O); 
    O << ", "; 
    printBDAddrOperand(MI, 3, O); 
    return;
    break;
  case 9:
    // LOC, LOCG
    printCond4Operand(MI, 5, O); 
    O << "\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printBDAddrOperand(MI, 2, O); 
    return;
    break;
  case 10:
    // LOCGR, LOCR
    printCond4Operand(MI, 3, O); 
    O << "\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 11:
    // STOC, STOC32, STOCG
    printCond4Operand(MI, 4, O); 
    O << "\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printBDAddrOperand(MI, 1, O); 
    return;
    break;
  }


  // Fragment 1 encoded into 4 bits for 10 unique commands.
  switch ((Bits >> 16) & 15) {
  default:   // unreachable.
  case 0:
    // A, ADB, ADBR, AEB, AEBR, AFI, AG, AGF, AGFI, AGFR, AGHI, AGHIK, AGR, A...
    O << ", "; 
    break;
  case 1:
    // AGSI, ASI
    printS8ImmOperand(MI, 2, O); 
    return;
    break;
  case 2:
    // AsmBRC, AsmBRCL, PFDRL
    printPCRelOperand(MI, 1, O); 
    return;
    break;
  case 3:
    // BASR, BR, IPM, LZDR, LZER, LZXR
    return;
    break;
  case 4:
    // CGHSI, CHHSI, CHSI, MVGHI, MVHHI, MVHI
    printS16ImmOperand(MI, 2, O); 
    return;
    break;
  case 5:
    // CGIJ, CIJ
    printS8ImmOperand(MI, 1, O); 
    O << ", "; 
    printPCRelOperand(MI, 3, O); 
    return;
    break;
  case 6:
    // CGRJ, CRJ
    printOperand(MI, 1, O); 
    O << ", "; 
    printPCRelOperand(MI, 3, O); 
    return;
    break;
  case 7:
    // CLFHSI, CLGHSI, CLHHSI
    printU16ImmOperand(MI, 2, O); 
    return;
    break;
  case 8:
    // CLI, CLIY, MVI, MVIY, NI, NIY, OI, OIY, XI, XIY
    printU8ImmOperand(MI, 2, O); 
    return;
    break;
  case 9:
    // PFD
    printBDXAddrOperand(MI, 1, O); 
    return;
    break;
  }


  // Fragment 2 encoded into 5 bits for 19 unique commands.
  switch ((Bits >> 20) & 31) {
  default:   // unreachable.
  case 0:
    // A, ADB, AEB, AG, AGF, AH, AHY, AL, ALC, ALCG, ALG, ALGF, ALY, AY, DDB,...
    printBDXAddrOperand(MI, 2, O); 
    return;
    break;
  case 1:
    // ADBR, AEBR, AGFR, AGR, ALCGR, ALCR, ALGFR, ALGR, ALR, AR, AXBR, AsmELO...
    printOperand(MI, 2, O); 
    break;
  case 2:
    // AFI, AGFI, MSFI, MSGFI
    printS32ImmOperand(MI, 2, O); 
    return;
    break;
  case 3:
    // AGHI, AHI, MGHI, MHI
    printS16ImmOperand(MI, 2, O); 
    return;
    break;
  case 4:
    // AGHIK, AGRK, AHIK, ALGHSIK, ALGRK, ALHSIK, ALRK, ARK, AsmBASR, AsmCGRJ...
    printOperand(MI, 1, O); 
    break;
  case 5:
    // ALFI, ALGFI, IIHF, IILF, NIHF, NILF, NILF32, OIHF, OILF, OILF32, SLFI,...
    printU32ImmOperand(MI, 2, O); 
    return;
    break;
  case 6:
    // AsmBRAS, AsmBRASL, CGFRL, CGHRL, CGRL, CHRL, CLGFRL, CLGHRL, CLGRL, CL...
    printPCRelOperand(MI, 1, O); 
    return;
    break;
  case 7:
    // AsmCGIJ, AsmCIJ, AsmJEAltCGI, AsmJEAltCI, AsmJECGI, AsmJECI, AsmJHAltC...
    printS8ImmOperand(MI, 1, O); 
    O << ", "; 
    break;
  case 8:
    // AsmELOC, AsmELOCG, AsmHELOC, AsmHELOCG, AsmHLOC, AsmHLOCG, AsmLELOC, A...
    printBDAddrOperand(MI, 2, O); 
    break;
  case 9:
    // AsmESTOC, AsmESTOCG, AsmHESTOC, AsmHESTOCG, AsmHSTOC, AsmHSTOCG, AsmLE...
    printBDAddrOperand(MI, 1, O); 
    break;
  case 10:
    // BRCT, BRCTG
    printPCRelOperand(MI, 2, O); 
    return;
    break;
  case 11:
    // C, CDB, CEB, CG, CGF, CGH, CH, CHY, CL, CLG, CLGF, CLY, CY, L, LA, LAY...
    printBDXAddrOperand(MI, 1, O); 
    return;
    break;
  case 12:
    // CFDBR, CFEBR, CFXBR, CGDBR, CGEBR, CGXBR, FIDBR, FIDBRA, FIEBR, FIEBRA...
    printU4ImmOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 13:
    // CFI, CGFI, LGFI
    printS32ImmOperand(MI, 1, O); 
    return;
    break;
  case 14:
    // CGHI, CHI, LGHI, LHI
    printS16ImmOperand(MI, 1, O); 
    return;
    break;
  case 15:
    // CLFI, CLGFI, IILF32, LLIHF, LLILF
    printU32ImmOperand(MI, 1, O); 
    return;
    break;
  case 16:
    // EAR
    printAccessRegOperand(MI, 1, O); 
    return;
    break;
  case 17:
    // IIHH, IIHL, IILH, IILH32, IILL, IILL32, NIHH, NIHL, NILH, NILH32, NILL...
    printU16ImmOperand(MI, 2, O); 
    return;
    break;
  case 18:
    // LLIHH, LLIHL, LLILH, LLILL, TMHH, TMHL, TMLH, TMLH32, TMLL, TMLL32
    printU16ImmOperand(MI, 1, O); 
    return;
    break;
  }


  // Fragment 3 encoded into 2 bits for 4 unique commands.
  switch ((Bits >> 25) & 3) {
  default:   // unreachable.
  case 0:
    // ADBR, AEBR, AGFR, AGR, ALCGR, ALCR, ALGFR, ALGR, ALR, AR, AXBR, AsmBAS...
    return;
    break;
  case 1:
    // AGHIK, AGRK, AHIK, ALGHSIK, ALGRK, ALHSIK, ALRK, ARK, AsmCGRJ, AsmCRJ,...
    O << ", "; 
    break;
  case 2:
    // AsmCGIJ, AsmCIJ
    printU4ImmOperand(MI, 2, O); 
    O << ", "; 
    printPCRelOperand(MI, 3, O); 
    return;
    break;
  case 3:
    // AsmJEAltCGI, AsmJEAltCI, AsmJECGI, AsmJECI, AsmJHAltCGI, AsmJHAltCI, A...
    printPCRelOperand(MI, 2, O); 
    return;
    break;
  }


  // Fragment 4 encoded into 4 bits for 11 unique commands.
  switch ((Bits >> 27) & 15) {
  default:   // unreachable.
  case 0:
    // AGHIK, AHIK, ALGHSIK, ALHSIK
    printS16ImmOperand(MI, 2, O); 
    return;
    break;
  case 1:
    // AGRK, ALGRK, ALRK, ARK, CPSDRdd, CPSDRds, CPSDRsd, CPSDRss, NGRK, NRK,...
    printOperand(MI, 2, O); 
    return;
    break;
  case 2:
    // AsmCGRJ, AsmCRJ
    printU4ImmOperand(MI, 2, O); 
    O << ", "; 
    printPCRelOperand(MI, 3, O); 
    return;
    break;
  case 3:
    // AsmJEAltCGR, AsmJEAltCR, AsmJECGR, AsmJECR, AsmJHAltCGR, AsmJHAltCR, A...
    printPCRelOperand(MI, 2, O); 
    return;
    break;
  case 4:
    // AsmLOC, AsmLOCG
    printU4ImmOperand(MI, 4, O); 
    return;
    break;
  case 5:
    // AsmLOCGR, AsmLOCR, AsmSTOC, AsmSTOCG, FIDBRA, FIEBRA, FIXBRA
    printU4ImmOperand(MI, 3, O); 
    return;
    break;
  case 6:
    // CS, CSG, CSY
    printBDAddrOperand(MI, 3, O); 
    return;
    break;
  case 7:
    // LMG, RLL, RLLG, SLLG, SLLK, SRAG, SRAK, SRLG, SRLK, STMG
    printBDAddrOperand(MI, 2, O); 
    return;
    break;
  case 8:
    // MADB, MAEB, MSDB, MSEB
    printBDXAddrOperand(MI, 3, O); 
    return;
    break;
  case 9:
    // MADBR, MAEBR, MSDBR, MSEBR
    printOperand(MI, 3, O); 
    return;
    break;
  case 10:
    // RISBG, RISBG32, RISBHG, RISBLG, RISBLG32, RNSBG, ROSBG, RXSBG
    printU8ImmOperand(MI, 3, O); 
    O << ", "; 
    printU8ImmOperand(MI, 4, O); 
    O << ", "; 
    printU6ImmOperand(MI, 5, O); 
    return;
    break;
  }

}


/// getRegisterName - This method is automatically generated by tblgen
/// from the register set description.  This returns the assembler name
/// for the specified register.
const char *SystemZInstPrinter::getRegisterName(unsigned RegNo) {
  assert(RegNo && RegNo < 82 && "Invalid register number!");

  static const char AsmStrs[] = {
  /* 0 */ 'f', '1', '0', 0,
  /* 4 */ 'r', '1', '0', 0,
  /* 8 */ 'f', '0', 0,
  /* 11 */ 'r', '0', 0,
  /* 14 */ 'f', '1', '1', 0,
  /* 18 */ 'r', '1', '1', 0,
  /* 22 */ 'f', '1', 0,
  /* 25 */ 'r', '1', 0,
  /* 28 */ 'f', '1', '2', 0,
  /* 32 */ 'r', '1', '2', 0,
  /* 36 */ 'f', '2', 0,
  /* 39 */ 'r', '2', 0,
  /* 42 */ 'f', '1', '3', 0,
  /* 46 */ 'r', '1', '3', 0,
  /* 50 */ 'f', '3', 0,
  /* 53 */ 'r', '3', 0,
  /* 56 */ 'f', '1', '4', 0,
  /* 60 */ 'r', '1', '4', 0,
  /* 64 */ 'f', '4', 0,
  /* 67 */ 'r', '4', 0,
  /* 70 */ 'f', '1', '5', 0,
  /* 74 */ 'r', '1', '5', 0,
  /* 78 */ 'f', '5', 0,
  /* 81 */ 'r', '5', 0,
  /* 84 */ 'f', '6', 0,
  /* 87 */ 'r', '6', 0,
  /* 90 */ 'f', '7', 0,
  /* 93 */ 'r', '7', 0,
  /* 96 */ 'f', '8', 0,
  /* 99 */ 'r', '8', 0,
  /* 102 */ 'f', '9', 0,
  /* 105 */ 'r', '9', 0,
  /* 108 */ 'c', 'c', 0,
  };

  static const uint32_t RegAsmOffset[] = {
    108, 8, 22, 36, 50, 64, 78, 84, 90, 96, 102, 0, 14, 28, 
    42, 56, 70, 8, 22, 64, 78, 96, 102, 28, 42, 8, 22, 36, 
    50, 64, 78, 84, 90, 96, 102, 0, 14, 28, 42, 56, 70, 11, 
    25, 39, 53, 67, 81, 87, 93, 99, 105, 4, 18, 32, 46, 60, 
    74, 11, 39, 67, 87, 99, 4, 32, 60, 11, 25, 39, 53, 67, 
    81, 87, 93, 99, 105, 4, 18, 32, 46, 60, 74, 
  };

  assert (*(AsmStrs+RegAsmOffset[RegNo-1]) &&
          "Invalid alt name index for register!");
  return AsmStrs+RegAsmOffset[RegNo-1];
}

#ifdef PRINT_ALIAS_INSTR
#undef PRINT_ALIAS_INSTR

bool SystemZInstPrinter::printAliasInstr(const MCInst *MI, raw_ostream &OS) {
  return false;
}

#endif // PRINT_ALIAS_INSTR
