.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.14
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "LibXML 3"
.TH LibXML 3 "2007-04-16" "perl v5.8.5" "User Contributed Perl Documentation"
.SH "NAME"
XML::LibXML \- Perl Binding for libxml2
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 5
\&  $Version_String = XML::LibXML::LIBXML_DOTTED_VERSION;
\&  $Version_ID = XML::LibXML::LIBXML_VERSION;
\&  $DLL_Version = XML::LibXML::LIBXML_RUNTIME_VERSION;
\&  $libxmlnode = XML::LibXML->import_GDOME( $node, $deep );
\&  $gdomenode = XML::LibXML->export_GDOME( $node, $deep );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&  use XML::LibXML;
\&  my $parser = XML::LibXML->new();
.Ve
.PP
.Vb 3
\&  my $doc = $parser->parse_string(<<'EOT');
\&  <some-xml/>
\&  EOT
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module is an interface to the gnome libxml2 \s-1DOM\s0 and \s-1SAX\s0 parser and the \s-1DOM\s0
tree. It also provides an XML::XPath\-like \fIfindnodes()\fR interface, providing
access to the XPath \s-1API\s0 in libxml2. The module is split into several packages
which are not described in this section.
.PP
For further information, please check the following documentation:
.IP "\fBXML::LibXML::Parser\fR" 4
.IX Item "XML::LibXML::Parser"
Parsing \s-1XML\s0 Files with XML::LibXML
.IP "\fBXML::LibXML::DOM\fR" 4
.IX Item "XML::LibXML::DOM"
XML::LibXML \s-1DOM\s0 Implementation
.IP "\fBXML::LibXML::SAX\fR" 4
.IX Item "XML::LibXML::SAX"
XML::LibXML direct \s-1SAX\s0 parser
.IP "\fBXML::LibXML::Reader\fR" 4
.IX Item "XML::LibXML::Reader"
Reading \s-1XML\s0 with a pull-parser
.IP "\fBXML::LibXML::Document\fR" 4
.IX Item "XML::LibXML::Document"
XML::LibXML \s-1DOM\s0 Document Class
.IP "\fBXML::LibXML::Node\fR" 4
.IX Item "XML::LibXML::Node"
Abstract Base Class of XML::LibXML Nodes
.IP "\fBXML::LibXML::Element\fR" 4
.IX Item "XML::LibXML::Element"
XML::LibXML Class for Element Nodes
.IP "\fBXML::LibXML::Text\fR" 4
.IX Item "XML::LibXML::Text"
XML::LibXML Class for Text Nodes
.IP "\fBXML::LibXML::Comment\fR" 4
.IX Item "XML::LibXML::Comment"
XML::LibXML Comment Nodes
.IP "\fBXML::LibXML::CDATASection\fR" 4
.IX Item "XML::LibXML::CDATASection"
XML::LibXML Class for \s-1CDATA\s0 Sections
.IP "\fBXML::LibXML::Attr\fR" 4
.IX Item "XML::LibXML::Attr"
XML::LibXML Attribute Class
.IP "\fBXML::LibXML::DocumentFragment\fR" 4
.IX Item "XML::LibXML::DocumentFragment"
XML::LibXML's \s-1DOM\s0 L2 Document Fragment Implementation
.IP "\fBXML::LibXML::Namespace\fR" 4
.IX Item "XML::LibXML::Namespace"
XML::LibXML Namespace Implementation
.IP "\fBXML::LibXML::PI\fR" 4
.IX Item "XML::LibXML::PI"
XML::LibXML Processing Instructions
.IP "\fBXML::LibXML::Dtd\fR" 4
.IX Item "XML::LibXML::Dtd"
XML::LibXML \s-1DTD\s0 Support
.IP "\fBXML::LibXML::RelaxNG\fR" 4
.IX Item "XML::LibXML::RelaxNG"
XML::LibXML frontend for RelaxNG schema validation
.IP "\fBXML::LibXML::Schema\fR" 4
.IX Item "XML::LibXML::Schema"
XML::LibXML frontend for W3C Schema schema validation
.IP "\fBXML::LibXML::XPathContext\fR" 4
.IX Item "XML::LibXML::XPathContext"
\&\s-1API\s0 for evaluating XPath expressions
.IP "\fBXML::LibXMLguts\fR" 4
.IX Item "XML::LibXMLguts"
Internal of the Perl Layer for libxml2 (not done yet)
.SH "VERSION INFORMATION"
.IX Header "VERSION INFORMATION"
Sometimes it is useful to figure out, for which version XML::LibXML was
compiled for. In most cases this is for debugging or to check if a given
installation meets all functionality for the package. The functions
XML::LibXML::LIBXML_DOTTED_VERSION and XML::LibXML::LIBXML_VERSION provide this
version information. Both functions simply pass through the values of the
similar named macros of libxml2. Similarly, XML::LibXML::LIBXML_RUNTIME_VERSION
returns the version of the (usually dynamically) linked libxml2.
.IP "\fBXML::LibXML::LIBXML_DOTTED_VERSION\fR" 4
.IX Item "XML::LibXML::LIBXML_DOTTED_VERSION"
.Vb 1
\&  $Version_String = XML::LibXML::LIBXML_DOTTED_VERSION;
.Ve
.Sp
Returns the version string of the libxml2 version XML::LibXML was compiled for.
This will be \*(L"2.6.2\*(R" for \*(L"libxml2 2.6.2\*(R".
.IP "\fBXML::LibXML::LIBXML_VERSION\fR" 4
.IX Item "XML::LibXML::LIBXML_VERSION"
.Vb 1
\&  $Version_ID = XML::LibXML::LIBXML_VERSION;
.Ve
.Sp
Returns the version id of the libxml2 version XML::LibXML was compiled for.
This will be \*(L"20602\*(R" for \*(L"libxml2 2.6.2\*(R". Don't mix this version id with
\&\f(CW$XML::LibXML::VERSION\fR. The latter contains the version of XML::LibXML itself
while the first contains the version of libxml2 XML::LibXML was compiled for.
.IP "\fBXML::LibXML::LIBXML_RUNTIME_VERSION\fR" 4
.IX Item "XML::LibXML::LIBXML_RUNTIME_VERSION"
.Vb 1
\&  $DLL_Version = XML::LibXML::LIBXML_RUNTIME_VERSION;
.Ve
.Sp
Returns a version string of the libxml2 which is (usually dynamically) linked
by XML::LibXML. This will be \*(L"20602\*(R" for libxml2 released as \*(L"2.6.2\*(R" and
something like \*(L"20602\-CVS2032\*(R" for a \s-1CVS\s0 build of libxml2.
.Sp
XML::LibXML issues a warning if the version of libxml2 dynamically linked to it
is less than the version of libxml2 which it was compiled against.
.SH "RELATED MODULES"
.IX Header "RELATED MODULES"
The modules described in this section are not part of the XML::LibXML package
itself. As they support some additional features, they are mentioned here.
.IP "\fBXML::LibXSLT\fR" 4
.IX Item "XML::LibXSLT"
\&\s-1XSLT\s0 Processor using libxslt and XML::LibXML
.IP "\fBXML::LibXML::Common\fR" 4
.IX Item "XML::LibXML::Common"
Common functions for XML::LibXML related Classes
.IP "\fBXML::LibXML::Iterator\fR" 4
.IX Item "XML::LibXML::Iterator"
XML::LibXML Implementation of the \s-1DOM\s0 Traversal Specification
.SH "XML::LIBXML AND XML::GDOME"
.IX Header "XML::LIBXML AND XML::GDOME"
Note: \s-1THE\s0 \s-1FUNCTIONS\s0 \s-1DESCRIBED\s0 \s-1HERE\s0 \s-1ARE\s0 \s-1STILL\s0 \s-1EXPERIMENTAL\s0
.PP
Although both modules make use of libxml2's \s-1XML\s0 capabilities, the \s-1DOM\s0
implementation of both modules are not compatible. But still it is possible to
exchange nodes from one \s-1DOM\s0 to the other. The concept of this exchange is
pretty similar to the function \fIcloneNode()\fR: The particular node is copied on
the low-level to the opposite \s-1DOM\s0 implementation.
.PP
Since the \s-1DOM\s0 implementations cannot coexist within one document, one is forced
to copy each node that should be used. Because you are always keeping two nodes
this may cause quite an impact on a machines memory usage.
.PP
XML::LibXML provides two functions to export or import \s-1GDOME\s0 nodes:
\&\fIimport_GDOME()\fR and \fIexport_GDOME()\fR. Both function have two parameters: the node
and a flag for recursive import. The flag works as in \fIcloneNode()\fR.
.PP
The two functions allow to export and import \s-1XML::GDOME\s0 nodes explicitly,
however, XML::LibXML allows also the transparent import of \s-1XML::GDOME\s0 nodes in
functions such as \fIappendChild()\fR, \fIinsertAfter()\fR and so on. While native nodes
are automatically adopted in most functions \s-1XML::GDOME\s0 nodes are always cloned
in advance. Thus if the original node is modified after the operation, the node
in the XML::LibXML document will not have this information.
.IP "\fBimport_GDOME\fR" 4
.IX Item "import_GDOME"
.Vb 1
\&  $libxmlnode = XML::LibXML->import_GDOME( $node, $deep );
.Ve
.Sp
This clones an \s-1XML::GDOME\s0 node to a XML::LibXML node explicitly.
.IP "\fBexport_GDOME\fR" 4
.IX Item "export_GDOME"
.Vb 1
\&  $gdomenode = XML::LibXML->export_GDOME( $node, $deep );
.Ve
.Sp
Allows to clone an XML::LibXML node into a \s-1XML::GDOME\s0 node.
.SH "AUTHORS"
.IX Header "AUTHORS"
Matt Sergeant, 
Christian Glahn, 
Petr Pajas, 
.SH "VERSION"
.IX Header "VERSION"
1.63
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
2001\-2007, AxKit.com Ltd; 2002\-2006 Christian Glahn; 2006\-2007 Petr Pajas, All rights reserved.
