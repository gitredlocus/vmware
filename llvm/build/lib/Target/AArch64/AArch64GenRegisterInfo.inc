/*===- TableGen'erated file -------------------------------------*- C++ -*-===*\
|*                                                                            *|
|*Target Register Enum Values                                                 *|
|*                                                                            *|
|* Automatically generated file, do not edit!                                 *|
|*                                                                            *|
\*===----------------------------------------------------------------------===*/


#ifdef GET_REGINFO_ENUM
#undef GET_REGINFO_ENUM
namespace llvm {

class MCRegisterClass;
extern const MCRegisterClass AArch64MCRegisterClasses[];

namespace AArch64 {
enum {
  NoRegister,
  NZCV = 1,
  WSP = 2,
  WZR = 3,
  XSP = 4,
  XZR = 5,
  B0 = 6,
  B1 = 7,
  B2 = 8,
  B3 = 9,
  B4 = 10,
  B5 = 11,
  B6 = 12,
  B7 = 13,
  B8 = 14,
  B9 = 15,
  B10 = 16,
  B11 = 17,
  B12 = 18,
  B13 = 19,
  B14 = 20,
  B15 = 21,
  B16 = 22,
  B17 = 23,
  B18 = 24,
  B19 = 25,
  B20 = 26,
  B21 = 27,
  B22 = 28,
  B23 = 29,
  B24 = 30,
  B25 = 31,
  B26 = 32,
  B27 = 33,
  B28 = 34,
  B29 = 35,
  B30 = 36,
  B31 = 37,
  D0 = 38,
  D1 = 39,
  D2 = 40,
  D3 = 41,
  D4 = 42,
  D5 = 43,
  D6 = 44,
  D7 = 45,
  D8 = 46,
  D9 = 47,
  D10 = 48,
  D11 = 49,
  D12 = 50,
  D13 = 51,
  D14 = 52,
  D15 = 53,
  D16 = 54,
  D17 = 55,
  D18 = 56,
  D19 = 57,
  D20 = 58,
  D21 = 59,
  D22 = 60,
  D23 = 61,
  D24 = 62,
  D25 = 63,
  D26 = 64,
  D27 = 65,
  D28 = 66,
  D29 = 67,
  D30 = 68,
  D31 = 69,
  H0 = 70,
  H1 = 71,
  H2 = 72,
  H3 = 73,
  H4 = 74,
  H5 = 75,
  H6 = 76,
  H7 = 77,
  H8 = 78,
  H9 = 79,
  H10 = 80,
  H11 = 81,
  H12 = 82,
  H13 = 83,
  H14 = 84,
  H15 = 85,
  H16 = 86,
  H17 = 87,
  H18 = 88,
  H19 = 89,
  H20 = 90,
  H21 = 91,
  H22 = 92,
  H23 = 93,
  H24 = 94,
  H25 = 95,
  H26 = 96,
  H27 = 97,
  H28 = 98,
  H29 = 99,
  H30 = 100,
  H31 = 101,
  Q0 = 102,
  Q1 = 103,
  Q2 = 104,
  Q3 = 105,
  Q4 = 106,
  Q5 = 107,
  Q6 = 108,
  Q7 = 109,
  Q8 = 110,
  Q9 = 111,
  Q10 = 112,
  Q11 = 113,
  Q12 = 114,
  Q13 = 115,
  Q14 = 116,
  Q15 = 117,
  Q16 = 118,
  Q17 = 119,
  Q18 = 120,
  Q19 = 121,
  Q20 = 122,
  Q21 = 123,
  Q22 = 124,
  Q23 = 125,
  Q24 = 126,
  Q25 = 127,
  Q26 = 128,
  Q27 = 129,
  Q28 = 130,
  Q29 = 131,
  Q30 = 132,
  Q31 = 133,
  S0 = 134,
  S1 = 135,
  S2 = 136,
  S3 = 137,
  S4 = 138,
  S5 = 139,
  S6 = 140,
  S7 = 141,
  S8 = 142,
  S9 = 143,
  S10 = 144,
  S11 = 145,
  S12 = 146,
  S13 = 147,
  S14 = 148,
  S15 = 149,
  S16 = 150,
  S17 = 151,
  S18 = 152,
  S19 = 153,
  S20 = 154,
  S21 = 155,
  S22 = 156,
  S23 = 157,
  S24 = 158,
  S25 = 159,
  S26 = 160,
  S27 = 161,
  S28 = 162,
  S29 = 163,
  S30 = 164,
  S31 = 165,
  V0 = 166,
  V1 = 167,
  V2 = 168,
  V3 = 169,
  V4 = 170,
  V5 = 171,
  V6 = 172,
  V7 = 173,
  V8 = 174,
  V9 = 175,
  V10 = 176,
  V11 = 177,
  V12 = 178,
  V13 = 179,
  V14 = 180,
  V15 = 181,
  V16 = 182,
  V17 = 183,
  V18 = 184,
  V19 = 185,
  V20 = 186,
  V21 = 187,
  V22 = 188,
  V23 = 189,
  V24 = 190,
  V25 = 191,
  V26 = 192,
  V27 = 193,
  V28 = 194,
  V29 = 195,
  V30 = 196,
  V31 = 197,
  W0 = 198,
  W1 = 199,
  W2 = 200,
  W3 = 201,
  W4 = 202,
  W5 = 203,
  W6 = 204,
  W7 = 205,
  W8 = 206,
  W9 = 207,
  W10 = 208,
  W11 = 209,
  W12 = 210,
  W13 = 211,
  W14 = 212,
  W15 = 213,
  W16 = 214,
  W17 = 215,
  W18 = 216,
  W19 = 217,
  W20 = 218,
  W21 = 219,
  W22 = 220,
  W23 = 221,
  W24 = 222,
  W25 = 223,
  W26 = 224,
  W27 = 225,
  W28 = 226,
  W29 = 227,
  W30 = 228,
  X0 = 229,
  X1 = 230,
  X2 = 231,
  X3 = 232,
  X4 = 233,
  X5 = 234,
  X6 = 235,
  X7 = 236,
  X8 = 237,
  X9 = 238,
  X10 = 239,
  X11 = 240,
  X12 = 241,
  X13 = 242,
  X14 = 243,
  X15 = 244,
  X16 = 245,
  X17 = 246,
  X18 = 247,
  X19 = 248,
  X20 = 249,
  X21 = 250,
  X22 = 251,
  X23 = 252,
  X24 = 253,
  X25 = 254,
  X26 = 255,
  X27 = 256,
  X28 = 257,
  X29 = 258,
  X30 = 259,
  NUM_TARGET_REGS 	// 260
};
}

// Register classes
namespace AArch64 {
enum {
  FPR8RegClassID = 0,
  FPR16RegClassID = 1,
  FPR32RegClassID = 2,
  GPR32RegClassID = 3,
  GPR32wspRegClassID = 4,
  GPR32nowzrRegClassID = 5,
  FlagClassRegClassID = 6,
  RwspRegClassID = 7,
  FPR64RegClassID = 8,
  GPR64RegClassID = 9,
  GPR64xspRegClassID = 10,
  VPR64RegClassID = 11,
  GPR64noxzrRegClassID = 12,
  tcGPR64RegClassID = 13,
  RxspRegClassID = 14,
  FPR128RegClassID = 15,
  VPR128RegClassID = 16
  };
}

// Subregister indices
namespace AArch64 {
enum {
  NoSubRegister,
  sub_8,	// 1
  sub_16,	// 2
  sub_32,	// 3
  sub_64,	// 4
  sub_128,	// 5
  sub_alias,	// 6
  NUM_TARGET_SUBREGS
};
}
} // End llvm namespace 
#endif // GET_REGINFO_ENUM

/*===- TableGen'erated file -------------------------------------*- C++ -*-===*\
|*                                                                            *|
|*MC Register Information                                                     *|
|*                                                                            *|
|* Automatically generated file, do not edit!                                 *|
|*                                                                            *|
\*===----------------------------------------------------------------------===*/


#ifdef GET_REGINFO_MC_DESC
#undef GET_REGINFO_MC_DESC
namespace llvm {

extern const MCPhysReg AArch64RegDiffLists[] = {
  /* 0 */ 2, 0,
  /* 2 */ 31, 0,
  /* 4 */ 64, 64, 65440, 64, 64, 0,
  /* 10 */ 65342, 0,
  /* 12 */ 65373, 0,
  /* 14 */ 65405, 0,
  /* 16 */ 65437, 0,
  /* 18 */ 65469, 0,
  /* 20 */ 65472, 65472, 96, 65472, 65472, 0,
  /* 26 */ 65501, 0,
  /* 28 */ 65505, 0,
  /* 30 */ 65533, 0,
  /* 32 */ 65534, 0,
  /* 34 */ 65535, 0,
};

extern const uint16_t AArch64SubRegIdxLists[] = {
  /* 0 */ 6, 4, 3, 2, 1, 0,
  /* 6 */ 3, 0,
};

extern const MCRegisterInfo::SubRegCoveredBits AArch64SubRegIdxRanges[] = {
  { 65535, 65535 },
  { 0, 8 },	// sub_8
  { 0, 16 },	// sub_16
  { 0, 32 },	// sub_32
  { 0, 64 },	// sub_64
  { 0, 128 },	// sub_128
  { 0, 128 },	// sub_alias
};

extern const char AArch64RegStrings[] = {
  /* 0 */ 'B', '1', '0', 0,
  /* 4 */ 'D', '1', '0', 0,
  /* 8 */ 'H', '1', '0', 0,
  /* 12 */ 'Q', '1', '0', 0,
  /* 16 */ 'S', '1', '0', 0,
  /* 20 */ 'V', '1', '0', 0,
  /* 24 */ 'W', '1', '0', 0,
  /* 28 */ 'X', '1', '0', 0,
  /* 32 */ 'B', '2', '0', 0,
  /* 36 */ 'D', '2', '0', 0,
  /* 40 */ 'H', '2', '0', 0,
  /* 44 */ 'Q', '2', '0', 0,
  /* 48 */ 'S', '2', '0', 0,
  /* 52 */ 'V', '2', '0', 0,
  /* 56 */ 'W', '2', '0', 0,
  /* 60 */ 'X', '2', '0', 0,
  /* 64 */ 'B', '3', '0', 0,
  /* 68 */ 'D', '3', '0', 0,
  /* 72 */ 'H', '3', '0', 0,
  /* 76 */ 'Q', '3', '0', 0,
  /* 80 */ 'S', '3', '0', 0,
  /* 84 */ 'V', '3', '0', 0,
  /* 88 */ 'W', '3', '0', 0,
  /* 92 */ 'X', '3', '0', 0,
  /* 96 */ 'B', '0', 0,
  /* 99 */ 'D', '0', 0,
  /* 102 */ 'H', '0', 0,
  /* 105 */ 'Q', '0', 0,
  /* 108 */ 'S', '0', 0,
  /* 111 */ 'V', '0', 0,
  /* 114 */ 'W', '0', 0,
  /* 117 */ 'X', '0', 0,
  /* 120 */ 'B', '1', '1', 0,
  /* 124 */ 'D', '1', '1', 0,
  /* 128 */ 'H', '1', '1', 0,
  /* 132 */ 'Q', '1', '1', 0,
  /* 136 */ 'S', '1', '1', 0,
  /* 140 */ 'V', '1', '1', 0,
  /* 144 */ 'W', '1', '1', 0,
  /* 148 */ 'X', '1', '1', 0,
  /* 152 */ 'B', '2', '1', 0,
  /* 156 */ 'D', '2', '1', 0,
  /* 160 */ 'H', '2', '1', 0,
  /* 164 */ 'Q', '2', '1', 0,
  /* 168 */ 'S', '2', '1', 0,
  /* 172 */ 'V', '2', '1', 0,
  /* 176 */ 'W', '2', '1', 0,
  /* 180 */ 'X', '2', '1', 0,
  /* 184 */ 'B', '3', '1', 0,
  /* 188 */ 'D', '3', '1', 0,
  /* 192 */ 'H', '3', '1', 0,
  /* 196 */ 'Q', '3', '1', 0,
  /* 200 */ 'S', '3', '1', 0,
  /* 204 */ 'V', '3', '1', 0,
  /* 208 */ 'B', '1', 0,
  /* 211 */ 'D', '1', 0,
  /* 214 */ 'H', '1', 0,
  /* 217 */ 'Q', '1', 0,
  /* 220 */ 'S', '1', 0,
  /* 223 */ 'V', '1', 0,
  /* 226 */ 'W', '1', 0,
  /* 229 */ 'X', '1', 0,
  /* 232 */ 'B', '1', '2', 0,
  /* 236 */ 'D', '1', '2', 0,
  /* 240 */ 'H', '1', '2', 0,
  /* 244 */ 'Q', '1', '2', 0,
  /* 248 */ 'S', '1', '2', 0,
  /* 252 */ 'V', '1', '2', 0,
  /* 256 */ 'W', '1', '2', 0,
  /* 260 */ 'X', '1', '2', 0,
  /* 264 */ 'B', '2', '2', 0,
  /* 268 */ 'D', '2', '2', 0,
  /* 272 */ 'H', '2', '2', 0,
  /* 276 */ 'Q', '2', '2', 0,
  /* 280 */ 'S', '2', '2', 0,
  /* 284 */ 'V', '2', '2', 0,
  /* 288 */ 'W', '2', '2', 0,
  /* 292 */ 'X', '2', '2', 0,
  /* 296 */ 'B', '2', 0,
  /* 299 */ 'D', '2', 0,
  /* 302 */ 'H', '2', 0,
  /* 305 */ 'Q', '2', 0,
  /* 308 */ 'S', '2', 0,
  /* 311 */ 'V', '2', 0,
  /* 314 */ 'W', '2', 0,
  /* 317 */ 'X', '2', 0,
  /* 320 */ 'B', '1', '3', 0,
  /* 324 */ 'D', '1', '3', 0,
  /* 328 */ 'H', '1', '3', 0,
  /* 332 */ 'Q', '1', '3', 0,
  /* 336 */ 'S', '1', '3', 0,
  /* 340 */ 'V', '1', '3', 0,
  /* 344 */ 'W', '1', '3', 0,
  /* 348 */ 'X', '1', '3', 0,
  /* 352 */ 'B', '2', '3', 0,
  /* 356 */ 'D', '2', '3', 0,
  /* 360 */ 'H', '2', '3', 0,
  /* 364 */ 'Q', '2', '3', 0,
  /* 368 */ 'S', '2', '3', 0,
  /* 372 */ 'V', '2', '3', 0,
  /* 376 */ 'W', '2', '3', 0,
  /* 380 */ 'X', '2', '3', 0,
  /* 384 */ 'B', '3', 0,
  /* 387 */ 'D', '3', 0,
  /* 390 */ 'H', '3', 0,
  /* 393 */ 'Q', '3', 0,
  /* 396 */ 'S', '3', 0,
  /* 399 */ 'V', '3', 0,
  /* 402 */ 'W', '3', 0,
  /* 405 */ 'X', '3', 0,
  /* 408 */ 'B', '1', '4', 0,
  /* 412 */ 'D', '1', '4', 0,
  /* 416 */ 'H', '1', '4', 0,
  /* 420 */ 'Q', '1', '4', 0,
  /* 424 */ 'S', '1', '4', 0,
  /* 428 */ 'V', '1', '4', 0,
  /* 432 */ 'W', '1', '4', 0,
  /* 436 */ 'X', '1', '4', 0,
  /* 440 */ 'B', '2', '4', 0,
  /* 444 */ 'D', '2', '4', 0,
  /* 448 */ 'H', '2', '4', 0,
  /* 452 */ 'Q', '2', '4', 0,
  /* 456 */ 'S', '2', '4', 0,
  /* 460 */ 'V', '2', '4', 0,
  /* 464 */ 'W', '2', '4', 0,
  /* 468 */ 'X', '2', '4', 0,
  /* 472 */ 'B', '4', 0,
  /* 475 */ 'D', '4', 0,
  /* 478 */ 'H', '4', 0,
  /* 481 */ 'Q', '4', 0,
  /* 484 */ 'S', '4', 0,
  /* 487 */ 'V', '4', 0,
  /* 490 */ 'W', '4', 0,
  /* 493 */ 'X', '4', 0,
  /* 496 */ 'B', '1', '5', 0,
  /* 500 */ 'D', '1', '5', 0,
  /* 504 */ 'H', '1', '5', 0,
  /* 508 */ 'Q', '1', '5', 0,
  /* 512 */ 'S', '1', '5', 0,
  /* 516 */ 'V', '1', '5', 0,
  /* 520 */ 'W', '1', '5', 0,
  /* 524 */ 'X', '1', '5', 0,
  /* 528 */ 'B', '2', '5', 0,
  /* 532 */ 'D', '2', '5', 0,
  /* 536 */ 'H', '2', '5', 0,
  /* 540 */ 'Q', '2', '5', 0,
  /* 544 */ 'S', '2', '5', 0,
  /* 548 */ 'V', '2', '5', 0,
  /* 552 */ 'W', '2', '5', 0,
  /* 556 */ 'X', '2', '5', 0,
  /* 560 */ 'B', '5', 0,
  /* 563 */ 'D', '5', 0,
  /* 566 */ 'H', '5', 0,
  /* 569 */ 'Q', '5', 0,
  /* 572 */ 'S', '5', 0,
  /* 575 */ 'V', '5', 0,
  /* 578 */ 'W', '5', 0,
  /* 581 */ 'X', '5', 0,
  /* 584 */ 'B', '1', '6', 0,
  /* 588 */ 'D', '1', '6', 0,
  /* 592 */ 'H', '1', '6', 0,
  /* 596 */ 'Q', '1', '6', 0,
  /* 600 */ 'S', '1', '6', 0,
  /* 604 */ 'V', '1', '6', 0,
  /* 608 */ 'W', '1', '6', 0,
  /* 612 */ 'X', '1', '6', 0,
  /* 616 */ 'B', '2', '6', 0,
  /* 620 */ 'D', '2', '6', 0,
  /* 624 */ 'H', '2', '6', 0,
  /* 628 */ 'Q', '2', '6', 0,
  /* 632 */ 'S', '2', '6', 0,
  /* 636 */ 'V', '2', '6', 0,
  /* 640 */ 'W', '2', '6', 0,
  /* 644 */ 'X', '2', '6', 0,
  /* 648 */ 'B', '6', 0,
  /* 651 */ 'D', '6', 0,
  /* 654 */ 'H', '6', 0,
  /* 657 */ 'Q', '6', 0,
  /* 660 */ 'S', '6', 0,
  /* 663 */ 'V', '6', 0,
  /* 666 */ 'W', '6', 0,
  /* 669 */ 'X', '6', 0,
  /* 672 */ 'B', '1', '7', 0,
  /* 676 */ 'D', '1', '7', 0,
  /* 680 */ 'H', '1', '7', 0,
  /* 684 */ 'Q', '1', '7', 0,
  /* 688 */ 'S', '1', '7', 0,
  /* 692 */ 'V', '1', '7', 0,
  /* 696 */ 'W', '1', '7', 0,
  /* 700 */ 'X', '1', '7', 0,
  /* 704 */ 'B', '2', '7', 0,
  /* 708 */ 'D', '2', '7', 0,
  /* 712 */ 'H', '2', '7', 0,
  /* 716 */ 'Q', '2', '7', 0,
  /* 720 */ 'S', '2', '7', 0,
  /* 724 */ 'V', '2', '7', 0,
  /* 728 */ 'W', '2', '7', 0,
  /* 732 */ 'X', '2', '7', 0,
  /* 736 */ 'B', '7', 0,
  /* 739 */ 'D', '7', 0,
  /* 742 */ 'H', '7', 0,
  /* 745 */ 'Q', '7', 0,
  /* 748 */ 'S', '7', 0,
  /* 751 */ 'V', '7', 0,
  /* 754 */ 'W', '7', 0,
  /* 757 */ 'X', '7', 0,
  /* 760 */ 'B', '1', '8', 0,
  /* 764 */ 'D', '1', '8', 0,
  /* 768 */ 'H', '1', '8', 0,
  /* 772 */ 'Q', '1', '8', 0,
  /* 776 */ 'S', '1', '8', 0,
  /* 780 */ 'V', '1', '8', 0,
  /* 784 */ 'W', '1', '8', 0,
  /* 788 */ 'X', '1', '8', 0,
  /* 792 */ 'B', '2', '8', 0,
  /* 796 */ 'D', '2', '8', 0,
  /* 800 */ 'H', '2', '8', 0,
  /* 804 */ 'Q', '2', '8', 0,
  /* 808 */ 'S', '2', '8', 0,
  /* 812 */ 'V', '2', '8', 0,
  /* 816 */ 'W', '2', '8', 0,
  /* 820 */ 'X', '2', '8', 0,
  /* 824 */ 'B', '8', 0,
  /* 827 */ 'D', '8', 0,
  /* 830 */ 'H', '8', 0,
  /* 833 */ 'Q', '8', 0,
  /* 836 */ 'S', '8', 0,
  /* 839 */ 'V', '8', 0,
  /* 842 */ 'W', '8', 0,
  /* 845 */ 'X', '8', 0,
  /* 848 */ 'B', '1', '9', 0,
  /* 852 */ 'D', '1', '9', 0,
  /* 856 */ 'H', '1', '9', 0,
  /* 860 */ 'Q', '1', '9', 0,
  /* 864 */ 'S', '1', '9', 0,
  /* 868 */ 'V', '1', '9', 0,
  /* 872 */ 'W', '1', '9', 0,
  /* 876 */ 'X', '1', '9', 0,
  /* 880 */ 'B', '2', '9', 0,
  /* 884 */ 'D', '2', '9', 0,
  /* 888 */ 'H', '2', '9', 0,
  /* 892 */ 'Q', '2', '9', 0,
  /* 896 */ 'S', '2', '9', 0,
  /* 900 */ 'V', '2', '9', 0,
  /* 904 */ 'W', '2', '9', 0,
  /* 908 */ 'X', '2', '9', 0,
  /* 912 */ 'B', '9', 0,
  /* 915 */ 'D', '9', 0,
  /* 918 */ 'H', '9', 0,
  /* 921 */ 'Q', '9', 0,
  /* 924 */ 'S', '9', 0,
  /* 927 */ 'V', '9', 0,
  /* 930 */ 'W', '9', 0,
  /* 933 */ 'X', '9', 0,
  /* 936 */ 'W', 'S', 'P', 0,
  /* 940 */ 'X', 'S', 'P', 0,
  /* 944 */ 'W', 'Z', 'R', 0,
  /* 948 */ 'X', 'Z', 'R', 0,
  /* 952 */ 'N', 'Z', 'C', 'V', 0,
};

extern const MCRegisterDesc AArch64RegDesc[] = { // Descriptors
  { 3, 0, 0, 0, 0 },
  { 952, 1, 1, 5, 545 },
  { 936, 1, 0, 5, 545 },
  { 944, 1, 0, 5, 545 },
  { 940, 32, 1, 6, 481 },
  { 948, 32, 1, 6, 481 },
  { 96, 1, 4, 5, 481 },
  { 208, 1, 4, 5, 481 },
  { 296, 1, 4, 5, 481 },
  { 384, 1, 4, 5, 481 },
  { 472, 1, 4, 5, 481 },
  { 560, 1, 4, 5, 481 },
  { 648, 1, 4, 5, 481 },
  { 736, 1, 4, 5, 481 },
  { 824, 1, 4, 5, 481 },
  { 912, 1, 4, 5, 481 },
  { 0, 1, 4, 5, 481 },
  { 120, 1, 4, 5, 481 },
  { 232, 1, 4, 5, 481 },
  { 320, 1, 4, 5, 481 },
  { 408, 1, 4, 5, 481 },
  { 496, 1, 4, 5, 481 },
  { 584, 1, 4, 5, 481 },
  { 672, 1, 4, 5, 481 },
  { 760, 1, 4, 5, 481 },
  { 848, 1, 4, 5, 481 },
  { 32, 1, 4, 5, 481 },
  { 152, 1, 4, 5, 481 },
  { 264, 1, 4, 5, 481 },
  { 352, 1, 4, 5, 481 },
  { 440, 1, 4, 5, 481 },
  { 528, 1, 4, 5, 481 },
  { 616, 1, 4, 5, 481 },
  { 704, 1, 4, 5, 481 },
  { 792, 1, 4, 5, 481 },
  { 880, 1, 4, 5, 481 },
  { 64, 1, 4, 5, 481 },
  { 184, 1, 4, 5, 481 },
  { 99, 22, 7, 2, 417 },
  { 211, 22, 7, 2, 417 },
  { 299, 22, 7, 2, 417 },
  { 387, 22, 7, 2, 417 },
  { 475, 22, 7, 2, 417 },
  { 563, 22, 7, 2, 417 },
  { 651, 22, 7, 2, 417 },
  { 739, 22, 7, 2, 417 },
  { 827, 22, 7, 2, 417 },
  { 915, 22, 7, 2, 417 },
  { 4, 22, 7, 2, 417 },
  { 124, 22, 7, 2, 417 },
  { 236, 22, 7, 2, 417 },
  { 324, 22, 7, 2, 417 },
  { 412, 22, 7, 2, 417 },
  { 500, 22, 7, 2, 417 },
  { 588, 22, 7, 2, 417 },
  { 676, 22, 7, 2, 417 },
  { 764, 22, 7, 2, 417 },
  { 852, 22, 7, 2, 417 },
  { 36, 22, 7, 2, 417 },
  { 156, 22, 7, 2, 417 },
  { 268, 22, 7, 2, 417 },
  { 356, 22, 7, 2, 417 },
  { 444, 22, 7, 2, 417 },
  { 532, 22, 7, 2, 417 },
  { 620, 22, 7, 2, 417 },
  { 708, 22, 7, 2, 417 },
  { 796, 22, 7, 2, 417 },
  { 884, 22, 7, 2, 417 },
  { 68, 22, 7, 2, 417 },
  { 188, 22, 7, 2, 417 },
  { 102, 24, 5, 4, 289 },
  { 214, 24, 5, 4, 289 },
  { 302, 24, 5, 4, 289 },
  { 390, 24, 5, 4, 289 },
  { 478, 24, 5, 4, 289 },
  { 566, 24, 5, 4, 289 },
  { 654, 24, 5, 4, 289 },
  { 742, 24, 5, 4, 289 },
  { 830, 24, 5, 4, 289 },
  { 918, 24, 5, 4, 289 },
  { 8, 24, 5, 4, 289 },
  { 128, 24, 5, 4, 289 },
  { 240, 24, 5, 4, 289 },
  { 328, 24, 5, 4, 289 },
  { 416, 24, 5, 4, 289 },
  { 504, 24, 5, 4, 289 },
  { 592, 24, 5, 4, 289 },
  { 680, 24, 5, 4, 289 },
  { 768, 24, 5, 4, 289 },
  { 856, 24, 5, 4, 289 },
  { 40, 24, 5, 4, 289 },
  { 160, 24, 5, 4, 289 },
  { 272, 24, 5, 4, 289 },
  { 360, 24, 5, 4, 289 },
  { 448, 24, 5, 4, 289 },
  { 536, 24, 5, 4, 289 },
  { 624, 24, 5, 4, 289 },
  { 712, 24, 5, 4, 289 },
  { 800, 24, 5, 4, 289 },
  { 888, 24, 5, 4, 289 },
  { 72, 24, 5, 4, 289 },
  { 192, 24, 5, 4, 289 },
  { 105, 21, 8, 1, 257 },
  { 217, 21, 8, 1, 257 },
  { 305, 21, 8, 1, 257 },
  { 393, 21, 8, 1, 257 },
  { 481, 21, 8, 1, 257 },
  { 569, 21, 8, 1, 257 },
  { 657, 21, 8, 1, 257 },
  { 745, 21, 8, 1, 257 },
  { 833, 21, 8, 1, 257 },
  { 921, 21, 8, 1, 257 },
  { 12, 21, 8, 1, 257 },
  { 132, 21, 8, 1, 257 },
  { 244, 21, 8, 1, 257 },
  { 332, 21, 8, 1, 257 },
  { 420, 21, 8, 1, 257 },
  { 508, 21, 8, 1, 257 },
  { 596, 21, 8, 1, 257 },
  { 684, 21, 8, 1, 257 },
  { 772, 21, 8, 1, 257 },
  { 860, 21, 8, 1, 257 },
  { 44, 21, 8, 1, 257 },
  { 164, 21, 8, 1, 257 },
  { 276, 21, 8, 1, 257 },
  { 364, 21, 8, 1, 257 },
  { 452, 21, 8, 1, 257 },
  { 540, 21, 8, 1, 257 },
  { 628, 21, 8, 1, 257 },
  { 716, 21, 8, 1, 257 },
  { 804, 21, 8, 1, 257 },
  { 892, 21, 8, 1, 257 },
  { 76, 21, 8, 1, 257 },
  { 196, 21, 8, 1, 257 },
  { 108, 23, 6, 3, 225 },
  { 220, 23, 6, 3, 225 },
  { 308, 23, 6, 3, 225 },
  { 396, 23, 6, 3, 225 },
  { 484, 23, 6, 3, 225 },
  { 572, 23, 6, 3, 225 },
  { 660, 23, 6, 3, 225 },
  { 748, 23, 6, 3, 225 },
  { 836, 23, 6, 3, 225 },
  { 924, 23, 6, 3, 225 },
  { 16, 23, 6, 3, 225 },
  { 136, 23, 6, 3, 225 },
  { 248, 23, 6, 3, 225 },
  { 336, 23, 6, 3, 225 },
  { 424, 23, 6, 3, 225 },
  { 512, 23, 6, 3, 225 },
  { 600, 23, 6, 3, 225 },
  { 688, 23, 6, 3, 225 },
  { 776, 23, 6, 3, 225 },
  { 864, 23, 6, 3, 225 },
  { 48, 23, 6, 3, 225 },
  { 168, 23, 6, 3, 225 },
  { 280, 23, 6, 3, 225 },
  { 368, 23, 6, 3, 225 },
  { 456, 23, 6, 3, 225 },
  { 544, 23, 6, 3, 225 },
  { 632, 23, 6, 3, 225 },
  { 720, 23, 6, 3, 225 },
  { 808, 23, 6, 3, 225 },
  { 896, 23, 6, 3, 225 },
  { 80, 23, 6, 3, 225 },
  { 200, 23, 6, 3, 225 },
  { 111, 20, 1, 0, 193 },
  { 223, 20, 1, 0, 193 },
  { 311, 20, 1, 0, 193 },
  { 399, 20, 1, 0, 193 },
  { 487, 20, 1, 0, 193 },
  { 575, 20, 1, 0, 193 },
  { 663, 20, 1, 0, 193 },
  { 751, 20, 1, 0, 193 },
  { 839, 20, 1, 0, 193 },
  { 927, 20, 1, 0, 193 },
  { 20, 20, 1, 0, 193 },
  { 140, 20, 1, 0, 193 },
  { 252, 20, 1, 0, 193 },
  { 340, 20, 1, 0, 193 },
  { 428, 20, 1, 0, 193 },
  { 516, 20, 1, 0, 193 },
  { 604, 20, 1, 0, 193 },
  { 692, 20, 1, 0, 193 },
  { 780, 20, 1, 0, 193 },
  { 868, 20, 1, 0, 193 },
  { 52, 20, 1, 0, 193 },
  { 172, 20, 1, 0, 193 },
  { 284, 20, 1, 0, 193 },
  { 372, 20, 1, 0, 193 },
  { 460, 20, 1, 0, 193 },
  { 548, 20, 1, 0, 193 },
  { 636, 20, 1, 0, 193 },
  { 724, 20, 1, 0, 193 },
  { 812, 20, 1, 0, 193 },
  { 900, 20, 1, 0, 193 },
  { 84, 20, 1, 0, 193 },
  { 204, 20, 1, 0, 193 },
  { 114, 1, 2, 5, 193 },
  { 226, 1, 2, 5, 193 },
  { 314, 1, 2, 5, 193 },
  { 402, 1, 2, 5, 193 },
  { 490, 1, 2, 5, 193 },
  { 578, 1, 2, 5, 193 },
  { 666, 1, 2, 5, 193 },
  { 754, 1, 2, 5, 193 },
  { 842, 1, 2, 5, 193 },
  { 930, 1, 2, 5, 193 },
  { 24, 1, 2, 5, 193 },
  { 144, 1, 2, 5, 193 },
  { 256, 1, 2, 5, 193 },
  { 344, 1, 2, 5, 193 },
  { 432, 1, 2, 5, 193 },
  { 520, 1, 2, 5, 193 },
  { 608, 1, 2, 5, 193 },
  { 696, 1, 2, 5, 193 },
  { 784, 1, 2, 5, 193 },
  { 872, 1, 2, 5, 193 },
  { 56, 1, 2, 5, 193 },
  { 176, 1, 2, 5, 193 },
  { 288, 1, 2, 5, 193 },
  { 376, 1, 2, 5, 193 },
  { 464, 1, 2, 5, 193 },
  { 552, 1, 2, 5, 193 },
  { 640, 1, 2, 5, 193 },
  { 728, 1, 2, 5, 193 },
  { 816, 1, 2, 5, 193 },
  { 904, 1, 2, 5, 193 },
  { 88, 1, 2, 5, 193 },
  { 117, 28, 1, 6, 161 },
  { 229, 28, 1, 6, 161 },
  { 317, 28, 1, 6, 161 },
  { 405, 28, 1, 6, 161 },
  { 493, 28, 1, 6, 161 },
  { 581, 28, 1, 6, 161 },
  { 669, 28, 1, 6, 161 },
  { 757, 28, 1, 6, 161 },
  { 845, 28, 1, 6, 161 },
  { 933, 28, 1, 6, 161 },
  { 28, 28, 1, 6, 161 },
  { 148, 28, 1, 6, 161 },
  { 260, 28, 1, 6, 161 },
  { 348, 28, 1, 6, 161 },
  { 436, 28, 1, 6, 161 },
  { 524, 28, 1, 6, 161 },
  { 612, 28, 1, 6, 161 },
  { 700, 28, 1, 6, 161 },
  { 788, 28, 1, 6, 161 },
  { 876, 28, 1, 6, 161 },
  { 60, 28, 1, 6, 161 },
  { 180, 28, 1, 6, 161 },
  { 292, 28, 1, 6, 161 },
  { 380, 28, 1, 6, 161 },
  { 468, 28, 1, 6, 161 },
  { 556, 28, 1, 6, 161 },
  { 644, 28, 1, 6, 161 },
  { 732, 28, 1, 6, 161 },
  { 820, 28, 1, 6, 161 },
  { 908, 28, 1, 6, 161 },
  { 92, 28, 1, 6, 161 },
};

extern const uint16_t AArch64RegUnitRoots[][2] = {
  { AArch64::NZCV },
  { AArch64::WSP },
  { AArch64::WZR },
  { AArch64::B0 },
  { AArch64::B1 },
  { AArch64::B2 },
  { AArch64::B3 },
  { AArch64::B4 },
  { AArch64::B5 },
  { AArch64::B6 },
  { AArch64::B7 },
  { AArch64::B8 },
  { AArch64::B9 },
  { AArch64::B10 },
  { AArch64::B11 },
  { AArch64::B12 },
  { AArch64::B13 },
  { AArch64::B14 },
  { AArch64::B15 },
  { AArch64::B16 },
  { AArch64::B17 },
  { AArch64::B18 },
  { AArch64::B19 },
  { AArch64::B20 },
  { AArch64::B21 },
  { AArch64::B22 },
  { AArch64::B23 },
  { AArch64::B24 },
  { AArch64::B25 },
  { AArch64::B26 },
  { AArch64::B27 },
  { AArch64::B28 },
  { AArch64::B29 },
  { AArch64::B30 },
  { AArch64::B31 },
  { AArch64::W0 },
  { AArch64::W1 },
  { AArch64::W2 },
  { AArch64::W3 },
  { AArch64::W4 },
  { AArch64::W5 },
  { AArch64::W6 },
  { AArch64::W7 },
  { AArch64::W8 },
  { AArch64::W9 },
  { AArch64::W10 },
  { AArch64::W11 },
  { AArch64::W12 },
  { AArch64::W13 },
  { AArch64::W14 },
  { AArch64::W15 },
  { AArch64::W16 },
  { AArch64::W17 },
  { AArch64::W18 },
  { AArch64::W19 },
  { AArch64::W20 },
  { AArch64::W21 },
  { AArch64::W22 },
  { AArch64::W23 },
  { AArch64::W24 },
  { AArch64::W25 },
  { AArch64::W26 },
  { AArch64::W27 },
  { AArch64::W28 },
  { AArch64::W29 },
  { AArch64::W30 },
};

namespace {     // Register classes...
  // FPR8 Register Class...
  const uint16_t FPR8[] = {
    AArch64::B0, AArch64::B1, AArch64::B2, AArch64::B3, AArch64::B4, AArch64::B5, AArch64::B6, AArch64::B7, AArch64::B8, AArch64::B9, AArch64::B10, AArch64::B11, AArch64::B12, AArch64::B13, AArch64::B14, AArch64::B15, AArch64::B16, AArch64::B17, AArch64::B18, AArch64::B19, AArch64::B20, AArch64::B21, AArch64::B22, AArch64::B23, AArch64::B24, AArch64::B25, AArch64::B26, AArch64::B27, AArch64::B28, AArch64::B29, AArch64::B30, AArch64::B31, 
  };

  // FPR8 Bit set.
  const uint8_t FPR8Bits[] = {
    0xc0, 0xff, 0xff, 0xff, 0x3f, 
  };

  // FPR16 Register Class...
  const uint16_t FPR16[] = {
    AArch64::H0, AArch64::H1, AArch64::H2, AArch64::H3, AArch64::H4, AArch64::H5, AArch64::H6, AArch64::H7, AArch64::H8, AArch64::H9, AArch64::H10, AArch64::H11, AArch64::H12, AArch64::H13, AArch64::H14, AArch64::H15, AArch64::H16, AArch64::H17, AArch64::H18, AArch64::H19, AArch64::H20, AArch64::H21, AArch64::H22, AArch64::H23, AArch64::H24, AArch64::H25, AArch64::H26, AArch64::H27, AArch64::H28, AArch64::H29, AArch64::H30, AArch64::H31, 
  };

  // FPR16 Bit set.
  const uint8_t FPR16Bits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xff, 0xff, 0xff, 0x3f, 
  };

  // FPR32 Register Class...
  const uint16_t FPR32[] = {
    AArch64::S0, AArch64::S1, AArch64::S2, AArch64::S3, AArch64::S4, AArch64::S5, AArch64::S6, AArch64::S7, AArch64::S8, AArch64::S9, AArch64::S10, AArch64::S11, AArch64::S12, AArch64::S13, AArch64::S14, AArch64::S15, AArch64::S16, AArch64::S17, AArch64::S18, AArch64::S19, AArch64::S20, AArch64::S21, AArch64::S22, AArch64::S23, AArch64::S24, AArch64::S25, AArch64::S26, AArch64::S27, AArch64::S28, AArch64::S29, AArch64::S30, AArch64::S31, 
  };

  // FPR32 Bit set.
  const uint8_t FPR32Bits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xff, 0xff, 0xff, 0x3f, 
  };

  // GPR32 Register Class...
  const uint16_t GPR32[] = {
    AArch64::W0, AArch64::W1, AArch64::W2, AArch64::W3, AArch64::W4, AArch64::W5, AArch64::W6, AArch64::W7, AArch64::W8, AArch64::W9, AArch64::W10, AArch64::W11, AArch64::W12, AArch64::W13, AArch64::W14, AArch64::W15, AArch64::W16, AArch64::W17, AArch64::W18, AArch64::W19, AArch64::W20, AArch64::W21, AArch64::W22, AArch64::W23, AArch64::W24, AArch64::W25, AArch64::W26, AArch64::W27, AArch64::W28, AArch64::W29, AArch64::W30, AArch64::WZR, 
  };

  // GPR32 Bit set.
  const uint8_t GPR32Bits[] = {
    0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xff, 0xff, 0xff, 0x1f, 
  };

  // GPR32wsp Register Class...
  const uint16_t GPR32wsp[] = {
    AArch64::W0, AArch64::W1, AArch64::W2, AArch64::W3, AArch64::W4, AArch64::W5, AArch64::W6, AArch64::W7, AArch64::W8, AArch64::W9, AArch64::W10, AArch64::W11, AArch64::W12, AArch64::W13, AArch64::W14, AArch64::W15, AArch64::W16, AArch64::W17, AArch64::W18, AArch64::W19, AArch64::W20, AArch64::W21, AArch64::W22, AArch64::W23, AArch64::W24, AArch64::W25, AArch64::W26, AArch64::W27, AArch64::W28, AArch64::W29, AArch64::W30, AArch64::WSP, 
  };

  // GPR32wsp Bit set.
  const uint8_t GPR32wspBits[] = {
    0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xff, 0xff, 0xff, 0x1f, 
  };

  // GPR32nowzr Register Class...
  const uint16_t GPR32nowzr[] = {
    AArch64::W0, AArch64::W1, AArch64::W2, AArch64::W3, AArch64::W4, AArch64::W5, AArch64::W6, AArch64::W7, AArch64::W8, AArch64::W9, AArch64::W10, AArch64::W11, AArch64::W12, AArch64::W13, AArch64::W14, AArch64::W15, AArch64::W16, AArch64::W17, AArch64::W18, AArch64::W19, AArch64::W20, AArch64::W21, AArch64::W22, AArch64::W23, AArch64::W24, AArch64::W25, AArch64::W26, AArch64::W27, AArch64::W28, AArch64::W29, AArch64::W30, 
  };

  // GPR32nowzr Bit set.
  const uint8_t GPR32nowzrBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xff, 0xff, 0xff, 0x1f, 
  };

  // FlagClass Register Class...
  const uint16_t FlagClass[] = {
    AArch64::NZCV, 
  };

  // FlagClass Bit set.
  const uint8_t FlagClassBits[] = {
    0x02, 
  };

  // Rwsp Register Class...
  const uint16_t Rwsp[] = {
    AArch64::WSP, 
  };

  // Rwsp Bit set.
  const uint8_t RwspBits[] = {
    0x04, 
  };

  // FPR64 Register Class...
  const uint16_t FPR64[] = {
    AArch64::D0, AArch64::D1, AArch64::D2, AArch64::D3, AArch64::D4, AArch64::D5, AArch64::D6, AArch64::D7, AArch64::D8, AArch64::D9, AArch64::D10, AArch64::D11, AArch64::D12, AArch64::D13, AArch64::D14, AArch64::D15, AArch64::D16, AArch64::D17, AArch64::D18, AArch64::D19, AArch64::D20, AArch64::D21, AArch64::D22, AArch64::D23, AArch64::D24, AArch64::D25, AArch64::D26, AArch64::D27, AArch64::D28, AArch64::D29, AArch64::D30, AArch64::D31, 
  };

  // FPR64 Bit set.
  const uint8_t FPR64Bits[] = {
    0x00, 0x00, 0x00, 0x00, 0xc0, 0xff, 0xff, 0xff, 0x3f, 
  };

  // GPR64 Register Class...
  const uint16_t GPR64[] = {
    AArch64::X0, AArch64::X1, AArch64::X2, AArch64::X3, AArch64::X4, AArch64::X5, AArch64::X6, AArch64::X7, AArch64::X8, AArch64::X9, AArch64::X10, AArch64::X11, AArch64::X12, AArch64::X13, AArch64::X14, AArch64::X15, AArch64::X16, AArch64::X17, AArch64::X18, AArch64::X19, AArch64::X20, AArch64::X21, AArch64::X22, AArch64::X23, AArch64::X24, AArch64::X25, AArch64::X26, AArch64::X27, AArch64::X28, AArch64::X29, AArch64::X30, AArch64::XZR, 
  };

  // GPR64 Bit set.
  const uint8_t GPR64Bits[] = {
    0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0xff, 0xff, 0xff, 0x0f, 
  };

  // GPR64xsp Register Class...
  const uint16_t GPR64xsp[] = {
    AArch64::X0, AArch64::X1, AArch64::X2, AArch64::X3, AArch64::X4, AArch64::X5, AArch64::X6, AArch64::X7, AArch64::X8, AArch64::X9, AArch64::X10, AArch64::X11, AArch64::X12, AArch64::X13, AArch64::X14, AArch64::X15, AArch64::X16, AArch64::X17, AArch64::X18, AArch64::X19, AArch64::X20, AArch64::X21, AArch64::X22, AArch64::X23, AArch64::X24, AArch64::X25, AArch64::X26, AArch64::X27, AArch64::X28, AArch64::X29, AArch64::X30, AArch64::XSP, 
  };

  // GPR64xsp Bit set.
  const uint8_t GPR64xspBits[] = {
    0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0xff, 0xff, 0xff, 0x0f, 
  };

  // VPR64 Register Class...
  const uint16_t VPR64[] = {
    AArch64::V0, AArch64::V1, AArch64::V2, AArch64::V3, AArch64::V4, AArch64::V5, AArch64::V6, AArch64::V7, AArch64::V8, AArch64::V9, AArch64::V10, AArch64::V11, AArch64::V12, AArch64::V13, AArch64::V14, AArch64::V15, AArch64::V16, AArch64::V17, AArch64::V18, AArch64::V19, AArch64::V20, AArch64::V21, AArch64::V22, AArch64::V23, AArch64::V24, AArch64::V25, AArch64::V26, AArch64::V27, AArch64::V28, AArch64::V29, AArch64::V30, AArch64::V31, 
  };

  // VPR64 Bit set.
  const uint8_t VPR64Bits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xff, 0xff, 0xff, 0x3f, 
  };

  // GPR64noxzr Register Class...
  const uint16_t GPR64noxzr[] = {
    AArch64::X0, AArch64::X1, AArch64::X2, AArch64::X3, AArch64::X4, AArch64::X5, AArch64::X6, AArch64::X7, AArch64::X8, AArch64::X9, AArch64::X10, AArch64::X11, AArch64::X12, AArch64::X13, AArch64::X14, AArch64::X15, AArch64::X16, AArch64::X17, AArch64::X18, AArch64::X19, AArch64::X20, AArch64::X21, AArch64::X22, AArch64::X23, AArch64::X24, AArch64::X25, AArch64::X26, AArch64::X27, AArch64::X28, AArch64::X29, AArch64::X30, 
  };

  // GPR64noxzr Bit set.
  const uint8_t GPR64noxzrBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0xff, 0xff, 0xff, 0x0f, 
  };

  // tcGPR64 Register Class...
  const uint16_t tcGPR64[] = {
    AArch64::X0, AArch64::X1, AArch64::X2, AArch64::X3, AArch64::X4, AArch64::X5, AArch64::X6, AArch64::X7, AArch64::X9, AArch64::X10, AArch64::X11, AArch64::X12, AArch64::X13, AArch64::X14, AArch64::X15, AArch64::X16, AArch64::X17, AArch64::X18, 
  };

  // tcGPR64 Bit set.
  const uint8_t tcGPR64Bits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0xdf, 0xff, 
  };

  // Rxsp Register Class...
  const uint16_t Rxsp[] = {
    AArch64::XSP, 
  };

  // Rxsp Bit set.
  const uint8_t RxspBits[] = {
    0x10, 
  };

  // FPR128 Register Class...
  const uint16_t FPR128[] = {
    AArch64::Q0, AArch64::Q1, AArch64::Q2, AArch64::Q3, AArch64::Q4, AArch64::Q5, AArch64::Q6, AArch64::Q7, AArch64::Q8, AArch64::Q9, AArch64::Q10, AArch64::Q11, AArch64::Q12, AArch64::Q13, AArch64::Q14, AArch64::Q15, AArch64::Q16, AArch64::Q17, AArch64::Q18, AArch64::Q19, AArch64::Q20, AArch64::Q21, AArch64::Q22, AArch64::Q23, AArch64::Q24, AArch64::Q25, AArch64::Q26, AArch64::Q27, AArch64::Q28, AArch64::Q29, AArch64::Q30, AArch64::Q31, 
  };

  // FPR128 Bit set.
  const uint8_t FPR128Bits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xff, 0xff, 0xff, 0x3f, 
  };

  // VPR128 Register Class...
  const uint16_t VPR128[] = {
    AArch64::V0, AArch64::V1, AArch64::V2, AArch64::V3, AArch64::V4, AArch64::V5, AArch64::V6, AArch64::V7, AArch64::V8, AArch64::V9, AArch64::V10, AArch64::V11, AArch64::V12, AArch64::V13, AArch64::V14, AArch64::V15, AArch64::V16, AArch64::V17, AArch64::V18, AArch64::V19, AArch64::V20, AArch64::V21, AArch64::V22, AArch64::V23, AArch64::V24, AArch64::V25, AArch64::V26, AArch64::V27, AArch64::V28, AArch64::V29, AArch64::V30, AArch64::V31, 
  };

  // VPR128 Bit set.
  const uint8_t VPR128Bits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xff, 0xff, 0xff, 0x3f, 
  };

}

extern const MCRegisterClass AArch64MCRegisterClasses[] = {
  { "FPR8", FPR8, FPR8Bits, 32, sizeof(FPR8Bits), AArch64::FPR8RegClassID, 1, 1, 1, 1 },
  { "FPR16", FPR16, FPR16Bits, 32, sizeof(FPR16Bits), AArch64::FPR16RegClassID, 2, 2, 1, 1 },
  { "FPR32", FPR32, FPR32Bits, 32, sizeof(FPR32Bits), AArch64::FPR32RegClassID, 4, 4, 1, 1 },
  { "GPR32", GPR32, GPR32Bits, 32, sizeof(GPR32Bits), AArch64::GPR32RegClassID, 4, 4, 1, 1 },
  { "GPR32wsp", GPR32wsp, GPR32wspBits, 32, sizeof(GPR32wspBits), AArch64::GPR32wspRegClassID, 4, 4, 1, 1 },
  { "GPR32nowzr", GPR32nowzr, GPR32nowzrBits, 31, sizeof(GPR32nowzrBits), AArch64::GPR32nowzrRegClassID, 4, 4, 1, 1 },
  { "FlagClass", FlagClass, FlagClassBits, 1, sizeof(FlagClassBits), AArch64::FlagClassRegClassID, 4, 4, -1, 0 },
  { "Rwsp", Rwsp, RwspBits, 1, sizeof(RwspBits), AArch64::RwspRegClassID, 4, 4, 1, 1 },
  { "FPR64", FPR64, FPR64Bits, 32, sizeof(FPR64Bits), AArch64::FPR64RegClassID, 8, 8, 1, 1 },
  { "GPR64", GPR64, GPR64Bits, 32, sizeof(GPR64Bits), AArch64::GPR64RegClassID, 8, 8, 1, 1 },
  { "GPR64xsp", GPR64xsp, GPR64xspBits, 32, sizeof(GPR64xspBits), AArch64::GPR64xspRegClassID, 8, 8, 1, 1 },
  { "VPR64", VPR64, VPR64Bits, 32, sizeof(VPR64Bits), AArch64::VPR64RegClassID, 8, 8, 1, 1 },
  { "GPR64noxzr", GPR64noxzr, GPR64noxzrBits, 31, sizeof(GPR64noxzrBits), AArch64::GPR64noxzrRegClassID, 8, 8, 1, 1 },
  { "tcGPR64", tcGPR64, tcGPR64Bits, 18, sizeof(tcGPR64Bits), AArch64::tcGPR64RegClassID, 8, 8, 1, 1 },
  { "Rxsp", Rxsp, RxspBits, 1, sizeof(RxspBits), AArch64::RxspRegClassID, 8, 8, 1, 1 },
  { "FPR128", FPR128, FPR128Bits, 32, sizeof(FPR128Bits), AArch64::FPR128RegClassID, 16, 16, 1, 1 },
  { "VPR128", VPR128, VPR128Bits, 32, sizeof(VPR128Bits), AArch64::VPR128RegClassID, 16, 16, 1, 1 },
};

// AArch64 Dwarf<->LLVM register mappings.
extern const MCRegisterInfo::DwarfLLVMRegPair AArch64DwarfFlavour0Dwarf2L[] = {
  { 0U, AArch64::X0 },
  { 1U, AArch64::X1 },
  { 2U, AArch64::X2 },
  { 3U, AArch64::X3 },
  { 4U, AArch64::X4 },
  { 5U, AArch64::X5 },
  { 6U, AArch64::X6 },
  { 7U, AArch64::X7 },
  { 8U, AArch64::X8 },
  { 9U, AArch64::X9 },
  { 10U, AArch64::X10 },
  { 11U, AArch64::X11 },
  { 12U, AArch64::X12 },
  { 13U, AArch64::X13 },
  { 14U, AArch64::X14 },
  { 15U, AArch64::X15 },
  { 16U, AArch64::X16 },
  { 17U, AArch64::X17 },
  { 18U, AArch64::X18 },
  { 19U, AArch64::X19 },
  { 20U, AArch64::X20 },
  { 21U, AArch64::X21 },
  { 22U, AArch64::X22 },
  { 23U, AArch64::X23 },
  { 24U, AArch64::X24 },
  { 25U, AArch64::X25 },
  { 26U, AArch64::X26 },
  { 27U, AArch64::X27 },
  { 28U, AArch64::X28 },
  { 29U, AArch64::X29 },
  { 30U, AArch64::X30 },
  { 31U, AArch64::XSP },
  { 64U, AArch64::V0 },
  { 65U, AArch64::V1 },
  { 66U, AArch64::V2 },
  { 67U, AArch64::V3 },
  { 68U, AArch64::V4 },
  { 69U, AArch64::V5 },
  { 70U, AArch64::V6 },
  { 71U, AArch64::V7 },
  { 72U, AArch64::V8 },
  { 73U, AArch64::V9 },
  { 74U, AArch64::V10 },
  { 75U, AArch64::V11 },
  { 76U, AArch64::V12 },
  { 77U, AArch64::V13 },
  { 78U, AArch64::V14 },
  { 79U, AArch64::V15 },
  { 80U, AArch64::V16 },
  { 81U, AArch64::V17 },
  { 82U, AArch64::V18 },
  { 83U, AArch64::V19 },
  { 84U, AArch64::V20 },
  { 85U, AArch64::V21 },
  { 86U, AArch64::V22 },
  { 87U, AArch64::V23 },
  { 88U, AArch64::V24 },
  { 89U, AArch64::V25 },
  { 90U, AArch64::V26 },
  { 91U, AArch64::V27 },
  { 92U, AArch64::V28 },
  { 93U, AArch64::V29 },
  { 94U, AArch64::V30 },
  { 95U, AArch64::V31 },
};
extern const unsigned AArch64DwarfFlavour0Dwarf2LSize = sizeof(AArch64DwarfFlavour0Dwarf2L)/sizeof(MCRegisterInfo::DwarfLLVMRegPair);

extern const MCRegisterInfo::DwarfLLVMRegPair AArch64EHFlavour0Dwarf2L[] = {
  { 0U, AArch64::X0 },
  { 1U, AArch64::X1 },
  { 2U, AArch64::X2 },
  { 3U, AArch64::X3 },
  { 4U, AArch64::X4 },
  { 5U, AArch64::X5 },
  { 6U, AArch64::X6 },
  { 7U, AArch64::X7 },
  { 8U, AArch64::X8 },
  { 9U, AArch64::X9 },
  { 10U, AArch64::X10 },
  { 11U, AArch64::X11 },
  { 12U, AArch64::X12 },
  { 13U, AArch64::X13 },
  { 14U, AArch64::X14 },
  { 15U, AArch64::X15 },
  { 16U, AArch64::X16 },
  { 17U, AArch64::X17 },
  { 18U, AArch64::X18 },
  { 19U, AArch64::X19 },
  { 20U, AArch64::X20 },
  { 21U, AArch64::X21 },
  { 22U, AArch64::X22 },
  { 23U, AArch64::X23 },
  { 24U, AArch64::X24 },
  { 25U, AArch64::X25 },
  { 26U, AArch64::X26 },
  { 27U, AArch64::X27 },
  { 28U, AArch64::X28 },
  { 29U, AArch64::X29 },
  { 30U, AArch64::X30 },
  { 31U, AArch64::XSP },
  { 64U, AArch64::V0 },
  { 65U, AArch64::V1 },
  { 66U, AArch64::V2 },
  { 67U, AArch64::V3 },
  { 68U, AArch64::V4 },
  { 69U, AArch64::V5 },
  { 70U, AArch64::V6 },
  { 71U, AArch64::V7 },
  { 72U, AArch64::V8 },
  { 73U, AArch64::V9 },
  { 74U, AArch64::V10 },
  { 75U, AArch64::V11 },
  { 76U, AArch64::V12 },
  { 77U, AArch64::V13 },
  { 78U, AArch64::V14 },
  { 79U, AArch64::V15 },
  { 80U, AArch64::V16 },
  { 81U, AArch64::V17 },
  { 82U, AArch64::V18 },
  { 83U, AArch64::V19 },
  { 84U, AArch64::V20 },
  { 85U, AArch64::V21 },
  { 86U, AArch64::V22 },
  { 87U, AArch64::V23 },
  { 88U, AArch64::V24 },
  { 89U, AArch64::V25 },
  { 90U, AArch64::V26 },
  { 91U, AArch64::V27 },
  { 92U, AArch64::V28 },
  { 93U, AArch64::V29 },
  { 94U, AArch64::V30 },
  { 95U, AArch64::V31 },
};
extern const unsigned AArch64EHFlavour0Dwarf2LSize = sizeof(AArch64EHFlavour0Dwarf2L)/sizeof(MCRegisterInfo::DwarfLLVMRegPair);

extern const MCRegisterInfo::DwarfLLVMRegPair AArch64DwarfFlavour0L2Dwarf[] = {
  { AArch64::WSP, 31U },
  { AArch64::XSP, 31U },
  { AArch64::B0, 64U },
  { AArch64::B1, 65U },
  { AArch64::B2, 66U },
  { AArch64::B3, 67U },
  { AArch64::B4, 68U },
  { AArch64::B5, 69U },
  { AArch64::B6, 70U },
  { AArch64::B7, 71U },
  { AArch64::B8, 72U },
  { AArch64::B9, 73U },
  { AArch64::B10, 74U },
  { AArch64::B11, 75U },
  { AArch64::B12, 76U },
  { AArch64::B13, 77U },
  { AArch64::B14, 78U },
  { AArch64::B15, 79U },
  { AArch64::B16, 80U },
  { AArch64::B17, 81U },
  { AArch64::B18, 82U },
  { AArch64::B19, 83U },
  { AArch64::B20, 84U },
  { AArch64::B21, 85U },
  { AArch64::B22, 86U },
  { AArch64::B23, 87U },
  { AArch64::B24, 88U },
  { AArch64::B25, 89U },
  { AArch64::B26, 90U },
  { AArch64::B27, 91U },
  { AArch64::B28, 92U },
  { AArch64::B29, 93U },
  { AArch64::B30, 94U },
  { AArch64::B31, 95U },
  { AArch64::D0, 64U },
  { AArch64::D1, 65U },
  { AArch64::D2, 66U },
  { AArch64::D3, 67U },
  { AArch64::D4, 68U },
  { AArch64::D5, 69U },
  { AArch64::D6, 70U },
  { AArch64::D7, 71U },
  { AArch64::D8, 72U },
  { AArch64::D9, 73U },
  { AArch64::D10, 74U },
  { AArch64::D11, 75U },
  { AArch64::D12, 76U },
  { AArch64::D13, 77U },
  { AArch64::D14, 78U },
  { AArch64::D15, 79U },
  { AArch64::D16, 80U },
  { AArch64::D17, 81U },
  { AArch64::D18, 82U },
  { AArch64::D19, 83U },
  { AArch64::D20, 84U },
  { AArch64::D21, 85U },
  { AArch64::D22, 86U },
  { AArch64::D23, 87U },
  { AArch64::D24, 88U },
  { AArch64::D25, 89U },
  { AArch64::D26, 90U },
  { AArch64::D27, 91U },
  { AArch64::D28, 92U },
  { AArch64::D29, 93U },
  { AArch64::D30, 94U },
  { AArch64::D31, 95U },
  { AArch64::H0, 64U },
  { AArch64::H1, 65U },
  { AArch64::H2, 66U },
  { AArch64::H3, 67U },
  { AArch64::H4, 68U },
  { AArch64::H5, 69U },
  { AArch64::H6, 70U },
  { AArch64::H7, 71U },
  { AArch64::H8, 72U },
  { AArch64::H9, 73U },
  { AArch64::H10, 74U },
  { AArch64::H11, 75U },
  { AArch64::H12, 76U },
  { AArch64::H13, 77U },
  { AArch64::H14, 78U },
  { AArch64::H15, 79U },
  { AArch64::H16, 80U },
  { AArch64::H17, 81U },
  { AArch64::H18, 82U },
  { AArch64::H19, 83U },
  { AArch64::H20, 84U },
  { AArch64::H21, 85U },
  { AArch64::H22, 86U },
  { AArch64::H23, 87U },
  { AArch64::H24, 88U },
  { AArch64::H25, 89U },
  { AArch64::H26, 90U },
  { AArch64::H27, 91U },
  { AArch64::H28, 92U },
  { AArch64::H29, 93U },
  { AArch64::H30, 94U },
  { AArch64::H31, 95U },
  { AArch64::Q0, 64U },
  { AArch64::Q1, 65U },
  { AArch64::Q2, 66U },
  { AArch64::Q3, 67U },
  { AArch64::Q4, 68U },
  { AArch64::Q5, 69U },
  { AArch64::Q6, 70U },
  { AArch64::Q7, 71U },
  { AArch64::Q8, 72U },
  { AArch64::Q9, 73U },
  { AArch64::Q10, 74U },
  { AArch64::Q11, 75U },
  { AArch64::Q12, 76U },
  { AArch64::Q13, 77U },
  { AArch64::Q14, 78U },
  { AArch64::Q15, 79U },
  { AArch64::Q16, 80U },
  { AArch64::Q17, 81U },
  { AArch64::Q18, 82U },
  { AArch64::Q19, 83U },
  { AArch64::Q20, 84U },
  { AArch64::Q21, 85U },
  { AArch64::Q22, 86U },
  { AArch64::Q23, 87U },
  { AArch64::Q24, 88U },
  { AArch64::Q25, 89U },
  { AArch64::Q26, 90U },
  { AArch64::Q27, 91U },
  { AArch64::Q28, 92U },
  { AArch64::Q29, 93U },
  { AArch64::Q30, 94U },
  { AArch64::Q31, 95U },
  { AArch64::S0, 64U },
  { AArch64::S1, 65U },
  { AArch64::S2, 66U },
  { AArch64::S3, 67U },
  { AArch64::S4, 68U },
  { AArch64::S5, 69U },
  { AArch64::S6, 70U },
  { AArch64::S7, 71U },
  { AArch64::S8, 72U },
  { AArch64::S9, 73U },
  { AArch64::S10, 74U },
  { AArch64::S11, 75U },
  { AArch64::S12, 76U },
  { AArch64::S13, 77U },
  { AArch64::S14, 78U },
  { AArch64::S15, 79U },
  { AArch64::S16, 80U },
  { AArch64::S17, 81U },
  { AArch64::S18, 82U },
  { AArch64::S19, 83U },
  { AArch64::S20, 84U },
  { AArch64::S21, 85U },
  { AArch64::S22, 86U },
  { AArch64::S23, 87U },
  { AArch64::S24, 88U },
  { AArch64::S25, 89U },
  { AArch64::S26, 90U },
  { AArch64::S27, 91U },
  { AArch64::S28, 92U },
  { AArch64::S29, 93U },
  { AArch64::S30, 94U },
  { AArch64::S31, 95U },
  { AArch64::V0, 64U },
  { AArch64::V1, 65U },
  { AArch64::V2, 66U },
  { AArch64::V3, 67U },
  { AArch64::V4, 68U },
  { AArch64::V5, 69U },
  { AArch64::V6, 70U },
  { AArch64::V7, 71U },
  { AArch64::V8, 72U },
  { AArch64::V9, 73U },
  { AArch64::V10, 74U },
  { AArch64::V11, 75U },
  { AArch64::V12, 76U },
  { AArch64::V13, 77U },
  { AArch64::V14, 78U },
  { AArch64::V15, 79U },
  { AArch64::V16, 80U },
  { AArch64::V17, 81U },
  { AArch64::V18, 82U },
  { AArch64::V19, 83U },
  { AArch64::V20, 84U },
  { AArch64::V21, 85U },
  { AArch64::V22, 86U },
  { AArch64::V23, 87U },
  { AArch64::V24, 88U },
  { AArch64::V25, 89U },
  { AArch64::V26, 90U },
  { AArch64::V27, 91U },
  { AArch64::V28, 92U },
  { AArch64::V29, 93U },
  { AArch64::V30, 94U },
  { AArch64::V31, 95U },
  { AArch64::W0, 0U },
  { AArch64::W1, 1U },
  { AArch64::W2, 2U },
  { AArch64::W3, 3U },
  { AArch64::W4, 4U },
  { AArch64::W5, 5U },
  { AArch64::W6, 6U },
  { AArch64::W7, 7U },
  { AArch64::W8, 8U },
  { AArch64::W9, 9U },
  { AArch64::W10, 10U },
  { AArch64::W11, 11U },
  { AArch64::W12, 12U },
  { AArch64::W13, 13U },
  { AArch64::W14, 14U },
  { AArch64::W15, 15U },
  { AArch64::W16, 16U },
  { AArch64::W17, 17U },
  { AArch64::W18, 18U },
  { AArch64::W19, 19U },
  { AArch64::W20, 20U },
  { AArch64::W21, 21U },
  { AArch64::W22, 22U },
  { AArch64::W23, 23U },
  { AArch64::W24, 24U },
  { AArch64::W25, 25U },
  { AArch64::W26, 26U },
  { AArch64::W27, 27U },
  { AArch64::W28, 28U },
  { AArch64::W29, 29U },
  { AArch64::W30, 30U },
  { AArch64::X0, 0U },
  { AArch64::X1, 1U },
  { AArch64::X2, 2U },
  { AArch64::X3, 3U },
  { AArch64::X4, 4U },
  { AArch64::X5, 5U },
  { AArch64::X6, 6U },
  { AArch64::X7, 7U },
  { AArch64::X8, 8U },
  { AArch64::X9, 9U },
  { AArch64::X10, 10U },
  { AArch64::X11, 11U },
  { AArch64::X12, 12U },
  { AArch64::X13, 13U },
  { AArch64::X14, 14U },
  { AArch64::X15, 15U },
  { AArch64::X16, 16U },
  { AArch64::X17, 17U },
  { AArch64::X18, 18U },
  { AArch64::X19, 19U },
  { AArch64::X20, 20U },
  { AArch64::X21, 21U },
  { AArch64::X22, 22U },
  { AArch64::X23, 23U },
  { AArch64::X24, 24U },
  { AArch64::X25, 25U },
  { AArch64::X26, 26U },
  { AArch64::X27, 27U },
  { AArch64::X28, 28U },
  { AArch64::X29, 29U },
  { AArch64::X30, 30U },
};
extern const unsigned AArch64DwarfFlavour0L2DwarfSize = sizeof(AArch64DwarfFlavour0L2Dwarf)/sizeof(MCRegisterInfo::DwarfLLVMRegPair);

extern const MCRegisterInfo::DwarfLLVMRegPair AArch64EHFlavour0L2Dwarf[] = {
  { AArch64::WSP, 31U },
  { AArch64::XSP, 31U },
  { AArch64::B0, 64U },
  { AArch64::B1, 65U },
  { AArch64::B2, 66U },
  { AArch64::B3, 67U },
  { AArch64::B4, 68U },
  { AArch64::B5, 69U },
  { AArch64::B6, 70U },
  { AArch64::B7, 71U },
  { AArch64::B8, 72U },
  { AArch64::B9, 73U },
  { AArch64::B10, 74U },
  { AArch64::B11, 75U },
  { AArch64::B12, 76U },
  { AArch64::B13, 77U },
  { AArch64::B14, 78U },
  { AArch64::B15, 79U },
  { AArch64::B16, 80U },
  { AArch64::B17, 81U },
  { AArch64::B18, 82U },
  { AArch64::B19, 83U },
  { AArch64::B20, 84U },
  { AArch64::B21, 85U },
  { AArch64::B22, 86U },
  { AArch64::B23, 87U },
  { AArch64::B24, 88U },
  { AArch64::B25, 89U },
  { AArch64::B26, 90U },
  { AArch64::B27, 91U },
  { AArch64::B28, 92U },
  { AArch64::B29, 93U },
  { AArch64::B30, 94U },
  { AArch64::B31, 95U },
  { AArch64::D0, 64U },
  { AArch64::D1, 65U },
  { AArch64::D2, 66U },
  { AArch64::D3, 67U },
  { AArch64::D4, 68U },
  { AArch64::D5, 69U },
  { AArch64::D6, 70U },
  { AArch64::D7, 71U },
  { AArch64::D8, 72U },
  { AArch64::D9, 73U },
  { AArch64::D10, 74U },
  { AArch64::D11, 75U },
  { AArch64::D12, 76U },
  { AArch64::D13, 77U },
  { AArch64::D14, 78U },
  { AArch64::D15, 79U },
  { AArch64::D16, 80U },
  { AArch64::D17, 81U },
  { AArch64::D18, 82U },
  { AArch64::D19, 83U },
  { AArch64::D20, 84U },
  { AArch64::D21, 85U },
  { AArch64::D22, 86U },
  { AArch64::D23, 87U },
  { AArch64::D24, 88U },
  { AArch64::D25, 89U },
  { AArch64::D26, 90U },
  { AArch64::D27, 91U },
  { AArch64::D28, 92U },
  { AArch64::D29, 93U },
  { AArch64::D30, 94U },
  { AArch64::D31, 95U },
  { AArch64::H0, 64U },
  { AArch64::H1, 65U },
  { AArch64::H2, 66U },
  { AArch64::H3, 67U },
  { AArch64::H4, 68U },
  { AArch64::H5, 69U },
  { AArch64::H6, 70U },
  { AArch64::H7, 71U },
  { AArch64::H8, 72U },
  { AArch64::H9, 73U },
  { AArch64::H10, 74U },
  { AArch64::H11, 75U },
  { AArch64::H12, 76U },
  { AArch64::H13, 77U },
  { AArch64::H14, 78U },
  { AArch64::H15, 79U },
  { AArch64::H16, 80U },
  { AArch64::H17, 81U },
  { AArch64::H18, 82U },
  { AArch64::H19, 83U },
  { AArch64::H20, 84U },
  { AArch64::H21, 85U },
  { AArch64::H22, 86U },
  { AArch64::H23, 87U },
  { AArch64::H24, 88U },
  { AArch64::H25, 89U },
  { AArch64::H26, 90U },
  { AArch64::H27, 91U },
  { AArch64::H28, 92U },
  { AArch64::H29, 93U },
  { AArch64::H30, 94U },
  { AArch64::H31, 95U },
  { AArch64::Q0, 64U },
  { AArch64::Q1, 65U },
  { AArch64::Q2, 66U },
  { AArch64::Q3, 67U },
  { AArch64::Q4, 68U },
  { AArch64::Q5, 69U },
  { AArch64::Q6, 70U },
  { AArch64::Q7, 71U },
  { AArch64::Q8, 72U },
  { AArch64::Q9, 73U },
  { AArch64::Q10, 74U },
  { AArch64::Q11, 75U },
  { AArch64::Q12, 76U },
  { AArch64::Q13, 77U },
  { AArch64::Q14, 78U },
  { AArch64::Q15, 79U },
  { AArch64::Q16, 80U },
  { AArch64::Q17, 81U },
  { AArch64::Q18, 82U },
  { AArch64::Q19, 83U },
  { AArch64::Q20, 84U },
  { AArch64::Q21, 85U },
  { AArch64::Q22, 86U },
  { AArch64::Q23, 87U },
  { AArch64::Q24, 88U },
  { AArch64::Q25, 89U },
  { AArch64::Q26, 90U },
  { AArch64::Q27, 91U },
  { AArch64::Q28, 92U },
  { AArch64::Q29, 93U },
  { AArch64::Q30, 94U },
  { AArch64::Q31, 95U },
  { AArch64::S0, 64U },
  { AArch64::S1, 65U },
  { AArch64::S2, 66U },
  { AArch64::S3, 67U },
  { AArch64::S4, 68U },
  { AArch64::S5, 69U },
  { AArch64::S6, 70U },
  { AArch64::S7, 71U },
  { AArch64::S8, 72U },
  { AArch64::S9, 73U },
  { AArch64::S10, 74U },
  { AArch64::S11, 75U },
  { AArch64::S12, 76U },
  { AArch64::S13, 77U },
  { AArch64::S14, 78U },
  { AArch64::S15, 79U },
  { AArch64::S16, 80U },
  { AArch64::S17, 81U },
  { AArch64::S18, 82U },
  { AArch64::S19, 83U },
  { AArch64::S20, 84U },
  { AArch64::S21, 85U },
  { AArch64::S22, 86U },
  { AArch64::S23, 87U },
  { AArch64::S24, 88U },
  { AArch64::S25, 89U },
  { AArch64::S26, 90U },
  { AArch64::S27, 91U },
  { AArch64::S28, 92U },
  { AArch64::S29, 93U },
  { AArch64::S30, 94U },
  { AArch64::S31, 95U },
  { AArch64::V0, 64U },
  { AArch64::V1, 65U },
  { AArch64::V2, 66U },
  { AArch64::V3, 67U },
  { AArch64::V4, 68U },
  { AArch64::V5, 69U },
  { AArch64::V6, 70U },
  { AArch64::V7, 71U },
  { AArch64::V8, 72U },
  { AArch64::V9, 73U },
  { AArch64::V10, 74U },
  { AArch64::V11, 75U },
  { AArch64::V12, 76U },
  { AArch64::V13, 77U },
  { AArch64::V14, 78U },
  { AArch64::V15, 79U },
  { AArch64::V16, 80U },
  { AArch64::V17, 81U },
  { AArch64::V18, 82U },
  { AArch64::V19, 83U },
  { AArch64::V20, 84U },
  { AArch64::V21, 85U },
  { AArch64::V22, 86U },
  { AArch64::V23, 87U },
  { AArch64::V24, 88U },
  { AArch64::V25, 89U },
  { AArch64::V26, 90U },
  { AArch64::V27, 91U },
  { AArch64::V28, 92U },
  { AArch64::V29, 93U },
  { AArch64::V30, 94U },
  { AArch64::V31, 95U },
  { AArch64::W0, 0U },
  { AArch64::W1, 1U },
  { AArch64::W2, 2U },
  { AArch64::W3, 3U },
  { AArch64::W4, 4U },
  { AArch64::W5, 5U },
  { AArch64::W6, 6U },
  { AArch64::W7, 7U },
  { AArch64::W8, 8U },
  { AArch64::W9, 9U },
  { AArch64::W10, 10U },
  { AArch64::W11, 11U },
  { AArch64::W12, 12U },
  { AArch64::W13, 13U },
  { AArch64::W14, 14U },
  { AArch64::W15, 15U },
  { AArch64::W16, 16U },
  { AArch64::W17, 17U },
  { AArch64::W18, 18U },
  { AArch64::W19, 19U },
  { AArch64::W20, 20U },
  { AArch64::W21, 21U },
  { AArch64::W22, 22U },
  { AArch64::W23, 23U },
  { AArch64::W24, 24U },
  { AArch64::W25, 25U },
  { AArch64::W26, 26U },
  { AArch64::W27, 27U },
  { AArch64::W28, 28U },
  { AArch64::W29, 29U },
  { AArch64::W30, 30U },
  { AArch64::X0, 0U },
  { AArch64::X1, 1U },
  { AArch64::X2, 2U },
  { AArch64::X3, 3U },
  { AArch64::X4, 4U },
  { AArch64::X5, 5U },
  { AArch64::X6, 6U },
  { AArch64::X7, 7U },
  { AArch64::X8, 8U },
  { AArch64::X9, 9U },
  { AArch64::X10, 10U },
  { AArch64::X11, 11U },
  { AArch64::X12, 12U },
  { AArch64::X13, 13U },
  { AArch64::X14, 14U },
  { AArch64::X15, 15U },
  { AArch64::X16, 16U },
  { AArch64::X17, 17U },
  { AArch64::X18, 18U },
  { AArch64::X19, 19U },
  { AArch64::X20, 20U },
  { AArch64::X21, 21U },
  { AArch64::X22, 22U },
  { AArch64::X23, 23U },
  { AArch64::X24, 24U },
  { AArch64::X25, 25U },
  { AArch64::X26, 26U },
  { AArch64::X27, 27U },
  { AArch64::X28, 28U },
  { AArch64::X29, 29U },
  { AArch64::X30, 30U },
};
extern const unsigned AArch64EHFlavour0L2DwarfSize = sizeof(AArch64EHFlavour0L2Dwarf)/sizeof(MCRegisterInfo::DwarfLLVMRegPair);

extern const uint16_t AArch64RegEncodingTable[] = {
  0,
  0,
  31,
  31,
  31,
  31,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  30,
  31,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  30,
  31,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  30,
  31,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  30,
  31,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  30,
  31,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  30,
  31,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  30,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  30,
};
static inline void InitAArch64MCRegisterInfo(MCRegisterInfo *RI, unsigned RA, unsigned DwarfFlavour = 0, unsigned EHFlavour = 0, unsigned PC = 0) {
  RI->InitMCRegisterInfo(AArch64RegDesc, 260, RA, PC, AArch64MCRegisterClasses, 17, AArch64RegUnitRoots, 66, AArch64RegDiffLists, AArch64RegStrings, AArch64SubRegIdxLists, 7,
AArch64SubRegIdxRanges,   AArch64RegEncodingTable);

  switch (DwarfFlavour) {
  default:
    llvm_unreachable("Unknown DWARF flavour");
  case 0:
    RI->mapDwarfRegsToLLVMRegs(AArch64DwarfFlavour0Dwarf2L, AArch64DwarfFlavour0Dwarf2LSize, false);
    break;
  }
  switch (EHFlavour) {
  default:
    llvm_unreachable("Unknown DWARF flavour");
  case 0:
    RI->mapDwarfRegsToLLVMRegs(AArch64EHFlavour0Dwarf2L, AArch64EHFlavour0Dwarf2LSize, true);
    break;
  }
  switch (DwarfFlavour) {
  default:
    llvm_unreachable("Unknown DWARF flavour");
  case 0:
    RI->mapLLVMRegsToDwarfRegs(AArch64DwarfFlavour0L2Dwarf, AArch64DwarfFlavour0L2DwarfSize, false);
    break;
  }
  switch (EHFlavour) {
  default:
    llvm_unreachable("Unknown DWARF flavour");
  case 0:
    RI->mapLLVMRegsToDwarfRegs(AArch64EHFlavour0L2Dwarf, AArch64EHFlavour0L2DwarfSize, true);
    break;
  }
}

} // End llvm namespace 
#endif // GET_REGINFO_MC_DESC

/*===- TableGen'erated file -------------------------------------*- C++ -*-===*\
|*                                                                            *|
|*Register Information Header Fragment                                        *|
|*                                                                            *|
|* Automatically generated file, do not edit!                                 *|
|*                                                                            *|
\*===----------------------------------------------------------------------===*/


#ifdef GET_REGINFO_HEADER
#undef GET_REGINFO_HEADER
#include "llvm/Target/TargetRegisterInfo.h"

namespace llvm {

struct AArch64GenRegisterInfo : public TargetRegisterInfo {
  explicit AArch64GenRegisterInfo(unsigned RA, unsigned D = 0, unsigned E = 0, unsigned PC = 0);
  virtual bool needsStackRealignment(const MachineFunction &) const
     { return false; }
  virtual unsigned composeSubRegIndicesImpl(unsigned, unsigned) const;
  virtual const TargetRegisterClass *getSubClassWithSubReg(const TargetRegisterClass*, unsigned) const;
  virtual const RegClassWeight &getRegClassWeight(const TargetRegisterClass *RC) const;
  virtual unsigned getRegUnitWeight(unsigned RegUnit) const;
  virtual unsigned getNumRegPressureSets() const;
  virtual const char *getRegPressureSetName(unsigned Idx) const;
  virtual unsigned getRegPressureSetLimit(unsigned Idx) const;
  virtual const int *getRegClassPressureSets(const TargetRegisterClass *RC) const;
  virtual const int *getRegUnitPressureSets(unsigned RegUnit) const;
};

namespace AArch64 { // Register classes
  extern const TargetRegisterClass FPR8RegClass;
  extern const TargetRegisterClass FPR16RegClass;
  extern const TargetRegisterClass FPR32RegClass;
  extern const TargetRegisterClass GPR32RegClass;
  extern const TargetRegisterClass GPR32wspRegClass;
  extern const TargetRegisterClass GPR32nowzrRegClass;
  extern const TargetRegisterClass FlagClassRegClass;
  extern const TargetRegisterClass RwspRegClass;
  extern const TargetRegisterClass FPR64RegClass;
  extern const TargetRegisterClass GPR64RegClass;
  extern const TargetRegisterClass GPR64xspRegClass;
  extern const TargetRegisterClass VPR64RegClass;
  extern const TargetRegisterClass GPR64noxzrRegClass;
  extern const TargetRegisterClass tcGPR64RegClass;
  extern const TargetRegisterClass RxspRegClass;
  extern const TargetRegisterClass FPR128RegClass;
  extern const TargetRegisterClass VPR128RegClass;
} // end of namespace AArch64

} // End llvm namespace 
#endif // GET_REGINFO_HEADER

/*===- TableGen'erated file -------------------------------------*- C++ -*-===*\
|*                                                                            *|
|*Target Register and Register Classes Information                            *|
|*                                                                            *|
|* Automatically generated file, do not edit!                                 *|
|*                                                                            *|
\*===----------------------------------------------------------------------===*/


#ifdef GET_REGINFO_TARGET_DESC
#undef GET_REGINFO_TARGET_DESC
namespace llvm {

extern const MCRegisterClass AArch64MCRegisterClasses[];

static const MVT::SimpleValueType VTLists[] = {
  /* 0 */ MVT::i8, MVT::Other,
  /* 2 */ MVT::i32, MVT::Other,
  /* 4 */ MVT::i64, MVT::Other,
  /* 6 */ MVT::f16, MVT::Other,
  /* 8 */ MVT::f32, MVT::Other,
  /* 10 */ MVT::f64, MVT::Other,
  /* 12 */ MVT::f128, MVT::Other,
  /* 14 */ MVT::v2f64, MVT::v2i64, MVT::v4f32, MVT::v4i32, MVT::v8i16, MVT::v16i8, MVT::Other,
  /* 21 */ MVT::v2f32, MVT::v2i32, MVT::v4i16, MVT::v8i8, MVT::v1i64, MVT::Other,
};

static const char *const SubRegIndexNameTable[] = { "sub_8", "sub_16", "sub_32", "sub_64", "sub_128", "sub_alias" };


static const unsigned SubRegIndexLaneMaskTable[] = {
  ~0u,
  0x00000001, // sub_8
  0x00000001, // sub_16
  0x00000001, // sub_32
  0x00000001, // sub_64
  0x00000002, // sub_128
  0x00000001, // sub_alias
 };



static const TargetRegisterClass *const NullRegClasses[] = { NULL };

static const uint32_t FPR8SubClassMask[] = {
  0x00000001, 
  0x00018906, // sub_8
};

static const uint32_t FPR16SubClassMask[] = {
  0x00000002, 
  0x00018904, // sub_16
};

static const uint32_t FPR32SubClassMask[] = {
  0x00000004, 
  0x00018900, // sub_32
};

static const uint32_t GPR32SubClassMask[] = {
  0x00000028, 
  0x00003200, // sub_32
};

static const uint32_t GPR32wspSubClassMask[] = {
  0x000000b0, 
  0x00007400, // sub_32
};

static const uint32_t GPR32nowzrSubClassMask[] = {
  0x00000020, 
  0x00003000, // sub_32
};

static const uint32_t FlagClassSubClassMask[] = {
  0x00000040, 
};

static const uint32_t RwspSubClassMask[] = {
  0x00000080, 
  0x00004000, // sub_32
};

static const uint32_t FPR64SubClassMask[] = {
  0x00000100, 
  0x00018800, // sub_64
};

static const uint32_t GPR64SubClassMask[] = {
  0x00003200, 
};

static const uint32_t GPR64xspSubClassMask[] = {
  0x00007400, 
};

static const uint32_t VPR64SubClassMask[] = {
  0x00010800, 
};

static const uint32_t GPR64noxzrSubClassMask[] = {
  0x00003000, 
};

static const uint32_t tcGPR64SubClassMask[] = {
  0x00002000, 
};

static const uint32_t RxspSubClassMask[] = {
  0x00004000, 
};

static const uint32_t FPR128SubClassMask[] = {
  0x00008000, 
  0x00010800, // sub_alias
};

static const uint32_t VPR128SubClassMask[] = {
  0x00010000, 
};

static const uint16_t SuperRegIdxSeqs[] = {
  /* 0 */ 1, 0,
  /* 2 */ 2, 0,
  /* 4 */ 3, 0,
  /* 6 */ 4, 0,
  /* 8 */ 6, 0,
};

static const TargetRegisterClass *const GPR32nowzrSuperclasses[] = {
  &AArch64::GPR32RegClass,
  &AArch64::GPR32wspRegClass,
  NULL
};

static const TargetRegisterClass *const RwspSuperclasses[] = {
  &AArch64::GPR32wspRegClass,
  NULL
};

static const TargetRegisterClass *const GPR64noxzrSuperclasses[] = {
  &AArch64::GPR64RegClass,
  &AArch64::GPR64xspRegClass,
  NULL
};

static const TargetRegisterClass *const tcGPR64Superclasses[] = {
  &AArch64::GPR64RegClass,
  &AArch64::GPR64xspRegClass,
  &AArch64::GPR64noxzrRegClass,
  NULL
};

static const TargetRegisterClass *const RxspSuperclasses[] = {
  &AArch64::GPR64xspRegClass,
  NULL
};

static const TargetRegisterClass *const VPR128Superclasses[] = {
  &AArch64::VPR64RegClass,
  NULL
};

namespace AArch64 {   // Register class instances
  extern const TargetRegisterClass FPR8RegClass = {
    &AArch64MCRegisterClasses[FPR8RegClassID],
    VTLists + 0,
    FPR8SubClassMask,
    SuperRegIdxSeqs + 0,
    NullRegClasses,
    0
  };

  extern const TargetRegisterClass FPR16RegClass = {
    &AArch64MCRegisterClasses[FPR16RegClassID],
    VTLists + 6,
    FPR16SubClassMask,
    SuperRegIdxSeqs + 2,
    NullRegClasses,
    0
  };

  extern const TargetRegisterClass FPR32RegClass = {
    &AArch64MCRegisterClasses[FPR32RegClassID],
    VTLists + 8,
    FPR32SubClassMask,
    SuperRegIdxSeqs + 4,
    NullRegClasses,
    0
  };

  extern const TargetRegisterClass GPR32RegClass = {
    &AArch64MCRegisterClasses[GPR32RegClassID],
    VTLists + 2,
    GPR32SubClassMask,
    SuperRegIdxSeqs + 4,
    NullRegClasses,
    0
  };

  extern const TargetRegisterClass GPR32wspRegClass = {
    &AArch64MCRegisterClasses[GPR32wspRegClassID],
    VTLists + 2,
    GPR32wspSubClassMask,
    SuperRegIdxSeqs + 4,
    NullRegClasses,
    0
  };

  extern const TargetRegisterClass GPR32nowzrRegClass = {
    &AArch64MCRegisterClasses[GPR32nowzrRegClassID],
    VTLists + 2,
    GPR32nowzrSubClassMask,
    SuperRegIdxSeqs + 4,
    GPR32nowzrSuperclasses,
    0
  };

  extern const TargetRegisterClass FlagClassRegClass = {
    &AArch64MCRegisterClasses[FlagClassRegClassID],
    VTLists + 2,
    FlagClassSubClassMask,
    SuperRegIdxSeqs + 1,
    NullRegClasses,
    0
  };

  extern const TargetRegisterClass RwspRegClass = {
    &AArch64MCRegisterClasses[RwspRegClassID],
    VTLists + 2,
    RwspSubClassMask,
    SuperRegIdxSeqs + 4,
    RwspSuperclasses,
    0
  };

  extern const TargetRegisterClass FPR64RegClass = {
    &AArch64MCRegisterClasses[FPR64RegClassID],
    VTLists + 10,
    FPR64SubClassMask,
    SuperRegIdxSeqs + 6,
    NullRegClasses,
    0
  };

  extern const TargetRegisterClass GPR64RegClass = {
    &AArch64MCRegisterClasses[GPR64RegClassID],
    VTLists + 4,
    GPR64SubClassMask,
    SuperRegIdxSeqs + 1,
    NullRegClasses,
    0
  };

  extern const TargetRegisterClass GPR64xspRegClass = {
    &AArch64MCRegisterClasses[GPR64xspRegClassID],
    VTLists + 4,
    GPR64xspSubClassMask,
    SuperRegIdxSeqs + 1,
    NullRegClasses,
    0
  };

  extern const TargetRegisterClass VPR64RegClass = {
    &AArch64MCRegisterClasses[VPR64RegClassID],
    VTLists + 21,
    VPR64SubClassMask,
    SuperRegIdxSeqs + 1,
    NullRegClasses,
    0
  };

  extern const TargetRegisterClass GPR64noxzrRegClass = {
    &AArch64MCRegisterClasses[GPR64noxzrRegClassID],
    VTLists + 4,
    GPR64noxzrSubClassMask,
    SuperRegIdxSeqs + 1,
    GPR64noxzrSuperclasses,
    0
  };

  extern const TargetRegisterClass tcGPR64RegClass = {
    &AArch64MCRegisterClasses[tcGPR64RegClassID],
    VTLists + 4,
    tcGPR64SubClassMask,
    SuperRegIdxSeqs + 1,
    tcGPR64Superclasses,
    0
  };

  extern const TargetRegisterClass RxspRegClass = {
    &AArch64MCRegisterClasses[RxspRegClassID],
    VTLists + 4,
    RxspSubClassMask,
    SuperRegIdxSeqs + 1,
    RxspSuperclasses,
    0
  };

  extern const TargetRegisterClass FPR128RegClass = {
    &AArch64MCRegisterClasses[FPR128RegClassID],
    VTLists + 12,
    FPR128SubClassMask,
    SuperRegIdxSeqs + 8,
    NullRegClasses,
    0
  };

  extern const TargetRegisterClass VPR128RegClass = {
    &AArch64MCRegisterClasses[VPR128RegClassID],
    VTLists + 14,
    VPR128SubClassMask,
    SuperRegIdxSeqs + 1,
    VPR128Superclasses,
    0
  };

}

namespace {
  const TargetRegisterClass* const RegisterClasses[] = {
    &AArch64::FPR8RegClass,
    &AArch64::FPR16RegClass,
    &AArch64::FPR32RegClass,
    &AArch64::GPR32RegClass,
    &AArch64::GPR32wspRegClass,
    &AArch64::GPR32nowzrRegClass,
    &AArch64::FlagClassRegClass,
    &AArch64::RwspRegClass,
    &AArch64::FPR64RegClass,
    &AArch64::GPR64RegClass,
    &AArch64::GPR64xspRegClass,
    &AArch64::VPR64RegClass,
    &AArch64::GPR64noxzrRegClass,
    &AArch64::tcGPR64RegClass,
    &AArch64::RxspRegClass,
    &AArch64::FPR128RegClass,
    &AArch64::VPR128RegClass,
  };
}

static const TargetRegisterInfoDesc AArch64RegInfoDesc[] = { // Extra Descriptors
  { 0, 0 },
  { 0, 0 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
};
unsigned AArch64GenRegisterInfo::composeSubRegIndicesImpl(unsigned IdxA, unsigned IdxB) const {
  static const uint8_t Rows[1][6] = {
    { 1, 2, 3, 4, 0, 0, },
  };

  --IdxA; assert(IdxA < 6);
  --IdxB; assert(IdxB < 6);
  return Rows[0][IdxB];
}

const TargetRegisterClass *AArch64GenRegisterInfo::getSubClassWithSubReg(const TargetRegisterClass *RC, unsigned Idx) const {
  static const uint8_t Table[17][6] = {
    {	// FPR8
      0,	// sub_8
      0,	// sub_16
      0,	// sub_32
      0,	// sub_64
      0,	// sub_128
      0,	// sub_alias
    },
    {	// FPR16
      2,	// sub_8 -> FPR16
      0,	// sub_16
      0,	// sub_32
      0,	// sub_64
      0,	// sub_128
      0,	// sub_alias
    },
    {	// FPR32
      3,	// sub_8 -> FPR32
      3,	// sub_16 -> FPR32
      0,	// sub_32
      0,	// sub_64
      0,	// sub_128
      0,	// sub_alias
    },
    {	// GPR32
      0,	// sub_8
      0,	// sub_16
      0,	// sub_32
      0,	// sub_64
      0,	// sub_128
      0,	// sub_alias
    },
    {	// GPR32wsp
      0,	// sub_8
      0,	// sub_16
      0,	// sub_32
      0,	// sub_64
      0,	// sub_128
      0,	// sub_alias
    },
    {	// GPR32nowzr
      0,	// sub_8
      0,	// sub_16
      0,	// sub_32
      0,	// sub_64
      0,	// sub_128
      0,	// sub_alias
    },
    {	// FlagClass
      0,	// sub_8
      0,	// sub_16
      0,	// sub_32
      0,	// sub_64
      0,	// sub_128
      0,	// sub_alias
    },
    {	// Rwsp
      0,	// sub_8
      0,	// sub_16
      0,	// sub_32
      0,	// sub_64
      0,	// sub_128
      0,	// sub_alias
    },
    {	// FPR64
      9,	// sub_8 -> FPR64
      9,	// sub_16 -> FPR64
      9,	// sub_32 -> FPR64
      0,	// sub_64
      0,	// sub_128
      0,	// sub_alias
    },
    {	// GPR64
      0,	// sub_8
      0,	// sub_16
      10,	// sub_32 -> GPR64
      0,	// sub_64
      0,	// sub_128
      0,	// sub_alias
    },
    {	// GPR64xsp
      0,	// sub_8
      0,	// sub_16
      11,	// sub_32 -> GPR64xsp
      0,	// sub_64
      0,	// sub_128
      0,	// sub_alias
    },
    {	// VPR64
      12,	// sub_8 -> VPR64
      12,	// sub_16 -> VPR64
      12,	// sub_32 -> VPR64
      12,	// sub_64 -> VPR64
      0,	// sub_128
      12,	// sub_alias -> VPR64
    },
    {	// GPR64noxzr
      0,	// sub_8
      0,	// sub_16
      13,	// sub_32 -> GPR64noxzr
      0,	// sub_64
      0,	// sub_128
      0,	// sub_alias
    },
    {	// tcGPR64
      0,	// sub_8
      0,	// sub_16
      14,	// sub_32 -> tcGPR64
      0,	// sub_64
      0,	// sub_128
      0,	// sub_alias
    },
    {	// Rxsp
      0,	// sub_8
      0,	// sub_16
      15,	// sub_32 -> Rxsp
      0,	// sub_64
      0,	// sub_128
      0,	// sub_alias
    },
    {	// FPR128
      16,	// sub_8 -> FPR128
      16,	// sub_16 -> FPR128
      16,	// sub_32 -> FPR128
      16,	// sub_64 -> FPR128
      0,	// sub_128
      0,	// sub_alias
    },
    {	// VPR128
      17,	// sub_8 -> VPR128
      17,	// sub_16 -> VPR128
      17,	// sub_32 -> VPR128
      17,	// sub_64 -> VPR128
      0,	// sub_128
      17,	// sub_alias -> VPR128
    },
  };
  assert(RC && "Missing regclass");
  if (!Idx) return RC;
  --Idx;
  assert(Idx < 6 && "Bad subreg");
  unsigned TV = Table[RC->getID()][Idx];
  return TV ? getRegClass(TV - 1) : 0;
}

/// Get the weight in units of pressure for this register class.
const RegClassWeight &AArch64GenRegisterInfo::
getRegClassWeight(const TargetRegisterClass *RC) const {
  static const RegClassWeight RCWeightTable[] = {
    {1, 32},  	// FPR8
    {1, 32},  	// FPR16
    {1, 32},  	// FPR32
    {1, 32},  	// GPR32
    {1, 32},  	// GPR32wsp
    {1, 31},  	// GPR32nowzr
    {0, 0},  	// FlagClass
    {1, 1},  	// Rwsp
    {1, 32},  	// FPR64
    {1, 32},  	// GPR64
    {1, 32},  	// GPR64xsp
    {1, 32},  	// VPR64
    {1, 31},  	// GPR64noxzr
    {1, 18},  	// tcGPR64
    {1, 1},  	// Rxsp
    {1, 32},  	// FPR128
    {1, 32},  	// VPR128
    {0, 0} };
  return RCWeightTable[RC->getID()];
}

/// Get the weight in units of pressure for this register unit.
unsigned AArch64GenRegisterInfo::
getRegUnitWeight(unsigned RegUnit) const {
  assert(RegUnit < 66 && "invalid register unit");
  // All register units have unit weight.
  return 1;
}


// Get the number of dimensions of register pressure.
unsigned AArch64GenRegisterInfo::getNumRegPressureSets() const {
  return 4;
}

// Get the name of this register unit pressure set.
const char *AArch64GenRegisterInfo::
getRegPressureSetName(unsigned Idx) const {
  static const char *PressureNameTable[] = {
    "Rwsp",
    "tcGPR64",
    "FPR8",
    "GPR32+GPR32wsp",
    0 };
  return PressureNameTable[Idx];
}

// Get the register unit pressure limit for this dimension.
// This limit must be adjusted dynamically for reserved registers.
unsigned AArch64GenRegisterInfo::
getRegPressureSetLimit(unsigned Idx) const {
  static const unsigned PressureLimitTable[] = {
    1,  	// 0: Rwsp
    18,  	// 1: tcGPR64
    32,  	// 2: FPR8
    33,  	// 3: GPR32+GPR32wsp
    0 };
  return PressureLimitTable[Idx];
}

/// Table of pressure sets per register class or unit.
static const int RCSetsTable[] = {
    2,  -1,  	// #0 FPR8
    2,  -1,  	// #2 FPR16
    2,  -1,  	// #4 FPR32
    3,  -1,  	// #6 GPR32
    3,  -1,  	// #8 GPR32wsp
    3,  -1,  	// #10 GPR32nowzr
    -1,  	// #12 FlagClass
    0,  3,  -1,  	// #13 Rwsp
    2,  -1,  	// #16 FPR64
    3,  -1,  	// #18 GPR64
    3,  -1,  	// #20 GPR64xsp
    2,  -1,  	// #22 VPR64
    3,  -1,  	// #24 GPR64noxzr
    1,  3,  -1,  	// #26 tcGPR64
    0,  3,  -1,  	// #29 Rxsp
    2,  -1,  	// #32 FPR128
    2,  -1,  	// #34 VPR128
    -1 };

/// Get the dimensions of register pressure impacted by this register class.
/// Returns a -1 terminated array of pressure set IDs
const int* AArch64GenRegisterInfo::
getRegClassPressureSets(const TargetRegisterClass *RC) const {
  static const unsigned RCSetStartTable[] = {
    0,2,4,6,8,10,12,13,16,18,20,22,24,26,29,32,34,0 };
  unsigned SetListStart = RCSetStartTable[RC->getID()];
  return &RCSetsTable[SetListStart];
}

/// Get the dimensions of register pressure impacted by this register unit.
/// Returns a -1 terminated array of pressure set IDs
const int* AArch64GenRegisterInfo::
getRegUnitPressureSets(unsigned RegUnit) const {
  assert(RegUnit < 66 && "invalid register unit");
  static const unsigned RUSetStartTable[] = {
    12,13,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,26,26,26,26,26,26,26,26,6,26,26,26,26,26,26,26,26,26,26,6,6,6,6,6,6,6,6,6,6,6,6,0 };
  unsigned SetListStart = RUSetStartTable[RegUnit];
  return &RCSetsTable[SetListStart];
}

extern const MCRegisterDesc AArch64RegDesc[];
extern const MCPhysReg AArch64RegDiffLists[];
extern const char AArch64RegStrings[];
extern const uint16_t AArch64RegUnitRoots[][2];
extern const uint16_t AArch64SubRegIdxLists[];
extern const MCRegisterInfo::SubRegCoveredBits AArch64SubRegIdxRanges[];
extern const uint16_t AArch64RegEncodingTable[];
// AArch64 Dwarf<->LLVM register mappings.
extern const MCRegisterInfo::DwarfLLVMRegPair AArch64DwarfFlavour0Dwarf2L[];
extern const unsigned AArch64DwarfFlavour0Dwarf2LSize;

extern const MCRegisterInfo::DwarfLLVMRegPair AArch64EHFlavour0Dwarf2L[];
extern const unsigned AArch64EHFlavour0Dwarf2LSize;

extern const MCRegisterInfo::DwarfLLVMRegPair AArch64DwarfFlavour0L2Dwarf[];
extern const unsigned AArch64DwarfFlavour0L2DwarfSize;

extern const MCRegisterInfo::DwarfLLVMRegPair AArch64EHFlavour0L2Dwarf[];
extern const unsigned AArch64EHFlavour0L2DwarfSize;

AArch64GenRegisterInfo::
AArch64GenRegisterInfo(unsigned RA, unsigned DwarfFlavour, unsigned EHFlavour, unsigned PC)
  : TargetRegisterInfo(AArch64RegInfoDesc, RegisterClasses, RegisterClasses+17,
             SubRegIndexNameTable, SubRegIndexLaneMaskTable, 0xfffffffe) {
  InitMCRegisterInfo(AArch64RegDesc, 260, RA, PC,
                     AArch64MCRegisterClasses, 17,
                     AArch64RegUnitRoots,
                     66,
                     AArch64RegDiffLists,
                     AArch64RegStrings,
                     AArch64SubRegIdxLists,
                     7,
                     AArch64SubRegIdxRanges,
                     AArch64RegEncodingTable);

  switch (DwarfFlavour) {
  default:
    llvm_unreachable("Unknown DWARF flavour");
  case 0:
    mapDwarfRegsToLLVMRegs(AArch64DwarfFlavour0Dwarf2L, AArch64DwarfFlavour0Dwarf2LSize, false);
    break;
  }
  switch (EHFlavour) {
  default:
    llvm_unreachable("Unknown DWARF flavour");
  case 0:
    mapDwarfRegsToLLVMRegs(AArch64EHFlavour0Dwarf2L, AArch64EHFlavour0Dwarf2LSize, true);
    break;
  }
  switch (DwarfFlavour) {
  default:
    llvm_unreachable("Unknown DWARF flavour");
  case 0:
    mapLLVMRegsToDwarfRegs(AArch64DwarfFlavour0L2Dwarf, AArch64DwarfFlavour0L2DwarfSize, false);
    break;
  }
  switch (EHFlavour) {
  default:
    llvm_unreachable("Unknown DWARF flavour");
  case 0:
    mapLLVMRegsToDwarfRegs(AArch64EHFlavour0L2Dwarf, AArch64EHFlavour0L2DwarfSize, true);
    break;
  }
}

static const MCPhysReg CSR_PCS_SaveList[] = { AArch64::X30, AArch64::X29, AArch64::X28, AArch64::X27, AArch64::X26, AArch64::X25, AArch64::X24, AArch64::X23, AArch64::X22, AArch64::X21, AArch64::X20, AArch64::X19, AArch64::D15, AArch64::D14, AArch64::D13, AArch64::D12, AArch64::D11, AArch64::D10, AArch64::D9, AArch64::D8, 0 };
static const uint32_t CSR_PCS_RegMask[] = { 0x003fc000, 0x003fc000, 0x003fc000, 0x00000000, 0x003fc000, 0x00000000, 0xfe000000, 0xff00001f, 0x0000000f, };
static const MCPhysReg TLSDesc_SaveList[] = { AArch64::X29, AArch64::X28, AArch64::X27, AArch64::X26, AArch64::X25, AArch64::X24, AArch64::X23, AArch64::X22, AArch64::X21, AArch64::X20, AArch64::X19, AArch64::X18, AArch64::X17, AArch64::X16, AArch64::X15, AArch64::X14, AArch64::X13, AArch64::X12, AArch64::X11, AArch64::X10, AArch64::X9, AArch64::X8, AArch64::X7, AArch64::X6, AArch64::X5, AArch64::X4, AArch64::X3, AArch64::X2, AArch64::X1, AArch64::Q31, AArch64::Q30, AArch64::Q29, AArch64::Q28, AArch64::Q27, AArch64::Q26, AArch64::Q25, AArch64::Q24, AArch64::Q23, AArch64::Q22, AArch64::Q21, AArch64::Q20, AArch64::Q19, AArch64::Q18, AArch64::Q17, AArch64::Q16, AArch64::Q15, AArch64::Q14, AArch64::Q13, AArch64::Q12, AArch64::Q11, AArch64::Q10, AArch64::Q9, AArch64::Q8, AArch64::Q7, AArch64::Q6, AArch64::Q5, AArch64::Q4, AArch64::Q3, AArch64::Q2, AArch64::Q1, AArch64::Q0, 0 };
static const uint32_t TLSDesc_RegMask[] = { 0xffffffc0, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0x0000003f, 0xffffff80, 0xffffffcf, 0x00000007, };


} // End llvm namespace 
#endif // GET_REGINFO_TARGET_DESC

