.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.14
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Class::MethodMaker::OptExt 3"
.TH Class::MethodMaker::OptExt 3 "2006-12-04" "perl v5.8.5" "User Contributed Perl Documentation"
.SH "NAME"
Class::MethodMaker::OptExt \- Constants for C::MM's option extension mechanism
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
This class is internal to Class::MethodMaker and should not be used by any
clients.  It is \fBnot\fR part of the public \s-1API\s0.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This class contains the constants used by Class::MethodMaker to determine the
names of its methods dependent upon options invoked.
.SH "CLASS CONSTANTS"
.IX Header "CLASS CONSTANTS"
\&\&
.Sh "\s-1OPTEXT\s0"
.IX Subsection "OPTEXT"
\&\s-1OPTEXT\s0 is a map from options that are implemented as method extensions to
the option parameters.
.PP
Parameter keys are:
.IP "encode" 4
.IX Item "encode"
code number (to allow the option combination to be encoded whilst keeping the
length of the subr name no more than 8 chars).  encode is required for all
opts (for determining method extension), and must be a power of two.
.IP "refer" 4
.IX Item "refer"
Code for referring to storage (default: '$_[0]\->{$name}').
.IP "decl" 4
.IX Item "decl"
Code for declaring storage.
.IP "postac" 4
.IX Item "postac"
Code to execute immediately after any assignment check \-\-\- for example, to
initialize storage if necessary
.IP "asgnchk" 4
.IX Item "asgnchk"
Code for checking assignments.
.IP "defchk" 4
.IX Item "defchk"
Code for default checking.
.IP "reset" 4
.IX Item "reset"
Code to execute when resetting an element
.IP "read" 4
.IX Item "read"
Code to execute each time an value is read
.IP "store" 4
.IX Item "store"
Code to execute each time a value is stored
.SH "CLASS COMPONENTS"
.IX Header "CLASS COMPONENTS"
\&\&
.SH "CLASS HIGHER-LEVEL FUNCTIONS"
.IX Header "CLASS HIGHER-LEVEL FUNCTIONS"
\&\&
.Sh "encode"
.IX Subsection "encode"
Take a set of options, return a two-letter code being the extension to add to
the method to incorporate the extensions, and a list (arrayref) of the
extensions represented.
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.Vb 2
\&  my ($ext, $opt) =
\&    Class::MethodMaker::OptExt->encode([qw( static type foobar )]);
.Ve
.IP "\s-1ARGUMENTS\s0" 4
.IX Item "ARGUMENTS"
.RS 4
.PD 0
.IP "options" 4
.IX Item "options"
.PD
The options to encode, as an arrayref of option names
.RE
.RS 4
.RE
.IP "\s-1RETURNS\s0" 4
.IX Item "RETURNS"
.RS 4
.PD 0
.IP "ext" 4
.IX Item "ext"
.PD
A code (string) to append to a methodname to represent the options used.
.IP "opts" 4
.IX Item "opts"
The options represented by the ext .  This is generally a subset of the of
those provided in options, for not all general options are handled by an
encoded methodname.
.RE
.RS 4
.RE
.SH "CLASS HIGHER-LEVEL PROCEDURES"
.IX Header "CLASS HIGHER-LEVEL PROCEDURES"
\&\&
.SH "INSTANCE CONSTRUCTION"
.IX Header "INSTANCE CONSTRUCTION"
\&\&
.SH "INSTANCE COMPONENTS"
.IX Header "INSTANCE COMPONENTS"
\&\&
.SH "INSTANCE HIGHER-LEVEL FUNCTIONS"
.IX Header "INSTANCE HIGHER-LEVEL FUNCTIONS"
\&\&
.SH "INSTANCE HIGHER-LEVEL PROCEDURES"
.IX Header "INSTANCE HIGHER-LEVEL PROCEDURES"
\&\&
.SH "EXAMPLES"
.IX Header "EXAMPLES"
\&\&
.SH "BUGS"
.IX Header "BUGS"
\&\&
.SH "REPORTING BUGS"
.IX Header "REPORTING BUGS"
Email the development mailing list \f(CW\*(C`class\-mmaker\-devel@lists.sourceforge.net\*(C'\fR.
.SH "AUTHOR"
.IX Header "AUTHOR"
Martyn J. Pearce
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2003 Martyn J. Pearce.  This program is free software; you can
redistribute it and/or modify it under the same terms as Perl itself.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\&
