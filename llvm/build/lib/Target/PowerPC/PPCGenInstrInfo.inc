/*===- TableGen'erated file -------------------------------------*- C++ -*-===*\
|*                                                                            *|
|*Target Instruction Enum Values                                              *|
|*                                                                            *|
|* Automatically generated file, do not edit!                                 *|
|*                                                                            *|
\*===----------------------------------------------------------------------===*/


#ifdef GET_INSTRINFO_ENUM
#undef GET_INSTRINFO_ENUM
namespace llvm {

namespace PPC {
  enum {
    PHI	= 0,
    INLINEASM	= 1,
    PROLOG_LABEL	= 2,
    EH_LABEL	= 3,
    GC_LABEL	= 4,
    KILL	= 5,
    EXTRACT_SUBREG	= 6,
    INSERT_SUBREG	= 7,
    IMPLICIT_DEF	= 8,
    SUBREG_TO_REG	= 9,
    COPY_TO_REGCLASS	= 10,
    DBG_VALUE	= 11,
    REG_SEQUENCE	= 12,
    COPY	= 13,
    BUNDLE	= 14,
    LIFETIME_START	= 15,
    LIFETIME_END	= 16,
    ADD4	= 17,
    ADD4o	= 18,
    ADD8	= 19,
    ADD8TLS	= 20,
    ADD8o	= 21,
    ADDC	= 22,
    ADDC8	= 23,
    ADDC8o	= 24,
    ADDCo	= 25,
    ADDE	= 26,
    ADDE8	= 27,
    ADDE8o	= 28,
    ADDEo	= 29,
    ADDI	= 30,
    ADDI8	= 31,
    ADDIC	= 32,
    ADDIC8	= 33,
    ADDICo	= 34,
    ADDIS	= 35,
    ADDIS8	= 36,
    ADDISdtprelHA	= 37,
    ADDISgotTprelHA	= 38,
    ADDIStlsgdHA	= 39,
    ADDIStlsldHA	= 40,
    ADDIStocHA	= 41,
    ADDIdtprelL	= 42,
    ADDItlsgdL	= 43,
    ADDItlsldL	= 44,
    ADDItocL	= 45,
    ADDME	= 46,
    ADDME8	= 47,
    ADDME8o	= 48,
    ADDMEo	= 49,
    ADDZE	= 50,
    ADDZE8	= 51,
    ADDZE8o	= 52,
    ADDZEo	= 53,
    ADJCALLSTACKDOWN	= 54,
    ADJCALLSTACKUP	= 55,
    AND	= 56,
    AND8	= 57,
    AND8o	= 58,
    ANDC	= 59,
    ANDC8	= 60,
    ANDC8o	= 61,
    ANDCo	= 62,
    ANDISo	= 63,
    ANDISo8	= 64,
    ANDIo	= 65,
    ANDIo8	= 66,
    ANDo	= 67,
    ATOMIC_CMP_SWAP_I16	= 68,
    ATOMIC_CMP_SWAP_I32	= 69,
    ATOMIC_CMP_SWAP_I64	= 70,
    ATOMIC_CMP_SWAP_I8	= 71,
    ATOMIC_LOAD_ADD_I16	= 72,
    ATOMIC_LOAD_ADD_I32	= 73,
    ATOMIC_LOAD_ADD_I64	= 74,
    ATOMIC_LOAD_ADD_I8	= 75,
    ATOMIC_LOAD_AND_I16	= 76,
    ATOMIC_LOAD_AND_I32	= 77,
    ATOMIC_LOAD_AND_I64	= 78,
    ATOMIC_LOAD_AND_I8	= 79,
    ATOMIC_LOAD_NAND_I16	= 80,
    ATOMIC_LOAD_NAND_I32	= 81,
    ATOMIC_LOAD_NAND_I64	= 82,
    ATOMIC_LOAD_NAND_I8	= 83,
    ATOMIC_LOAD_OR_I16	= 84,
    ATOMIC_LOAD_OR_I32	= 85,
    ATOMIC_LOAD_OR_I64	= 86,
    ATOMIC_LOAD_OR_I8	= 87,
    ATOMIC_LOAD_SUB_I16	= 88,
    ATOMIC_LOAD_SUB_I32	= 89,
    ATOMIC_LOAD_SUB_I64	= 90,
    ATOMIC_LOAD_SUB_I8	= 91,
    ATOMIC_LOAD_XOR_I16	= 92,
    ATOMIC_LOAD_XOR_I32	= 93,
    ATOMIC_LOAD_XOR_I64	= 94,
    ATOMIC_LOAD_XOR_I8	= 95,
    ATOMIC_SWAP_I16	= 96,
    ATOMIC_SWAP_I32	= 97,
    ATOMIC_SWAP_I64	= 98,
    ATOMIC_SWAP_I8	= 99,
    B	= 100,
    BA	= 101,
    BCC	= 102,
    BCCA	= 103,
    BCCL	= 104,
    BCCLA	= 105,
    BCCTR	= 106,
    BCCTR8	= 107,
    BCCTRL	= 108,
    BCCTRL8	= 109,
    BCLR	= 110,
    BCLRL	= 111,
    BCLalways	= 112,
    BCTR	= 113,
    BCTR8	= 114,
    BCTRL	= 115,
    BCTRL8	= 116,
    BDNZ	= 117,
    BDNZ8	= 118,
    BDNZA	= 119,
    BDNZAm	= 120,
    BDNZAp	= 121,
    BDNZL	= 122,
    BDNZLA	= 123,
    BDNZLAm	= 124,
    BDNZLAp	= 125,
    BDNZLR	= 126,
    BDNZLR8	= 127,
    BDNZLRL	= 128,
    BDNZLRLm	= 129,
    BDNZLRLp	= 130,
    BDNZLRm	= 131,
    BDNZLRp	= 132,
    BDNZLm	= 133,
    BDNZLp	= 134,
    BDNZm	= 135,
    BDNZp	= 136,
    BDZ	= 137,
    BDZ8	= 138,
    BDZA	= 139,
    BDZAm	= 140,
    BDZAp	= 141,
    BDZL	= 142,
    BDZLA	= 143,
    BDZLAm	= 144,
    BDZLAp	= 145,
    BDZLR	= 146,
    BDZLR8	= 147,
    BDZLRL	= 148,
    BDZLRLm	= 149,
    BDZLRLp	= 150,
    BDZLRm	= 151,
    BDZLRp	= 152,
    BDZLm	= 153,
    BDZLp	= 154,
    BDZm	= 155,
    BDZp	= 156,
    BL	= 157,
    BL8	= 158,
    BL8_NOP	= 159,
    BL8_NOP_TLS	= 160,
    BL8_TLS	= 161,
    BLA	= 162,
    BLA8	= 163,
    BLA8_NOP	= 164,
    BLR	= 165,
    BLRL	= 166,
    CLRLSLDI	= 167,
    CLRLSLDIo	= 168,
    CLRLSLWI	= 169,
    CLRLSLWIo	= 170,
    CLRRDI	= 171,
    CLRRDIo	= 172,
    CLRRWI	= 173,
    CLRRWIo	= 174,
    CMPD	= 175,
    CMPDI	= 176,
    CMPLD	= 177,
    CMPLDI	= 178,
    CMPLW	= 179,
    CMPLWI	= 180,
    CMPW	= 181,
    CMPWI	= 182,
    CNTLZD	= 183,
    CNTLZDo	= 184,
    CNTLZW	= 185,
    CNTLZWo	= 186,
    CR6SET	= 187,
    CR6UNSET	= 188,
    CRAND	= 189,
    CRANDC	= 190,
    CREQV	= 191,
    CRNAND	= 192,
    CRNOR	= 193,
    CROR	= 194,
    CRORC	= 195,
    CRSET	= 196,
    CRUNSET	= 197,
    CRXOR	= 198,
    DCBA	= 199,
    DCBF	= 200,
    DCBI	= 201,
    DCBST	= 202,
    DCBT	= 203,
    DCBTST	= 204,
    DCBZ	= 205,
    DCBZL	= 206,
    DIVD	= 207,
    DIVDU	= 208,
    DIVDUo	= 209,
    DIVDo	= 210,
    DIVW	= 211,
    DIVWU	= 212,
    DIVWUo	= 213,
    DIVWo	= 214,
    DSS	= 215,
    DSSALL	= 216,
    DST	= 217,
    DST64	= 218,
    DSTST	= 219,
    DSTST64	= 220,
    DSTSTT	= 221,
    DSTSTT64	= 222,
    DSTT	= 223,
    DSTT64	= 224,
    DYNALLOC	= 225,
    DYNALLOC8	= 226,
    EH_SjLj_LongJmp32	= 227,
    EH_SjLj_LongJmp64	= 228,
    EH_SjLj_SetJmp32	= 229,
    EH_SjLj_SetJmp64	= 230,
    EH_SjLj_Setup	= 231,
    EIEIO	= 232,
    EQV	= 233,
    EQV8	= 234,
    EQV8o	= 235,
    EQVo	= 236,
    EXTLDI	= 237,
    EXTLDIo	= 238,
    EXTLWI	= 239,
    EXTLWIo	= 240,
    EXTRDI	= 241,
    EXTRDIo	= 242,
    EXTRWI	= 243,
    EXTRWIo	= 244,
    EXTSB	= 245,
    EXTSB8	= 246,
    EXTSB8_32_64	= 247,
    EXTSB8o	= 248,
    EXTSBo	= 249,
    EXTSH	= 250,
    EXTSH8	= 251,
    EXTSH8_32_64	= 252,
    EXTSH8o	= 253,
    EXTSHo	= 254,
    EXTSW	= 255,
    EXTSW_32_64	= 256,
    EXTSW_32_64o	= 257,
    EXTSWo	= 258,
    FABSD	= 259,
    FABSDo	= 260,
    FABSS	= 261,
    FABSSo	= 262,
    FADD	= 263,
    FADDS	= 264,
    FADDSo	= 265,
    FADDo	= 266,
    FADDrtz	= 267,
    FCFID	= 268,
    FCFIDS	= 269,
    FCFIDSo	= 270,
    FCFIDU	= 271,
    FCFIDUS	= 272,
    FCFIDUSo	= 273,
    FCFIDUo	= 274,
    FCFIDo	= 275,
    FCMPUD	= 276,
    FCMPUS	= 277,
    FCPSGND	= 278,
    FCPSGNDo	= 279,
    FCPSGNS	= 280,
    FCPSGNSo	= 281,
    FCTIDUZ	= 282,
    FCTIDUZo	= 283,
    FCTIDZ	= 284,
    FCTIDZo	= 285,
    FCTIWUZ	= 286,
    FCTIWUZo	= 287,
    FCTIWZ	= 288,
    FCTIWZo	= 289,
    FDIV	= 290,
    FDIVS	= 291,
    FDIVSo	= 292,
    FDIVo	= 293,
    FMADD	= 294,
    FMADDS	= 295,
    FMADDSo	= 296,
    FMADDo	= 297,
    FMR	= 298,
    FMRo	= 299,
    FMSUB	= 300,
    FMSUBS	= 301,
    FMSUBSo	= 302,
    FMSUBo	= 303,
    FMUL	= 304,
    FMULS	= 305,
    FMULSo	= 306,
    FMULo	= 307,
    FNABSD	= 308,
    FNABSDo	= 309,
    FNABSS	= 310,
    FNABSSo	= 311,
    FNEGD	= 312,
    FNEGDo	= 313,
    FNEGS	= 314,
    FNEGSo	= 315,
    FNMADD	= 316,
    FNMADDS	= 317,
    FNMADDSo	= 318,
    FNMADDo	= 319,
    FNMSUB	= 320,
    FNMSUBS	= 321,
    FNMSUBSo	= 322,
    FNMSUBo	= 323,
    FRE	= 324,
    FRES	= 325,
    FRESo	= 326,
    FREo	= 327,
    FRIMD	= 328,
    FRIMDo	= 329,
    FRIMS	= 330,
    FRIMSo	= 331,
    FRIND	= 332,
    FRINDo	= 333,
    FRINS	= 334,
    FRINSo	= 335,
    FRIPD	= 336,
    FRIPDo	= 337,
    FRIPS	= 338,
    FRIPSo	= 339,
    FRIZD	= 340,
    FRIZDo	= 341,
    FRIZS	= 342,
    FRIZSo	= 343,
    FRSP	= 344,
    FRSPo	= 345,
    FRSQRTE	= 346,
    FRSQRTES	= 347,
    FRSQRTESo	= 348,
    FRSQRTEo	= 349,
    FSELD	= 350,
    FSELDo	= 351,
    FSELS	= 352,
    FSELSo	= 353,
    FSQRT	= 354,
    FSQRTS	= 355,
    FSQRTSo	= 356,
    FSQRTo	= 357,
    FSUB	= 358,
    FSUBS	= 359,
    FSUBSo	= 360,
    FSUBo	= 361,
    GETtlsADDR	= 362,
    GETtlsldADDR	= 363,
    ICBI	= 364,
    INSLWI	= 365,
    INSLWIo	= 366,
    INSRDI	= 367,
    INSRDIo	= 368,
    INSRWI	= 369,
    INSRWIo	= 370,
    ISEL	= 371,
    ISEL8	= 372,
    ISYNC	= 373,
    LA	= 374,
    LAx	= 375,
    LBZ	= 376,
    LBZ8	= 377,
    LBZU	= 378,
    LBZU8	= 379,
    LBZUX	= 380,
    LBZUX8	= 381,
    LBZX	= 382,
    LBZX8	= 383,
    LD	= 384,
    LDARX	= 385,
    LDBRX	= 386,
    LDU	= 387,
    LDUX	= 388,
    LDX	= 389,
    LDgotTprelL	= 390,
    LDinto_toc	= 391,
    LDtoc	= 392,
    LDtocCPT	= 393,
    LDtocJTI	= 394,
    LDtocL	= 395,
    LDtoc_restore	= 396,
    LFD	= 397,
    LFDU	= 398,
    LFDUX	= 399,
    LFDX	= 400,
    LFIWAX	= 401,
    LFIWZX	= 402,
    LFS	= 403,
    LFSU	= 404,
    LFSUX	= 405,
    LFSX	= 406,
    LHA	= 407,
    LHA8	= 408,
    LHAU	= 409,
    LHAU8	= 410,
    LHAUX	= 411,
    LHAUX8	= 412,
    LHAX	= 413,
    LHAX8	= 414,
    LHBRX	= 415,
    LHZ	= 416,
    LHZ8	= 417,
    LHZU	= 418,
    LHZU8	= 419,
    LHZUX	= 420,
    LHZUX8	= 421,
    LHZX	= 422,
    LHZX8	= 423,
    LI	= 424,
    LI8	= 425,
    LIS	= 426,
    LIS8	= 427,
    LMW	= 428,
    LVEBX	= 429,
    LVEHX	= 430,
    LVEWX	= 431,
    LVSL	= 432,
    LVSR	= 433,
    LVX	= 434,
    LVXL	= 435,
    LWA	= 436,
    LWARX	= 437,
    LWAUX	= 438,
    LWAX	= 439,
    LWAX_32	= 440,
    LWA_32	= 441,
    LWBRX	= 442,
    LWZ	= 443,
    LWZ8	= 444,
    LWZU	= 445,
    LWZU8	= 446,
    LWZUX	= 447,
    LWZUX8	= 448,
    LWZX	= 449,
    LWZX8	= 450,
    MCRF	= 451,
    MFCR	= 452,
    MFCR8	= 453,
    MFCTR	= 454,
    MFCTR8	= 455,
    MFFS	= 456,
    MFLR	= 457,
    MFLR8	= 458,
    MFOCRF	= 459,
    MFOCRF8	= 460,
    MFSPR	= 461,
    MFTB	= 462,
    MFTB8	= 463,
    MFVRSAVE	= 464,
    MFVRSAVEv	= 465,
    MFVSCR	= 466,
    MTCRF	= 467,
    MTCRF8	= 468,
    MTCTR	= 469,
    MTCTR8	= 470,
    MTCTR8loop	= 471,
    MTCTRloop	= 472,
    MTFSB0	= 473,
    MTFSB1	= 474,
    MTFSF	= 475,
    MTLR	= 476,
    MTLR8	= 477,
    MTOCRF	= 478,
    MTOCRF8	= 479,
    MTSPR	= 480,
    MTVRSAVE	= 481,
    MTVRSAVEv	= 482,
    MTVSCR	= 483,
    MULHD	= 484,
    MULHDU	= 485,
    MULHDUo	= 486,
    MULHDo	= 487,
    MULHW	= 488,
    MULHWU	= 489,
    MULHWUo	= 490,
    MULHWo	= 491,
    MULLD	= 492,
    MULLDo	= 493,
    MULLI	= 494,
    MULLI8	= 495,
    MULLW	= 496,
    MULLWo	= 497,
    MovePCtoLR	= 498,
    MovePCtoLR8	= 499,
    NAND	= 500,
    NAND8	= 501,
    NAND8o	= 502,
    NANDo	= 503,
    NEG	= 504,
    NEG8	= 505,
    NEG8o	= 506,
    NEGo	= 507,
    NOP	= 508,
    NOR	= 509,
    NOR8	= 510,
    NOR8o	= 511,
    NORo	= 512,
    OR	= 513,
    OR8	= 514,
    OR8o	= 515,
    ORC	= 516,
    ORC8	= 517,
    ORC8o	= 518,
    ORCo	= 519,
    ORI	= 520,
    ORI8	= 521,
    ORIS	= 522,
    ORIS8	= 523,
    ORo	= 524,
    POPCNTD	= 525,
    POPCNTDo	= 526,
    POPCNTW	= 527,
    POPCNTWo	= 528,
    RESTORE_CR	= 529,
    RESTORE_VRSAVE	= 530,
    RLDCL	= 531,
    RLDCLo	= 532,
    RLDCR	= 533,
    RLDCRo	= 534,
    RLDIC	= 535,
    RLDICL	= 536,
    RLDICL_32_64	= 537,
    RLDICLo	= 538,
    RLDICR	= 539,
    RLDICRo	= 540,
    RLDICo	= 541,
    RLDIMI	= 542,
    RLDIMIo	= 543,
    RLWIMI	= 544,
    RLWIMIo	= 545,
    RLWINM	= 546,
    RLWINM8	= 547,
    RLWINM8o	= 548,
    RLWINMo	= 549,
    RLWNM	= 550,
    RLWNMo	= 551,
    ROTRDI	= 552,
    ROTRDIo	= 553,
    ROTRWI	= 554,
    ROTRWIo	= 555,
    SC	= 556,
    SELECT_CC_F4	= 557,
    SELECT_CC_F8	= 558,
    SELECT_CC_I4	= 559,
    SELECT_CC_I8	= 560,
    SELECT_CC_VRRC	= 561,
    SLD	= 562,
    SLDI	= 563,
    SLDIo	= 564,
    SLDo	= 565,
    SLW	= 566,
    SLWI	= 567,
    SLWIo	= 568,
    SLWo	= 569,
    SPILL_CR	= 570,
    SPILL_VRSAVE	= 571,
    SRAD	= 572,
    SRADI	= 573,
    SRADIo	= 574,
    SRADo	= 575,
    SRAW	= 576,
    SRAWI	= 577,
    SRAWIo	= 578,
    SRAWo	= 579,
    SRD	= 580,
    SRDI	= 581,
    SRDIo	= 582,
    SRDo	= 583,
    SRW	= 584,
    SRWI	= 585,
    SRWIo	= 586,
    SRWo	= 587,
    STB	= 588,
    STB8	= 589,
    STBU	= 590,
    STBU8	= 591,
    STBUX	= 592,
    STBUX8	= 593,
    STBX	= 594,
    STBX8	= 595,
    STD	= 596,
    STDBRX	= 597,
    STDCX	= 598,
    STDU	= 599,
    STDUX	= 600,
    STDX	= 601,
    STFD	= 602,
    STFDU	= 603,
    STFDUX	= 604,
    STFDX	= 605,
    STFIWX	= 606,
    STFS	= 607,
    STFSU	= 608,
    STFSUX	= 609,
    STFSX	= 610,
    STH	= 611,
    STH8	= 612,
    STHBRX	= 613,
    STHU	= 614,
    STHU8	= 615,
    STHUX	= 616,
    STHUX8	= 617,
    STHX	= 618,
    STHX8	= 619,
    STMW	= 620,
    STVEBX	= 621,
    STVEHX	= 622,
    STVEWX	= 623,
    STVX	= 624,
    STVXL	= 625,
    STW	= 626,
    STW8	= 627,
    STWBRX	= 628,
    STWCX	= 629,
    STWU	= 630,
    STWU8	= 631,
    STWUX	= 632,
    STWUX8	= 633,
    STWX	= 634,
    STWX8	= 635,
    SUBF	= 636,
    SUBF8	= 637,
    SUBF8o	= 638,
    SUBFC	= 639,
    SUBFC8	= 640,
    SUBFC8o	= 641,
    SUBFCo	= 642,
    SUBFE	= 643,
    SUBFE8	= 644,
    SUBFE8o	= 645,
    SUBFEo	= 646,
    SUBFIC	= 647,
    SUBFIC8	= 648,
    SUBFME	= 649,
    SUBFME8	= 650,
    SUBFME8o	= 651,
    SUBFMEo	= 652,
    SUBFZE	= 653,
    SUBFZE8	= 654,
    SUBFZE8o	= 655,
    SUBFZEo	= 656,
    SUBFo	= 657,
    SUBI	= 658,
    SUBIC	= 659,
    SUBICo	= 660,
    SUBIS	= 661,
    SYNC	= 662,
    TAILB	= 663,
    TAILB8	= 664,
    TAILBA	= 665,
    TAILBA8	= 666,
    TAILBCTR	= 667,
    TAILBCTR8	= 668,
    TCRETURNai	= 669,
    TCRETURNai8	= 670,
    TCRETURNdi	= 671,
    TCRETURNdi8	= 672,
    TCRETURNri	= 673,
    TCRETURNri8	= 674,
    TD	= 675,
    TDI	= 676,
    TRAP	= 677,
    TW	= 678,
    TWI	= 679,
    UPDATE_VRSAVE	= 680,
    VADDCUW	= 681,
    VADDFP	= 682,
    VADDSBS	= 683,
    VADDSHS	= 684,
    VADDSWS	= 685,
    VADDUBM	= 686,
    VADDUBS	= 687,
    VADDUHM	= 688,
    VADDUHS	= 689,
    VADDUWM	= 690,
    VADDUWS	= 691,
    VAND	= 692,
    VANDC	= 693,
    VAVGSB	= 694,
    VAVGSH	= 695,
    VAVGSW	= 696,
    VAVGUB	= 697,
    VAVGUH	= 698,
    VAVGUW	= 699,
    VCFSX	= 700,
    VCFSX_0	= 701,
    VCFUX	= 702,
    VCFUX_0	= 703,
    VCMPBFP	= 704,
    VCMPBFPo	= 705,
    VCMPEQFP	= 706,
    VCMPEQFPo	= 707,
    VCMPEQUB	= 708,
    VCMPEQUBo	= 709,
    VCMPEQUH	= 710,
    VCMPEQUHo	= 711,
    VCMPEQUW	= 712,
    VCMPEQUWo	= 713,
    VCMPGEFP	= 714,
    VCMPGEFPo	= 715,
    VCMPGTFP	= 716,
    VCMPGTFPo	= 717,
    VCMPGTSB	= 718,
    VCMPGTSBo	= 719,
    VCMPGTSH	= 720,
    VCMPGTSHo	= 721,
    VCMPGTSW	= 722,
    VCMPGTSWo	= 723,
    VCMPGTUB	= 724,
    VCMPGTUBo	= 725,
    VCMPGTUH	= 726,
    VCMPGTUHo	= 727,
    VCMPGTUW	= 728,
    VCMPGTUWo	= 729,
    VCTSXS	= 730,
    VCTSXS_0	= 731,
    VCTUXS	= 732,
    VCTUXS_0	= 733,
    VEXPTEFP	= 734,
    VLOGEFP	= 735,
    VMADDFP	= 736,
    VMAXFP	= 737,
    VMAXSB	= 738,
    VMAXSH	= 739,
    VMAXSW	= 740,
    VMAXUB	= 741,
    VMAXUH	= 742,
    VMAXUW	= 743,
    VMHADDSHS	= 744,
    VMHRADDSHS	= 745,
    VMINFP	= 746,
    VMINSB	= 747,
    VMINSH	= 748,
    VMINSW	= 749,
    VMINUB	= 750,
    VMINUH	= 751,
    VMINUW	= 752,
    VMLADDUHM	= 753,
    VMRGHB	= 754,
    VMRGHH	= 755,
    VMRGHW	= 756,
    VMRGLB	= 757,
    VMRGLH	= 758,
    VMRGLW	= 759,
    VMSUMMBM	= 760,
    VMSUMSHM	= 761,
    VMSUMSHS	= 762,
    VMSUMUBM	= 763,
    VMSUMUHM	= 764,
    VMSUMUHS	= 765,
    VMULESB	= 766,
    VMULESH	= 767,
    VMULEUB	= 768,
    VMULEUH	= 769,
    VMULOSB	= 770,
    VMULOSH	= 771,
    VMULOUB	= 772,
    VMULOUH	= 773,
    VNMSUBFP	= 774,
    VNOR	= 775,
    VOR	= 776,
    VPERM	= 777,
    VPKPX	= 778,
    VPKSHSS	= 779,
    VPKSHUS	= 780,
    VPKSWSS	= 781,
    VPKSWUS	= 782,
    VPKUHUM	= 783,
    VPKUHUS	= 784,
    VPKUWUM	= 785,
    VPKUWUS	= 786,
    VREFP	= 787,
    VRFIM	= 788,
    VRFIN	= 789,
    VRFIP	= 790,
    VRFIZ	= 791,
    VRLB	= 792,
    VRLH	= 793,
    VRLW	= 794,
    VRSQRTEFP	= 795,
    VSEL	= 796,
    VSL	= 797,
    VSLB	= 798,
    VSLDOI	= 799,
    VSLH	= 800,
    VSLO	= 801,
    VSLW	= 802,
    VSPLTB	= 803,
    VSPLTH	= 804,
    VSPLTISB	= 805,
    VSPLTISH	= 806,
    VSPLTISW	= 807,
    VSPLTW	= 808,
    VSR	= 809,
    VSRAB	= 810,
    VSRAH	= 811,
    VSRAW	= 812,
    VSRB	= 813,
    VSRH	= 814,
    VSRO	= 815,
    VSRW	= 816,
    VSUBCUW	= 817,
    VSUBFP	= 818,
    VSUBSBS	= 819,
    VSUBSHS	= 820,
    VSUBSWS	= 821,
    VSUBUBM	= 822,
    VSUBUBS	= 823,
    VSUBUHM	= 824,
    VSUBUHS	= 825,
    VSUBUWM	= 826,
    VSUBUWS	= 827,
    VSUM2SWS	= 828,
    VSUM4SBS	= 829,
    VSUM4SHS	= 830,
    VSUM4UBS	= 831,
    VSUMSWS	= 832,
    VUPKHPX	= 833,
    VUPKHSB	= 834,
    VUPKHSH	= 835,
    VUPKLPX	= 836,
    VUPKLSB	= 837,
    VUPKLSH	= 838,
    VXOR	= 839,
    V_SET0	= 840,
    V_SET0B	= 841,
    V_SET0H	= 842,
    V_SETALLONES	= 843,
    V_SETALLONESB	= 844,
    V_SETALLONESH	= 845,
    WAIT	= 846,
    XOR	= 847,
    XOR8	= 848,
    XOR8o	= 849,
    XORI	= 850,
    XORI8	= 851,
    XORIS	= 852,
    XORIS8	= 853,
    XORo	= 854,
    gBC	= 855,
    gBCA	= 856,
    gBCCTR	= 857,
    gBCCTRL	= 858,
    gBCL	= 859,
    gBCLA	= 860,
    gBCLR	= 861,
    gBCLRL	= 862,
    INSTRUCTION_LIST_END = 863
  };
}
} // End llvm namespace 
#endif // GET_INSTRINFO_ENUM

/*===- TableGen'erated file -------------------------------------*- C++ -*-===*\
|*                                                                            *|
|*Target Instruction Descriptors                                              *|
|*                                                                            *|
|* Automatically generated file, do not edit!                                 *|
|*                                                                            *|
\*===----------------------------------------------------------------------===*/


#ifdef GET_INSTRINFO_MC_DESC
#undef GET_INSTRINFO_MC_DESC
namespace llvm {

static const uint16_t ImplicitList1[] = { PPC::CR0, 0 };
static const uint16_t ImplicitList2[] = { PPC::CARRY, 0 };
static const uint16_t ImplicitList3[] = { PPC::CARRY, PPC::CR0, 0 };
static const uint16_t ImplicitList4[] = { PPC::R1, 0 };
static const uint16_t ImplicitList5[] = { PPC::RM, 0 };
static const uint16_t ImplicitList6[] = { PPC::LR, 0 };
static const uint16_t ImplicitList7[] = { PPC::CTR, 0 };
static const uint16_t ImplicitList8[] = { PPC::CTR8, 0 };
static const uint16_t ImplicitList9[] = { PPC::CTR, PPC::RM, 0 };
static const uint16_t ImplicitList10[] = { PPC::CTR8, PPC::RM, 0 };
static const uint16_t ImplicitList11[] = { PPC::LR8, 0 };
static const uint16_t ImplicitList12[] = { PPC::LR, PPC::RM, 0 };
static const uint16_t ImplicitList13[] = { PPC::CTR, PPC::LR, PPC::RM, 0 };
static const uint16_t ImplicitList14[] = { PPC::CTR8, PPC::LR8, PPC::RM, 0 };
static const uint16_t ImplicitList15[] = { PPC::CR1EQ, 0 };
static const uint16_t ImplicitList16[] = { PPC::X1, 0 };
static const uint16_t ImplicitList17[] = { PPC::CR1, 0 };
static const uint16_t ImplicitList18[] = { PPC::CR6, 0 };
static const uint16_t ImplicitList19[] = { PPC::LR, PPC::CTR, 0 };

static const MCOperandInfo OperandInfo2[] = { { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo3[] = { { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo4[] = { { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, ((0 << 16) | (1 << MCOI::TIED_TO)) }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo5[] = { { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo6[] = { { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo7[] = { { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo8[] = { { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo9[] = { { PPC::G8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo10[] = { { PPC::G8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo11[] = { { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::GPRC_NOR0RegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo12[] = { { PPC::G8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::G8RC_NOX0RegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo13[] = { { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo14[] = { { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo15[] = { { PPC::G8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo16[] = { { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo17[] = { { PPC::G8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo18[] = { { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo19[] = { { PPC::G8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo20[] = { { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::CRRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo21[] = { { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::CRRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo22[] = { { PPC::G8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo23[] = { { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo24[] = { { PPC::CRRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo25[] = { { PPC::CRRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo26[] = { { PPC::CRRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo27[] = { { PPC::CRRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo28[] = { { PPC::CRBITRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::CRBITRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::CRBITRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo29[] = { { PPC::CRBITRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo30[] = { { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo31[] = { { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo32[] = { { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo33[] = { { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo34[] = { { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo35[] = { { PPC::G8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo36[] = { { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo37[] = { { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo38[] = { { PPC::G8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo39[] = { { PPC::F8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::F8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo40[] = { { PPC::F4RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::F4RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo41[] = { { PPC::F8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::F8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::F8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo42[] = { { PPC::F4RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::F4RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::F4RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo43[] = { { PPC::F4RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::F8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo44[] = { { PPC::CRRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::F8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::F8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo45[] = { { PPC::CRRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::F4RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::F4RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo46[] = { { PPC::F8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::F8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::F8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::F8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo47[] = { { PPC::F4RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::F4RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::F4RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::F4RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo48[] = { { PPC::F4RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::F8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::F4RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::F4RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo49[] = { { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::GPRC_NOR0RegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::CRBITRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo50[] = { { PPC::G8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::G8RC_NOX0RegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::CRBITRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo51[] = { { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo52[] = { { PPC::G8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo53[] = { { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, ((1 << 16) | (1 << MCOI::TIED_TO)) }, };
static const MCOperandInfo OperandInfo54[] = { { PPC::G8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, ((1 << 16) | (1 << MCOI::TIED_TO)) }, };
static const MCOperandInfo OperandInfo55[] = { { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, ((1 << 16) | (1 << MCOI::TIED_TO)) }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo56[] = { { PPC::G8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, ((1 << 16) | (1 << MCOI::TIED_TO)) }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo57[] = { { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo58[] = { { PPC::G8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo59[] = { { PPC::G8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::G8RC_NOX0RegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo60[] = { { PPC::G8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo61[] = { { PPC::G8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo62[] = { { PPC::F8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo63[] = { { PPC::F8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, ((1 << 16) | (1 << MCOI::TIED_TO)) }, };
static const MCOperandInfo OperandInfo64[] = { { PPC::F8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, ((1 << 16) | (1 << MCOI::TIED_TO)) }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo65[] = { { PPC::F8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo66[] = { { PPC::F4RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo67[] = { { PPC::F4RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, ((1 << 16) | (1 << MCOI::TIED_TO)) }, };
static const MCOperandInfo OperandInfo68[] = { { PPC::F4RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, ((1 << 16) | (1 << MCOI::TIED_TO)) }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo69[] = { { PPC::F4RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo70[] = { { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo71[] = { { PPC::G8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo72[] = { { PPC::VRRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo73[] = { { PPC::CRRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::CRRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo74[] = { { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo75[] = { { PPC::F8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo76[] = { { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo77[] = { { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::VRSAVERCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo78[] = { { PPC::VRRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo79[] = { { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo80[] = { { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo81[] = { { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { PPC::F8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo82[] = { { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo83[] = { { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo84[] = { { PPC::VRSAVERCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo85[] = { { PPC::CRRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo86[] = { { PPC::VRSAVERCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo87[] = { { PPC::G8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo88[] = { { PPC::G8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo89[] = { { PPC::G8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, ((0 << 16) | (1 << MCOI::TIED_TO)) }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo90[] = { { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, ((0 << 16) | (1 << MCOI::TIED_TO)) }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo91[] = { { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo92[] = { { PPC::G8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo93[] = { { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo94[] = { { PPC::F4RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::CRRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::F4RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::F4RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo95[] = { { PPC::F8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::CRRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::F8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::F8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo96[] = { { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::CRRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::GPRC_NOR0RegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::GPRC_NOR0RegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo97[] = { { PPC::G8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::CRRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::G8RC_NOX0RegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::G8RC_NOX0RegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo98[] = { { PPC::VRRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::CRRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::VRRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::VRRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo99[] = { { PPC::G8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo100[] = { { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, ((0 << 16) | (1 << MCOI::TIED_TO)) }, };
static const MCOperandInfo OperandInfo101[] = { { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, ((0 << 16) | (1 << MCOI::TIED_TO)) }, };
static const MCOperandInfo OperandInfo102[] = { { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, ((0 << 16) | (1 << MCOI::TIED_TO)) }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo103[] = { { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, ((0 << 16) | (1 << MCOI::TIED_TO)) }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo104[] = { { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { PPC::F8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, ((0 << 16) | (1 << MCOI::TIED_TO)) }, };
static const MCOperandInfo OperandInfo105[] = { { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { PPC::F8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, ((0 << 16) | (1 << MCOI::TIED_TO)) }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo106[] = { { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { PPC::F4RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, ((0 << 16) | (1 << MCOI::TIED_TO)) }, };
static const MCOperandInfo OperandInfo107[] = { { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { PPC::F4RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, ((0 << 16) | (1 << MCOI::TIED_TO)) }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo108[] = { { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo109[] = { { PPC::CTRRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo110[] = { { PPC::CTRRC8RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo111[] = { { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo112[] = { { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo113[] = { { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo114[] = { { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo115[] = { { PPC::VRRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::VRRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::VRRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo116[] = { { PPC::VRRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::VRRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo117[] = { { PPC::VRRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::VRRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo118[] = { { PPC::VRRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::VRRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::VRRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::VRRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo119[] = { { PPC::VRRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::VRRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::VRRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo120[] = { { PPC::VRRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo121[] = { { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::CRBITRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo122[] = { { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::CRBITRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };

extern const MCInstrDesc PPCInsts[] = {
  { 0,	0,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::Variadic)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, 0 },  // Inst #0 = PHI
  { 1,	0,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::Variadic), 0x0ULL, NULL, NULL, 0 },  // Inst #1 = INLINEASM
  { 2,	1,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::NotDuplicable)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo2 },  // Inst #2 = PROLOG_LABEL
  { 3,	1,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::NotDuplicable)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo2 },  // Inst #3 = EH_LABEL
  { 4,	1,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::NotDuplicable)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo2 },  // Inst #4 = GC_LABEL
  { 5,	0,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::Variadic), 0x0ULL, NULL, NULL, 0 },  // Inst #5 = KILL
  { 6,	3,	1,	0,	0,	0|(1<<MCID::Pseudo), 0x0ULL, NULL, NULL, OperandInfo3 },  // Inst #6 = EXTRACT_SUBREG
  { 7,	4,	1,	0,	0,	0|(1<<MCID::Pseudo), 0x0ULL, NULL, NULL, OperandInfo4 },  // Inst #7 = INSERT_SUBREG
  { 8,	1,	1,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::Rematerializable)|(1<<MCID::CheapAsAMove), 0x0ULL, NULL, NULL, OperandInfo5 },  // Inst #8 = IMPLICIT_DEF
  { 9,	4,	1,	0,	0,	0|(1<<MCID::Pseudo), 0x0ULL, NULL, NULL, OperandInfo6 },  // Inst #9 = SUBREG_TO_REG
  { 10,	3,	1,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::CheapAsAMove), 0x0ULL, NULL, NULL, OperandInfo3 },  // Inst #10 = COPY_TO_REGCLASS
  { 11,	0,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::Variadic), 0x0ULL, NULL, NULL, 0 },  // Inst #11 = DBG_VALUE
  { 12,	1,	1,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::Variadic)|(1<<MCID::CheapAsAMove), 0x0ULL, NULL, NULL, OperandInfo5 },  // Inst #12 = REG_SEQUENCE
  { 13,	2,	1,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::CheapAsAMove), 0x0ULL, NULL, NULL, OperandInfo7 },  // Inst #13 = COPY
  { 14,	0,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::Variadic)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, 0 },  // Inst #14 = BUNDLE
  { 15,	1,	0,	0,	0,	0|(1<<MCID::Pseudo), 0x0ULL, NULL, NULL, OperandInfo2 },  // Inst #15 = LIFETIME_START
  { 16,	1,	0,	0,	0,	0|(1<<MCID::Pseudo), 0x0ULL, NULL, NULL, OperandInfo2 },  // Inst #16 = LIFETIME_END
  { 17,	3,	1,	1,	0,	0, 0x8ULL, NULL, NULL, OperandInfo8 },  // Inst #17 = ADD4
  { 18,	3,	1,	1,	0,	0, 0x8ULL, NULL, ImplicitList1, OperandInfo8 },  // Inst #18 = ADD4o
  { 19,	3,	1,	1,	0,	0, 0x8ULL, NULL, NULL, OperandInfo9 },  // Inst #19 = ADD8
  { 20,	3,	1,	1,	0,	0, 0x8ULL, NULL, NULL, OperandInfo10 },  // Inst #20 = ADD8TLS
  { 21,	3,	1,	1,	0,	0, 0x8ULL, NULL, ImplicitList1, OperandInfo9 },  // Inst #21 = ADD8o
  { 22,	3,	1,	2,	0,	0, 0xcULL, NULL, ImplicitList2, OperandInfo8 },  // Inst #22 = ADDC
  { 23,	3,	1,	2,	0,	0, 0xcULL, NULL, ImplicitList2, OperandInfo9 },  // Inst #23 = ADDC8
  { 24,	3,	1,	2,	0,	0, 0xcULL, NULL, ImplicitList3, OperandInfo9 },  // Inst #24 = ADDC8o
  { 25,	3,	1,	2,	0,	0, 0xcULL, NULL, ImplicitList3, OperandInfo8 },  // Inst #25 = ADDCo
  { 26,	3,	1,	2,	0,	0, 0x8ULL, ImplicitList2, ImplicitList2, OperandInfo8 },  // Inst #26 = ADDE
  { 27,	3,	1,	2,	0,	0, 0x8ULL, ImplicitList2, ImplicitList2, OperandInfo9 },  // Inst #27 = ADDE8
  { 28,	3,	1,	2,	0,	0, 0x8ULL, ImplicitList2, ImplicitList3, OperandInfo9 },  // Inst #28 = ADDE8o
  { 29,	3,	1,	2,	0,	0, 0x8ULL, ImplicitList2, ImplicitList3, OperandInfo8 },  // Inst #29 = ADDEo
  { 30,	3,	1,	1,	0,	0, 0x8ULL, NULL, NULL, OperandInfo11 },  // Inst #30 = ADDI
  { 31,	3,	1,	1,	0,	0, 0x8ULL, NULL, NULL, OperandInfo12 },  // Inst #31 = ADDI8
  { 32,	3,	1,	2,	0,	0, 0xcULL, NULL, ImplicitList2, OperandInfo13 },  // Inst #32 = ADDIC
  { 33,	3,	1,	2,	0,	0, 0x8ULL, NULL, ImplicitList2, OperandInfo10 },  // Inst #33 = ADDIC8
  { 34,	3,	1,	2,	0,	0|(1<<MCID::UnmodeledSideEffects), 0x8ULL, NULL, ImplicitList3, OperandInfo13 },  // Inst #34 = ADDICo
  { 35,	3,	1,	1,	0,	0, 0x8ULL, NULL, NULL, OperandInfo11 },  // Inst #35 = ADDIS
  { 36,	3,	1,	1,	0,	0, 0x8ULL, NULL, NULL, OperandInfo12 },  // Inst #36 = ADDIS8
  { 37,	3,	1,	0,	0,	0, 0x0ULL, NULL, NULL, OperandInfo12 },  // Inst #37 = ADDISdtprelHA
  { 38,	3,	1,	0,	0,	0, 0x0ULL, NULL, NULL, OperandInfo12 },  // Inst #38 = ADDISgotTprelHA
  { 39,	3,	1,	0,	0,	0, 0x0ULL, NULL, NULL, OperandInfo12 },  // Inst #39 = ADDIStlsgdHA
  { 40,	3,	1,	0,	0,	0, 0x0ULL, NULL, NULL, OperandInfo12 },  // Inst #40 = ADDIStlsldHA
  { 41,	3,	1,	0,	0,	0, 0x0ULL, NULL, NULL, OperandInfo12 },  // Inst #41 = ADDIStocHA
  { 42,	3,	1,	0,	0,	0, 0x0ULL, NULL, NULL, OperandInfo12 },  // Inst #42 = ADDIdtprelL
  { 43,	3,	1,	0,	0,	0, 0x0ULL, NULL, NULL, OperandInfo12 },  // Inst #43 = ADDItlsgdL
  { 44,	3,	1,	0,	0,	0, 0x0ULL, NULL, NULL, OperandInfo12 },  // Inst #44 = ADDItlsldL
  { 45,	3,	1,	0,	0,	0, 0x0ULL, NULL, NULL, OperandInfo12 },  // Inst #45 = ADDItocL
  { 46,	2,	1,	2,	0,	0, 0x8ULL, ImplicitList2, ImplicitList2, OperandInfo14 },  // Inst #46 = ADDME
  { 47,	2,	1,	2,	0,	0, 0x8ULL, ImplicitList2, ImplicitList2, OperandInfo15 },  // Inst #47 = ADDME8
  { 48,	2,	1,	2,	0,	0, 0x8ULL, ImplicitList2, ImplicitList3, OperandInfo15 },  // Inst #48 = ADDME8o
  { 49,	2,	1,	2,	0,	0, 0x8ULL, ImplicitList2, ImplicitList3, OperandInfo14 },  // Inst #49 = ADDMEo
  { 50,	2,	1,	2,	0,	0, 0x8ULL, ImplicitList2, ImplicitList2, OperandInfo14 },  // Inst #50 = ADDZE
  { 51,	2,	1,	2,	0,	0, 0x8ULL, ImplicitList2, ImplicitList2, OperandInfo15 },  // Inst #51 = ADDZE8
  { 52,	2,	1,	2,	0,	0, 0x8ULL, ImplicitList2, ImplicitList3, OperandInfo15 },  // Inst #52 = ADDZE8o
  { 53,	2,	1,	2,	0,	0, 0x8ULL, ImplicitList2, ImplicitList3, OperandInfo14 },  // Inst #53 = ADDZEo
  { 54,	1,	0,	0,	0,	0, 0x0ULL, ImplicitList4, ImplicitList4, OperandInfo5 },  // Inst #54 = ADJCALLSTACKDOWN
  { 55,	2,	0,	0,	0,	0, 0x0ULL, ImplicitList4, ImplicitList4, OperandInfo7 },  // Inst #55 = ADJCALLSTACKUP
  { 56,	3,	1,	1,	0,	0, 0x8ULL, NULL, NULL, OperandInfo8 },  // Inst #56 = AND
  { 57,	3,	1,	1,	0,	0, 0x8ULL, NULL, NULL, OperandInfo9 },  // Inst #57 = AND8
  { 58,	3,	1,	1,	0,	0, 0x8ULL, NULL, ImplicitList1, OperandInfo9 },  // Inst #58 = AND8o
  { 59,	3,	1,	1,	0,	0, 0x8ULL, NULL, NULL, OperandInfo8 },  // Inst #59 = ANDC
  { 60,	3,	1,	1,	0,	0, 0x8ULL, NULL, NULL, OperandInfo9 },  // Inst #60 = ANDC8
  { 61,	3,	1,	1,	0,	0, 0x8ULL, NULL, ImplicitList1, OperandInfo9 },  // Inst #61 = ANDC8o
  { 62,	3,	1,	1,	0,	0, 0x8ULL, NULL, ImplicitList1, OperandInfo8 },  // Inst #62 = ANDCo
  { 63,	3,	1,	2,	0,	0, 0x8ULL, NULL, ImplicitList1, OperandInfo13 },  // Inst #63 = ANDISo
  { 64,	3,	1,	2,	0,	0, 0x8ULL, NULL, ImplicitList1, OperandInfo10 },  // Inst #64 = ANDISo8
  { 65,	3,	1,	2,	0,	0, 0x8ULL, NULL, ImplicitList1, OperandInfo13 },  // Inst #65 = ANDIo
  { 66,	3,	1,	2,	0,	0, 0x8ULL, NULL, ImplicitList1, OperandInfo10 },  // Inst #66 = ANDIo8
  { 67,	3,	1,	1,	0,	0, 0x8ULL, NULL, ImplicitList1, OperandInfo8 },  // Inst #67 = ANDo
  { 68,	5,	1,	0,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, NULL, ImplicitList1, OperandInfo16 },  // Inst #68 = ATOMIC_CMP_SWAP_I16
  { 69,	5,	1,	0,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, NULL, ImplicitList1, OperandInfo16 },  // Inst #69 = ATOMIC_CMP_SWAP_I32
  { 70,	5,	1,	0,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, NULL, ImplicitList1, OperandInfo17 },  // Inst #70 = ATOMIC_CMP_SWAP_I64
  { 71,	5,	1,	0,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, NULL, ImplicitList1, OperandInfo16 },  // Inst #71 = ATOMIC_CMP_SWAP_I8
  { 72,	4,	1,	0,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, NULL, ImplicitList1, OperandInfo18 },  // Inst #72 = ATOMIC_LOAD_ADD_I16
  { 73,	4,	1,	0,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, NULL, ImplicitList1, OperandInfo18 },  // Inst #73 = ATOMIC_LOAD_ADD_I32
  { 74,	4,	1,	0,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, NULL, ImplicitList1, OperandInfo19 },  // Inst #74 = ATOMIC_LOAD_ADD_I64
  { 75,	4,	1,	0,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, NULL, ImplicitList1, OperandInfo18 },  // Inst #75 = ATOMIC_LOAD_ADD_I8
  { 76,	4,	1,	0,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, NULL, ImplicitList1, OperandInfo18 },  // Inst #76 = ATOMIC_LOAD_AND_I16
  { 77,	4,	1,	0,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, NULL, ImplicitList1, OperandInfo18 },  // Inst #77 = ATOMIC_LOAD_AND_I32
  { 78,	4,	1,	0,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, NULL, ImplicitList1, OperandInfo19 },  // Inst #78 = ATOMIC_LOAD_AND_I64
  { 79,	4,	1,	0,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, NULL, ImplicitList1, OperandInfo18 },  // Inst #79 = ATOMIC_LOAD_AND_I8
  { 80,	4,	1,	0,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, NULL, ImplicitList1, OperandInfo18 },  // Inst #80 = ATOMIC_LOAD_NAND_I16
  { 81,	4,	1,	0,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, NULL, ImplicitList1, OperandInfo18 },  // Inst #81 = ATOMIC_LOAD_NAND_I32
  { 82,	4,	1,	0,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, NULL, ImplicitList1, OperandInfo19 },  // Inst #82 = ATOMIC_LOAD_NAND_I64
  { 83,	4,	1,	0,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, NULL, ImplicitList1, OperandInfo18 },  // Inst #83 = ATOMIC_LOAD_NAND_I8
  { 84,	4,	1,	0,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, NULL, ImplicitList1, OperandInfo18 },  // Inst #84 = ATOMIC_LOAD_OR_I16
  { 85,	4,	1,	0,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, NULL, ImplicitList1, OperandInfo18 },  // Inst #85 = ATOMIC_LOAD_OR_I32
  { 86,	4,	1,	0,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, NULL, ImplicitList1, OperandInfo19 },  // Inst #86 = ATOMIC_LOAD_OR_I64
  { 87,	4,	1,	0,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, NULL, ImplicitList1, OperandInfo18 },  // Inst #87 = ATOMIC_LOAD_OR_I8
  { 88,	4,	1,	0,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, NULL, ImplicitList1, OperandInfo18 },  // Inst #88 = ATOMIC_LOAD_SUB_I16
  { 89,	4,	1,	0,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, NULL, ImplicitList1, OperandInfo18 },  // Inst #89 = ATOMIC_LOAD_SUB_I32
  { 90,	4,	1,	0,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, NULL, ImplicitList1, OperandInfo19 },  // Inst #90 = ATOMIC_LOAD_SUB_I64
  { 91,	4,	1,	0,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, NULL, ImplicitList1, OperandInfo18 },  // Inst #91 = ATOMIC_LOAD_SUB_I8
  { 92,	4,	1,	0,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, NULL, ImplicitList1, OperandInfo18 },  // Inst #92 = ATOMIC_LOAD_XOR_I16
  { 93,	4,	1,	0,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, NULL, ImplicitList1, OperandInfo18 },  // Inst #93 = ATOMIC_LOAD_XOR_I32
  { 94,	4,	1,	0,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, NULL, ImplicitList1, OperandInfo19 },  // Inst #94 = ATOMIC_LOAD_XOR_I64
  { 95,	4,	1,	0,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, NULL, ImplicitList1, OperandInfo18 },  // Inst #95 = ATOMIC_LOAD_XOR_I8
  { 96,	4,	1,	0,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, NULL, ImplicitList1, OperandInfo18 },  // Inst #96 = ATOMIC_SWAP_I16
  { 97,	4,	1,	0,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, NULL, ImplicitList1, OperandInfo18 },  // Inst #97 = ATOMIC_SWAP_I32
  { 98,	4,	1,	0,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, NULL, ImplicitList1, OperandInfo19 },  // Inst #98 = ATOMIC_SWAP_I64
  { 99,	4,	1,	0,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, NULL, ImplicitList1, OperandInfo18 },  // Inst #99 = ATOMIC_SWAP_I8
  { 100,	1,	0,	3,	0,	0|(1<<MCID::Branch)|(1<<MCID::Barrier)|(1<<MCID::Terminator), 0x38ULL, NULL, NULL, OperandInfo5 },  // Inst #100 = B
  { 101,	1,	0,	3,	0,	0|(1<<MCID::Branch)|(1<<MCID::Barrier)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, NULL, NULL, OperandInfo5 },  // Inst #101 = BA
  { 102,	3,	0,	3,	0,	0|(1<<MCID::Branch)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, NULL, NULL, OperandInfo20 },  // Inst #102 = BCC
  { 103,	3,	0,	3,	0,	0|(1<<MCID::Branch)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, NULL, NULL, OperandInfo20 },  // Inst #103 = BCCA
  { 104,	3,	0,	3,	0,	0|(1<<MCID::Call)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList5, ImplicitList6, OperandInfo20 },  // Inst #104 = BCCL
  { 105,	3,	0,	3,	0,	0|(1<<MCID::Call)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList5, ImplicitList6, OperandInfo20 },  // Inst #105 = BCCLA
  { 106,	2,	0,	3,	0,	0|(1<<MCID::Branch)|(1<<MCID::IndirectBranch)|(1<<MCID::Barrier)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList7, NULL, OperandInfo21 },  // Inst #106 = BCCTR
  { 107,	2,	0,	3,	0,	0|(1<<MCID::Branch)|(1<<MCID::IndirectBranch)|(1<<MCID::Barrier)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList8, NULL, OperandInfo21 },  // Inst #107 = BCCTR8
  { 108,	2,	0,	3,	0,	0|(1<<MCID::Call)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList9, ImplicitList6, OperandInfo21 },  // Inst #108 = BCCTRL
  { 109,	2,	0,	3,	0,	0|(1<<MCID::Call)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList10, ImplicitList11, OperandInfo21 },  // Inst #109 = BCCTRL8
  { 110,	2,	0,	3,	0,	0|(1<<MCID::Return)|(1<<MCID::Branch)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList12, NULL, OperandInfo21 },  // Inst #110 = BCLR
  { 111,	2,	0,	3,	0,	0|(1<<MCID::Call)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList12, ImplicitList6, OperandInfo21 },  // Inst #111 = BCLRL
  { 112,	1,	0,	3,	0,	0|(1<<MCID::Call)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList5, ImplicitList6, OperandInfo5 },  // Inst #112 = BCLalways
  { 113,	0,	0,	3,	0,	0|(1<<MCID::Branch)|(1<<MCID::IndirectBranch)|(1<<MCID::Barrier)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList7, NULL, 0 },  // Inst #113 = BCTR
  { 114,	0,	0,	3,	0,	0|(1<<MCID::Branch)|(1<<MCID::IndirectBranch)|(1<<MCID::Barrier)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList8, NULL, 0 },  // Inst #114 = BCTR8
  { 115,	0,	0,	3,	0,	0|(1<<MCID::Call), 0x38ULL, ImplicitList9, ImplicitList6, 0 },  // Inst #115 = BCTRL
  { 116,	0,	0,	3,	0,	0|(1<<MCID::Call), 0x38ULL, ImplicitList10, ImplicitList11, 0 },  // Inst #116 = BCTRL8
  { 117,	1,	0,	3,	0,	0|(1<<MCID::Branch)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList7, ImplicitList7, OperandInfo5 },  // Inst #117 = BDNZ
  { 118,	1,	0,	3,	0,	0|(1<<MCID::Branch)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList8, ImplicitList8, OperandInfo5 },  // Inst #118 = BDNZ8
  { 119,	1,	0,	3,	0,	0|(1<<MCID::Branch)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList7, ImplicitList7, OperandInfo5 },  // Inst #119 = BDNZA
  { 120,	1,	0,	3,	0,	0|(1<<MCID::Branch)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList7, ImplicitList7, OperandInfo5 },  // Inst #120 = BDNZAm
  { 121,	1,	0,	3,	0,	0|(1<<MCID::Branch)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList7, ImplicitList7, OperandInfo5 },  // Inst #121 = BDNZAp
  { 122,	1,	0,	3,	0,	0|(1<<MCID::Call)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList9, ImplicitList7, OperandInfo5 },  // Inst #122 = BDNZL
  { 123,	1,	0,	3,	0,	0|(1<<MCID::Call)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList9, ImplicitList7, OperandInfo5 },  // Inst #123 = BDNZLA
  { 124,	1,	0,	3,	0,	0|(1<<MCID::Call)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList9, ImplicitList7, OperandInfo5 },  // Inst #124 = BDNZLAm
  { 125,	1,	0,	3,	0,	0|(1<<MCID::Call)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList9, ImplicitList7, OperandInfo5 },  // Inst #125 = BDNZLAp
  { 126,	0,	0,	3,	0,	0|(1<<MCID::Return)|(1<<MCID::Branch)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList13, ImplicitList7, 0 },  // Inst #126 = BDNZLR
  { 127,	0,	0,	3,	0,	0|(1<<MCID::Return)|(1<<MCID::Branch)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList14, ImplicitList8, 0 },  // Inst #127 = BDNZLR8
  { 128,	0,	0,	3,	0,	0|(1<<MCID::Call)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList13, ImplicitList7, 0 },  // Inst #128 = BDNZLRL
  { 129,	0,	0,	3,	0,	0|(1<<MCID::Call)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList13, ImplicitList7, 0 },  // Inst #129 = BDNZLRLm
  { 130,	0,	0,	3,	0,	0|(1<<MCID::Call)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList13, ImplicitList7, 0 },  // Inst #130 = BDNZLRLp
  { 131,	0,	0,	3,	0,	0|(1<<MCID::Return)|(1<<MCID::Branch)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList13, ImplicitList7, 0 },  // Inst #131 = BDNZLRm
  { 132,	0,	0,	3,	0,	0|(1<<MCID::Return)|(1<<MCID::Branch)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList13, ImplicitList7, 0 },  // Inst #132 = BDNZLRp
  { 133,	1,	0,	3,	0,	0|(1<<MCID::Call)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList9, ImplicitList7, OperandInfo5 },  // Inst #133 = BDNZLm
  { 134,	1,	0,	3,	0,	0|(1<<MCID::Call)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList9, ImplicitList7, OperandInfo5 },  // Inst #134 = BDNZLp
  { 135,	1,	0,	3,	0,	0|(1<<MCID::Branch)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList7, ImplicitList7, OperandInfo5 },  // Inst #135 = BDNZm
  { 136,	1,	0,	3,	0,	0|(1<<MCID::Branch)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList7, ImplicitList7, OperandInfo5 },  // Inst #136 = BDNZp
  { 137,	1,	0,	3,	0,	0|(1<<MCID::Branch)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList7, ImplicitList7, OperandInfo5 },  // Inst #137 = BDZ
  { 138,	1,	0,	3,	0,	0|(1<<MCID::Branch)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList8, ImplicitList8, OperandInfo5 },  // Inst #138 = BDZ8
  { 139,	1,	0,	3,	0,	0|(1<<MCID::Branch)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList7, ImplicitList7, OperandInfo5 },  // Inst #139 = BDZA
  { 140,	1,	0,	3,	0,	0|(1<<MCID::Branch)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList7, ImplicitList7, OperandInfo5 },  // Inst #140 = BDZAm
  { 141,	1,	0,	3,	0,	0|(1<<MCID::Branch)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList7, ImplicitList7, OperandInfo5 },  // Inst #141 = BDZAp
  { 142,	1,	0,	3,	0,	0|(1<<MCID::Call)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList9, ImplicitList7, OperandInfo5 },  // Inst #142 = BDZL
  { 143,	1,	0,	3,	0,	0|(1<<MCID::Call)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList9, ImplicitList7, OperandInfo5 },  // Inst #143 = BDZLA
  { 144,	1,	0,	3,	0,	0|(1<<MCID::Call)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList9, ImplicitList7, OperandInfo5 },  // Inst #144 = BDZLAm
  { 145,	1,	0,	3,	0,	0|(1<<MCID::Call)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList9, ImplicitList7, OperandInfo5 },  // Inst #145 = BDZLAp
  { 146,	0,	0,	3,	0,	0|(1<<MCID::Return)|(1<<MCID::Branch)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList13, ImplicitList7, 0 },  // Inst #146 = BDZLR
  { 147,	0,	0,	3,	0,	0|(1<<MCID::Return)|(1<<MCID::Branch)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList14, ImplicitList8, 0 },  // Inst #147 = BDZLR8
  { 148,	0,	0,	3,	0,	0|(1<<MCID::Call)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList13, ImplicitList7, 0 },  // Inst #148 = BDZLRL
  { 149,	0,	0,	3,	0,	0|(1<<MCID::Call)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList13, ImplicitList7, 0 },  // Inst #149 = BDZLRLm
  { 150,	0,	0,	3,	0,	0|(1<<MCID::Call)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList13, ImplicitList7, 0 },  // Inst #150 = BDZLRLp
  { 151,	0,	0,	3,	0,	0|(1<<MCID::Return)|(1<<MCID::Branch)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList13, ImplicitList7, 0 },  // Inst #151 = BDZLRm
  { 152,	0,	0,	3,	0,	0|(1<<MCID::Return)|(1<<MCID::Branch)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList13, ImplicitList7, 0 },  // Inst #152 = BDZLRp
  { 153,	1,	0,	3,	0,	0|(1<<MCID::Call)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList9, ImplicitList7, OperandInfo5 },  // Inst #153 = BDZLm
  { 154,	1,	0,	3,	0,	0|(1<<MCID::Call)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList9, ImplicitList7, OperandInfo5 },  // Inst #154 = BDZLp
  { 155,	1,	0,	3,	0,	0|(1<<MCID::Branch)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList7, ImplicitList7, OperandInfo5 },  // Inst #155 = BDZm
  { 156,	1,	0,	3,	0,	0|(1<<MCID::Branch)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList7, ImplicitList7, OperandInfo5 },  // Inst #156 = BDZp
  { 157,	1,	0,	3,	0,	0|(1<<MCID::Call), 0x38ULL, ImplicitList5, ImplicitList6, OperandInfo5 },  // Inst #157 = BL
  { 158,	1,	0,	3,	0,	0|(1<<MCID::Call), 0x38ULL, ImplicitList5, ImplicitList11, OperandInfo5 },  // Inst #158 = BL8
  { 159,	1,	0,	3,	0,	0|(1<<MCID::Call), 0x38ULL, ImplicitList5, ImplicitList11, OperandInfo5 },  // Inst #159 = BL8_NOP
  { 160,	2,	0,	3,	0,	0|(1<<MCID::Call)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList5, ImplicitList11, OperandInfo7 },  // Inst #160 = BL8_NOP_TLS
  { 161,	2,	0,	3,	0,	0|(1<<MCID::Call)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList5, ImplicitList11, OperandInfo7 },  // Inst #161 = BL8_TLS
  { 162,	1,	0,	3,	0,	0|(1<<MCID::Call), 0x38ULL, ImplicitList5, ImplicitList6, OperandInfo5 },  // Inst #162 = BLA
  { 163,	1,	0,	3,	0,	0|(1<<MCID::Call), 0x38ULL, ImplicitList5, ImplicitList11, OperandInfo5 },  // Inst #163 = BLA8
  { 164,	1,	0,	3,	0,	0|(1<<MCID::Call), 0x38ULL, ImplicitList5, ImplicitList11, OperandInfo5 },  // Inst #164 = BLA8_NOP
  { 165,	0,	0,	3,	0,	0|(1<<MCID::Return)|(1<<MCID::Barrier)|(1<<MCID::Terminator), 0x38ULL, ImplicitList12, NULL, 0 },  // Inst #165 = BLR
  { 166,	0,	0,	3,	0,	0|(1<<MCID::Call)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList12, ImplicitList6, 0 },  // Inst #166 = BLRL
  { 167,	4,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo22 },  // Inst #167 = CLRLSLDI
  { 168,	4,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo22 },  // Inst #168 = CLRLSLDIo
  { 169,	4,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo23 },  // Inst #169 = CLRLSLWI
  { 170,	4,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo23 },  // Inst #170 = CLRLSLWIo
  { 171,	3,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo10 },  // Inst #171 = CLRRDI
  { 172,	3,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo10 },  // Inst #172 = CLRRDIo
  { 173,	3,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo13 },  // Inst #173 = CLRRWI
  { 174,	3,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo13 },  // Inst #174 = CLRRWIo
  { 175,	3,	1,	4,	0,	0|(1<<MCID::Compare), 0x8ULL, NULL, NULL, OperandInfo24 },  // Inst #175 = CMPD
  { 176,	3,	1,	4,	0,	0|(1<<MCID::Compare), 0x8ULL, NULL, NULL, OperandInfo25 },  // Inst #176 = CMPDI
  { 177,	3,	1,	4,	0,	0|(1<<MCID::Compare), 0x8ULL, NULL, NULL, OperandInfo24 },  // Inst #177 = CMPLD
  { 178,	3,	1,	4,	0,	0|(1<<MCID::Compare), 0x8ULL, NULL, NULL, OperandInfo25 },  // Inst #178 = CMPLDI
  { 179,	3,	1,	4,	0,	0|(1<<MCID::Compare), 0x8ULL, NULL, NULL, OperandInfo26 },  // Inst #179 = CMPLW
  { 180,	3,	1,	4,	0,	0|(1<<MCID::Compare), 0x8ULL, NULL, NULL, OperandInfo27 },  // Inst #180 = CMPLWI
  { 181,	3,	1,	4,	0,	0|(1<<MCID::Compare), 0x8ULL, NULL, NULL, OperandInfo26 },  // Inst #181 = CMPW
  { 182,	3,	1,	4,	0,	0|(1<<MCID::Compare), 0x8ULL, NULL, NULL, OperandInfo27 },  // Inst #182 = CMPWI
  { 183,	2,	1,	2,	0,	0, 0x8ULL, NULL, NULL, OperandInfo15 },  // Inst #183 = CNTLZD
  { 184,	2,	1,	2,	0,	0, 0x8ULL, NULL, ImplicitList1, OperandInfo15 },  // Inst #184 = CNTLZDo
  { 185,	2,	1,	2,	0,	0, 0x8ULL, NULL, NULL, OperandInfo14 },  // Inst #185 = CNTLZW
  { 186,	2,	1,	2,	0,	0, 0x8ULL, NULL, ImplicitList1, OperandInfo14 },  // Inst #186 = CNTLZWo
  { 187,	0,	0,	5,	0,	0, 0x0ULL, NULL, ImplicitList15, 0 },  // Inst #187 = CR6SET
  { 188,	0,	0,	5,	0,	0, 0x0ULL, NULL, ImplicitList15, 0 },  // Inst #188 = CR6UNSET
  { 189,	3,	1,	5,	0,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo28 },  // Inst #189 = CRAND
  { 190,	3,	1,	5,	0,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo28 },  // Inst #190 = CRANDC
  { 191,	3,	1,	5,	0,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo28 },  // Inst #191 = CREQV
  { 192,	3,	1,	5,	0,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo28 },  // Inst #192 = CRNAND
  { 193,	3,	1,	5,	0,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo28 },  // Inst #193 = CRNOR
  { 194,	3,	1,	5,	0,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo28 },  // Inst #194 = CROR
  { 195,	3,	1,	5,	0,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo28 },  // Inst #195 = CRORC
  { 196,	1,	1,	5,	0,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo29 },  // Inst #196 = CRSET
  { 197,	1,	1,	5,	0,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo29 },  // Inst #197 = CRUNSET
  { 198,	3,	1,	5,	0,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo28 },  // Inst #198 = CRXOR
  { 199,	2,	0,	6,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x2ULL, NULL, NULL, OperandInfo30 },  // Inst #199 = DCBA
  { 200,	2,	0,	6,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x2ULL, NULL, NULL, OperandInfo30 },  // Inst #200 = DCBF
  { 201,	2,	0,	6,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x2ULL, NULL, NULL, OperandInfo30 },  // Inst #201 = DCBI
  { 202,	2,	0,	6,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x2ULL, NULL, NULL, OperandInfo30 },  // Inst #202 = DCBST
  { 203,	2,	0,	6,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore), 0x2ULL, NULL, NULL, OperandInfo30 },  // Inst #203 = DCBT
  { 204,	2,	0,	6,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x2ULL, NULL, NULL, OperandInfo30 },  // Inst #204 = DCBTST
  { 205,	2,	0,	6,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x2ULL, NULL, NULL, OperandInfo30 },  // Inst #205 = DCBZ
  { 206,	2,	0,	6,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x2ULL, NULL, NULL, OperandInfo30 },  // Inst #206 = DCBZL
  { 207,	3,	1,	7,	0,	0, 0xdULL, NULL, NULL, OperandInfo9 },  // Inst #207 = DIVD
  { 208,	3,	1,	7,	0,	0, 0xdULL, NULL, NULL, OperandInfo9 },  // Inst #208 = DIVDU
  { 209,	3,	1,	7,	0,	0, 0xdULL, NULL, ImplicitList1, OperandInfo9 },  // Inst #209 = DIVDUo
  { 210,	3,	1,	7,	0,	0, 0xdULL, NULL, ImplicitList1, OperandInfo9 },  // Inst #210 = DIVDo
  { 211,	3,	1,	8,	0,	0, 0xdULL, NULL, NULL, OperandInfo8 },  // Inst #211 = DIVW
  { 212,	3,	1,	8,	0,	0, 0xdULL, NULL, NULL, OperandInfo8 },  // Inst #212 = DIVWU
  { 213,	3,	1,	8,	0,	0, 0xdULL, NULL, ImplicitList1, OperandInfo8 },  // Inst #213 = DIVWUo
  { 214,	3,	1,	8,	0,	0, 0xdULL, NULL, ImplicitList1, OperandInfo8 },  // Inst #214 = DIVWo
  { 215,	4,	0,	9,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo31 },  // Inst #215 = DSS
  { 216,	4,	0,	9,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo31 },  // Inst #216 = DSSALL
  { 217,	4,	0,	9,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo32 },  // Inst #217 = DST
  { 218,	4,	0,	9,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo33 },  // Inst #218 = DST64
  { 219,	4,	0,	9,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo32 },  // Inst #219 = DSTST
  { 220,	4,	0,	9,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo33 },  // Inst #220 = DSTST64
  { 221,	4,	0,	9,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo32 },  // Inst #221 = DSTSTT
  { 222,	4,	0,	9,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo33 },  // Inst #222 = DSTSTT64
  { 223,	4,	0,	9,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo32 },  // Inst #223 = DSTT
  { 224,	4,	0,	9,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo33 },  // Inst #224 = DSTT64
  { 225,	4,	1,	0,	0,	0, 0x0ULL, ImplicitList4, ImplicitList4, OperandInfo34 },  // Inst #225 = DYNALLOC
  { 226,	4,	1,	0,	0,	0, 0x0ULL, ImplicitList16, ImplicitList16, OperandInfo35 },  // Inst #226 = DYNALLOC8
  { 227,	1,	0,	0,	0,	0|(1<<MCID::Barrier)|(1<<MCID::Terminator)|(1<<MCID::UsesCustomInserter)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo36 },  // Inst #227 = EH_SjLj_LongJmp32
  { 228,	1,	0,	0,	0,	0|(1<<MCID::Barrier)|(1<<MCID::Terminator)|(1<<MCID::UsesCustomInserter)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo36 },  // Inst #228 = EH_SjLj_LongJmp64
  { 229,	2,	1,	0,	0,	0|(1<<MCID::Barrier)|(1<<MCID::UsesCustomInserter)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, ImplicitList7, OperandInfo37 },  // Inst #229 = EH_SjLj_SetJmp32
  { 230,	2,	1,	0,	0,	0|(1<<MCID::Barrier)|(1<<MCID::UsesCustomInserter)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, ImplicitList8, OperandInfo37 },  // Inst #230 = EH_SjLj_SetJmp64
  { 231,	1,	0,	0,	0,	0|(1<<MCID::Branch)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo5 },  // Inst #231 = EH_SjLj_Setup
  { 232,	0,	0,	9,	0,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, 0 },  // Inst #232 = EIEIO
  { 233,	3,	1,	1,	0,	0, 0x8ULL, NULL, NULL, OperandInfo8 },  // Inst #233 = EQV
  { 234,	3,	1,	1,	0,	0, 0x8ULL, NULL, NULL, OperandInfo9 },  // Inst #234 = EQV8
  { 235,	3,	1,	1,	0,	0, 0x8ULL, NULL, ImplicitList1, OperandInfo9 },  // Inst #235 = EQV8o
  { 236,	3,	1,	1,	0,	0, 0x8ULL, NULL, ImplicitList1, OperandInfo8 },  // Inst #236 = EQVo
  { 237,	4,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo22 },  // Inst #237 = EXTLDI
  { 238,	4,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo22 },  // Inst #238 = EXTLDIo
  { 239,	4,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo23 },  // Inst #239 = EXTLWI
  { 240,	4,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo23 },  // Inst #240 = EXTLWIo
  { 241,	4,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo22 },  // Inst #241 = EXTRDI
  { 242,	4,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo22 },  // Inst #242 = EXTRDIo
  { 243,	4,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo23 },  // Inst #243 = EXTRWI
  { 244,	4,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo23 },  // Inst #244 = EXTRWIo
  { 245,	2,	1,	1,	0,	0, 0x8ULL, NULL, NULL, OperandInfo14 },  // Inst #245 = EXTSB
  { 246,	2,	1,	1,	0,	0, 0x8ULL, NULL, NULL, OperandInfo15 },  // Inst #246 = EXTSB8
  { 247,	2,	1,	1,	0,	0, 0x8ULL, NULL, NULL, OperandInfo38 },  // Inst #247 = EXTSB8_32_64
  { 248,	2,	1,	1,	0,	0, 0x8ULL, NULL, ImplicitList1, OperandInfo15 },  // Inst #248 = EXTSB8o
  { 249,	2,	1,	1,	0,	0, 0x8ULL, NULL, ImplicitList1, OperandInfo14 },  // Inst #249 = EXTSBo
  { 250,	2,	1,	1,	0,	0, 0x8ULL, NULL, NULL, OperandInfo14 },  // Inst #250 = EXTSH
  { 251,	2,	1,	1,	0,	0, 0x8ULL, NULL, NULL, OperandInfo15 },  // Inst #251 = EXTSH8
  { 252,	2,	1,	1,	0,	0, 0x8ULL, NULL, NULL, OperandInfo38 },  // Inst #252 = EXTSH8_32_64
  { 253,	2,	1,	1,	0,	0, 0x8ULL, NULL, ImplicitList1, OperandInfo15 },  // Inst #253 = EXTSH8o
  { 254,	2,	1,	1,	0,	0, 0x8ULL, NULL, ImplicitList1, OperandInfo14 },  // Inst #254 = EXTSHo
  { 255,	2,	1,	1,	0,	0, 0x8ULL, NULL, NULL, OperandInfo15 },  // Inst #255 = EXTSW
  { 256,	2,	1,	1,	0,	0, 0x8ULL, NULL, NULL, OperandInfo38 },  // Inst #256 = EXTSW_32_64
  { 257,	2,	1,	1,	0,	0, 0x8ULL, NULL, ImplicitList1, OperandInfo38 },  // Inst #257 = EXTSW_32_64o
  { 258,	2,	1,	1,	0,	0, 0x8ULL, NULL, ImplicitList1, OperandInfo15 },  // Inst #258 = EXTSWo
  { 259,	2,	1,	10,	0,	0, 0x18ULL, NULL, NULL, OperandInfo39 },  // Inst #259 = FABSD
  { 260,	2,	1,	10,	0,	0, 0x18ULL, NULL, ImplicitList17, OperandInfo39 },  // Inst #260 = FABSDo
  { 261,	2,	1,	10,	0,	0, 0x18ULL, NULL, NULL, OperandInfo40 },  // Inst #261 = FABSS
  { 262,	2,	1,	10,	0,	0, 0x18ULL, NULL, ImplicitList17, OperandInfo40 },  // Inst #262 = FABSSo
  { 263,	3,	1,	11,	0,	0, 0x18ULL, ImplicitList5, NULL, OperandInfo41 },  // Inst #263 = FADD
  { 264,	3,	1,	10,	0,	0, 0x18ULL, ImplicitList5, NULL, OperandInfo42 },  // Inst #264 = FADDS
  { 265,	3,	1,	10,	0,	0, 0x18ULL, ImplicitList5, ImplicitList17, OperandInfo42 },  // Inst #265 = FADDSo
  { 266,	3,	1,	11,	0,	0, 0x18ULL, ImplicitList5, ImplicitList17, OperandInfo41 },  // Inst #266 = FADDo
  { 267,	3,	1,	0,	0,	0|(1<<MCID::UsesCustomInserter), 0x0ULL, ImplicitList5, NULL, OperandInfo41 },  // Inst #267 = FADDrtz
  { 268,	2,	1,	10,	0,	0, 0x18ULL, ImplicitList5, NULL, OperandInfo39 },  // Inst #268 = FCFID
  { 269,	2,	1,	10,	0,	0, 0x18ULL, ImplicitList5, NULL, OperandInfo43 },  // Inst #269 = FCFIDS
  { 270,	2,	1,	10,	0,	0, 0x18ULL, ImplicitList5, ImplicitList17, OperandInfo43 },  // Inst #270 = FCFIDSo
  { 271,	2,	1,	10,	0,	0, 0x18ULL, ImplicitList5, NULL, OperandInfo39 },  // Inst #271 = FCFIDU
  { 272,	2,	1,	10,	0,	0, 0x18ULL, ImplicitList5, NULL, OperandInfo43 },  // Inst #272 = FCFIDUS
  { 273,	2,	1,	10,	0,	0, 0x18ULL, ImplicitList5, ImplicitList17, OperandInfo43 },  // Inst #273 = FCFIDUSo
  { 274,	2,	1,	10,	0,	0, 0x18ULL, ImplicitList5, ImplicitList17, OperandInfo39 },  // Inst #274 = FCFIDUo
  { 275,	2,	1,	10,	0,	0, 0x18ULL, ImplicitList5, ImplicitList17, OperandInfo39 },  // Inst #275 = FCFIDo
  { 276,	3,	1,	12,	0,	0|(1<<MCID::Compare), 0x18ULL, NULL, NULL, OperandInfo44 },  // Inst #276 = FCMPUD
  { 277,	3,	1,	12,	0,	0|(1<<MCID::Compare), 0x18ULL, NULL, NULL, OperandInfo45 },  // Inst #277 = FCMPUS
  { 278,	3,	1,	10,	0,	0, 0x18ULL, NULL, NULL, OperandInfo41 },  // Inst #278 = FCPSGND
  { 279,	3,	1,	10,	0,	0, 0x18ULL, NULL, ImplicitList17, OperandInfo41 },  // Inst #279 = FCPSGNDo
  { 280,	3,	1,	10,	0,	0, 0x18ULL, NULL, NULL, OperandInfo42 },  // Inst #280 = FCPSGNS
  { 281,	3,	1,	10,	0,	0, 0x18ULL, NULL, ImplicitList17, OperandInfo42 },  // Inst #281 = FCPSGNSo
  { 282,	2,	1,	10,	0,	0, 0x18ULL, ImplicitList5, NULL, OperandInfo39 },  // Inst #282 = FCTIDUZ
  { 283,	2,	1,	10,	0,	0, 0x18ULL, ImplicitList5, ImplicitList17, OperandInfo39 },  // Inst #283 = FCTIDUZo
  { 284,	2,	1,	10,	0,	0, 0x18ULL, ImplicitList5, NULL, OperandInfo39 },  // Inst #284 = FCTIDZ
  { 285,	2,	1,	10,	0,	0, 0x18ULL, ImplicitList5, ImplicitList17, OperandInfo39 },  // Inst #285 = FCTIDZo
  { 286,	2,	1,	10,	0,	0, 0x18ULL, ImplicitList5, NULL, OperandInfo39 },  // Inst #286 = FCTIWUZ
  { 287,	2,	1,	10,	0,	0, 0x18ULL, ImplicitList5, ImplicitList17, OperandInfo39 },  // Inst #287 = FCTIWUZo
  { 288,	2,	1,	10,	0,	0, 0x18ULL, ImplicitList5, NULL, OperandInfo39 },  // Inst #288 = FCTIWZ
  { 289,	2,	1,	10,	0,	0, 0x18ULL, ImplicitList5, ImplicitList17, OperandInfo39 },  // Inst #289 = FCTIWZo
  { 290,	3,	1,	13,	0,	0, 0x18ULL, ImplicitList5, NULL, OperandInfo41 },  // Inst #290 = FDIV
  { 291,	3,	1,	14,	0,	0, 0x18ULL, ImplicitList5, NULL, OperandInfo42 },  // Inst #291 = FDIVS
  { 292,	3,	1,	14,	0,	0, 0x18ULL, ImplicitList5, ImplicitList17, OperandInfo42 },  // Inst #292 = FDIVSo
  { 293,	3,	1,	13,	0,	0, 0x18ULL, ImplicitList5, ImplicitList17, OperandInfo41 },  // Inst #293 = FDIVo
  { 294,	4,	1,	15,	0,	0, 0x18ULL, ImplicitList5, NULL, OperandInfo46 },  // Inst #294 = FMADD
  { 295,	4,	1,	10,	0,	0, 0x18ULL, ImplicitList5, NULL, OperandInfo47 },  // Inst #295 = FMADDS
  { 296,	4,	1,	10,	0,	0, 0x18ULL, ImplicitList5, ImplicitList17, OperandInfo47 },  // Inst #296 = FMADDSo
  { 297,	4,	1,	15,	0,	0, 0x18ULL, ImplicitList5, ImplicitList17, OperandInfo46 },  // Inst #297 = FMADDo
  { 298,	2,	1,	10,	0,	0, 0x0ULL, NULL, NULL, OperandInfo40 },  // Inst #298 = FMR
  { 299,	2,	1,	10,	0,	0, 0x0ULL, NULL, ImplicitList17, OperandInfo40 },  // Inst #299 = FMRo
  { 300,	4,	1,	15,	0,	0, 0x18ULL, ImplicitList5, NULL, OperandInfo46 },  // Inst #300 = FMSUB
  { 301,	4,	1,	10,	0,	0, 0x18ULL, ImplicitList5, NULL, OperandInfo47 },  // Inst #301 = FMSUBS
  { 302,	4,	1,	10,	0,	0, 0x18ULL, ImplicitList5, ImplicitList17, OperandInfo47 },  // Inst #302 = FMSUBSo
  { 303,	4,	1,	15,	0,	0, 0x18ULL, ImplicitList5, ImplicitList17, OperandInfo46 },  // Inst #303 = FMSUBo
  { 304,	3,	1,	15,	0,	0, 0x18ULL, ImplicitList5, NULL, OperandInfo41 },  // Inst #304 = FMUL
  { 305,	3,	1,	10,	0,	0, 0x18ULL, ImplicitList5, NULL, OperandInfo42 },  // Inst #305 = FMULS
  { 306,	3,	1,	10,	0,	0, 0x18ULL, ImplicitList5, ImplicitList17, OperandInfo42 },  // Inst #306 = FMULSo
  { 307,	3,	1,	15,	0,	0, 0x18ULL, ImplicitList5, ImplicitList17, OperandInfo41 },  // Inst #307 = FMULo
  { 308,	2,	1,	10,	0,	0, 0x18ULL, NULL, NULL, OperandInfo39 },  // Inst #308 = FNABSD
  { 309,	2,	1,	10,	0,	0, 0x18ULL, NULL, ImplicitList17, OperandInfo39 },  // Inst #309 = FNABSDo
  { 310,	2,	1,	10,	0,	0, 0x18ULL, NULL, NULL, OperandInfo40 },  // Inst #310 = FNABSS
  { 311,	2,	1,	10,	0,	0, 0x18ULL, NULL, ImplicitList17, OperandInfo40 },  // Inst #311 = FNABSSo
  { 312,	2,	1,	10,	0,	0, 0x18ULL, NULL, NULL, OperandInfo39 },  // Inst #312 = FNEGD
  { 313,	2,	1,	10,	0,	0, 0x18ULL, NULL, ImplicitList17, OperandInfo39 },  // Inst #313 = FNEGDo
  { 314,	2,	1,	10,	0,	0, 0x18ULL, NULL, NULL, OperandInfo40 },  // Inst #314 = FNEGS
  { 315,	2,	1,	10,	0,	0, 0x18ULL, NULL, ImplicitList17, OperandInfo40 },  // Inst #315 = FNEGSo
  { 316,	4,	1,	15,	0,	0, 0x18ULL, ImplicitList5, NULL, OperandInfo46 },  // Inst #316 = FNMADD
  { 317,	4,	1,	10,	0,	0, 0x18ULL, ImplicitList5, NULL, OperandInfo47 },  // Inst #317 = FNMADDS
  { 318,	4,	1,	10,	0,	0, 0x18ULL, ImplicitList5, ImplicitList17, OperandInfo47 },  // Inst #318 = FNMADDSo
  { 319,	4,	1,	15,	0,	0, 0x18ULL, ImplicitList5, ImplicitList17, OperandInfo46 },  // Inst #319 = FNMADDo
  { 320,	4,	1,	15,	0,	0, 0x18ULL, ImplicitList5, NULL, OperandInfo46 },  // Inst #320 = FNMSUB
  { 321,	4,	1,	10,	0,	0, 0x18ULL, ImplicitList5, NULL, OperandInfo47 },  // Inst #321 = FNMSUBS
  { 322,	4,	1,	10,	0,	0, 0x18ULL, ImplicitList5, ImplicitList17, OperandInfo47 },  // Inst #322 = FNMSUBSo
  { 323,	4,	1,	15,	0,	0, 0x18ULL, ImplicitList5, ImplicitList17, OperandInfo46 },  // Inst #323 = FNMSUBo
  { 324,	2,	1,	10,	0,	0, 0x18ULL, NULL, NULL, OperandInfo39 },  // Inst #324 = FRE
  { 325,	2,	1,	10,	0,	0, 0x18ULL, NULL, NULL, OperandInfo40 },  // Inst #325 = FRES
  { 326,	2,	1,	10,	0,	0, 0x18ULL, NULL, ImplicitList17, OperandInfo40 },  // Inst #326 = FRESo
  { 327,	2,	1,	10,	0,	0, 0x18ULL, NULL, ImplicitList17, OperandInfo39 },  // Inst #327 = FREo
  { 328,	2,	1,	10,	0,	0, 0x18ULL, ImplicitList5, NULL, OperandInfo39 },  // Inst #328 = FRIMD
  { 329,	2,	1,	10,	0,	0, 0x18ULL, ImplicitList5, ImplicitList17, OperandInfo39 },  // Inst #329 = FRIMDo
  { 330,	2,	1,	10,	0,	0, 0x18ULL, ImplicitList5, NULL, OperandInfo40 },  // Inst #330 = FRIMS
  { 331,	2,	1,	10,	0,	0, 0x18ULL, ImplicitList5, ImplicitList17, OperandInfo40 },  // Inst #331 = FRIMSo
  { 332,	2,	1,	10,	0,	0, 0x18ULL, ImplicitList5, NULL, OperandInfo39 },  // Inst #332 = FRIND
  { 333,	2,	1,	10,	0,	0, 0x18ULL, ImplicitList5, ImplicitList17, OperandInfo39 },  // Inst #333 = FRINDo
  { 334,	2,	1,	10,	0,	0, 0x18ULL, ImplicitList5, NULL, OperandInfo40 },  // Inst #334 = FRINS
  { 335,	2,	1,	10,	0,	0, 0x18ULL, ImplicitList5, ImplicitList17, OperandInfo40 },  // Inst #335 = FRINSo
  { 336,	2,	1,	10,	0,	0, 0x18ULL, ImplicitList5, NULL, OperandInfo39 },  // Inst #336 = FRIPD
  { 337,	2,	1,	10,	0,	0, 0x18ULL, ImplicitList5, ImplicitList17, OperandInfo39 },  // Inst #337 = FRIPDo
  { 338,	2,	1,	10,	0,	0, 0x18ULL, ImplicitList5, NULL, OperandInfo40 },  // Inst #338 = FRIPS
  { 339,	2,	1,	10,	0,	0, 0x18ULL, ImplicitList5, ImplicitList17, OperandInfo40 },  // Inst #339 = FRIPSo
  { 340,	2,	1,	10,	0,	0, 0x18ULL, ImplicitList5, NULL, OperandInfo39 },  // Inst #340 = FRIZD
  { 341,	2,	1,	10,	0,	0, 0x18ULL, ImplicitList5, ImplicitList17, OperandInfo39 },  // Inst #341 = FRIZDo
  { 342,	2,	1,	10,	0,	0, 0x18ULL, ImplicitList5, NULL, OperandInfo40 },  // Inst #342 = FRIZS
  { 343,	2,	1,	10,	0,	0, 0x18ULL, ImplicitList5, ImplicitList17, OperandInfo40 },  // Inst #343 = FRIZSo
  { 344,	2,	1,	10,	0,	0, 0x18ULL, ImplicitList5, NULL, OperandInfo43 },  // Inst #344 = FRSP
  { 345,	2,	1,	10,	0,	0, 0x18ULL, ImplicitList5, ImplicitList17, OperandInfo43 },  // Inst #345 = FRSPo
  { 346,	2,	1,	10,	0,	0, 0x18ULL, NULL, NULL, OperandInfo39 },  // Inst #346 = FRSQRTE
  { 347,	2,	1,	10,	0,	0, 0x18ULL, NULL, NULL, OperandInfo40 },  // Inst #347 = FRSQRTES
  { 348,	2,	1,	10,	0,	0, 0x18ULL, NULL, ImplicitList17, OperandInfo40 },  // Inst #348 = FRSQRTESo
  { 349,	2,	1,	10,	0,	0, 0x18ULL, NULL, ImplicitList17, OperandInfo39 },  // Inst #349 = FRSQRTEo
  { 350,	4,	1,	10,	0,	0, 0x18ULL, NULL, NULL, OperandInfo46 },  // Inst #350 = FSELD
  { 351,	4,	1,	10,	0,	0, 0x18ULL, NULL, ImplicitList17, OperandInfo46 },  // Inst #351 = FSELDo
  { 352,	4,	1,	10,	0,	0, 0x18ULL, NULL, NULL, OperandInfo48 },  // Inst #352 = FSELS
  { 353,	4,	1,	10,	0,	0, 0x18ULL, NULL, ImplicitList17, OperandInfo48 },  // Inst #353 = FSELSo
  { 354,	2,	1,	16,	0,	0, 0x18ULL, ImplicitList5, NULL, OperandInfo39 },  // Inst #354 = FSQRT
  { 355,	2,	1,	16,	0,	0, 0x18ULL, ImplicitList5, NULL, OperandInfo40 },  // Inst #355 = FSQRTS
  { 356,	2,	1,	16,	0,	0, 0x18ULL, ImplicitList5, ImplicitList17, OperandInfo40 },  // Inst #356 = FSQRTSo
  { 357,	2,	1,	16,	0,	0, 0x18ULL, ImplicitList5, ImplicitList17, OperandInfo39 },  // Inst #357 = FSQRTo
  { 358,	3,	1,	11,	0,	0, 0x18ULL, ImplicitList5, NULL, OperandInfo41 },  // Inst #358 = FSUB
  { 359,	3,	1,	10,	0,	0, 0x18ULL, ImplicitList5, NULL, OperandInfo42 },  // Inst #359 = FSUBS
  { 360,	3,	1,	10,	0,	0, 0x18ULL, ImplicitList5, ImplicitList17, OperandInfo42 },  // Inst #360 = FSUBSo
  { 361,	3,	1,	11,	0,	0, 0x18ULL, ImplicitList5, ImplicitList17, OperandInfo41 },  // Inst #361 = FSUBo
  { 362,	3,	1,	0,	0,	0, 0x0ULL, NULL, NULL, OperandInfo10 },  // Inst #362 = GETtlsADDR
  { 363,	3,	1,	0,	0,	0, 0x0ULL, NULL, NULL, OperandInfo10 },  // Inst #363 = GETtlsldADDR
  { 364,	2,	0,	17,	0,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo30 },  // Inst #364 = ICBI
  { 365,	4,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo23 },  // Inst #365 = INSLWI
  { 366,	4,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo23 },  // Inst #366 = INSLWIo
  { 367,	4,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo22 },  // Inst #367 = INSRDI
  { 368,	4,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo22 },  // Inst #368 = INSRDIo
  { 369,	4,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo23 },  // Inst #369 = INSRWI
  { 370,	4,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo23 },  // Inst #370 = INSRWIo
  { 371,	4,	1,	2,	0,	0|(1<<MCID::Select), 0x8ULL, NULL, NULL, OperandInfo49 },  // Inst #371 = ISEL
  { 372,	4,	1,	2,	0,	0|(1<<MCID::Select), 0x8ULL, NULL, NULL, OperandInfo50 },  // Inst #372 = ISEL8
  { 373,	0,	0,	18,	0,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, 0 },  // Inst #373 = ISYNC
  { 374,	3,	1,	2,	0,	0, 0x8ULL, NULL, NULL, OperandInfo11 },  // Inst #374 = LA
  { 375,	3,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo51 },  // Inst #375 = LAx
  { 376,	3,	1,	9,	0,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, NULL, NULL, OperandInfo51 },  // Inst #376 = LBZ
  { 377,	3,	1,	9,	0,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, NULL, NULL, OperandInfo52 },  // Inst #377 = LBZ8
  { 378,	4,	2,	19,	0,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, NULL, NULL, OperandInfo53 },  // Inst #378 = LBZU
  { 379,	4,	2,	19,	0,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, NULL, NULL, OperandInfo54 },  // Inst #379 = LBZU8
  { 380,	4,	2,	19,	0,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, NULL, NULL, OperandInfo55 },  // Inst #380 = LBZUX
  { 381,	4,	2,	19,	0,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, NULL, NULL, OperandInfo56 },  // Inst #381 = LBZUX8
  { 382,	3,	1,	9,	0,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, NULL, NULL, OperandInfo57 },  // Inst #382 = LBZX
  { 383,	3,	1,	9,	0,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, NULL, NULL, OperandInfo58 },  // Inst #383 = LBZX8
  { 384,	3,	1,	20,	0,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, NULL, NULL, OperandInfo52 },  // Inst #384 = LD
  { 385,	3,	1,	21,	0,	0|(1<<MCID::MayLoad), 0x0ULL, NULL, NULL, OperandInfo58 },  // Inst #385 = LDARX
  { 386,	3,	1,	9,	0,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, NULL, NULL, OperandInfo58 },  // Inst #386 = LDBRX
  { 387,	4,	2,	22,	0,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, NULL, NULL, OperandInfo54 },  // Inst #387 = LDU
  { 388,	4,	2,	22,	0,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, NULL, NULL, OperandInfo56 },  // Inst #388 = LDUX
  { 389,	3,	1,	20,	0,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, NULL, NULL, OperandInfo58 },  // Inst #389 = LDX
  { 390,	3,	1,	0,	0,	0|(1<<MCID::MayLoad), 0x0ULL, NULL, NULL, OperandInfo59 },  // Inst #390 = LDgotTprelL
  { 391,	1,	0,	20,	0,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::UnmodeledSideEffects), 0x10ULL, NULL, NULL, OperandInfo60 },  // Inst #391 = LDinto_toc
  { 392,	3,	1,	0,	0,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, NULL, NULL, OperandInfo61 },  // Inst #392 = LDtoc
  { 393,	3,	1,	0,	0,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, NULL, NULL, OperandInfo61 },  // Inst #393 = LDtocCPT
  { 394,	3,	1,	0,	0,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, NULL, NULL, OperandInfo61 },  // Inst #394 = LDtocJTI
  { 395,	3,	1,	0,	0,	0|(1<<MCID::MayLoad), 0x0ULL, NULL, NULL, OperandInfo59 },  // Inst #395 = LDtocL
  { 396,	0,	0,	20,	0,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::UnmodeledSideEffects), 0x10ULL, NULL, NULL, 0 },  // Inst #396 = LDtoc_restore
  { 397,	3,	1,	23,	0,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, NULL, NULL, OperandInfo62 },  // Inst #397 = LFD
  { 398,	4,	2,	24,	0,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, NULL, NULL, OperandInfo63 },  // Inst #398 = LFDU
  { 399,	4,	2,	24,	0,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, NULL, NULL, OperandInfo64 },  // Inst #399 = LFDUX
  { 400,	3,	1,	23,	0,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, NULL, NULL, OperandInfo65 },  // Inst #400 = LFDX
  { 401,	3,	1,	23,	0,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, NULL, NULL, OperandInfo65 },  // Inst #401 = LFIWAX
  { 402,	3,	1,	23,	0,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, NULL, NULL, OperandInfo65 },  // Inst #402 = LFIWZX
  { 403,	3,	1,	23,	0,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, NULL, NULL, OperandInfo66 },  // Inst #403 = LFS
  { 404,	4,	2,	24,	0,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, NULL, NULL, OperandInfo67 },  // Inst #404 = LFSU
  { 405,	4,	2,	24,	0,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, NULL, NULL, OperandInfo68 },  // Inst #405 = LFSUX
  { 406,	3,	1,	23,	0,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, NULL, NULL, OperandInfo69 },  // Inst #406 = LFSX
  { 407,	3,	1,	25,	0,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x14ULL, NULL, NULL, OperandInfo51 },  // Inst #407 = LHA
  { 408,	3,	1,	25,	0,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x14ULL, NULL, NULL, OperandInfo52 },  // Inst #408 = LHA8
  { 409,	4,	2,	26,	0,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, NULL, NULL, OperandInfo53 },  // Inst #409 = LHAU
  { 410,	4,	2,	26,	0,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, NULL, NULL, OperandInfo54 },  // Inst #410 = LHAU8
  { 411,	4,	2,	26,	0,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, NULL, NULL, OperandInfo55 },  // Inst #411 = LHAUX
  { 412,	4,	2,	26,	0,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, NULL, NULL, OperandInfo56 },  // Inst #412 = LHAUX8
  { 413,	3,	1,	25,	0,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x14ULL, NULL, NULL, OperandInfo57 },  // Inst #413 = LHAX
  { 414,	3,	1,	25,	0,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x14ULL, NULL, NULL, OperandInfo58 },  // Inst #414 = LHAX8
  { 415,	3,	1,	9,	0,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, NULL, NULL, OperandInfo57 },  // Inst #415 = LHBRX
  { 416,	3,	1,	9,	0,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, NULL, NULL, OperandInfo51 },  // Inst #416 = LHZ
  { 417,	3,	1,	9,	0,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, NULL, NULL, OperandInfo52 },  // Inst #417 = LHZ8
  { 418,	4,	2,	19,	0,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, NULL, NULL, OperandInfo53 },  // Inst #418 = LHZU
  { 419,	4,	2,	19,	0,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, NULL, NULL, OperandInfo54 },  // Inst #419 = LHZU8
  { 420,	4,	2,	19,	0,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, NULL, NULL, OperandInfo55 },  // Inst #420 = LHZUX
  { 421,	4,	2,	19,	0,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, NULL, NULL, OperandInfo56 },  // Inst #421 = LHZUX8
  { 422,	3,	1,	9,	0,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, NULL, NULL, OperandInfo57 },  // Inst #422 = LHZX
  { 423,	3,	1,	9,	0,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, NULL, NULL, OperandInfo58 },  // Inst #423 = LHZX8
  { 424,	2,	1,	1,	0,	0|(1<<MCID::MoveImm)|(1<<MCID::Rematerializable)|(1<<MCID::CheapAsAMove), 0x8ULL, NULL, NULL, OperandInfo70 },  // Inst #424 = LI
  { 425,	2,	1,	1,	0,	0|(1<<MCID::MoveImm)|(1<<MCID::Rematerializable)|(1<<MCID::CheapAsAMove), 0x8ULL, NULL, NULL, OperandInfo71 },  // Inst #425 = LI8
  { 426,	2,	1,	1,	0,	0|(1<<MCID::MoveImm)|(1<<MCID::Rematerializable)|(1<<MCID::CheapAsAMove), 0x8ULL, NULL, NULL, OperandInfo70 },  // Inst #426 = LIS
  { 427,	2,	1,	1,	0,	0|(1<<MCID::MoveImm)|(1<<MCID::Rematerializable)|(1<<MCID::CheapAsAMove), 0x8ULL, NULL, NULL, OperandInfo71 },  // Inst #427 = LIS8
  { 428,	3,	1,	27,	0,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo51 },  // Inst #428 = LMW
  { 429,	3,	1,	9,	0,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, NULL, NULL, OperandInfo72 },  // Inst #429 = LVEBX
  { 430,	3,	1,	9,	0,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, NULL, NULL, OperandInfo72 },  // Inst #430 = LVEHX
  { 431,	3,	1,	9,	0,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, NULL, NULL, OperandInfo72 },  // Inst #431 = LVEWX
  { 432,	3,	1,	9,	0,	0, 0x10ULL, NULL, NULL, OperandInfo72 },  // Inst #432 = LVSL
  { 433,	3,	1,	9,	0,	0, 0x10ULL, NULL, NULL, OperandInfo72 },  // Inst #433 = LVSR
  { 434,	3,	1,	9,	0,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, NULL, NULL, OperandInfo72 },  // Inst #434 = LVX
  { 435,	3,	1,	9,	0,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, NULL, NULL, OperandInfo72 },  // Inst #435 = LVXL
  { 436,	3,	1,	28,	0,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x14ULL, NULL, NULL, OperandInfo52 },  // Inst #436 = LWA
  { 437,	3,	1,	29,	0,	0|(1<<MCID::MayLoad), 0x0ULL, NULL, NULL, OperandInfo57 },  // Inst #437 = LWARX
  { 438,	4,	2,	26,	0,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, NULL, NULL, OperandInfo56 },  // Inst #438 = LWAUX
  { 439,	3,	1,	25,	0,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x14ULL, NULL, NULL, OperandInfo58 },  // Inst #439 = LWAX
  { 440,	3,	1,	25,	0,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad)|(1<<MCID::UnmodeledSideEffects), 0x14ULL, NULL, NULL, OperandInfo57 },  // Inst #440 = LWAX_32
  { 441,	3,	1,	28,	0,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad)|(1<<MCID::UnmodeledSideEffects), 0x14ULL, NULL, NULL, OperandInfo51 },  // Inst #441 = LWA_32
  { 442,	3,	1,	9,	0,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, NULL, NULL, OperandInfo57 },  // Inst #442 = LWBRX
  { 443,	3,	1,	9,	0,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, NULL, NULL, OperandInfo51 },  // Inst #443 = LWZ
  { 444,	3,	1,	9,	0,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, NULL, NULL, OperandInfo52 },  // Inst #444 = LWZ8
  { 445,	4,	2,	19,	0,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, NULL, NULL, OperandInfo53 },  // Inst #445 = LWZU
  { 446,	4,	2,	19,	0,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, NULL, NULL, OperandInfo54 },  // Inst #446 = LWZU8
  { 447,	4,	2,	19,	0,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, NULL, NULL, OperandInfo55 },  // Inst #447 = LWZUX
  { 448,	4,	2,	19,	0,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, NULL, NULL, OperandInfo56 },  // Inst #448 = LWZUX8
  { 449,	3,	1,	9,	0,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, NULL, NULL, OperandInfo57 },  // Inst #449 = LWZX
  { 450,	3,	1,	9,	0,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, NULL, NULL, OperandInfo58 },  // Inst #450 = LWZX8
  { 451,	2,	1,	30,	0,	0, 0x21ULL, NULL, NULL, OperandInfo73 },  // Inst #451 = MCRF
  { 452,	1,	1,	31,	0,	0, 0x20ULL, NULL, NULL, OperandInfo74 },  // Inst #452 = MFCR
  { 453,	1,	1,	31,	0,	0, 0x20ULL, NULL, NULL, OperandInfo60 },  // Inst #453 = MFCR8
  { 454,	1,	1,	32,	0,	0|(1<<MCID::UnmodeledSideEffects), 0x9ULL, ImplicitList7, NULL, OperandInfo74 },  // Inst #454 = MFCTR
  { 455,	1,	1,	32,	0,	0|(1<<MCID::UnmodeledSideEffects), 0x9ULL, ImplicitList8, NULL, OperandInfo60 },  // Inst #455 = MFCTR8
  { 456,	1,	1,	33,	0,	0, 0x1aULL, ImplicitList5, NULL, OperandInfo75 },  // Inst #456 = MFFS
  { 457,	1,	1,	32,	0,	0|(1<<MCID::UnmodeledSideEffects), 0x9ULL, ImplicitList6, NULL, OperandInfo74 },  // Inst #457 = MFLR
  { 458,	1,	1,	32,	0,	0|(1<<MCID::UnmodeledSideEffects), 0x9ULL, ImplicitList11, NULL, OperandInfo60 },  // Inst #458 = MFLR8
  { 459,	2,	1,	31,	0,	0, 0x21ULL, NULL, NULL, OperandInfo70 },  // Inst #459 = MFOCRF
  { 460,	2,	1,	31,	0,	0, 0x21ULL, NULL, NULL, OperandInfo71 },  // Inst #460 = MFOCRF8
  { 461,	2,	1,	32,	0,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo76 },  // Inst #461 = MFSPR
  { 462,	2,	1,	34,	0,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo76 },  // Inst #462 = MFTB
  { 463,	1,	1,	34,	0,	0|(1<<MCID::UnmodeledSideEffects), 0x9ULL, NULL, NULL, OperandInfo60 },  // Inst #463 = MFTB8
  { 464,	1,	1,	2,	0,	0|(1<<MCID::UnmodeledSideEffects), 0x9ULL, NULL, NULL, OperandInfo74 },  // Inst #464 = MFVRSAVE
  { 465,	2,	1,	2,	0,	0|(1<<MCID::UnmodeledSideEffects), 0x9ULL, NULL, NULL, OperandInfo77 },  // Inst #465 = MFVRSAVEv
  { 466,	1,	1,	35,	0,	0|(1<<MCID::MayLoad), 0x0ULL, NULL, NULL, OperandInfo78 },  // Inst #466 = MFVSCR
  { 467,	2,	0,	36,	0,	0, 0x20ULL, NULL, NULL, OperandInfo79 },  // Inst #467 = MTCRF
  { 468,	2,	0,	36,	0,	0, 0x20ULL, NULL, NULL, OperandInfo80 },  // Inst #468 = MTCRF8
  { 469,	1,	0,	37,	0,	0, 0x9ULL, NULL, ImplicitList7, OperandInfo74 },  // Inst #469 = MTCTR
  { 470,	1,	0,	37,	0,	0, 0x9ULL, NULL, ImplicitList8, OperandInfo60 },  // Inst #470 = MTCTR8
  { 471,	1,	0,	37,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x9ULL, NULL, ImplicitList8, OperandInfo60 },  // Inst #471 = MTCTR8loop
  { 472,	1,	0,	37,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x9ULL, NULL, ImplicitList7, OperandInfo74 },  // Inst #472 = MTCTRloop
  { 473,	1,	0,	38,	0,	0|(1<<MCID::UnmodeledSideEffects), 0x1aULL, ImplicitList5, ImplicitList5, OperandInfo5 },  // Inst #473 = MTFSB0
  { 474,	1,	0,	38,	0,	0|(1<<MCID::UnmodeledSideEffects), 0x1aULL, ImplicitList5, ImplicitList5, OperandInfo5 },  // Inst #474 = MTFSB1
  { 475,	2,	0,	38,	0,	0|(1<<MCID::UnmodeledSideEffects), 0x1aULL, ImplicitList5, ImplicitList5, OperandInfo81 },  // Inst #475 = MTFSF
  { 476,	1,	0,	37,	0,	0|(1<<MCID::UnmodeledSideEffects), 0x9ULL, NULL, ImplicitList6, OperandInfo74 },  // Inst #476 = MTLR
  { 477,	1,	0,	37,	0,	0|(1<<MCID::UnmodeledSideEffects), 0x9ULL, NULL, ImplicitList11, OperandInfo60 },  // Inst #477 = MTLR8
  { 478,	2,	1,	36,	0,	0, 0x21ULL, NULL, NULL, OperandInfo82 },  // Inst #478 = MTOCRF
  { 479,	2,	1,	36,	0,	0, 0x21ULL, NULL, NULL, OperandInfo83 },  // Inst #479 = MTOCRF8
  { 480,	2,	0,	37,	0,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo79 },  // Inst #480 = MTSPR
  { 481,	1,	0,	2,	0,	0|(1<<MCID::UnmodeledSideEffects), 0xaULL, NULL, NULL, OperandInfo74 },  // Inst #481 = MTVRSAVE
  { 482,	2,	1,	2,	0,	0|(1<<MCID::UnmodeledSideEffects), 0xaULL, NULL, NULL, OperandInfo84 },  // Inst #482 = MTVRSAVEv
  { 483,	1,	0,	9,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo78 },  // Inst #483 = MTVSCR
  { 484,	3,	1,	39,	0,	0, 0x8ULL, NULL, NULL, OperandInfo9 },  // Inst #484 = MULHD
  { 485,	3,	1,	40,	0,	0, 0x8ULL, NULL, NULL, OperandInfo9 },  // Inst #485 = MULHDU
  { 486,	3,	1,	40,	0,	0, 0x8ULL, NULL, ImplicitList1, OperandInfo9 },  // Inst #486 = MULHDUo
  { 487,	3,	1,	39,	0,	0, 0x8ULL, NULL, ImplicitList1, OperandInfo9 },  // Inst #487 = MULHDo
  { 488,	3,	1,	39,	0,	0, 0x8ULL, NULL, NULL, OperandInfo8 },  // Inst #488 = MULHW
  { 489,	3,	1,	40,	0,	0, 0x8ULL, NULL, NULL, OperandInfo8 },  // Inst #489 = MULHWU
  { 490,	3,	1,	40,	0,	0, 0x8ULL, NULL, ImplicitList1, OperandInfo8 },  // Inst #490 = MULHWUo
  { 491,	3,	1,	39,	0,	0, 0x8ULL, NULL, ImplicitList1, OperandInfo8 },  // Inst #491 = MULHWo
  { 492,	3,	1,	41,	0,	0, 0x8ULL, NULL, NULL, OperandInfo9 },  // Inst #492 = MULLD
  { 493,	3,	1,	41,	0,	0, 0x8ULL, NULL, ImplicitList1, OperandInfo9 },  // Inst #493 = MULLDo
  { 494,	3,	1,	42,	0,	0, 0x8ULL, NULL, NULL, OperandInfo13 },  // Inst #494 = MULLI
  { 495,	3,	1,	42,	0,	0, 0x8ULL, NULL, NULL, OperandInfo10 },  // Inst #495 = MULLI8
  { 496,	3,	1,	39,	0,	0, 0x8ULL, NULL, NULL, OperandInfo8 },  // Inst #496 = MULLW
  { 497,	3,	1,	39,	0,	0, 0x8ULL, NULL, ImplicitList1, OperandInfo8 },  // Inst #497 = MULLWo
  { 498,	0,	0,	0,	0,	0|(1<<MCID::UnmodeledSideEffects), 0x38ULL, NULL, ImplicitList6, 0 },  // Inst #498 = MovePCtoLR
  { 499,	0,	0,	0,	0,	0|(1<<MCID::UnmodeledSideEffects), 0x38ULL, NULL, ImplicitList11, 0 },  // Inst #499 = MovePCtoLR8
  { 500,	3,	1,	1,	0,	0, 0x8ULL, NULL, NULL, OperandInfo8 },  // Inst #500 = NAND
  { 501,	3,	1,	1,	0,	0, 0x8ULL, NULL, NULL, OperandInfo9 },  // Inst #501 = NAND8
  { 502,	3,	1,	1,	0,	0, 0x8ULL, NULL, ImplicitList1, OperandInfo9 },  // Inst #502 = NAND8o
  { 503,	3,	1,	1,	0,	0, 0x8ULL, NULL, ImplicitList1, OperandInfo8 },  // Inst #503 = NANDo
  { 504,	2,	1,	1,	0,	0, 0x8ULL, NULL, NULL, OperandInfo14 },  // Inst #504 = NEG
  { 505,	2,	1,	1,	0,	0, 0x8ULL, NULL, NULL, OperandInfo15 },  // Inst #505 = NEG8
  { 506,	2,	1,	1,	0,	0, 0x8ULL, NULL, ImplicitList1, OperandInfo15 },  // Inst #506 = NEG8o
  { 507,	2,	1,	1,	0,	0, 0x8ULL, NULL, ImplicitList1, OperandInfo14 },  // Inst #507 = NEGo
  { 508,	0,	0,	1,	0,	0|(1<<MCID::UnmodeledSideEffects), 0x8ULL, NULL, NULL, 0 },  // Inst #508 = NOP
  { 509,	3,	1,	1,	0,	0, 0x8ULL, NULL, NULL, OperandInfo8 },  // Inst #509 = NOR
  { 510,	3,	1,	1,	0,	0, 0x8ULL, NULL, NULL, OperandInfo9 },  // Inst #510 = NOR8
  { 511,	3,	1,	1,	0,	0, 0x8ULL, NULL, ImplicitList1, OperandInfo9 },  // Inst #511 = NOR8o
  { 512,	3,	1,	1,	0,	0, 0x8ULL, NULL, ImplicitList1, OperandInfo8 },  // Inst #512 = NORo
  { 513,	3,	1,	1,	0,	0, 0x8ULL, NULL, NULL, OperandInfo8 },  // Inst #513 = OR
  { 514,	3,	1,	1,	0,	0, 0x8ULL, NULL, NULL, OperandInfo9 },  // Inst #514 = OR8
  { 515,	3,	1,	1,	0,	0, 0x8ULL, NULL, ImplicitList1, OperandInfo9 },  // Inst #515 = OR8o
  { 516,	3,	1,	1,	0,	0, 0x8ULL, NULL, NULL, OperandInfo8 },  // Inst #516 = ORC
  { 517,	3,	1,	1,	0,	0, 0x8ULL, NULL, NULL, OperandInfo9 },  // Inst #517 = ORC8
  { 518,	3,	1,	1,	0,	0, 0x8ULL, NULL, ImplicitList1, OperandInfo9 },  // Inst #518 = ORC8o
  { 519,	3,	1,	1,	0,	0, 0x8ULL, NULL, ImplicitList1, OperandInfo8 },  // Inst #519 = ORCo
  { 520,	3,	1,	1,	0,	0, 0x8ULL, NULL, NULL, OperandInfo13 },  // Inst #520 = ORI
  { 521,	3,	1,	1,	0,	0, 0x8ULL, NULL, NULL, OperandInfo10 },  // Inst #521 = ORI8
  { 522,	3,	1,	1,	0,	0, 0x8ULL, NULL, NULL, OperandInfo13 },  // Inst #522 = ORIS
  { 523,	3,	1,	1,	0,	0, 0x8ULL, NULL, NULL, OperandInfo10 },  // Inst #523 = ORIS8
  { 524,	3,	1,	1,	0,	0, 0x8ULL, NULL, ImplicitList1, OperandInfo8 },  // Inst #524 = ORo
  { 525,	2,	1,	2,	0,	0, 0x8ULL, NULL, NULL, OperandInfo15 },  // Inst #525 = POPCNTD
  { 526,	2,	1,	2,	0,	0, 0x8ULL, NULL, ImplicitList1, OperandInfo15 },  // Inst #526 = POPCNTDo
  { 527,	2,	1,	2,	0,	0, 0x8ULL, NULL, NULL, OperandInfo14 },  // Inst #527 = POPCNTW
  { 528,	2,	1,	2,	0,	0, 0x8ULL, NULL, ImplicitList1, OperandInfo14 },  // Inst #528 = POPCNTWo
  { 529,	3,	1,	0,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo85 },  // Inst #529 = RESTORE_CR
  { 530,	3,	1,	0,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo86 },  // Inst #530 = RESTORE_VRSAVE
  { 531,	4,	1,	43,	0,	0, 0x8ULL, NULL, NULL, OperandInfo87 },  // Inst #531 = RLDCL
  { 532,	4,	1,	43,	0,	0, 0x8ULL, NULL, ImplicitList1, OperandInfo87 },  // Inst #532 = RLDCLo
  { 533,	4,	1,	43,	0,	0, 0x8ULL, NULL, NULL, OperandInfo87 },  // Inst #533 = RLDCR
  { 534,	4,	1,	43,	0,	0, 0x8ULL, NULL, ImplicitList1, OperandInfo87 },  // Inst #534 = RLDCRo
  { 535,	4,	1,	44,	0,	0, 0x8ULL, NULL, NULL, OperandInfo22 },  // Inst #535 = RLDIC
  { 536,	4,	1,	44,	0,	0, 0x8ULL, NULL, NULL, OperandInfo22 },  // Inst #536 = RLDICL
  { 537,	4,	1,	44,	0,	0, 0x8ULL, NULL, NULL, OperandInfo88 },  // Inst #537 = RLDICL_32_64
  { 538,	4,	1,	44,	0,	0, 0x8ULL, NULL, ImplicitList1, OperandInfo22 },  // Inst #538 = RLDICLo
  { 539,	4,	1,	44,	0,	0, 0x8ULL, NULL, NULL, OperandInfo22 },  // Inst #539 = RLDICR
  { 540,	4,	1,	44,	0,	0, 0x8ULL, NULL, ImplicitList1, OperandInfo22 },  // Inst #540 = RLDICRo
  { 541,	4,	1,	44,	0,	0, 0x8ULL, NULL, ImplicitList1, OperandInfo22 },  // Inst #541 = RLDICo
  { 542,	5,	1,	44,	0,	0|(1<<MCID::Commutable), 0x8ULL, NULL, NULL, OperandInfo89 },  // Inst #542 = RLDIMI
  { 543,	5,	1,	44,	0,	0|(1<<MCID::Commutable), 0x8ULL, NULL, ImplicitList1, OperandInfo89 },  // Inst #543 = RLDIMIo
  { 544,	6,	1,	45,	0,	0|(1<<MCID::Commutable), 0xcULL, NULL, NULL, OperandInfo90 },  // Inst #544 = RLWIMI
  { 545,	6,	1,	45,	0,	0|(1<<MCID::Commutable), 0xcULL, NULL, ImplicitList1, OperandInfo90 },  // Inst #545 = RLWIMIo
  { 546,	5,	1,	2,	0,	0, 0x8ULL, NULL, NULL, OperandInfo91 },  // Inst #546 = RLWINM
  { 547,	5,	1,	2,	0,	0, 0x8ULL, NULL, NULL, OperandInfo92 },  // Inst #547 = RLWINM8
  { 548,	5,	1,	2,	0,	0, 0x8ULL, NULL, ImplicitList1, OperandInfo92 },  // Inst #548 = RLWINM8o
  { 549,	5,	1,	2,	0,	0, 0xcULL, NULL, ImplicitList1, OperandInfo91 },  // Inst #549 = RLWINMo
  { 550,	5,	1,	2,	0,	0, 0x8ULL, NULL, NULL, OperandInfo93 },  // Inst #550 = RLWNM
  { 551,	5,	1,	2,	0,	0, 0x8ULL, NULL, ImplicitList1, OperandInfo93 },  // Inst #551 = RLWNMo
  { 552,	3,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo10 },  // Inst #552 = ROTRDI
  { 553,	3,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo10 },  // Inst #553 = ROTRDIo
  { 554,	3,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo13 },  // Inst #554 = ROTRWI
  { 555,	3,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo13 },  // Inst #555 = ROTRWIo
  { 556,	1,	0,	3,	0,	0|(1<<MCID::UnmodeledSideEffects), 0x38ULL, NULL, NULL, OperandInfo2 },  // Inst #556 = SC
  { 557,	5,	1,	0,	0,	0|(1<<MCID::UsesCustomInserter)|(1<<MCID::UnmodeledSideEffects), 0x2ULL, NULL, NULL, OperandInfo94 },  // Inst #557 = SELECT_CC_F4
  { 558,	5,	1,	0,	0,	0|(1<<MCID::UsesCustomInserter)|(1<<MCID::UnmodeledSideEffects), 0x2ULL, NULL, NULL, OperandInfo95 },  // Inst #558 = SELECT_CC_F8
  { 559,	5,	1,	0,	0,	0|(1<<MCID::UsesCustomInserter)|(1<<MCID::UnmodeledSideEffects), 0x2ULL, NULL, NULL, OperandInfo96 },  // Inst #559 = SELECT_CC_I4
  { 560,	5,	1,	0,	0,	0|(1<<MCID::UsesCustomInserter)|(1<<MCID::UnmodeledSideEffects), 0x2ULL, NULL, NULL, OperandInfo97 },  // Inst #560 = SELECT_CC_I8
  { 561,	5,	1,	0,	0,	0|(1<<MCID::UsesCustomInserter)|(1<<MCID::UnmodeledSideEffects), 0x2ULL, NULL, NULL, OperandInfo98 },  // Inst #561 = SELECT_CC_VRRC
  { 562,	3,	1,	43,	0,	0, 0x8ULL, NULL, NULL, OperandInfo99 },  // Inst #562 = SLD
  { 563,	3,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo10 },  // Inst #563 = SLDI
  { 564,	3,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo10 },  // Inst #564 = SLDIo
  { 565,	3,	1,	43,	0,	0, 0x8ULL, NULL, ImplicitList1, OperandInfo99 },  // Inst #565 = SLDo
  { 566,	3,	1,	2,	0,	0, 0x8ULL, NULL, NULL, OperandInfo8 },  // Inst #566 = SLW
  { 567,	3,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo13 },  // Inst #567 = SLWI
  { 568,	3,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo13 },  // Inst #568 = SLWIo
  { 569,	3,	1,	2,	0,	0, 0x8ULL, NULL, ImplicitList1, OperandInfo8 },  // Inst #569 = SLWo
  { 570,	3,	0,	0,	0,	0|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo85 },  // Inst #570 = SPILL_CR
  { 571,	3,	0,	0,	0,	0|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo86 },  // Inst #571 = SPILL_VRSAVE
  { 572,	3,	1,	43,	0,	0, 0x8ULL, NULL, ImplicitList2, OperandInfo99 },  // Inst #572 = SRAD
  { 573,	3,	1,	44,	0,	0, 0x8ULL, NULL, ImplicitList2, OperandInfo10 },  // Inst #573 = SRADI
  { 574,	3,	1,	44,	0,	0, 0x8ULL, NULL, ImplicitList3, OperandInfo10 },  // Inst #574 = SRADIo
  { 575,	3,	1,	43,	0,	0, 0x8ULL, NULL, ImplicitList3, OperandInfo99 },  // Inst #575 = SRADo
  { 576,	3,	1,	46,	0,	0, 0x8ULL, NULL, ImplicitList2, OperandInfo8 },  // Inst #576 = SRAW
  { 577,	3,	1,	46,	0,	0, 0x8ULL, NULL, ImplicitList2, OperandInfo13 },  // Inst #577 = SRAWI
  { 578,	3,	1,	46,	0,	0, 0x8ULL, NULL, ImplicitList3, OperandInfo13 },  // Inst #578 = SRAWIo
  { 579,	3,	1,	46,	0,	0, 0x8ULL, NULL, ImplicitList3, OperandInfo8 },  // Inst #579 = SRAWo
  { 580,	3,	1,	43,	0,	0, 0x8ULL, NULL, NULL, OperandInfo99 },  // Inst #580 = SRD
  { 581,	3,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo10 },  // Inst #581 = SRDI
  { 582,	3,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo10 },  // Inst #582 = SRDIo
  { 583,	3,	1,	43,	0,	0, 0x8ULL, NULL, ImplicitList1, OperandInfo99 },  // Inst #583 = SRDo
  { 584,	3,	1,	2,	0,	0, 0x8ULL, NULL, NULL, OperandInfo8 },  // Inst #584 = SRW
  { 585,	3,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo13 },  // Inst #585 = SRWI
  { 586,	3,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo13 },  // Inst #586 = SRWIo
  { 587,	3,	1,	2,	0,	0, 0x8ULL, NULL, ImplicitList1, OperandInfo8 },  // Inst #587 = SRWo
  { 588,	3,	0,	35,	0,	0|(1<<MCID::MayStore), 0x10ULL, NULL, NULL, OperandInfo51 },  // Inst #588 = STB
  { 589,	3,	0,	35,	0,	0|(1<<MCID::MayStore), 0x10ULL, NULL, NULL, OperandInfo52 },  // Inst #589 = STB8
  { 590,	4,	1,	47,	0,	0|(1<<MCID::MayStore), 0x10ULL, NULL, NULL, OperandInfo100 },  // Inst #590 = STBU
  { 591,	4,	1,	47,	0,	0|(1<<MCID::MayStore), 0x10ULL, NULL, NULL, OperandInfo101 },  // Inst #591 = STBU8
  { 592,	4,	1,	47,	0,	0|(1<<MCID::MayStore), 0x14ULL, NULL, NULL, OperandInfo102 },  // Inst #592 = STBUX
  { 593,	4,	1,	47,	0,	0|(1<<MCID::MayStore), 0x14ULL, NULL, NULL, OperandInfo103 },  // Inst #593 = STBUX8
  { 594,	3,	0,	35,	0,	0|(1<<MCID::MayStore), 0x14ULL, NULL, NULL, OperandInfo57 },  // Inst #594 = STBX
  { 595,	3,	0,	35,	0,	0|(1<<MCID::MayStore), 0x14ULL, NULL, NULL, OperandInfo58 },  // Inst #595 = STBX8
  { 596,	3,	0,	48,	0,	0|(1<<MCID::MayStore), 0x10ULL, NULL, NULL, OperandInfo52 },  // Inst #596 = STD
  { 597,	3,	0,	35,	0,	0|(1<<MCID::MayStore), 0x14ULL, NULL, NULL, OperandInfo58 },  // Inst #597 = STDBRX
  { 598,	3,	0,	49,	0,	0|(1<<MCID::MayStore), 0x0ULL, NULL, ImplicitList1, OperandInfo58 },  // Inst #598 = STDCX
  { 599,	4,	1,	50,	0,	0|(1<<MCID::MayStore), 0x10ULL, NULL, NULL, OperandInfo101 },  // Inst #599 = STDU
  { 600,	4,	1,	50,	0,	0|(1<<MCID::MayStore), 0x14ULL, NULL, NULL, OperandInfo103 },  // Inst #600 = STDUX
  { 601,	3,	0,	48,	0,	0|(1<<MCID::MayStore), 0x14ULL, NULL, NULL, OperandInfo58 },  // Inst #601 = STDX
  { 602,	3,	0,	51,	0,	0|(1<<MCID::MayStore), 0x10ULL, NULL, NULL, OperandInfo62 },  // Inst #602 = STFD
  { 603,	4,	1,	52,	0,	0|(1<<MCID::MayStore), 0x10ULL, NULL, NULL, OperandInfo104 },  // Inst #603 = STFDU
  { 604,	4,	1,	52,	0,	0|(1<<MCID::MayStore), 0x14ULL, NULL, NULL, OperandInfo105 },  // Inst #604 = STFDUX
  { 605,	3,	0,	51,	0,	0|(1<<MCID::MayStore), 0x10ULL, NULL, NULL, OperandInfo65 },  // Inst #605 = STFDX
  { 606,	3,	0,	51,	0,	0|(1<<MCID::MayStore), 0x10ULL, NULL, NULL, OperandInfo65 },  // Inst #606 = STFIWX
  { 607,	3,	0,	51,	0,	0|(1<<MCID::MayStore), 0x10ULL, NULL, NULL, OperandInfo66 },  // Inst #607 = STFS
  { 608,	4,	1,	52,	0,	0|(1<<MCID::MayStore), 0x10ULL, NULL, NULL, OperandInfo106 },  // Inst #608 = STFSU
  { 609,	4,	1,	52,	0,	0|(1<<MCID::MayStore), 0x14ULL, NULL, NULL, OperandInfo107 },  // Inst #609 = STFSUX
  { 610,	3,	0,	51,	0,	0|(1<<MCID::MayStore), 0x10ULL, NULL, NULL, OperandInfo69 },  // Inst #610 = STFSX
  { 611,	3,	0,	35,	0,	0|(1<<MCID::MayStore), 0x10ULL, NULL, NULL, OperandInfo51 },  // Inst #611 = STH
  { 612,	3,	0,	35,	0,	0|(1<<MCID::MayStore), 0x10ULL, NULL, NULL, OperandInfo52 },  // Inst #612 = STH8
  { 613,	3,	0,	35,	0,	0|(1<<MCID::MayStore), 0x14ULL, NULL, NULL, OperandInfo57 },  // Inst #613 = STHBRX
  { 614,	4,	1,	47,	0,	0|(1<<MCID::MayStore), 0x10ULL, NULL, NULL, OperandInfo100 },  // Inst #614 = STHU
  { 615,	4,	1,	47,	0,	0|(1<<MCID::MayStore), 0x10ULL, NULL, NULL, OperandInfo101 },  // Inst #615 = STHU8
  { 616,	4,	1,	47,	0,	0|(1<<MCID::MayStore), 0x14ULL, NULL, NULL, OperandInfo102 },  // Inst #616 = STHUX
  { 617,	4,	1,	47,	0,	0|(1<<MCID::MayStore), 0x14ULL, NULL, NULL, OperandInfo103 },  // Inst #617 = STHUX8
  { 618,	3,	0,	35,	0,	0|(1<<MCID::MayStore), 0x14ULL, NULL, NULL, OperandInfo57 },  // Inst #618 = STHX
  { 619,	3,	0,	35,	0,	0|(1<<MCID::MayStore), 0x14ULL, NULL, NULL, OperandInfo58 },  // Inst #619 = STHX8
  { 620,	3,	0,	27,	0,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo51 },  // Inst #620 = STMW
  { 621,	3,	0,	35,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore), 0x10ULL, NULL, NULL, OperandInfo72 },  // Inst #621 = STVEBX
  { 622,	3,	0,	35,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore), 0x10ULL, NULL, NULL, OperandInfo72 },  // Inst #622 = STVEHX
  { 623,	3,	0,	35,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore), 0x10ULL, NULL, NULL, OperandInfo72 },  // Inst #623 = STVEWX
  { 624,	3,	0,	35,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore), 0x10ULL, NULL, NULL, OperandInfo72 },  // Inst #624 = STVX
  { 625,	3,	0,	35,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore), 0x10ULL, NULL, NULL, OperandInfo72 },  // Inst #625 = STVXL
  { 626,	3,	0,	35,	0,	0|(1<<MCID::MayStore), 0x10ULL, NULL, NULL, OperandInfo51 },  // Inst #626 = STW
  { 627,	3,	0,	35,	0,	0|(1<<MCID::MayStore), 0x10ULL, NULL, NULL, OperandInfo52 },  // Inst #627 = STW8
  { 628,	3,	0,	35,	0,	0|(1<<MCID::MayStore), 0x14ULL, NULL, NULL, OperandInfo57 },  // Inst #628 = STWBRX
  { 629,	3,	0,	53,	0,	0|(1<<MCID::MayStore), 0x0ULL, NULL, ImplicitList1, OperandInfo57 },  // Inst #629 = STWCX
  { 630,	4,	1,	47,	0,	0|(1<<MCID::MayStore), 0x10ULL, NULL, NULL, OperandInfo100 },  // Inst #630 = STWU
  { 631,	4,	1,	47,	0,	0|(1<<MCID::MayStore), 0x10ULL, NULL, NULL, OperandInfo101 },  // Inst #631 = STWU8
  { 632,	4,	1,	47,	0,	0|(1<<MCID::MayStore), 0x14ULL, NULL, NULL, OperandInfo102 },  // Inst #632 = STWUX
  { 633,	4,	1,	47,	0,	0|(1<<MCID::MayStore), 0x14ULL, NULL, NULL, OperandInfo103 },  // Inst #633 = STWUX8
  { 634,	3,	0,	35,	0,	0|(1<<MCID::MayStore), 0x14ULL, NULL, NULL, OperandInfo57 },  // Inst #634 = STWX
  { 635,	3,	0,	35,	0,	0|(1<<MCID::MayStore), 0x14ULL, NULL, NULL, OperandInfo58 },  // Inst #635 = STWX8
  { 636,	3,	1,	2,	0,	0, 0x8ULL, NULL, NULL, OperandInfo8 },  // Inst #636 = SUBF
  { 637,	3,	1,	2,	0,	0, 0x8ULL, NULL, NULL, OperandInfo9 },  // Inst #637 = SUBF8
  { 638,	3,	1,	2,	0,	0, 0x8ULL, NULL, ImplicitList1, OperandInfo9 },  // Inst #638 = SUBF8o
  { 639,	3,	1,	2,	0,	0, 0xcULL, NULL, ImplicitList2, OperandInfo8 },  // Inst #639 = SUBFC
  { 640,	3,	1,	2,	0,	0, 0xcULL, NULL, ImplicitList2, OperandInfo9 },  // Inst #640 = SUBFC8
  { 641,	3,	1,	2,	0,	0, 0xcULL, NULL, ImplicitList2, OperandInfo9 },  // Inst #641 = SUBFC8o
  { 642,	3,	1,	2,	0,	0, 0xcULL, NULL, ImplicitList3, OperandInfo8 },  // Inst #642 = SUBFCo
  { 643,	3,	1,	2,	0,	0, 0x8ULL, ImplicitList2, ImplicitList2, OperandInfo8 },  // Inst #643 = SUBFE
  { 644,	3,	1,	2,	0,	0, 0x8ULL, ImplicitList2, ImplicitList2, OperandInfo9 },  // Inst #644 = SUBFE8
  { 645,	3,	1,	2,	0,	0, 0x8ULL, ImplicitList2, ImplicitList3, OperandInfo9 },  // Inst #645 = SUBFE8o
  { 646,	3,	1,	2,	0,	0, 0x8ULL, ImplicitList2, ImplicitList3, OperandInfo8 },  // Inst #646 = SUBFEo
  { 647,	3,	1,	2,	0,	0, 0x8ULL, NULL, ImplicitList2, OperandInfo13 },  // Inst #647 = SUBFIC
  { 648,	3,	1,	2,	0,	0, 0x8ULL, NULL, ImplicitList2, OperandInfo10 },  // Inst #648 = SUBFIC8
  { 649,	2,	1,	2,	0,	0, 0x8ULL, ImplicitList2, ImplicitList2, OperandInfo14 },  // Inst #649 = SUBFME
  { 650,	2,	1,	2,	0,	0, 0x8ULL, ImplicitList2, ImplicitList2, OperandInfo15 },  // Inst #650 = SUBFME8
  { 651,	2,	1,	2,	0,	0, 0x8ULL, ImplicitList2, ImplicitList3, OperandInfo15 },  // Inst #651 = SUBFME8o
  { 652,	2,	1,	2,	0,	0, 0x8ULL, ImplicitList2, ImplicitList3, OperandInfo14 },  // Inst #652 = SUBFMEo
  { 653,	2,	1,	2,	0,	0, 0x8ULL, ImplicitList2, ImplicitList2, OperandInfo14 },  // Inst #653 = SUBFZE
  { 654,	2,	1,	2,	0,	0, 0x8ULL, ImplicitList2, ImplicitList2, OperandInfo15 },  // Inst #654 = SUBFZE8
  { 655,	2,	1,	2,	0,	0, 0x8ULL, ImplicitList2, ImplicitList3, OperandInfo15 },  // Inst #655 = SUBFZE8o
  { 656,	2,	1,	2,	0,	0, 0x8ULL, ImplicitList2, ImplicitList3, OperandInfo14 },  // Inst #656 = SUBFZEo
  { 657,	3,	1,	2,	0,	0, 0x8ULL, NULL, ImplicitList1, OperandInfo8 },  // Inst #657 = SUBFo
  { 658,	3,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo13 },  // Inst #658 = SUBI
  { 659,	3,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo13 },  // Inst #659 = SUBIC
  { 660,	3,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo13 },  // Inst #660 = SUBICo
  { 661,	3,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo13 },  // Inst #661 = SUBIS
  { 662,	1,	0,	54,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo2 },  // Inst #662 = SYNC
  { 663,	1,	0,	3,	0,	0|(1<<MCID::Return)|(1<<MCID::Branch)|(1<<MCID::Barrier)|(1<<MCID::Call)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList5, NULL, OperandInfo5 },  // Inst #663 = TAILB
  { 664,	1,	0,	3,	0,	0|(1<<MCID::Return)|(1<<MCID::Branch)|(1<<MCID::Barrier)|(1<<MCID::Call)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList5, NULL, OperandInfo5 },  // Inst #664 = TAILB8
  { 665,	1,	0,	3,	0,	0|(1<<MCID::Return)|(1<<MCID::Branch)|(1<<MCID::Barrier)|(1<<MCID::Call)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList5, NULL, OperandInfo5 },  // Inst #665 = TAILBA
  { 666,	1,	0,	3,	0,	0|(1<<MCID::Return)|(1<<MCID::Branch)|(1<<MCID::Barrier)|(1<<MCID::Call)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList5, NULL, OperandInfo5 },  // Inst #666 = TAILBA8
  { 667,	0,	0,	3,	0,	0|(1<<MCID::Return)|(1<<MCID::Branch)|(1<<MCID::IndirectBranch)|(1<<MCID::Barrier)|(1<<MCID::Call)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList9, NULL, 0 },  // Inst #667 = TAILBCTR
  { 668,	0,	0,	3,	0,	0|(1<<MCID::Return)|(1<<MCID::Branch)|(1<<MCID::IndirectBranch)|(1<<MCID::Barrier)|(1<<MCID::Call)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList10, NULL, 0 },  // Inst #668 = TAILBCTR8
  { 669,	2,	0,	0,	0,	0|(1<<MCID::Return)|(1<<MCID::Barrier)|(1<<MCID::Call)|(1<<MCID::Terminator), 0x0ULL, ImplicitList5, NULL, OperandInfo108 },  // Inst #669 = TCRETURNai
  { 670,	2,	0,	0,	0,	0|(1<<MCID::Return)|(1<<MCID::Barrier)|(1<<MCID::Call)|(1<<MCID::Terminator), 0x0ULL, ImplicitList5, NULL, OperandInfo108 },  // Inst #670 = TCRETURNai8
  { 671,	2,	0,	0,	0,	0|(1<<MCID::Return)|(1<<MCID::Barrier)|(1<<MCID::Call)|(1<<MCID::Terminator), 0x0ULL, ImplicitList5, NULL, OperandInfo108 },  // Inst #671 = TCRETURNdi
  { 672,	2,	0,	0,	0,	0|(1<<MCID::Return)|(1<<MCID::Barrier)|(1<<MCID::Call)|(1<<MCID::Terminator), 0x0ULL, ImplicitList5, NULL, OperandInfo108 },  // Inst #672 = TCRETURNdi8
  { 673,	2,	0,	0,	0,	0|(1<<MCID::Return)|(1<<MCID::Barrier)|(1<<MCID::Call)|(1<<MCID::Terminator), 0x0ULL, ImplicitList5, NULL, OperandInfo109 },  // Inst #673 = TCRETURNri
  { 674,	2,	0,	0,	0,	0|(1<<MCID::Return)|(1<<MCID::Barrier)|(1<<MCID::Call)|(1<<MCID::Terminator), 0x0ULL, ImplicitList5, NULL, OperandInfo110 },  // Inst #674 = TCRETURNri8
  { 675,	3,	0,	55,	0,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo111 },  // Inst #675 = TD
  { 676,	3,	0,	55,	0,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo112 },  // Inst #676 = TDI
  { 677,	0,	0,	9,	0,	0|(1<<MCID::Barrier)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, 0 },  // Inst #677 = TRAP
  { 678,	3,	0,	56,	0,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo113 },  // Inst #678 = TW
  { 679,	3,	0,	56,	0,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo114 },  // Inst #679 = TWI
  { 680,	2,	1,	0,	0,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo14 },  // Inst #680 = UPDATE_VRSAVE
  { 681,	3,	1,	57,	0,	0, 0x28ULL, NULL, NULL, OperandInfo115 },  // Inst #681 = VADDCUW
  { 682,	3,	1,	57,	0,	0, 0x28ULL, NULL, NULL, OperandInfo115 },  // Inst #682 = VADDFP
  { 683,	3,	1,	57,	0,	0, 0x28ULL, NULL, NULL, OperandInfo115 },  // Inst #683 = VADDSBS
  { 684,	3,	1,	57,	0,	0, 0x28ULL, NULL, NULL, OperandInfo115 },  // Inst #684 = VADDSHS
  { 685,	3,	1,	57,	0,	0, 0x28ULL, NULL, NULL, OperandInfo115 },  // Inst #685 = VADDSWS
  { 686,	3,	1,	58,	0,	0, 0x28ULL, NULL, NULL, OperandInfo115 },  // Inst #686 = VADDUBM
  { 687,	3,	1,	57,	0,	0, 0x28ULL, NULL, NULL, OperandInfo115 },  // Inst #687 = VADDUBS
  { 688,	3,	1,	58,	0,	0, 0x28ULL, NULL, NULL, OperandInfo115 },  // Inst #688 = VADDUHM
  { 689,	3,	1,	57,	0,	0, 0x28ULL, NULL, NULL, OperandInfo115 },  // Inst #689 = VADDUHS
  { 690,	3,	1,	58,	0,	0, 0x28ULL, NULL, NULL, OperandInfo115 },  // Inst #690 = VADDUWM
  { 691,	3,	1,	57,	0,	0, 0x28ULL, NULL, NULL, OperandInfo115 },  // Inst #691 = VADDUWS
  { 692,	3,	1,	57,	0,	0, 0x28ULL, NULL, NULL, OperandInfo115 },  // Inst #692 = VAND
  { 693,	3,	1,	57,	0,	0, 0x28ULL, NULL, NULL, OperandInfo115 },  // Inst #693 = VANDC
  { 694,	3,	1,	57,	0,	0, 0x28ULL, NULL, NULL, OperandInfo115 },  // Inst #694 = VAVGSB
  { 695,	3,	1,	57,	0,	0, 0x28ULL, NULL, NULL, OperandInfo115 },  // Inst #695 = VAVGSH
  { 696,	3,	1,	57,	0,	0, 0x28ULL, NULL, NULL, OperandInfo115 },  // Inst #696 = VAVGSW
  { 697,	3,	1,	57,	0,	0, 0x28ULL, NULL, NULL, OperandInfo115 },  // Inst #697 = VAVGUB
  { 698,	3,	1,	57,	0,	0, 0x28ULL, NULL, NULL, OperandInfo115 },  // Inst #698 = VAVGUH
  { 699,	3,	1,	57,	0,	0, 0x28ULL, NULL, NULL, OperandInfo115 },  // Inst #699 = VAVGUW
  { 700,	3,	1,	57,	0,	0, 0x28ULL, NULL, NULL, OperandInfo116 },  // Inst #700 = VCFSX
  { 701,	2,	1,	57,	0,	0, 0x28ULL, NULL, NULL, OperandInfo117 },  // Inst #701 = VCFSX_0
  { 702,	3,	1,	57,	0,	0, 0x28ULL, NULL, NULL, OperandInfo116 },  // Inst #702 = VCFUX
  { 703,	2,	1,	57,	0,	0, 0x28ULL, NULL, NULL, OperandInfo117 },  // Inst #703 = VCFUX_0
  { 704,	3,	1,	59,	0,	0, 0x28ULL, NULL, NULL, OperandInfo115 },  // Inst #704 = VCMPBFP
  { 705,	3,	1,	59,	0,	0, 0x28ULL, NULL, ImplicitList18, OperandInfo115 },  // Inst #705 = VCMPBFPo
  { 706,	3,	1,	59,	0,	0, 0x28ULL, NULL, NULL, OperandInfo115 },  // Inst #706 = VCMPEQFP
  { 707,	3,	1,	59,	0,	0, 0x28ULL, NULL, ImplicitList18, OperandInfo115 },  // Inst #707 = VCMPEQFPo
  { 708,	3,	1,	59,	0,	0, 0x28ULL, NULL, NULL, OperandInfo115 },  // Inst #708 = VCMPEQUB
  { 709,	3,	1,	59,	0,	0, 0x28ULL, NULL, ImplicitList18, OperandInfo115 },  // Inst #709 = VCMPEQUBo
  { 710,	3,	1,	59,	0,	0, 0x28ULL, NULL, NULL, OperandInfo115 },  // Inst #710 = VCMPEQUH
  { 711,	3,	1,	59,	0,	0, 0x28ULL, NULL, ImplicitList18, OperandInfo115 },  // Inst #711 = VCMPEQUHo
  { 712,	3,	1,	59,	0,	0, 0x28ULL, NULL, NULL, OperandInfo115 },  // Inst #712 = VCMPEQUW
  { 713,	3,	1,	59,	0,	0, 0x28ULL, NULL, ImplicitList18, OperandInfo115 },  // Inst #713 = VCMPEQUWo
  { 714,	3,	1,	59,	0,	0, 0x28ULL, NULL, NULL, OperandInfo115 },  // Inst #714 = VCMPGEFP
  { 715,	3,	1,	59,	0,	0, 0x28ULL, NULL, ImplicitList18, OperandInfo115 },  // Inst #715 = VCMPGEFPo
  { 716,	3,	1,	59,	0,	0, 0x28ULL, NULL, NULL, OperandInfo115 },  // Inst #716 = VCMPGTFP
  { 717,	3,	1,	59,	0,	0, 0x28ULL, NULL, ImplicitList18, OperandInfo115 },  // Inst #717 = VCMPGTFPo
  { 718,	3,	1,	59,	0,	0, 0x28ULL, NULL, NULL, OperandInfo115 },  // Inst #718 = VCMPGTSB
  { 719,	3,	1,	59,	0,	0, 0x28ULL, NULL, ImplicitList18, OperandInfo115 },  // Inst #719 = VCMPGTSBo
  { 720,	3,	1,	59,	0,	0, 0x28ULL, NULL, NULL, OperandInfo115 },  // Inst #720 = VCMPGTSH
  { 721,	3,	1,	59,	0,	0, 0x28ULL, NULL, ImplicitList18, OperandInfo115 },  // Inst #721 = VCMPGTSHo
  { 722,	3,	1,	59,	0,	0, 0x28ULL, NULL, NULL, OperandInfo115 },  // Inst #722 = VCMPGTSW
  { 723,	3,	1,	59,	0,	0, 0x28ULL, NULL, ImplicitList18, OperandInfo115 },  // Inst #723 = VCMPGTSWo
  { 724,	3,	1,	59,	0,	0, 0x28ULL, NULL, NULL, OperandInfo115 },  // Inst #724 = VCMPGTUB
  { 725,	3,	1,	59,	0,	0, 0x28ULL, NULL, ImplicitList18, OperandInfo115 },  // Inst #725 = VCMPGTUBo
  { 726,	3,	1,	59,	0,	0, 0x28ULL, NULL, NULL, OperandInfo115 },  // Inst #726 = VCMPGTUH
  { 727,	3,	1,	59,	0,	0, 0x28ULL, NULL, ImplicitList18, OperandInfo115 },  // Inst #727 = VCMPGTUHo
  { 728,	3,	1,	59,	0,	0, 0x28ULL, NULL, NULL, OperandInfo115 },  // Inst #728 = VCMPGTUW
  { 729,	3,	1,	59,	0,	0, 0x28ULL, NULL, ImplicitList18, OperandInfo115 },  // Inst #729 = VCMPGTUWo
  { 730,	3,	1,	57,	0,	0, 0x28ULL, NULL, NULL, OperandInfo116 },  // Inst #730 = VCTSXS
  { 731,	2,	1,	57,	0,	0, 0x28ULL, NULL, NULL, OperandInfo117 },  // Inst #731 = VCTSXS_0
  { 732,	3,	1,	57,	0,	0, 0x28ULL, NULL, NULL, OperandInfo116 },  // Inst #732 = VCTUXS
  { 733,	2,	1,	57,	0,	0, 0x28ULL, NULL, NULL, OperandInfo117 },  // Inst #733 = VCTUXS_0
  { 734,	2,	1,	57,	0,	0, 0x28ULL, NULL, NULL, OperandInfo117 },  // Inst #734 = VEXPTEFP
  { 735,	2,	1,	57,	0,	0, 0x28ULL, NULL, NULL, OperandInfo117 },  // Inst #735 = VLOGEFP
  { 736,	4,	1,	57,	0,	0, 0x28ULL, NULL, NULL, OperandInfo118 },  // Inst #736 = VMADDFP
  { 737,	3,	1,	57,	0,	0, 0x28ULL, NULL, NULL, OperandInfo115 },  // Inst #737 = VMAXFP
  { 738,	3,	1,	57,	0,	0, 0x28ULL, NULL, NULL, OperandInfo115 },  // Inst #738 = VMAXSB
  { 739,	3,	1,	57,	0,	0, 0x28ULL, NULL, NULL, OperandInfo115 },  // Inst #739 = VMAXSH
  { 740,	3,	1,	57,	0,	0, 0x28ULL, NULL, NULL, OperandInfo115 },  // Inst #740 = VMAXSW
  { 741,	3,	1,	57,	0,	0, 0x28ULL, NULL, NULL, OperandInfo115 },  // Inst #741 = VMAXUB
  { 742,	3,	1,	57,	0,	0, 0x28ULL, NULL, NULL, OperandInfo115 },  // Inst #742 = VMAXUH
  { 743,	3,	1,	57,	0,	0, 0x28ULL, NULL, NULL, OperandInfo115 },  // Inst #743 = VMAXUW
  { 744,	4,	1,	57,	0,	0, 0x28ULL, NULL, NULL, OperandInfo118 },  // Inst #744 = VMHADDSHS
  { 745,	4,	1,	57,	0,	0, 0x28ULL, NULL, NULL, OperandInfo118 },  // Inst #745 = VMHRADDSHS
  { 746,	3,	1,	57,	0,	0, 0x28ULL, NULL, NULL, OperandInfo115 },  // Inst #746 = VMINFP
  { 747,	3,	1,	57,	0,	0, 0x28ULL, NULL, NULL, OperandInfo115 },  // Inst #747 = VMINSB
  { 748,	3,	1,	57,	0,	0, 0x28ULL, NULL, NULL, OperandInfo115 },  // Inst #748 = VMINSH
  { 749,	3,	1,	57,	0,	0, 0x28ULL, NULL, NULL, OperandInfo115 },  // Inst #749 = VMINSW
  { 750,	3,	1,	57,	0,	0, 0x28ULL, NULL, NULL, OperandInfo115 },  // Inst #750 = VMINUB
  { 751,	3,	1,	57,	0,	0, 0x28ULL, NULL, NULL, OperandInfo115 },  // Inst #751 = VMINUH
  { 752,	3,	1,	57,	0,	0, 0x28ULL, NULL, NULL, OperandInfo115 },  // Inst #752 = VMINUW
  { 753,	4,	1,	57,	0,	0, 0x28ULL, NULL, NULL, OperandInfo118 },  // Inst #753 = VMLADDUHM
  { 754,	3,	1,	57,	0,	0, 0x28ULL, NULL, NULL, OperandInfo115 },  // Inst #754 = VMRGHB
  { 755,	3,	1,	57,	0,	0, 0x28ULL, NULL, NULL, OperandInfo115 },  // Inst #755 = VMRGHH
  { 756,	3,	1,	57,	0,	0, 0x28ULL, NULL, NULL, OperandInfo115 },  // Inst #756 = VMRGHW
  { 757,	3,	1,	57,	0,	0, 0x28ULL, NULL, NULL, OperandInfo115 },  // Inst #757 = VMRGLB
  { 758,	3,	1,	57,	0,	0, 0x28ULL, NULL, NULL, OperandInfo115 },  // Inst #758 = VMRGLH
  { 759,	3,	1,	57,	0,	0, 0x28ULL, NULL, NULL, OperandInfo115 },  // Inst #759 = VMRGLW
  { 760,	4,	1,	57,	0,	0, 0x28ULL, NULL, NULL, OperandInfo118 },  // Inst #760 = VMSUMMBM
  { 761,	4,	1,	57,	0,	0, 0x28ULL, NULL, NULL, OperandInfo118 },  // Inst #761 = VMSUMSHM
  { 762,	4,	1,	57,	0,	0, 0x28ULL, NULL, NULL, OperandInfo118 },  // Inst #762 = VMSUMSHS
  { 763,	4,	1,	57,	0,	0, 0x28ULL, NULL, NULL, OperandInfo118 },  // Inst #763 = VMSUMUBM
  { 764,	4,	1,	57,	0,	0, 0x28ULL, NULL, NULL, OperandInfo118 },  // Inst #764 = VMSUMUHM
  { 765,	4,	1,	57,	0,	0, 0x28ULL, NULL, NULL, OperandInfo118 },  // Inst #765 = VMSUMUHS
  { 766,	3,	1,	57,	0,	0, 0x28ULL, NULL, NULL, OperandInfo115 },  // Inst #766 = VMULESB
  { 767,	3,	1,	57,	0,	0, 0x28ULL, NULL, NULL, OperandInfo115 },  // Inst #767 = VMULESH
  { 768,	3,	1,	57,	0,	0, 0x28ULL, NULL, NULL, OperandInfo115 },  // Inst #768 = VMULEUB
  { 769,	3,	1,	57,	0,	0, 0x28ULL, NULL, NULL, OperandInfo115 },  // Inst #769 = VMULEUH
  { 770,	3,	1,	57,	0,	0, 0x28ULL, NULL, NULL, OperandInfo115 },  // Inst #770 = VMULOSB
  { 771,	3,	1,	57,	0,	0, 0x28ULL, NULL, NULL, OperandInfo115 },  // Inst #771 = VMULOSH
  { 772,	3,	1,	57,	0,	0, 0x28ULL, NULL, NULL, OperandInfo115 },  // Inst #772 = VMULOUB
  { 773,	3,	1,	57,	0,	0, 0x28ULL, NULL, NULL, OperandInfo115 },  // Inst #773 = VMULOUH
  { 774,	4,	1,	57,	0,	0, 0x28ULL, NULL, NULL, OperandInfo118 },  // Inst #774 = VNMSUBFP
  { 775,	3,	1,	57,	0,	0, 0x28ULL, NULL, NULL, OperandInfo115 },  // Inst #775 = VNOR
  { 776,	3,	1,	57,	0,	0, 0x28ULL, NULL, NULL, OperandInfo115 },  // Inst #776 = VOR
  { 777,	4,	1,	57,	0,	0, 0x28ULL, NULL, NULL, OperandInfo118 },  // Inst #777 = VPERM
  { 778,	3,	1,	57,	0,	0, 0x28ULL, NULL, NULL, OperandInfo115 },  // Inst #778 = VPKPX
  { 779,	3,	1,	57,	0,	0, 0x28ULL, NULL, NULL, OperandInfo115 },  // Inst #779 = VPKSHSS
  { 780,	3,	1,	57,	0,	0, 0x28ULL, NULL, NULL, OperandInfo115 },  // Inst #780 = VPKSHUS
  { 781,	3,	1,	57,	0,	0, 0x28ULL, NULL, NULL, OperandInfo115 },  // Inst #781 = VPKSWSS
  { 782,	3,	1,	57,	0,	0, 0x28ULL, NULL, NULL, OperandInfo115 },  // Inst #782 = VPKSWUS
  { 783,	3,	1,	57,	0,	0, 0x28ULL, NULL, NULL, OperandInfo115 },  // Inst #783 = VPKUHUM
  { 784,	3,	1,	57,	0,	0, 0x28ULL, NULL, NULL, OperandInfo115 },  // Inst #784 = VPKUHUS
  { 785,	3,	1,	57,	0,	0, 0x28ULL, NULL, NULL, OperandInfo115 },  // Inst #785 = VPKUWUM
  { 786,	3,	1,	57,	0,	0, 0x28ULL, NULL, NULL, OperandInfo115 },  // Inst #786 = VPKUWUS
  { 787,	2,	1,	57,	0,	0, 0x28ULL, NULL, NULL, OperandInfo117 },  // Inst #787 = VREFP
  { 788,	2,	1,	57,	0,	0, 0x28ULL, NULL, NULL, OperandInfo117 },  // Inst #788 = VRFIM
  { 789,	2,	1,	57,	0,	0, 0x28ULL, NULL, NULL, OperandInfo117 },  // Inst #789 = VRFIN
  { 790,	2,	1,	57,	0,	0, 0x28ULL, NULL, NULL, OperandInfo117 },  // Inst #790 = VRFIP
  { 791,	2,	1,	57,	0,	0, 0x28ULL, NULL, NULL, OperandInfo117 },  // Inst #791 = VRFIZ
  { 792,	3,	1,	57,	0,	0, 0x28ULL, NULL, NULL, OperandInfo115 },  // Inst #792 = VRLB
  { 793,	3,	1,	57,	0,	0, 0x28ULL, NULL, NULL, OperandInfo115 },  // Inst #793 = VRLH
  { 794,	3,	1,	57,	0,	0, 0x28ULL, NULL, NULL, OperandInfo115 },  // Inst #794 = VRLW
  { 795,	2,	1,	57,	0,	0, 0x28ULL, NULL, NULL, OperandInfo117 },  // Inst #795 = VRSQRTEFP
  { 796,	4,	1,	57,	0,	0, 0x28ULL, NULL, NULL, OperandInfo118 },  // Inst #796 = VSEL
  { 797,	3,	1,	57,	0,	0, 0x28ULL, NULL, NULL, OperandInfo115 },  // Inst #797 = VSL
  { 798,	3,	1,	57,	0,	0, 0x28ULL, NULL, NULL, OperandInfo115 },  // Inst #798 = VSLB
  { 799,	4,	1,	57,	0,	0, 0x28ULL, NULL, NULL, OperandInfo119 },  // Inst #799 = VSLDOI
  { 800,	3,	1,	57,	0,	0, 0x28ULL, NULL, NULL, OperandInfo115 },  // Inst #800 = VSLH
  { 801,	3,	1,	57,	0,	0, 0x28ULL, NULL, NULL, OperandInfo115 },  // Inst #801 = VSLO
  { 802,	3,	1,	57,	0,	0, 0x28ULL, NULL, NULL, OperandInfo115 },  // Inst #802 = VSLW
  { 803,	3,	1,	60,	0,	0, 0x28ULL, NULL, NULL, OperandInfo116 },  // Inst #803 = VSPLTB
  { 804,	3,	1,	60,	0,	0, 0x28ULL, NULL, NULL, OperandInfo116 },  // Inst #804 = VSPLTH
  { 805,	2,	1,	60,	0,	0, 0x28ULL, NULL, NULL, OperandInfo120 },  // Inst #805 = VSPLTISB
  { 806,	2,	1,	60,	0,	0, 0x28ULL, NULL, NULL, OperandInfo120 },  // Inst #806 = VSPLTISH
  { 807,	2,	1,	60,	0,	0, 0x28ULL, NULL, NULL, OperandInfo120 },  // Inst #807 = VSPLTISW
  { 808,	3,	1,	60,	0,	0, 0x28ULL, NULL, NULL, OperandInfo116 },  // Inst #808 = VSPLTW
  { 809,	3,	1,	57,	0,	0, 0x28ULL, NULL, NULL, OperandInfo115 },  // Inst #809 = VSR
  { 810,	3,	1,	57,	0,	0, 0x28ULL, NULL, NULL, OperandInfo115 },  // Inst #810 = VSRAB
  { 811,	3,	1,	57,	0,	0, 0x28ULL, NULL, NULL, OperandInfo115 },  // Inst #811 = VSRAH
  { 812,	3,	1,	57,	0,	0, 0x28ULL, NULL, NULL, OperandInfo115 },  // Inst #812 = VSRAW
  { 813,	3,	1,	57,	0,	0, 0x28ULL, NULL, NULL, OperandInfo115 },  // Inst #813 = VSRB
  { 814,	3,	1,	57,	0,	0, 0x28ULL, NULL, NULL, OperandInfo115 },  // Inst #814 = VSRH
  { 815,	3,	1,	57,	0,	0, 0x28ULL, NULL, NULL, OperandInfo115 },  // Inst #815 = VSRO
  { 816,	3,	1,	57,	0,	0, 0x28ULL, NULL, NULL, OperandInfo115 },  // Inst #816 = VSRW
  { 817,	3,	1,	57,	0,	0, 0x28ULL, NULL, NULL, OperandInfo115 },  // Inst #817 = VSUBCUW
  { 818,	3,	1,	58,	0,	0, 0x28ULL, NULL, NULL, OperandInfo115 },  // Inst #818 = VSUBFP
  { 819,	3,	1,	57,	0,	0, 0x28ULL, NULL, NULL, OperandInfo115 },  // Inst #819 = VSUBSBS
  { 820,	3,	1,	57,	0,	0, 0x28ULL, NULL, NULL, OperandInfo115 },  // Inst #820 = VSUBSHS
  { 821,	3,	1,	57,	0,	0, 0x28ULL, NULL, NULL, OperandInfo115 },  // Inst #821 = VSUBSWS
  { 822,	3,	1,	58,	0,	0, 0x28ULL, NULL, NULL, OperandInfo115 },  // Inst #822 = VSUBUBM
  { 823,	3,	1,	57,	0,	0, 0x28ULL, NULL, NULL, OperandInfo115 },  // Inst #823 = VSUBUBS
  { 824,	3,	1,	58,	0,	0, 0x28ULL, NULL, NULL, OperandInfo115 },  // Inst #824 = VSUBUHM
  { 825,	3,	1,	57,	0,	0, 0x28ULL, NULL, NULL, OperandInfo115 },  // Inst #825 = VSUBUHS
  { 826,	3,	1,	58,	0,	0, 0x28ULL, NULL, NULL, OperandInfo115 },  // Inst #826 = VSUBUWM
  { 827,	3,	1,	57,	0,	0, 0x28ULL, NULL, NULL, OperandInfo115 },  // Inst #827 = VSUBUWS
  { 828,	3,	1,	57,	0,	0, 0x28ULL, NULL, NULL, OperandInfo115 },  // Inst #828 = VSUM2SWS
  { 829,	3,	1,	57,	0,	0, 0x28ULL, NULL, NULL, OperandInfo115 },  // Inst #829 = VSUM4SBS
  { 830,	3,	1,	57,	0,	0, 0x28ULL, NULL, NULL, OperandInfo115 },  // Inst #830 = VSUM4SHS
  { 831,	3,	1,	57,	0,	0, 0x28ULL, NULL, NULL, OperandInfo115 },  // Inst #831 = VSUM4UBS
  { 832,	3,	1,	57,	0,	0, 0x28ULL, NULL, NULL, OperandInfo115 },  // Inst #832 = VSUMSWS
  { 833,	2,	1,	57,	0,	0, 0x28ULL, NULL, NULL, OperandInfo117 },  // Inst #833 = VUPKHPX
  { 834,	2,	1,	57,	0,	0, 0x28ULL, NULL, NULL, OperandInfo117 },  // Inst #834 = VUPKHSB
  { 835,	2,	1,	57,	0,	0, 0x28ULL, NULL, NULL, OperandInfo117 },  // Inst #835 = VUPKHSH
  { 836,	2,	1,	57,	0,	0, 0x28ULL, NULL, NULL, OperandInfo117 },  // Inst #836 = VUPKLPX
  { 837,	2,	1,	57,	0,	0, 0x28ULL, NULL, NULL, OperandInfo117 },  // Inst #837 = VUPKLSB
  { 838,	2,	1,	57,	0,	0, 0x28ULL, NULL, NULL, OperandInfo117 },  // Inst #838 = VUPKLSH
  { 839,	3,	1,	57,	0,	0, 0x28ULL, NULL, NULL, OperandInfo115 },  // Inst #839 = VXOR
  { 840,	1,	1,	57,	0,	0, 0x28ULL, NULL, NULL, OperandInfo78 },  // Inst #840 = V_SET0
  { 841,	1,	1,	57,	0,	0, 0x28ULL, NULL, NULL, OperandInfo78 },  // Inst #841 = V_SET0B
  { 842,	1,	1,	57,	0,	0, 0x28ULL, NULL, NULL, OperandInfo78 },  // Inst #842 = V_SET0H
  { 843,	1,	1,	57,	0,	0, 0x28ULL, NULL, NULL, OperandInfo78 },  // Inst #843 = V_SETALLONES
  { 844,	1,	1,	57,	0,	0, 0x28ULL, NULL, NULL, OperandInfo78 },  // Inst #844 = V_SETALLONESB
  { 845,	1,	1,	57,	0,	0, 0x28ULL, NULL, NULL, OperandInfo78 },  // Inst #845 = V_SETALLONESH
  { 846,	1,	0,	9,	0,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo2 },  // Inst #846 = WAIT
  { 847,	3,	1,	1,	0,	0, 0x8ULL, NULL, NULL, OperandInfo8 },  // Inst #847 = XOR
  { 848,	3,	1,	1,	0,	0, 0x8ULL, NULL, NULL, OperandInfo9 },  // Inst #848 = XOR8
  { 849,	3,	1,	1,	0,	0, 0x8ULL, NULL, ImplicitList1, OperandInfo9 },  // Inst #849 = XOR8o
  { 850,	3,	1,	1,	0,	0, 0x8ULL, NULL, NULL, OperandInfo13 },  // Inst #850 = XORI
  { 851,	3,	1,	1,	0,	0, 0x8ULL, NULL, NULL, OperandInfo10 },  // Inst #851 = XORI8
  { 852,	3,	1,	1,	0,	0, 0x8ULL, NULL, NULL, OperandInfo13 },  // Inst #852 = XORIS
  { 853,	3,	1,	1,	0,	0, 0x8ULL, NULL, NULL, OperandInfo10 },  // Inst #853 = XORIS8
  { 854,	3,	1,	1,	0,	0, 0x8ULL, NULL, ImplicitList1, OperandInfo8 },  // Inst #854 = XORo
  { 855,	3,	0,	3,	0,	0|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList9, ImplicitList7, OperandInfo121 },  // Inst #855 = gBC
  { 856,	3,	0,	3,	0,	0|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList9, ImplicitList7, OperandInfo121 },  // Inst #856 = gBCA
  { 857,	3,	0,	3,	0,	0|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList13, ImplicitList7, OperandInfo122 },  // Inst #857 = gBCCTR
  { 858,	3,	0,	3,	0,	0|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList13, ImplicitList19, OperandInfo122 },  // Inst #858 = gBCCTRL
  { 859,	3,	0,	3,	0,	0|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList9, ImplicitList19, OperandInfo121 },  // Inst #859 = gBCL
  { 860,	3,	0,	3,	0,	0|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList9, ImplicitList19, OperandInfo121 },  // Inst #860 = gBCLA
  { 861,	3,	0,	3,	0,	0|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList13, ImplicitList7, OperandInfo122 },  // Inst #861 = gBCLR
  { 862,	3,	0,	3,	0,	0|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList13, ImplicitList19, OperandInfo122 },  // Inst #862 = gBCLRL
};

extern const char PPCInstrNameData[] = {
  /* 0 */ 'M', 'T', 'F', 'S', 'B', '0', 0,
  /* 7 */ 'V', '_', 'S', 'E', 'T', '0', 0,
  /* 14 */ 'V', 'C', 'T', 'S', 'X', 'S', '_', '0', 0,
  /* 23 */ 'V', 'C', 'T', 'U', 'X', 'S', '_', '0', 0,
  /* 32 */ 'V', 'C', 'F', 'S', 'X', '_', '0', 0,
  /* 40 */ 'V', 'C', 'F', 'U', 'X', '_', '0', 0,
  /* 48 */ 'M', 'T', 'F', 'S', 'B', '1', 0,
  /* 55 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'S', 'U', 'B', '_', 'I', '3', '2', 0,
  /* 75 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'A', 'D', 'D', '_', 'I', '3', '2', 0,
  /* 95 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'N', 'A', 'N', 'D', '_', 'I', '3', '2', 0,
  /* 116 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'A', 'N', 'D', '_', 'I', '3', '2', 0,
  /* 136 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'S', 'W', 'A', 'P', '_', 'I', '3', '2', 0,
  /* 152 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'C', 'M', 'P', '_', 'S', 'W', 'A', 'P', '_', 'I', '3', '2', 0,
  /* 172 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'X', 'O', 'R', '_', 'I', '3', '2', 0,
  /* 192 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'O', 'R', '_', 'I', '3', '2', 0,
  /* 211 */ 'L', 'W', 'A', '_', '3', '2', 0,
  /* 218 */ 'L', 'W', 'A', 'X', '_', '3', '2', 0,
  /* 226 */ 'E', 'H', '_', 'S', 'j', 'L', 'j', '_', 'L', 'o', 'n', 'g', 'J', 'm', 'p', '3', '2', 0,
  /* 244 */ 'E', 'H', '_', 'S', 'j', 'L', 'j', '_', 'S', 'e', 't', 'J', 'm', 'p', '3', '2', 0,
  /* 261 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'S', 'U', 'B', '_', 'I', '6', '4', 0,
  /* 281 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'A', 'D', 'D', '_', 'I', '6', '4', 0,
  /* 301 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'N', 'A', 'N', 'D', '_', 'I', '6', '4', 0,
  /* 322 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'A', 'N', 'D', '_', 'I', '6', '4', 0,
  /* 342 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'S', 'W', 'A', 'P', '_', 'I', '6', '4', 0,
  /* 358 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'C', 'M', 'P', '_', 'S', 'W', 'A', 'P', '_', 'I', '6', '4', 0,
  /* 378 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'X', 'O', 'R', '_', 'I', '6', '4', 0,
  /* 398 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'O', 'R', '_', 'I', '6', '4', 0,
  /* 417 */ 'D', 'S', 'T', '6', '4', 0,
  /* 423 */ 'D', 'S', 'T', 'S', 'T', '6', '4', 0,
  /* 431 */ 'D', 'S', 'T', 'T', '6', '4', 0,
  /* 438 */ 'D', 'S', 'T', 'S', 'T', 'T', '6', '4', 0,
  /* 447 */ 'E', 'X', 'T', 'S', 'B', '8', '_', '3', '2', '_', '6', '4', 0,
  /* 460 */ 'E', 'X', 'T', 'S', 'H', '8', '_', '3', '2', '_', '6', '4', 0,
  /* 473 */ 'R', 'L', 'D', 'I', 'C', 'L', '_', '3', '2', '_', '6', '4', 0,
  /* 486 */ 'E', 'X', 'T', 'S', 'W', '_', '3', '2', '_', '6', '4', 0,
  /* 498 */ 'E', 'H', '_', 'S', 'j', 'L', 'j', '_', 'L', 'o', 'n', 'g', 'J', 'm', 'p', '6', '4', 0,
  /* 516 */ 'E', 'H', '_', 'S', 'j', 'L', 'j', '_', 'S', 'e', 't', 'J', 'm', 'p', '6', '4', 0,
  /* 533 */ 'A', 'D', 'D', '4', 0,
  /* 538 */ 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'F', '4', 0,
  /* 551 */ 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'I', '4', 0,
  /* 564 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'S', 'U', 'B', '_', 'I', '1', '6', 0,
  /* 584 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'A', 'D', 'D', '_', 'I', '1', '6', 0,
  /* 604 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'N', 'A', 'N', 'D', '_', 'I', '1', '6', 0,
  /* 625 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'A', 'N', 'D', '_', 'I', '1', '6', 0,
  /* 645 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'S', 'W', 'A', 'P', '_', 'I', '1', '6', 0,
  /* 661 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'C', 'M', 'P', '_', 'S', 'W', 'A', 'P', '_', 'I', '1', '6', 0,
  /* 681 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'X', 'O', 'R', '_', 'I', '1', '6', 0,
  /* 701 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'O', 'R', '_', 'I', '1', '6', 0,
  /* 720 */ 'T', 'A', 'I', 'L', 'B', 'A', '8', 0,
  /* 728 */ 'L', 'H', 'A', '8', 0,
  /* 733 */ 'B', 'L', 'A', '8', 0,
  /* 738 */ 'T', 'A', 'I', 'L', 'B', '8', 0,
  /* 745 */ 'E', 'X', 'T', 'S', 'B', '8', 0,
  /* 752 */ 'M', 'F', 'T', 'B', '8', 0,
  /* 758 */ 'S', 'T', 'B', '8', 0,
  /* 763 */ 'A', 'D', 'D', 'C', '8', 0,
  /* 769 */ 'A', 'N', 'D', 'C', '8', 0,
  /* 775 */ 'S', 'U', 'B', 'F', 'C', '8', 0,
  /* 782 */ 'A', 'D', 'D', 'I', 'C', '8', 0,
  /* 789 */ 'S', 'U', 'B', 'F', 'I', 'C', '8', 0,
  /* 797 */ 'D', 'Y', 'N', 'A', 'L', 'L', 'O', 'C', '8', 0,
  /* 807 */ 'O', 'R', 'C', '8', 0,
  /* 812 */ 'A', 'D', 'D', '8', 0,
  /* 817 */ 'N', 'A', 'N', 'D', '8', 0,
  /* 823 */ 'A', 'D', 'D', 'E', '8', 0,
  /* 829 */ 'S', 'U', 'B', 'F', 'E', '8', 0,
  /* 836 */ 'A', 'D', 'D', 'M', 'E', '8', 0,
  /* 843 */ 'S', 'U', 'B', 'F', 'M', 'E', '8', 0,
  /* 851 */ 'A', 'D', 'D', 'Z', 'E', '8', 0,
  /* 858 */ 'S', 'U', 'B', 'F', 'Z', 'E', '8', 0,
  /* 866 */ 'S', 'U', 'B', 'F', '8', 0,
  /* 872 */ 'M', 'F', 'O', 'C', 'R', 'F', '8', 0,
  /* 880 */ 'M', 'T', 'O', 'C', 'R', 'F', '8', 0,
  /* 888 */ 'M', 'T', 'C', 'R', 'F', '8', 0,
  /* 895 */ 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'F', '8', 0,
  /* 908 */ 'N', 'E', 'G', '8', 0,
  /* 913 */ 'E', 'X', 'T', 'S', 'H', '8', 0,
  /* 920 */ 'S', 'T', 'H', '8', 0,
  /* 925 */ 'A', 'D', 'D', 'I', '8', 0,
  /* 931 */ 'M', 'U', 'L', 'L', 'I', '8', 0,
  /* 938 */ 'X', 'O', 'R', 'I', '8', 0,
  /* 944 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'S', 'U', 'B', '_', 'I', '8', 0,
  /* 963 */ 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'I', '8', 0,
  /* 976 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'A', 'D', 'D', '_', 'I', '8', 0,
  /* 995 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'N', 'A', 'N', 'D', '_', 'I', '8', 0,
  /* 1015 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'A', 'N', 'D', '_', 'I', '8', 0,
  /* 1034 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'S', 'W', 'A', 'P', '_', 'I', '8', 0,
  /* 1049 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'C', 'M', 'P', '_', 'S', 'W', 'A', 'P', '_', 'I', '8', 0,
  /* 1068 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'X', 'O', 'R', '_', 'I', '8', 0,
  /* 1087 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'O', 'R', '_', 'I', '8', 0,
  /* 1105 */ 'B', 'L', '8', 0,
  /* 1109 */ 'I', 'S', 'E', 'L', '8', 0,
  /* 1115 */ 'B', 'C', 'T', 'R', 'L', '8', 0,
  /* 1122 */ 'B', 'C', 'C', 'T', 'R', 'L', '8', 0,
  /* 1130 */ 'R', 'L', 'W', 'I', 'N', 'M', '8', 0,
  /* 1138 */ 'M', 'F', 'C', 'R', '8', 0,
  /* 1144 */ 'M', 'F', 'L', 'R', '8', 0,
  /* 1150 */ 'M', 'T', 'L', 'R', '8', 0,
  /* 1156 */ 'B', 'D', 'Z', 'L', 'R', '8', 0,
  /* 1163 */ 'B', 'D', 'N', 'Z', 'L', 'R', '8', 0,
  /* 1171 */ 'M', 'o', 'v', 'e', 'P', 'C', 't', 'o', 'L', 'R', '8', 0,
  /* 1183 */ 'N', 'O', 'R', '8', 0,
  /* 1188 */ 'X', 'O', 'R', '8', 0,
  /* 1193 */ 'T', 'A', 'I', 'L', 'B', 'C', 'T', 'R', '8', 0,
  /* 1203 */ 'B', 'C', 'C', 'T', 'R', '8', 0,
  /* 1210 */ 'M', 'F', 'C', 'T', 'R', '8', 0,
  /* 1217 */ 'M', 'T', 'C', 'T', 'R', '8', 0,
  /* 1224 */ 'A', 'D', 'D', 'I', 'S', '8', 0,
  /* 1231 */ 'L', 'I', 'S', '8', 0,
  /* 1236 */ 'X', 'O', 'R', 'I', 'S', '8', 0,
  /* 1243 */ 'L', 'H', 'A', 'U', '8', 0,
  /* 1249 */ 'S', 'T', 'B', 'U', '8', 0,
  /* 1255 */ 'S', 'T', 'H', 'U', '8', 0,
  /* 1261 */ 'S', 'T', 'W', 'U', '8', 0,
  /* 1267 */ 'L', 'B', 'Z', 'U', '8', 0,
  /* 1273 */ 'L', 'H', 'Z', 'U', '8', 0,
  /* 1279 */ 'L', 'W', 'Z', 'U', '8', 0,
  /* 1285 */ 'E', 'Q', 'V', '8', 0,
  /* 1290 */ 'S', 'T', 'W', '8', 0,
  /* 1295 */ 'L', 'H', 'A', 'X', '8', 0,
  /* 1301 */ 'S', 'T', 'B', 'X', '8', 0,
  /* 1307 */ 'S', 'T', 'H', 'X', '8', 0,
  /* 1313 */ 'L', 'H', 'A', 'U', 'X', '8', 0,
  /* 1320 */ 'S', 'T', 'B', 'U', 'X', '8', 0,
  /* 1327 */ 'S', 'T', 'H', 'U', 'X', '8', 0,
  /* 1334 */ 'S', 'T', 'W', 'U', 'X', '8', 0,
  /* 1341 */ 'L', 'B', 'Z', 'U', 'X', '8', 0,
  /* 1348 */ 'L', 'H', 'Z', 'U', 'X', '8', 0,
  /* 1355 */ 'L', 'W', 'Z', 'U', 'X', '8', 0,
  /* 1362 */ 'S', 'T', 'W', 'X', '8', 0,
  /* 1368 */ 'L', 'B', 'Z', 'X', '8', 0,
  /* 1374 */ 'L', 'H', 'Z', 'X', '8', 0,
  /* 1380 */ 'L', 'W', 'Z', 'X', '8', 0,
  /* 1386 */ 'L', 'B', 'Z', '8', 0,
  /* 1391 */ 'B', 'D', 'Z', '8', 0,
  /* 1396 */ 'L', 'H', 'Z', '8', 0,
  /* 1401 */ 'B', 'D', 'N', 'Z', '8', 0,
  /* 1407 */ 'L', 'W', 'Z', '8', 0,
  /* 1412 */ 'T', 'C', 'R', 'E', 'T', 'U', 'R', 'N', 'a', 'i', '8', 0,
  /* 1424 */ 'T', 'C', 'R', 'E', 'T', 'U', 'R', 'N', 'd', 'i', '8', 0,
  /* 1436 */ 'T', 'C', 'R', 'E', 'T', 'U', 'R', 'N', 'r', 'i', '8', 0,
  /* 1448 */ 'A', 'N', 'D', 'I', 'o', '8', 0,
  /* 1455 */ 'A', 'N', 'D', 'I', 'S', 'o', '8', 0,
  /* 1463 */ 'D', 'C', 'B', 'A', 0,
  /* 1468 */ 'T', 'A', 'I', 'L', 'B', 'A', 0,
  /* 1475 */ 'g', 'B', 'C', 'A', 0,
  /* 1480 */ 'B', 'C', 'C', 'A', 0,
  /* 1485 */ 'L', 'H', 'A', 0,
  /* 1489 */ 'A', 'D', 'D', 'I', 'S', 't', 'o', 'c', 'H', 'A', 0,
  /* 1500 */ 'A', 'D', 'D', 'I', 'S', 't', 'l', 's', 'g', 'd', 'H', 'A', 0,
  /* 1513 */ 'A', 'D', 'D', 'I', 'S', 't', 'l', 's', 'l', 'd', 'H', 'A', 0,
  /* 1526 */ 'A', 'D', 'D', 'I', 'S', 'g', 'o', 't', 'T', 'p', 'r', 'e', 'l', 'H', 'A', 0,
  /* 1542 */ 'A', 'D', 'D', 'I', 'S', 'd', 't', 'p', 'r', 'e', 'l', 'H', 'A', 0,
  /* 1556 */ 'B', 'L', 'A', 0,
  /* 1560 */ 'g', 'B', 'C', 'L', 'A', 0,
  /* 1566 */ 'B', 'C', 'C', 'L', 'A', 0,
  /* 1572 */ 'B', 'D', 'Z', 'L', 'A', 0,
  /* 1578 */ 'B', 'D', 'N', 'Z', 'L', 'A', 0,
  /* 1585 */ 'L', 'W', 'A', 0,
  /* 1589 */ 'B', 'D', 'Z', 'A', 0,
  /* 1594 */ 'B', 'D', 'N', 'Z', 'A', 0,
  /* 1600 */ 'V', '_', 'S', 'E', 'T', '0', 'B', 0,
  /* 1608 */ 'V', 'S', 'R', 'A', 'B', 0,
  /* 1614 */ 'V', 'M', 'R', 'G', 'H', 'B', 0,
  /* 1621 */ 'V', 'M', 'R', 'G', 'L', 'B', 0,
  /* 1628 */ 'T', 'A', 'I', 'L', 'B', 0,
  /* 1634 */ 'V', 'R', 'L', 'B', 0,
  /* 1639 */ 'V', 'S', 'L', 'B', 0,
  /* 1644 */ 'V', 'S', 'R', 'B', 0,
  /* 1649 */ 'V', 'M', 'U', 'L', 'E', 'S', 'B', 0,
  /* 1657 */ 'V', '_', 'S', 'E', 'T', 'A', 'L', 'L', 'O', 'N', 'E', 'S', 'B', 0,
  /* 1671 */ 'V', 'A', 'V', 'G', 'S', 'B', 0,
  /* 1678 */ 'V', 'U', 'P', 'K', 'H', 'S', 'B', 0,
  /* 1686 */ 'V', 'S', 'P', 'L', 'T', 'I', 'S', 'B', 0,
  /* 1695 */ 'V', 'U', 'P', 'K', 'L', 'S', 'B', 0,
  /* 1703 */ 'V', 'M', 'I', 'N', 'S', 'B', 0,
  /* 1710 */ 'V', 'M', 'U', 'L', 'O', 'S', 'B', 0,
  /* 1718 */ 'V', 'C', 'M', 'P', 'G', 'T', 'S', 'B', 0,
  /* 1727 */ 'E', 'X', 'T', 'S', 'B', 0,
  /* 1733 */ 'V', 'M', 'A', 'X', 'S', 'B', 0,
  /* 1740 */ 'M', 'F', 'T', 'B', 0,
  /* 1745 */ 'V', 'S', 'P', 'L', 'T', 'B', 0,
  /* 1752 */ 'S', 'T', 'B', 0,
  /* 1756 */ 'V', 'M', 'U', 'L', 'E', 'U', 'B', 0,
  /* 1764 */ 'V', 'A', 'V', 'G', 'U', 'B', 0,
  /* 1771 */ 'V', 'M', 'I', 'N', 'U', 'B', 0,
  /* 1778 */ 'V', 'M', 'U', 'L', 'O', 'U', 'B', 0,
  /* 1786 */ 'V', 'C', 'M', 'P', 'E', 'Q', 'U', 'B', 0,
  /* 1795 */ 'F', 'S', 'U', 'B', 0,
  /* 1800 */ 'F', 'M', 'S', 'U', 'B', 0,
  /* 1806 */ 'F', 'N', 'M', 'S', 'U', 'B', 0,
  /* 1813 */ 'V', 'C', 'M', 'P', 'G', 'T', 'U', 'B', 0,
  /* 1822 */ 'V', 'M', 'A', 'X', 'U', 'B', 0,
  /* 1829 */ 'g', 'B', 'C', 0,
  /* 1833 */ 'B', 'C', 'C', 0,
  /* 1837 */ 'A', 'D', 'D', 'C', 0,
  /* 1842 */ 'C', 'R', 'A', 'N', 'D', 'C', 0,
  /* 1849 */ 'V', 'A', 'N', 'D', 'C', 0,
  /* 1855 */ 'S', 'U', 'B', 'F', 'C', 0,
  /* 1861 */ 'S', 'U', 'B', 'I', 'C', 0,
  /* 1867 */ 'A', 'D', 'D', 'I', 'C', 0,
  /* 1873 */ 'R', 'L', 'D', 'I', 'C', 0,
  /* 1879 */ 'S', 'U', 'B', 'F', 'I', 'C', 0,
  /* 1886 */ 'I', 'S', 'Y', 'N', 'C', 0,
  /* 1892 */ 'D', 'Y', 'N', 'A', 'L', 'L', 'O', 'C', 0,
  /* 1901 */ 'C', 'R', 'O', 'R', 'C', 0,
  /* 1907 */ 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'V', 'R', 'R', 'C', 0,
  /* 1922 */ 'S', 'C', 0,
  /* 1925 */ 'S', 'R', 'A', 'D', 0,
  /* 1930 */ 'F', 'A', 'D', 'D', 0,
  /* 1935 */ 'F', 'M', 'A', 'D', 'D', 0,
  /* 1941 */ 'F', 'N', 'M', 'A', 'D', 'D', 0,
  /* 1948 */ 'L', 'F', 'D', 0,
  /* 1952 */ 'S', 'T', 'F', 'D', 0,
  /* 1957 */ 'F', 'N', 'E', 'G', 'D', 0,
  /* 1963 */ 'M', 'U', 'L', 'H', 'D', 0,
  /* 1969 */ 'F', 'C', 'F', 'I', 'D', 0,
  /* 1975 */ 'F', 'S', 'E', 'L', 'D', 0,
  /* 1981 */ 'M', 'U', 'L', 'L', 'D', 0,
  /* 1987 */ 'C', 'M', 'P', 'L', 'D', 0,
  /* 1993 */ 'S', 'L', 'D', 0,
  /* 1997 */ 'F', 'R', 'I', 'M', 'D', 0,
  /* 2003 */ 'C', 'R', 'N', 'A', 'N', 'D', 0,
  /* 2010 */ 'C', 'R', 'A', 'N', 'D', 0,
  /* 2016 */ 'V', 'A', 'N', 'D', 0,
  /* 2021 */ 'L', 'I', 'F', 'E', 'T', 'I', 'M', 'E', '_', 'E', 'N', 'D', 0,
  /* 2034 */ 'F', 'C', 'P', 'S', 'G', 'N', 'D', 0,
  /* 2042 */ 'F', 'R', 'I', 'N', 'D', 0,
  /* 2048 */ 'F', 'R', 'I', 'P', 'D', 0,
  /* 2054 */ 'C', 'M', 'P', 'D', 0,
  /* 2059 */ 'S', 'R', 'D', 0,
  /* 2063 */ 'F', 'A', 'B', 'S', 'D', 0,
  /* 2069 */ 'F', 'N', 'A', 'B', 'S', 'D', 0,
  /* 2076 */ 'P', 'O', 'P', 'C', 'N', 'T', 'D', 0,
  /* 2084 */ 'S', 'T', 'D', 0,
  /* 2088 */ 'F', 'C', 'M', 'P', 'U', 'D', 0,
  /* 2095 */ 'D', 'I', 'V', 'D', 0,
  /* 2100 */ 'F', 'R', 'I', 'Z', 'D', 0,
  /* 2106 */ 'C', 'N', 'T', 'L', 'Z', 'D', 0,
  /* 2113 */ 'R', 'E', 'G', '_', 'S', 'E', 'Q', 'U', 'E', 'N', 'C', 'E', 0,
  /* 2126 */ 'A', 'D', 'D', 'E', 0,
  /* 2131 */ 'S', 'U', 'B', 'F', 'E', 0,
  /* 2137 */ 'B', 'U', 'N', 'D', 'L', 'E', 0,
  /* 2144 */ 'A', 'D', 'D', 'M', 'E', 0,
  /* 2150 */ 'S', 'U', 'B', 'F', 'M', 'E', 0,
  /* 2157 */ 'F', 'R', 'E', 0,
  /* 2161 */ 'F', 'R', 'S', 'Q', 'R', 'T', 'E', 0,
  /* 2169 */ 'D', 'B', 'G', '_', 'V', 'A', 'L', 'U', 'E', 0,
  /* 2179 */ 'M', 'F', 'V', 'R', 'S', 'A', 'V', 'E', 0,
  /* 2188 */ 'M', 'T', 'V', 'R', 'S', 'A', 'V', 'E', 0,
  /* 2197 */ 'R', 'E', 'S', 'T', 'O', 'R', 'E', '_', 'V', 'R', 'S', 'A', 'V', 'E', 0,
  /* 2212 */ 'U', 'P', 'D', 'A', 'T', 'E', '_', 'V', 'R', 'S', 'A', 'V', 'E', 0,
  /* 2226 */ 'S', 'P', 'I', 'L', 'L', '_', 'V', 'R', 'S', 'A', 'V', 'E', 0,
  /* 2239 */ 'A', 'D', 'D', 'Z', 'E', 0,
  /* 2245 */ 'S', 'U', 'B', 'F', 'Z', 'E', 0,
  /* 2252 */ 'D', 'C', 'B', 'F', 0,
  /* 2257 */ 'S', 'U', 'B', 'F', 0,
  /* 2262 */ 'I', 'M', 'P', 'L', 'I', 'C', 'I', 'T', '_', 'D', 'E', 'F', 0,
  /* 2275 */ 'M', 'C', 'R', 'F', 0,
  /* 2280 */ 'M', 'F', 'O', 'C', 'R', 'F', 0,
  /* 2287 */ 'M', 'T', 'O', 'C', 'R', 'F', 0,
  /* 2294 */ 'M', 'T', 'C', 'R', 'F', 0,
  /* 2300 */ 'M', 'T', 'F', 'S', 'F', 0,
  /* 2306 */ 'N', 'E', 'G', 0,
  /* 2310 */ 'E', 'X', 'T', 'R', 'A', 'C', 'T', '_', 'S', 'U', 'B', 'R', 'E', 'G', 0,
  /* 2325 */ 'I', 'N', 'S', 'E', 'R', 'T', '_', 'S', 'U', 'B', 'R', 'E', 'G', 0,
  /* 2339 */ 'S', 'U', 'B', 'R', 'E', 'G', '_', 'T', 'O', '_', 'R', 'E', 'G', 0,
  /* 2353 */ 'V', '_', 'S', 'E', 'T', '0', 'H', 0,
  /* 2361 */ 'V', 'S', 'R', 'A', 'H', 0,
  /* 2367 */ 'V', 'M', 'R', 'G', 'H', 'H', 0,
  /* 2374 */ 'V', 'M', 'R', 'G', 'L', 'H', 0,
  /* 2381 */ 'V', 'R', 'L', 'H', 0,
  /* 2386 */ 'V', 'S', 'L', 'H', 0,
  /* 2391 */ 'V', 'S', 'R', 'H', 0,
  /* 2396 */ 'V', 'M', 'U', 'L', 'E', 'S', 'H', 0,
  /* 2404 */ 'V', '_', 'S', 'E', 'T', 'A', 'L', 'L', 'O', 'N', 'E', 'S', 'H', 0,
  /* 2418 */ 'V', 'A', 'V', 'G', 'S', 'H', 0,
  /* 2425 */ 'V', 'U', 'P', 'K', 'H', 'S', 'H', 0,
  /* 2433 */ 'V', 'S', 'P', 'L', 'T', 'I', 'S', 'H', 0,
  /* 2442 */ 'V', 'U', 'P', 'K', 'L', 'S', 'H', 0,
  /* 2450 */ 'V', 'M', 'I', 'N', 'S', 'H', 0,
  /* 2457 */ 'V', 'M', 'U', 'L', 'O', 'S', 'H', 0,
  /* 2465 */ 'V', 'C', 'M', 'P', 'G', 'T', 'S', 'H', 0,
  /* 2474 */ 'E', 'X', 'T', 'S', 'H', 0,
  /* 2480 */ 'V', 'M', 'A', 'X', 'S', 'H', 0,
  /* 2487 */ 'V', 'S', 'P', 'L', 'T', 'H', 0,
  /* 2494 */ 'S', 'T', 'H', 0,
  /* 2498 */ 'V', 'M', 'U', 'L', 'E', 'U', 'H', 0,
  /* 2506 */ 'V', 'A', 'V', 'G', 'U', 'H', 0,
  /* 2513 */ 'V', 'M', 'I', 'N', 'U', 'H', 0,
  /* 2520 */ 'V', 'M', 'U', 'L', 'O', 'U', 'H', 0,
  /* 2528 */ 'V', 'C', 'M', 'P', 'E', 'Q', 'U', 'H', 0,
  /* 2537 */ 'V', 'C', 'M', 'P', 'G', 'T', 'U', 'H', 0,
  /* 2546 */ 'V', 'M', 'A', 'X', 'U', 'H', 0,
  /* 2553 */ 'D', 'C', 'B', 'I', 0,
  /* 2558 */ 'I', 'C', 'B', 'I', 0,
  /* 2563 */ 'S', 'U', 'B', 'I', 0,
  /* 2568 */ 'S', 'R', 'A', 'D', 'I', 0,
  /* 2574 */ 'A', 'D', 'D', 'I', 0,
  /* 2579 */ 'C', 'M', 'P', 'L', 'D', 'I', 0,
  /* 2586 */ 'C', 'L', 'R', 'L', 'S', 'L', 'D', 'I', 0,
  /* 2595 */ 'E', 'X', 'T', 'L', 'D', 'I', 0,
  /* 2602 */ 'C', 'M', 'P', 'D', 'I', 0,
  /* 2608 */ 'C', 'L', 'R', 'R', 'D', 'I', 0,
  /* 2615 */ 'I', 'N', 'S', 'R', 'D', 'I', 0,
  /* 2622 */ 'R', 'O', 'T', 'R', 'D', 'I', 0,
  /* 2629 */ 'E', 'X', 'T', 'R', 'D', 'I', 0,
  /* 2636 */ 'T', 'D', 'I', 0,
  /* 2640 */ 'P', 'H', 'I', 0,
  /* 2644 */ 'M', 'U', 'L', 'L', 'I', 0,
  /* 2650 */ 'R', 'L', 'D', 'I', 'M', 'I', 0,
  /* 2657 */ 'R', 'L', 'W', 'I', 'M', 'I', 0,
  /* 2664 */ 'V', 'S', 'L', 'D', 'O', 'I', 0,
  /* 2671 */ 'X', 'O', 'R', 'I', 0,
  /* 2676 */ 'L', 'D', 't', 'o', 'c', 'J', 'T', 'I', 0,
  /* 2685 */ 'S', 'R', 'A', 'W', 'I', 0,
  /* 2691 */ 'C', 'M', 'P', 'L', 'W', 'I', 0,
  /* 2698 */ 'C', 'L', 'R', 'L', 'S', 'L', 'W', 'I', 0,
  /* 2707 */ 'I', 'N', 'S', 'L', 'W', 'I', 0,
  /* 2714 */ 'E', 'X', 'T', 'L', 'W', 'I', 0,
  /* 2721 */ 'C', 'M', 'P', 'W', 'I', 0,
  /* 2727 */ 'C', 'L', 'R', 'R', 'W', 'I', 0,
  /* 2734 */ 'I', 'N', 'S', 'R', 'W', 'I', 0,
  /* 2741 */ 'R', 'O', 'T', 'R', 'W', 'I', 0,
  /* 2748 */ 'E', 'X', 'T', 'R', 'W', 'I', 0,
  /* 2755 */ 'T', 'W', 'I', 0,
  /* 2759 */ 'B', 'L', 0,
  /* 2762 */ 'g', 'B', 'C', 'L', 0,
  /* 2767 */ 'B', 'C', 'C', 'L', 0,
  /* 2772 */ 'R', 'L', 'D', 'C', 'L', 0,
  /* 2778 */ 'R', 'L', 'D', 'I', 'C', 'L', 0,
  /* 2785 */ 'G', 'C', '_', 'L', 'A', 'B', 'E', 'L', 0,
  /* 2794 */ 'P', 'R', 'O', 'L', 'O', 'G', '_', 'L', 'A', 'B', 'E', 'L', 0,
  /* 2807 */ 'E', 'H', '_', 'L', 'A', 'B', 'E', 'L', 0,
  /* 2816 */ 'I', 'S', 'E', 'L', 0,
  /* 2821 */ 'V', 'S', 'E', 'L', 0,
  /* 2826 */ 'D', 'S', 'S', 'A', 'L', 'L', 0,
  /* 2833 */ 'K', 'I', 'L', 'L', 0,
  /* 2838 */ 'B', 'L', 'R', 'L', 0,
  /* 2843 */ 'g', 'B', 'C', 'L', 'R', 'L', 0,
  /* 2850 */ 'B', 'D', 'Z', 'L', 'R', 'L', 0,
  /* 2857 */ 'B', 'D', 'N', 'Z', 'L', 'R', 'L', 0,
  /* 2865 */ 'B', 'C', 'T', 'R', 'L', 0,
  /* 2871 */ 'g', 'B', 'C', 'C', 'T', 'R', 'L', 0,
  /* 2879 */ 'L', 'V', 'S', 'L', 0,
  /* 2884 */ 'F', 'M', 'U', 'L', 0,
  /* 2889 */ 'L', 'V', 'X', 'L', 0,
  /* 2894 */ 'S', 'T', 'V', 'X', 'L', 0,
  /* 2900 */ 'D', 'C', 'B', 'Z', 'L', 0,
  /* 2906 */ 'B', 'D', 'Z', 'L', 0,
  /* 2911 */ 'B', 'D', 'N', 'Z', 'L', 0,
  /* 2917 */ 'L', 'D', 't', 'o', 'c', 'L', 0,
  /* 2924 */ 'A', 'D', 'D', 'I', 't', 'o', 'c', 'L', 0,
  /* 2933 */ 'A', 'D', 'D', 'I', 't', 'l', 's', 'g', 'd', 'L', 0,
  /* 2944 */ 'A', 'D', 'D', 'I', 't', 'l', 's', 'l', 'd', 'L', 0,
  /* 2955 */ 'L', 'D', 'g', 'o', 't', 'T', 'p', 'r', 'e', 'l', 'L', 0,
  /* 2967 */ 'A', 'D', 'D', 'I', 'd', 't', 'p', 'r', 'e', 'l', 'L', 0,
  /* 2979 */ 'V', 'M', 'S', 'U', 'M', 'M', 'B', 'M', 0,
  /* 2988 */ 'V', 'S', 'U', 'B', 'U', 'B', 'M', 0,
  /* 2996 */ 'V', 'A', 'D', 'D', 'U', 'B', 'M', 0,
  /* 3004 */ 'V', 'M', 'S', 'U', 'M', 'U', 'B', 'M', 0,
  /* 3013 */ 'V', 'M', 'S', 'U', 'M', 'S', 'H', 'M', 0,
  /* 3022 */ 'V', 'S', 'U', 'B', 'U', 'H', 'M', 0,
  /* 3030 */ 'V', 'M', 'L', 'A', 'D', 'D', 'U', 'H', 'M', 0,
  /* 3040 */ 'V', 'A', 'D', 'D', 'U', 'H', 'M', 0,
  /* 3048 */ 'V', 'M', 'S', 'U', 'M', 'U', 'H', 'M', 0,
  /* 3057 */ 'V', 'R', 'F', 'I', 'M', 0,
  /* 3063 */ 'R', 'L', 'W', 'I', 'N', 'M', 0,
  /* 3070 */ 'R', 'L', 'W', 'N', 'M', 0,
  /* 3076 */ 'V', 'P', 'E', 'R', 'M', 0,
  /* 3082 */ 'I', 'N', 'L', 'I', 'N', 'E', 'A', 'S', 'M', 0,
  /* 3092 */ 'V', 'P', 'K', 'U', 'H', 'U', 'M', 0,
  /* 3100 */ 'V', 'P', 'K', 'U', 'W', 'U', 'M', 0,
  /* 3108 */ 'V', 'S', 'U', 'B', 'U', 'W', 'M', 0,
  /* 3116 */ 'V', 'A', 'D', 'D', 'U', 'W', 'M', 0,
  /* 3124 */ 'V', 'R', 'F', 'I', 'N', 0,
  /* 3130 */ 'A', 'D', 'J', 'C', 'A', 'L', 'L', 'S', 'T', 'A', 'C', 'K', 'D', 'O', 'W', 'N', 0,
  /* 3147 */ 'E', 'I', 'E', 'I', 'O', 0,
  /* 3153 */ 'V', 'S', 'L', 'O', 0,
  /* 3158 */ 'V', 'S', 'R', 'O', 0,
  /* 3163 */ 'T', 'R', 'A', 'P', 0,
  /* 3168 */ 'V', 'C', 'M', 'P', 'B', 'F', 'P', 0,
  /* 3176 */ 'V', 'N', 'M', 'S', 'U', 'B', 'F', 'P', 0,
  /* 3185 */ 'V', 'S', 'U', 'B', 'F', 'P', 0,
  /* 3192 */ 'V', 'M', 'A', 'D', 'D', 'F', 'P', 0,
  /* 3200 */ 'V', 'A', 'D', 'D', 'F', 'P', 0,
  /* 3207 */ 'V', 'L', 'O', 'G', 'E', 'F', 'P', 0,
  /* 3215 */ 'V', 'C', 'M', 'P', 'G', 'E', 'F', 'P', 0,
  /* 3224 */ 'V', 'R', 'E', 'F', 'P', 0,
  /* 3230 */ 'V', 'E', 'X', 'P', 'T', 'E', 'F', 'P', 0,
  /* 3239 */ 'V', 'R', 'S', 'Q', 'R', 'T', 'E', 'F', 'P', 0,
  /* 3249 */ 'V', 'M', 'I', 'N', 'F', 'P', 0,
  /* 3256 */ 'V', 'C', 'M', 'P', 'E', 'Q', 'F', 'P', 0,
  /* 3265 */ 'V', 'C', 'M', 'P', 'G', 'T', 'F', 'P', 0,
  /* 3274 */ 'V', 'M', 'A', 'X', 'F', 'P', 0,
  /* 3281 */ 'V', 'R', 'F', 'I', 'P', 0,
  /* 3287 */ 'B', 'L', 'A', '8', '_', 'N', 'O', 'P', 0,
  /* 3296 */ 'B', 'L', '8', '_', 'N', 'O', 'P', 0,
  /* 3304 */ 'F', 'R', 'S', 'P', 0,
  /* 3309 */ 'A', 'D', 'J', 'C', 'A', 'L', 'L', 'S', 'T', 'A', 'C', 'K', 'U', 'P', 0,
  /* 3324 */ 'R', 'L', 'D', 'C', 'R', 0,
  /* 3330 */ 'M', 'F', 'C', 'R', 0,
  /* 3335 */ 'R', 'L', 'D', 'I', 'C', 'R', 0,
  /* 3342 */ 'M', 'F', 'V', 'S', 'C', 'R', 0,
  /* 3349 */ 'M', 'T', 'V', 'S', 'C', 'R', 0,
  /* 3356 */ 'R', 'E', 'S', 'T', 'O', 'R', 'E', '_', 'C', 'R', 0,
  /* 3367 */ 'S', 'P', 'I', 'L', 'L', '_', 'C', 'R', 0,
  /* 3376 */ 'G', 'E', 'T', 't', 'l', 's', 'l', 'd', 'A', 'D', 'D', 'R', 0,
  /* 3389 */ 'G', 'E', 'T', 't', 'l', 's', 'A', 'D', 'D', 'R', 0,
  /* 3400 */ 'B', 'L', 'R', 0,
  /* 3404 */ 'g', 'B', 'C', 'L', 'R', 0,
  /* 3410 */ 'M', 'F', 'L', 'R', 0,
  /* 3415 */ 'M', 'T', 'L', 'R', 0,
  /* 3420 */ 'B', 'D', 'Z', 'L', 'R', 0,
  /* 3426 */ 'B', 'D', 'N', 'Z', 'L', 'R', 0,
  /* 3433 */ 'M', 'o', 'v', 'e', 'P', 'C', 't', 'o', 'L', 'R', 0,
  /* 3444 */ 'F', 'M', 'R', 0,
  /* 3448 */ 'C', 'R', 'N', 'O', 'R', 0,
  /* 3454 */ 'V', 'N', 'O', 'R', 0,
  /* 3459 */ 'C', 'R', 'O', 'R', 0,
  /* 3464 */ 'V', 'O', 'R', 0,
  /* 3468 */ 'C', 'R', 'X', 'O', 'R', 0,
  /* 3474 */ 'V', 'X', 'O', 'R', 0,
  /* 3479 */ 'M', 'F', 'S', 'P', 'R', 0,
  /* 3485 */ 'M', 'T', 'S', 'P', 'R', 0,
  /* 3491 */ 'L', 'V', 'S', 'R', 0,
  /* 3496 */ 'T', 'A', 'I', 'L', 'B', 'C', 'T', 'R', 0,
  /* 3505 */ 'g', 'B', 'C', 'C', 'T', 'R', 0,
  /* 3512 */ 'M', 'F', 'C', 'T', 'R', 0,
  /* 3518 */ 'M', 'T', 'C', 'T', 'R', 0,
  /* 3524 */ 'V', 'S', 'U', 'M', '4', 'S', 'B', 'S', 0,
  /* 3533 */ 'V', 'S', 'U', 'B', 'S', 'B', 'S', 0,
  /* 3541 */ 'V', 'A', 'D', 'D', 'S', 'B', 'S', 0,
  /* 3549 */ 'V', 'S', 'U', 'M', '4', 'U', 'B', 'S', 0,
  /* 3558 */ 'V', 'S', 'U', 'B', 'U', 'B', 'S', 0,
  /* 3566 */ 'V', 'A', 'D', 'D', 'U', 'B', 'S', 0,
  /* 3574 */ 'F', 'S', 'U', 'B', 'S', 0,
  /* 3580 */ 'F', 'M', 'S', 'U', 'B', 'S', 0,
  /* 3587 */ 'F', 'N', 'M', 'S', 'U', 'B', 'S', 0,
  /* 3595 */ 'F', 'A', 'D', 'D', 'S', 0,
  /* 3601 */ 'F', 'M', 'A', 'D', 'D', 'S', 0,
  /* 3608 */ 'F', 'N', 'M', 'A', 'D', 'D', 'S', 0,
  /* 3616 */ 'F', 'C', 'F', 'I', 'D', 'S', 0,
  /* 3623 */ 'V', '_', 'S', 'E', 'T', 'A', 'L', 'L', 'O', 'N', 'E', 'S', 0,
  /* 3636 */ 'F', 'R', 'E', 'S', 0,
  /* 3641 */ 'F', 'R', 'S', 'Q', 'R', 'T', 'E', 'S', 0,
  /* 3650 */ 'M', 'F', 'F', 'S', 0,
  /* 3655 */ 'L', 'F', 'S', 0,
  /* 3659 */ 'S', 'T', 'F', 'S', 0,
  /* 3664 */ 'F', 'N', 'E', 'G', 'S', 0,
  /* 3670 */ 'V', 'S', 'U', 'M', '4', 'S', 'H', 'S', 0,
  /* 3679 */ 'V', 'S', 'U', 'B', 'S', 'H', 'S', 0,
  /* 3687 */ 'V', 'M', 'H', 'A', 'D', 'D', 'S', 'H', 'S', 0,
  /* 3697 */ 'V', 'M', 'H', 'R', 'A', 'D', 'D', 'S', 'H', 'S', 0,
  /* 3708 */ 'V', 'A', 'D', 'D', 'S', 'H', 'S', 0,
  /* 3716 */ 'V', 'M', 'S', 'U', 'M', 'S', 'H', 'S', 0,
  /* 3725 */ 'V', 'S', 'U', 'B', 'U', 'H', 'S', 0,
  /* 3733 */ 'V', 'A', 'D', 'D', 'U', 'H', 'S', 0,
  /* 3741 */ 'V', 'M', 'S', 'U', 'M', 'U', 'H', 'S', 0,
  /* 3750 */ 'S', 'U', 'B', 'I', 'S', 0,
  /* 3756 */ 'A', 'D', 'D', 'I', 'S', 0,
  /* 3762 */ 'L', 'I', 'S', 0,
  /* 3766 */ 'X', 'O', 'R', 'I', 'S', 0,
  /* 3772 */ 'F', 'S', 'E', 'L', 'S', 0,
  /* 3778 */ 'A', 'D', 'D', '8', 'T', 'L', 'S', 0,
  /* 3786 */ 'B', 'L', '8', '_', 'T', 'L', 'S', 0,
  /* 3794 */ 'B', 'L', '8', '_', 'N', 'O', 'P', '_', 'T', 'L', 'S', 0,
  /* 3806 */ 'F', 'M', 'U', 'L', 'S', 0,
  /* 3812 */ 'F', 'R', 'I', 'M', 'S', 0,
  /* 3818 */ 'F', 'C', 'P', 'S', 'G', 'N', 'S', 0,
  /* 3826 */ 'F', 'R', 'I', 'N', 'S', 0,
  /* 3832 */ 'F', 'R', 'I', 'P', 'S', 0,
  /* 3838 */ 'C', 'O', 'P', 'Y', '_', 'T', 'O', '_', 'R', 'E', 'G', 'C', 'L', 'A', 'S', 'S', 0,
  /* 3855 */ 'F', 'A', 'B', 'S', 'S', 0,
  /* 3861 */ 'F', 'N', 'A', 'B', 'S', 'S', 0,
  /* 3868 */ 'D', 'S', 'S', 0,
  /* 3872 */ 'V', 'P', 'K', 'S', 'H', 'S', 'S', 0,
  /* 3880 */ 'V', 'P', 'K', 'S', 'W', 'S', 'S', 0,
  /* 3888 */ 'F', 'S', 'Q', 'R', 'T', 'S', 0,
  /* 3895 */ 'F', 'C', 'F', 'I', 'D', 'U', 'S', 0,
  /* 3903 */ 'V', 'P', 'K', 'S', 'H', 'U', 'S', 0,
  /* 3911 */ 'V', 'P', 'K', 'U', 'H', 'U', 'S', 0,
  /* 3919 */ 'F', 'C', 'M', 'P', 'U', 'S', 0,
  /* 3926 */ 'V', 'P', 'K', 'S', 'W', 'U', 'S', 0,
  /* 3934 */ 'V', 'P', 'K', 'U', 'W', 'U', 'S', 0,
  /* 3942 */ 'F', 'D', 'I', 'V', 'S', 0,
  /* 3948 */ 'V', 'S', 'U', 'M', '2', 'S', 'W', 'S', 0,
  /* 3957 */ 'V', 'S', 'U', 'B', 'S', 'W', 'S', 0,
  /* 3965 */ 'V', 'A', 'D', 'D', 'S', 'W', 'S', 0,
  /* 3973 */ 'V', 'S', 'U', 'M', 'S', 'W', 'S', 0,
  /* 3981 */ 'V', 'S', 'U', 'B', 'U', 'W', 'S', 0,
  /* 3989 */ 'V', 'A', 'D', 'D', 'U', 'W', 'S', 0,
  /* 3997 */ 'V', 'C', 'T', 'S', 'X', 'S', 0,
  /* 4004 */ 'V', 'C', 'T', 'U', 'X', 'S', 0,
  /* 4011 */ 'F', 'R', 'I', 'Z', 'S', 0,
  /* 4017 */ 'D', 'C', 'B', 'T', 0,
  /* 4022 */ 'C', 'R', '6', 'S', 'E', 'T', 0,
  /* 4029 */ 'C', 'R', '6', 'U', 'N', 'S', 'E', 'T', 0,
  /* 4038 */ 'C', 'R', 'U', 'N', 'S', 'E', 'T', 0,
  /* 4046 */ 'C', 'R', 'S', 'E', 'T', 0,
  /* 4052 */ 'W', 'A', 'I', 'T', 0,
  /* 4057 */ 'L', 'D', 't', 'o', 'c', 'C', 'P', 'T', 0,
  /* 4066 */ 'L', 'I', 'F', 'E', 'T', 'I', 'M', 'E', '_', 'S', 'T', 'A', 'R', 'T', 0,
  /* 4081 */ 'F', 'S', 'Q', 'R', 'T', 0,
  /* 4087 */ 'D', 'C', 'B', 'S', 'T', 0,
  /* 4093 */ 'D', 'S', 'T', 0,
  /* 4097 */ 'D', 'C', 'B', 'T', 'S', 'T', 0,
  /* 4104 */ 'D', 'S', 'T', 'S', 'T', 0,
  /* 4110 */ 'D', 'S', 'T', 'T', 0,
  /* 4115 */ 'D', 'S', 'T', 'S', 'T', 'T', 0,
  /* 4122 */ 'L', 'H', 'A', 'U', 0,
  /* 4127 */ 'S', 'T', 'B', 'U', 0,
  /* 4132 */ 'L', 'F', 'D', 'U', 0,
  /* 4137 */ 'S', 'T', 'F', 'D', 'U', 0,
  /* 4143 */ 'M', 'U', 'L', 'H', 'D', 'U', 0,
  /* 4150 */ 'F', 'C', 'F', 'I', 'D', 'U', 0,
  /* 4157 */ 'L', 'D', 'U', 0,
  /* 4161 */ 'S', 'T', 'D', 'U', 0,
  /* 4166 */ 'D', 'I', 'V', 'D', 'U', 0,
  /* 4172 */ 'S', 'T', 'H', 'U', 0,
  /* 4177 */ 'L', 'F', 'S', 'U', 0,
  /* 4182 */ 'S', 'T', 'F', 'S', 'U', 0,
  /* 4188 */ 'M', 'U', 'L', 'H', 'W', 'U', 0,
  /* 4195 */ 'S', 'T', 'W', 'U', 0,
  /* 4200 */ 'D', 'I', 'V', 'W', 'U', 0,
  /* 4206 */ 'L', 'B', 'Z', 'U', 0,
  /* 4211 */ 'L', 'H', 'Z', 'U', 0,
  /* 4216 */ 'L', 'W', 'Z', 'U', 0,
  /* 4221 */ 'F', 'D', 'I', 'V', 0,
  /* 4226 */ 'C', 'R', 'E', 'Q', 'V', 0,
  /* 4232 */ 'V', 'S', 'R', 'A', 'W', 0,
  /* 4238 */ 'V', 'M', 'R', 'G', 'H', 'W', 0,
  /* 4245 */ 'M', 'U', 'L', 'H', 'W', 0,
  /* 4251 */ 'V', 'M', 'R', 'G', 'L', 'W', 0,
  /* 4258 */ 'M', 'U', 'L', 'L', 'W', 0,
  /* 4264 */ 'C', 'M', 'P', 'L', 'W', 0,
  /* 4270 */ 'V', 'R', 'L', 'W', 0,
  /* 4275 */ 'V', 'S', 'L', 'W', 0,
  /* 4280 */ 'L', 'M', 'W', 0,
  /* 4284 */ 'S', 'T', 'M', 'W', 0,
  /* 4289 */ 'C', 'M', 'P', 'W', 0,
  /* 4294 */ 'V', 'S', 'R', 'W', 0,
  /* 4299 */ 'V', 'A', 'V', 'G', 'S', 'W', 0,
  /* 4306 */ 'V', 'S', 'P', 'L', 'T', 'I', 'S', 'W', 0,
  /* 4315 */ 'V', 'M', 'I', 'N', 'S', 'W', 0,
  /* 4322 */ 'V', 'C', 'M', 'P', 'G', 'T', 'S', 'W', 0,
  /* 4331 */ 'E', 'X', 'T', 'S', 'W', 0,
  /* 4337 */ 'V', 'M', 'A', 'X', 'S', 'W', 0,
  /* 4344 */ 'V', 'S', 'P', 'L', 'T', 'W', 0,
  /* 4351 */ 'P', 'O', 'P', 'C', 'N', 'T', 'W', 0,
  /* 4359 */ 'S', 'T', 'W', 0,
  /* 4363 */ 'V', 'S', 'U', 'B', 'C', 'U', 'W', 0,
  /* 4371 */ 'V', 'A', 'D', 'D', 'C', 'U', 'W', 0,
  /* 4379 */ 'V', 'A', 'V', 'G', 'U', 'W', 0,
  /* 4386 */ 'V', 'M', 'I', 'N', 'U', 'W', 0,
  /* 4393 */ 'V', 'C', 'M', 'P', 'E', 'Q', 'U', 'W', 0,
  /* 4402 */ 'V', 'C', 'M', 'P', 'G', 'T', 'U', 'W', 0,
  /* 4411 */ 'V', 'M', 'A', 'X', 'U', 'W', 0,
  /* 4418 */ 'D', 'I', 'V', 'W', 0,
  /* 4423 */ 'C', 'N', 'T', 'L', 'Z', 'W', 0,
  /* 4430 */ 'L', 'H', 'A', 'X', 0,
  /* 4435 */ 'L', 'F', 'I', 'W', 'A', 'X', 0,
  /* 4442 */ 'L', 'W', 'A', 'X', 0,
  /* 4447 */ 'L', 'V', 'E', 'B', 'X', 0,
  /* 4453 */ 'S', 'T', 'V', 'E', 'B', 'X', 0,
  /* 4460 */ 'S', 'T', 'B', 'X', 0,
  /* 4465 */ 'S', 'T', 'D', 'C', 'X', 0,
  /* 4471 */ 'S', 'T', 'W', 'C', 'X', 0,
  /* 4477 */ 'L', 'F', 'D', 'X', 0,
  /* 4482 */ 'S', 'T', 'F', 'D', 'X', 0,
  /* 4488 */ 'L', 'D', 'X', 0,
  /* 4492 */ 'S', 'T', 'D', 'X', 0,
  /* 4497 */ 'L', 'V', 'E', 'H', 'X', 0,
  /* 4503 */ 'S', 'T', 'V', 'E', 'H', 'X', 0,
  /* 4510 */ 'S', 'T', 'H', 'X', 0,
  /* 4515 */ 'V', 'U', 'P', 'K', 'H', 'P', 'X', 0,
  /* 4523 */ 'V', 'P', 'K', 'P', 'X', 0,
  /* 4529 */ 'V', 'U', 'P', 'K', 'L', 'P', 'X', 0,
  /* 4537 */ 'L', 'D', 'A', 'R', 'X', 0,
  /* 4543 */ 'L', 'W', 'A', 'R', 'X', 0,
  /* 4549 */ 'L', 'D', 'B', 'R', 'X', 0,
  /* 4555 */ 'S', 'T', 'D', 'B', 'R', 'X', 0,
  /* 4562 */ 'L', 'H', 'B', 'R', 'X', 0,
  /* 4568 */ 'S', 'T', 'H', 'B', 'R', 'X', 0,
  /* 4575 */ 'L', 'W', 'B', 'R', 'X', 0,
  /* 4581 */ 'S', 'T', 'W', 'B', 'R', 'X', 0,
  /* 4588 */ 'V', 'C', 'F', 'S', 'X', 0,
  /* 4594 */ 'L', 'F', 'S', 'X', 0,
  /* 4599 */ 'S', 'T', 'F', 'S', 'X', 0,
  /* 4605 */ 'L', 'H', 'A', 'U', 'X', 0,
  /* 4611 */ 'L', 'W', 'A', 'U', 'X', 0,
  /* 4617 */ 'S', 'T', 'B', 'U', 'X', 0,
  /* 4623 */ 'L', 'F', 'D', 'U', 'X', 0,
  /* 4629 */ 'S', 'T', 'F', 'D', 'U', 'X', 0,
  /* 4636 */ 'L', 'D', 'U', 'X', 0,
  /* 4641 */ 'S', 'T', 'D', 'U', 'X', 0,
  /* 4647 */ 'V', 'C', 'F', 'U', 'X', 0,
  /* 4653 */ 'S', 'T', 'H', 'U', 'X', 0,
  /* 4659 */ 'L', 'F', 'S', 'U', 'X', 0,
  /* 4665 */ 'S', 'T', 'F', 'S', 'U', 'X', 0,
  /* 4672 */ 'S', 'T', 'W', 'U', 'X', 0,
  /* 4678 */ 'L', 'B', 'Z', 'U', 'X', 0,
  /* 4684 */ 'L', 'H', 'Z', 'U', 'X', 0,
  /* 4690 */ 'L', 'W', 'Z', 'U', 'X', 0,
  /* 4696 */ 'L', 'V', 'X', 0,
  /* 4700 */ 'S', 'T', 'V', 'X', 0,
  /* 4705 */ 'L', 'V', 'E', 'W', 'X', 0,
  /* 4711 */ 'S', 'T', 'V', 'E', 'W', 'X', 0,
  /* 4718 */ 'S', 'T', 'F', 'I', 'W', 'X', 0,
  /* 4725 */ 'S', 'T', 'W', 'X', 0,
  /* 4730 */ 'L', 'B', 'Z', 'X', 0,
  /* 4735 */ 'L', 'H', 'Z', 'X', 0,
  /* 4740 */ 'L', 'F', 'I', 'W', 'Z', 'X', 0,
  /* 4747 */ 'L', 'W', 'Z', 'X', 0,
  /* 4752 */ 'C', 'O', 'P', 'Y', 0,
  /* 4757 */ 'D', 'C', 'B', 'Z', 0,
  /* 4762 */ 'L', 'B', 'Z', 0,
  /* 4766 */ 'B', 'D', 'Z', 0,
  /* 4770 */ 'F', 'C', 'T', 'I', 'D', 'Z', 0,
  /* 4777 */ 'L', 'H', 'Z', 0,
  /* 4781 */ 'V', 'R', 'F', 'I', 'Z', 0,
  /* 4787 */ 'B', 'D', 'N', 'Z', 0,
  /* 4792 */ 'F', 'C', 'T', 'I', 'D', 'U', 'Z', 0,
  /* 4800 */ 'F', 'C', 'T', 'I', 'W', 'U', 'Z', 0,
  /* 4808 */ 'F', 'C', 'T', 'I', 'W', 'Z', 0,
  /* 4815 */ 'L', 'W', 'Z', 0,
  /* 4819 */ 'L', 'D', 't', 'o', 'c', 0,
  /* 4825 */ 'L', 'D', 'i', 'n', 't', 'o', '_', 't', 'o', 'c', 0,
  /* 4836 */ 'L', 'D', 't', 'o', 'c', '_', 'r', 'e', 's', 't', 'o', 'r', 'e', 0,
  /* 4850 */ 'T', 'C', 'R', 'E', 'T', 'U', 'R', 'N', 'a', 'i', 0,
  /* 4861 */ 'T', 'C', 'R', 'E', 'T', 'U', 'R', 'N', 'd', 'i', 0,
  /* 4872 */ 'T', 'C', 'R', 'E', 'T', 'U', 'R', 'N', 'r', 'i', 0,
  /* 4883 */ 'B', 'D', 'Z', 'L', 'A', 'm', 0,
  /* 4890 */ 'B', 'D', 'N', 'Z', 'L', 'A', 'm', 0,
  /* 4898 */ 'B', 'D', 'Z', 'A', 'm', 0,
  /* 4904 */ 'B', 'D', 'N', 'Z', 'A', 'm', 0,
  /* 4911 */ 'B', 'D', 'Z', 'L', 'R', 'L', 'm', 0,
  /* 4919 */ 'B', 'D', 'N', 'Z', 'L', 'R', 'L', 'm', 0,
  /* 4928 */ 'B', 'D', 'Z', 'L', 'm', 0,
  /* 4934 */ 'B', 'D', 'N', 'Z', 'L', 'm', 0,
  /* 4941 */ 'B', 'D', 'Z', 'L', 'R', 'm', 0,
  /* 4948 */ 'B', 'D', 'N', 'Z', 'L', 'R', 'm', 0,
  /* 4956 */ 'B', 'D', 'Z', 'm', 0,
  /* 4961 */ 'B', 'D', 'N', 'Z', 'm', 0,
  /* 4967 */ 'E', 'X', 'T', 'S', 'W', '_', '3', '2', '_', '6', '4', 'o', 0,
  /* 4980 */ 'A', 'D', 'D', '4', 'o', 0,
  /* 4986 */ 'E', 'X', 'T', 'S', 'B', '8', 'o', 0,
  /* 4994 */ 'A', 'D', 'D', 'C', '8', 'o', 0,
  /* 5001 */ 'A', 'N', 'D', 'C', '8', 'o', 0,
  /* 5008 */ 'S', 'U', 'B', 'F', 'C', '8', 'o', 0,
  /* 5016 */ 'O', 'R', 'C', '8', 'o', 0,
  /* 5022 */ 'A', 'D', 'D', '8', 'o', 0,
  /* 5028 */ 'N', 'A', 'N', 'D', '8', 'o', 0,
  /* 5035 */ 'A', 'D', 'D', 'E', '8', 'o', 0,
  /* 5042 */ 'S', 'U', 'B', 'F', 'E', '8', 'o', 0,
  /* 5050 */ 'A', 'D', 'D', 'M', 'E', '8', 'o', 0,
  /* 5058 */ 'S', 'U', 'B', 'F', 'M', 'E', '8', 'o', 0,
  /* 5067 */ 'A', 'D', 'D', 'Z', 'E', '8', 'o', 0,
  /* 5075 */ 'S', 'U', 'B', 'F', 'Z', 'E', '8', 'o', 0,
  /* 5084 */ 'S', 'U', 'B', 'F', '8', 'o', 0,
  /* 5091 */ 'N', 'E', 'G', '8', 'o', 0,
  /* 5097 */ 'E', 'X', 'T', 'S', 'H', '8', 'o', 0,
  /* 5105 */ 'R', 'L', 'W', 'I', 'N', 'M', '8', 'o', 0,
  /* 5114 */ 'N', 'O', 'R', '8', 'o', 0,
  /* 5120 */ 'X', 'O', 'R', '8', 'o', 0,
  /* 5126 */ 'E', 'Q', 'V', '8', 'o', 0,
  /* 5132 */ 'V', 'C', 'M', 'P', 'G', 'T', 'S', 'B', 'o', 0,
  /* 5142 */ 'E', 'X', 'T', 'S', 'B', 'o', 0,
  /* 5149 */ 'V', 'C', 'M', 'P', 'E', 'Q', 'U', 'B', 'o', 0,
  /* 5159 */ 'F', 'S', 'U', 'B', 'o', 0,
  /* 5165 */ 'F', 'M', 'S', 'U', 'B', 'o', 0,
  /* 5172 */ 'F', 'N', 'M', 'S', 'U', 'B', 'o', 0,
  /* 5180 */ 'V', 'C', 'M', 'P', 'G', 'T', 'U', 'B', 'o', 0,
  /* 5190 */ 'A', 'D', 'D', 'C', 'o', 0,
  /* 5196 */ 'A', 'N', 'D', 'C', 'o', 0,
  /* 5202 */ 'S', 'U', 'B', 'F', 'C', 'o', 0,
  /* 5209 */ 'S', 'U', 'B', 'I', 'C', 'o', 0,
  /* 5216 */ 'A', 'D', 'D', 'I', 'C', 'o', 0,
  /* 5223 */ 'R', 'L', 'D', 'I', 'C', 'o', 0,
  /* 5230 */ 'O', 'R', 'C', 'o', 0,
  /* 5235 */ 'S', 'R', 'A', 'D', 'o', 0,
  /* 5241 */ 'F', 'A', 'D', 'D', 'o', 0,
  /* 5247 */ 'F', 'M', 'A', 'D', 'D', 'o', 0,
  /* 5254 */ 'F', 'N', 'M', 'A', 'D', 'D', 'o', 0,
  /* 5262 */ 'F', 'N', 'E', 'G', 'D', 'o', 0,
  /* 5269 */ 'M', 'U', 'L', 'H', 'D', 'o', 0,
  /* 5276 */ 'F', 'C', 'F', 'I', 'D', 'o', 0,
  /* 5283 */ 'F', 'S', 'E', 'L', 'D', 'o', 0,
  /* 5290 */ 'M', 'U', 'L', 'L', 'D', 'o', 0,
  /* 5297 */ 'S', 'L', 'D', 'o', 0,
  /* 5302 */ 'F', 'R', 'I', 'M', 'D', 'o', 0,
  /* 5309 */ 'N', 'A', 'N', 'D', 'o', 0,
  /* 5315 */ 'F', 'C', 'P', 'S', 'G', 'N', 'D', 'o', 0,
  /* 5324 */ 'F', 'R', 'I', 'N', 'D', 'o', 0,
  /* 5331 */ 'F', 'R', 'I', 'P', 'D', 'o', 0,
  /* 5338 */ 'S', 'R', 'D', 'o', 0,
  /* 5343 */ 'F', 'A', 'B', 'S', 'D', 'o', 0,
  /* 5350 */ 'F', 'N', 'A', 'B', 'S', 'D', 'o', 0,
  /* 5358 */ 'P', 'O', 'P', 'C', 'N', 'T', 'D', 'o', 0,
  /* 5367 */ 'D', 'I', 'V', 'D', 'o', 0,
  /* 5373 */ 'F', 'R', 'I', 'Z', 'D', 'o', 0,
  /* 5380 */ 'C', 'N', 'T', 'L', 'Z', 'D', 'o', 0,
  /* 5388 */ 'A', 'D', 'D', 'E', 'o', 0,
  /* 5394 */ 'S', 'U', 'B', 'F', 'E', 'o', 0,
  /* 5401 */ 'A', 'D', 'D', 'M', 'E', 'o', 0,
  /* 5408 */ 'S', 'U', 'B', 'F', 'M', 'E', 'o', 0,
  /* 5416 */ 'F', 'R', 'E', 'o', 0,
  /* 5421 */ 'F', 'R', 'S', 'Q', 'R', 'T', 'E', 'o', 0,
  /* 5430 */ 'A', 'D', 'D', 'Z', 'E', 'o', 0,
  /* 5437 */ 'S', 'U', 'B', 'F', 'Z', 'E', 'o', 0,
  /* 5445 */ 'S', 'U', 'B', 'F', 'o', 0,
  /* 5451 */ 'N', 'E', 'G', 'o', 0,
  /* 5456 */ 'V', 'C', 'M', 'P', 'G', 'T', 'S', 'H', 'o', 0,
  /* 5466 */ 'E', 'X', 'T', 'S', 'H', 'o', 0,
  /* 5473 */ 'V', 'C', 'M', 'P', 'E', 'Q', 'U', 'H', 'o', 0,
  /* 5483 */ 'V', 'C', 'M', 'P', 'G', 'T', 'U', 'H', 'o', 0,
  /* 5493 */ 'S', 'R', 'A', 'D', 'I', 'o', 0,
  /* 5500 */ 'C', 'L', 'R', 'L', 'S', 'L', 'D', 'I', 'o', 0,
  /* 5510 */ 'E', 'X', 'T', 'L', 'D', 'I', 'o', 0,
  /* 5518 */ 'A', 'N', 'D', 'I', 'o', 0,
  /* 5524 */ 'C', 'L', 'R', 'R', 'D', 'I', 'o', 0,
  /* 5532 */ 'I', 'N', 'S', 'R', 'D', 'I', 'o', 0,
  /* 5540 */ 'R', 'O', 'T', 'R', 'D', 'I', 'o', 0,
  /* 5548 */ 'E', 'X', 'T', 'R', 'D', 'I', 'o', 0,
  /* 5556 */ 'R', 'L', 'D', 'I', 'M', 'I', 'o', 0,
  /* 5564 */ 'R', 'L', 'W', 'I', 'M', 'I', 'o', 0,
  /* 5572 */ 'S', 'R', 'A', 'W', 'I', 'o', 0,
  /* 5579 */ 'C', 'L', 'R', 'L', 'S', 'L', 'W', 'I', 'o', 0,
  /* 5589 */ 'I', 'N', 'S', 'L', 'W', 'I', 'o', 0,
  /* 5597 */ 'E', 'X', 'T', 'L', 'W', 'I', 'o', 0,
  /* 5605 */ 'C', 'L', 'R', 'R', 'W', 'I', 'o', 0,
  /* 5613 */ 'I', 'N', 'S', 'R', 'W', 'I', 'o', 0,
  /* 5621 */ 'R', 'O', 'T', 'R', 'W', 'I', 'o', 0,
  /* 5629 */ 'E', 'X', 'T', 'R', 'W', 'I', 'o', 0,
  /* 5637 */ 'R', 'L', 'D', 'C', 'L', 'o', 0,
  /* 5644 */ 'R', 'L', 'D', 'I', 'C', 'L', 'o', 0,
  /* 5652 */ 'F', 'M', 'U', 'L', 'o', 0,
  /* 5658 */ 'R', 'L', 'W', 'I', 'N', 'M', 'o', 0,
  /* 5666 */ 'R', 'L', 'W', 'N', 'M', 'o', 0,
  /* 5673 */ 'V', 'C', 'M', 'P', 'B', 'F', 'P', 'o', 0,
  /* 5682 */ 'V', 'C', 'M', 'P', 'G', 'E', 'F', 'P', 'o', 0,
  /* 5692 */ 'V', 'C', 'M', 'P', 'E', 'Q', 'F', 'P', 'o', 0,
  /* 5702 */ 'V', 'C', 'M', 'P', 'G', 'T', 'F', 'P', 'o', 0,
  /* 5712 */ 'F', 'R', 'S', 'P', 'o', 0,
  /* 5718 */ 'R', 'L', 'D', 'C', 'R', 'o', 0,
  /* 5725 */ 'R', 'L', 'D', 'I', 'C', 'R', 'o', 0,
  /* 5733 */ 'F', 'M', 'R', 'o', 0,
  /* 5738 */ 'N', 'O', 'R', 'o', 0,
  /* 5743 */ 'X', 'O', 'R', 'o', 0,
  /* 5748 */ 'F', 'S', 'U', 'B', 'S', 'o', 0,
  /* 5755 */ 'F', 'M', 'S', 'U', 'B', 'S', 'o', 0,
  /* 5763 */ 'F', 'N', 'M', 'S', 'U', 'B', 'S', 'o', 0,
  /* 5772 */ 'F', 'A', 'D', 'D', 'S', 'o', 0,
  /* 5779 */ 'F', 'M', 'A', 'D', 'D', 'S', 'o', 0,
  /* 5787 */ 'F', 'N', 'M', 'A', 'D', 'D', 'S', 'o', 0,
  /* 5796 */ 'F', 'C', 'F', 'I', 'D', 'S', 'o', 0,
  /* 5804 */ 'F', 'R', 'E', 'S', 'o', 0,
  /* 5810 */ 'F', 'R', 'S', 'Q', 'R', 'T', 'E', 'S', 'o', 0,
  /* 5820 */ 'F', 'N', 'E', 'G', 'S', 'o', 0,
  /* 5827 */ 'A', 'N', 'D', 'I', 'S', 'o', 0,
  /* 5834 */ 'F', 'S', 'E', 'L', 'S', 'o', 0,
  /* 5841 */ 'F', 'M', 'U', 'L', 'S', 'o', 0,
  /* 5848 */ 'F', 'R', 'I', 'M', 'S', 'o', 0,
  /* 5855 */ 'F', 'C', 'P', 'S', 'G', 'N', 'S', 'o', 0,
  /* 5864 */ 'F', 'R', 'I', 'N', 'S', 'o', 0,
  /* 5871 */ 'F', 'R', 'I', 'P', 'S', 'o', 0,
  /* 5878 */ 'F', 'A', 'B', 'S', 'S', 'o', 0,
  /* 5885 */ 'F', 'N', 'A', 'B', 'S', 'S', 'o', 0,
  /* 5893 */ 'F', 'S', 'Q', 'R', 'T', 'S', 'o', 0,
  /* 5901 */ 'F', 'C', 'F', 'I', 'D', 'U', 'S', 'o', 0,
  /* 5910 */ 'F', 'D', 'I', 'V', 'S', 'o', 0,
  /* 5917 */ 'F', 'R', 'I', 'Z', 'S', 'o', 0,
  /* 5924 */ 'F', 'S', 'Q', 'R', 'T', 'o', 0,
  /* 5931 */ 'M', 'U', 'L', 'H', 'D', 'U', 'o', 0,
  /* 5939 */ 'F', 'C', 'F', 'I', 'D', 'U', 'o', 0,
  /* 5947 */ 'D', 'I', 'V', 'D', 'U', 'o', 0,
  /* 5954 */ 'M', 'U', 'L', 'H', 'W', 'U', 'o', 0,
  /* 5962 */ 'D', 'I', 'V', 'W', 'U', 'o', 0,
  /* 5969 */ 'F', 'D', 'I', 'V', 'o', 0,
  /* 5975 */ 'E', 'Q', 'V', 'o', 0,
  /* 5980 */ 'S', 'R', 'A', 'W', 'o', 0,
  /* 5986 */ 'M', 'U', 'L', 'H', 'W', 'o', 0,
  /* 5993 */ 'M', 'U', 'L', 'L', 'W', 'o', 0,
  /* 6000 */ 'S', 'L', 'W', 'o', 0,
  /* 6005 */ 'S', 'R', 'W', 'o', 0,
  /* 6010 */ 'V', 'C', 'M', 'P', 'G', 'T', 'S', 'W', 'o', 0,
  /* 6020 */ 'E', 'X', 'T', 'S', 'W', 'o', 0,
  /* 6027 */ 'P', 'O', 'P', 'C', 'N', 'T', 'W', 'o', 0,
  /* 6036 */ 'V', 'C', 'M', 'P', 'E', 'Q', 'U', 'W', 'o', 0,
  /* 6046 */ 'V', 'C', 'M', 'P', 'G', 'T', 'U', 'W', 'o', 0,
  /* 6056 */ 'D', 'I', 'V', 'W', 'o', 0,
  /* 6062 */ 'C', 'N', 'T', 'L', 'Z', 'W', 'o', 0,
  /* 6070 */ 'F', 'C', 'T', 'I', 'D', 'Z', 'o', 0,
  /* 6078 */ 'F', 'C', 'T', 'I', 'D', 'U', 'Z', 'o', 0,
  /* 6087 */ 'F', 'C', 'T', 'I', 'W', 'U', 'Z', 'o', 0,
  /* 6096 */ 'F', 'C', 'T', 'I', 'W', 'Z', 'o', 0,
  /* 6104 */ 'B', 'D', 'Z', 'L', 'A', 'p', 0,
  /* 6111 */ 'B', 'D', 'N', 'Z', 'L', 'A', 'p', 0,
  /* 6119 */ 'B', 'D', 'Z', 'A', 'p', 0,
  /* 6125 */ 'B', 'D', 'N', 'Z', 'A', 'p', 0,
  /* 6132 */ 'B', 'D', 'Z', 'L', 'R', 'L', 'p', 0,
  /* 6140 */ 'B', 'D', 'N', 'Z', 'L', 'R', 'L', 'p', 0,
  /* 6149 */ 'B', 'D', 'Z', 'L', 'p', 0,
  /* 6155 */ 'B', 'D', 'N', 'Z', 'L', 'p', 0,
  /* 6162 */ 'B', 'D', 'Z', 'L', 'R', 'p', 0,
  /* 6169 */ 'B', 'D', 'N', 'Z', 'L', 'R', 'p', 0,
  /* 6177 */ 'B', 'D', 'Z', 'p', 0,
  /* 6182 */ 'B', 'D', 'N', 'Z', 'p', 0,
  /* 6188 */ 'M', 'T', 'C', 'T', 'R', '8', 'l', 'o', 'o', 'p', 0,
  /* 6199 */ 'M', 'T', 'C', 'T', 'R', 'l', 'o', 'o', 'p', 0,
  /* 6209 */ 'E', 'H', '_', 'S', 'j', 'L', 'j', '_', 'S', 'e', 't', 'u', 'p', 0,
  /* 6223 */ 'B', 'C', 'L', 'a', 'l', 'w', 'a', 'y', 's', 0,
  /* 6233 */ 'M', 'F', 'V', 'R', 'S', 'A', 'V', 'E', 'v', 0,
  /* 6243 */ 'M', 'T', 'V', 'R', 'S', 'A', 'V', 'E', 'v', 0,
  /* 6253 */ 'L', 'A', 'x', 0,
  /* 6257 */ 'F', 'A', 'D', 'D', 'r', 't', 'z', 0,
};

extern const unsigned PPCInstrNameIndices[] = {
    2640U, 3082U, 2794U, 2807U, 2785U, 2833U, 2310U, 2325U, 
    2262U, 2339U, 3838U, 2169U, 2113U, 4752U, 2137U, 4066U, 
    2021U, 533U, 4980U, 812U, 3778U, 5022U, 1837U, 763U, 
    4994U, 5190U, 2126U, 823U, 5035U, 5388U, 2574U, 925U, 
    1867U, 782U, 5216U, 3756U, 1224U, 1542U, 1526U, 1500U, 
    1513U, 1489U, 2967U, 2933U, 2944U, 2924U, 2144U, 836U, 
    5050U, 5401U, 2239U, 851U, 5067U, 5430U, 3130U, 3309U, 
    2006U, 818U, 5029U, 1844U, 769U, 5001U, 5196U, 5827U, 
    1455U, 5518U, 1448U, 5310U, 661U, 152U, 358U, 1049U, 
    584U, 75U, 281U, 976U, 625U, 116U, 322U, 1015U, 
    604U, 95U, 301U, 995U, 701U, 192U, 398U, 1087U, 
    564U, 55U, 261U, 944U, 681U, 172U, 378U, 1068U, 
    645U, 136U, 342U, 1034U, 1606U, 1465U, 1833U, 1480U, 
    2767U, 1566U, 3506U, 1203U, 2872U, 1122U, 3405U, 2844U, 
    6223U, 3500U, 1197U, 2865U, 1115U, 4787U, 1401U, 1594U, 
    4904U, 6125U, 2911U, 1578U, 4890U, 6111U, 3426U, 1163U, 
    2857U, 4919U, 6140U, 4948U, 6169U, 4934U, 6155U, 4961U, 
    6182U, 4766U, 1391U, 1589U, 4898U, 6119U, 2906U, 1572U, 
    4883U, 6104U, 3420U, 1156U, 2850U, 4911U, 6132U, 4941U, 
    6162U, 4928U, 6149U, 4956U, 6177U, 2759U, 1105U, 3296U, 
    3794U, 3786U, 1556U, 733U, 3287U, 3400U, 2838U, 2586U, 
    5500U, 2698U, 5579U, 2608U, 5524U, 2727U, 5605U, 2054U, 
    2602U, 1987U, 2579U, 4264U, 2691U, 4289U, 2721U, 2106U, 
    5380U, 4423U, 6062U, 4022U, 4029U, 2010U, 1842U, 4226U, 
    2003U, 3448U, 3459U, 1901U, 4046U, 4038U, 3468U, 1463U, 
    2252U, 2553U, 4087U, 4017U, 4097U, 4757U, 2900U, 2095U, 
    4166U, 5947U, 5367U, 4418U, 4200U, 5962U, 6056U, 3868U, 
    2826U, 4093U, 417U, 4104U, 423U, 4115U, 438U, 4110U, 
    431U, 1892U, 797U, 226U, 498U, 244U, 516U, 6209U, 
    3147U, 4228U, 1285U, 5126U, 5975U, 2595U, 5510U, 2714U, 
    5597U, 2629U, 5548U, 2748U, 5629U, 1727U, 745U, 447U, 
    4986U, 5142U, 2474U, 913U, 460U, 5097U, 5466U, 4331U, 
    486U, 4967U, 6020U, 2063U, 5343U, 3855U, 5878U, 1930U, 
    3595U, 5772U, 5241U, 6257U, 1969U, 3616U, 5796U, 4150U, 
    3895U, 5901U, 5939U, 5276U, 2088U, 3919U, 2034U, 5315U, 
    3818U, 5855U, 4792U, 6078U, 4770U, 6070U, 4800U, 6087U, 
    4808U, 6096U, 4221U, 3942U, 5910U, 5969U, 1935U, 3601U, 
    5779U, 5247U, 3444U, 5733U, 1800U, 3580U, 5755U, 5165U, 
    2884U, 3806U, 5841U, 5652U, 2069U, 5350U, 3861U, 5885U, 
    1957U, 5262U, 3664U, 5820U, 1941U, 3608U, 5787U, 5254U, 
    1806U, 3587U, 5763U, 5172U, 2157U, 3636U, 5804U, 5416U, 
    1997U, 5302U, 3812U, 5848U, 2042U, 5324U, 3826U, 5864U, 
    2048U, 5331U, 3832U, 5871U, 2100U, 5373U, 4011U, 5917U, 
    3304U, 5712U, 2161U, 3641U, 5810U, 5421U, 1975U, 5283U, 
    3772U, 5834U, 4081U, 3888U, 5893U, 5924U, 1795U, 3574U, 
    5748U, 5159U, 3389U, 3376U, 2558U, 2707U, 5589U, 2615U, 
    5532U, 2734U, 5613U, 2816U, 1109U, 1886U, 1557U, 6253U, 
    4762U, 1386U, 4206U, 1267U, 4678U, 1341U, 4730U, 1368U, 
    1978U, 4537U, 4549U, 4157U, 4636U, 4488U, 2955U, 4825U, 
    4819U, 4057U, 2676U, 2917U, 4836U, 1948U, 4132U, 4623U, 
    4477U, 4435U, 4740U, 3655U, 4177U, 4659U, 4594U, 1485U, 
    728U, 4122U, 1243U, 4605U, 1313U, 4430U, 1295U, 4562U, 
    4777U, 1396U, 4211U, 1273U, 4684U, 1348U, 4735U, 1374U, 
    2647U, 934U, 3762U, 1231U, 4280U, 4447U, 4497U, 4705U, 
    2879U, 3491U, 4696U, 2889U, 1585U, 4543U, 4611U, 4442U, 
    218U, 211U, 4575U, 4815U, 1407U, 4216U, 1279U, 4690U, 
    1355U, 4747U, 1380U, 2275U, 3330U, 1138U, 3512U, 1210U, 
    3650U, 3410U, 1144U, 2280U, 872U, 3479U, 1740U, 752U, 
    2179U, 6233U, 3342U, 2294U, 888U, 3518U, 1217U, 6188U, 
    6199U, 0U, 48U, 2300U, 3415U, 1150U, 2287U, 880U, 
    3485U, 2188U, 6243U, 3349U, 1963U, 4143U, 5931U, 5269U, 
    4245U, 4188U, 5954U, 5986U, 1981U, 5290U, 2644U, 931U, 
    4258U, 5993U, 3433U, 1171U, 2005U, 817U, 5028U, 5309U, 
    2306U, 908U, 5091U, 5451U, 3292U, 3450U, 1183U, 5114U, 
    5738U, 3451U, 1184U, 5115U, 1903U, 807U, 5016U, 5230U, 
    2672U, 939U, 3767U, 1237U, 5739U, 2076U, 5358U, 4351U, 
    6027U, 3356U, 2197U, 2772U, 5637U, 3324U, 5718U, 1873U, 
    2778U, 473U, 5644U, 3335U, 5725U, 5223U, 2650U, 5556U, 
    2657U, 5564U, 3063U, 1130U, 5105U, 5658U, 3070U, 5666U, 
    2622U, 5540U, 2741U, 5621U, 1922U, 538U, 895U, 551U, 
    963U, 1907U, 1993U, 2590U, 5504U, 5297U, 4276U, 2702U, 
    5583U, 6000U, 3367U, 2226U, 1925U, 2568U, 5493U, 5235U, 
    4233U, 2685U, 5572U, 5980U, 2059U, 2617U, 5534U, 5338U, 
    4295U, 2736U, 5615U, 6005U, 1752U, 758U, 4127U, 1249U, 
    4617U, 1320U, 4460U, 1301U, 2084U, 4555U, 4465U, 4161U, 
    4641U, 4492U, 1952U, 4137U, 4629U, 4482U, 4718U, 3659U, 
    4182U, 4665U, 4599U, 2494U, 920U, 4568U, 4172U, 1255U, 
    4653U, 1327U, 4510U, 1307U, 4284U, 4453U, 4503U, 4711U, 
    4700U, 2894U, 4359U, 1290U, 4581U, 4471U, 4195U, 1261U, 
    4672U, 1334U, 4725U, 1362U, 2257U, 866U, 5084U, 1855U, 
    775U, 5008U, 5202U, 2131U, 829U, 5042U, 5394U, 1879U, 
    789U, 2150U, 843U, 5058U, 5408U, 2245U, 858U, 5075U, 
    5437U, 5445U, 2563U, 1861U, 5209U, 3750U, 1887U, 1628U, 
    738U, 1468U, 720U, 3496U, 1193U, 4850U, 1412U, 4861U, 
    1424U, 4872U, 1436U, 2081U, 2636U, 3163U, 4348U, 2755U, 
    2212U, 4371U, 3200U, 3541U, 3708U, 3965U, 2996U, 3566U, 
    3040U, 3733U, 3116U, 3989U, 2016U, 1849U, 1671U, 2418U, 
    4299U, 1764U, 2506U, 4379U, 4588U, 32U, 4647U, 40U, 
    3168U, 5673U, 3256U, 5692U, 1786U, 5149U, 2528U, 5473U, 
    4393U, 6036U, 3215U, 5682U, 3265U, 5702U, 1718U, 5132U, 
    2465U, 5456U, 4322U, 6010U, 1813U, 5180U, 2537U, 5483U, 
    4402U, 6046U, 3997U, 14U, 4004U, 23U, 3230U, 3207U, 
    3192U, 3274U, 1733U, 2480U, 4337U, 1822U, 2546U, 4411U, 
    3687U, 3697U, 3249U, 1703U, 2450U, 4315U, 1771U, 2513U, 
    4386U, 3030U, 1614U, 2367U, 4238U, 1621U, 2374U, 4251U, 
    2979U, 3013U, 3716U, 3004U, 3048U, 3741U, 1649U, 2396U, 
    1756U, 2498U, 1710U, 2457U, 1778U, 2520U, 3176U, 3454U, 
    3464U, 3076U, 4523U, 3872U, 3903U, 3880U, 3926U, 3092U, 
    3911U, 3100U, 3934U, 3224U, 3057U, 3124U, 3281U, 4781U, 
    1634U, 2381U, 4270U, 3239U, 2821U, 2880U, 1639U, 2664U, 
    2386U, 3153U, 4275U, 1745U, 2487U, 1686U, 2433U, 4306U, 
    4344U, 3492U, 1608U, 2361U, 4232U, 1644U, 2391U, 3158U, 
    4294U, 4363U, 3185U, 3533U, 3679U, 3957U, 2988U, 3558U, 
    3022U, 3725U, 3108U, 3981U, 3948U, 3524U, 3670U, 3549U, 
    3973U, 4515U, 1678U, 2425U, 4529U, 1695U, 2442U, 3474U, 
    7U, 1600U, 2353U, 3623U, 1657U, 2404U, 4052U, 3470U, 
    1188U, 5120U, 2671U, 938U, 3766U, 1236U, 5743U, 1829U, 
    1475U, 3505U, 2871U, 2762U, 1560U, 3404U, 2843U, 
};

static inline void InitPPCMCInstrInfo(MCInstrInfo *II) {
  II->InitMCInstrInfo(PPCInsts, PPCInstrNameIndices, PPCInstrNameData, 863);
}

} // End llvm namespace 
#endif // GET_INSTRINFO_MC_DESC


#ifdef GET_INSTRINFO_HEADER
#undef GET_INSTRINFO_HEADER
namespace llvm {
struct PPCGenInstrInfo : public TargetInstrInfo {
  explicit PPCGenInstrInfo(int SO = -1, int DO = -1);
};
} // End llvm namespace 
#endif // GET_INSTRINFO_HEADER


#ifdef GET_INSTRINFO_CTOR
#undef GET_INSTRINFO_CTOR
namespace llvm {
extern const MCInstrDesc PPCInsts[];
extern const unsigned PPCInstrNameIndices[];
extern const char PPCInstrNameData[];
PPCGenInstrInfo::PPCGenInstrInfo(int SO, int DO)
  : TargetInstrInfo(SO, DO) {
  InitMCInstrInfo(PPCInsts, PPCInstrNameIndices, PPCInstrNameData, 863);
}
} // End llvm namespace 
#endif // GET_INSTRINFO_CTOR

#ifdef GET_INSTRINFO_OPERAND_ENUM
#undef GET_INSTRINFO_OPERAND_ENUM
namespace llvm {namespace PPC {
namespace OpName { 
enum {
OPERAND_LAST
};
} // End namespace OpName
} // End namespace PPC
} // End namespace llvm
#endif //GET_INSTRINFO_OPERAND_ENUM
#ifdef GET_INSTRINFO_NAMED_OPS
#undef GET_INSTRINFO_NAMED_OPS
namespace llvm {namespace PPC {
int16_t getNamedOperandIdx(uint16_t Opcode, uint16_t NamedIdx) {
  return -1;
}
} // End namespace PPC
} // End namespace llvm
#endif //GET_INSTRINFO_NAMED_OPS
#ifdef GET_INSTRMAP_INFO
#undef GET_INSTRMAP_INFO
namespace llvm {

namespace PPC {

enum RC {
	RC_0,
	RC_1
};

// getNonRecordFormOpcode
int getNonRecordFormOpcode(uint16_t Opcode) {
static const uint16_t getNonRecordFormOpcodeTable[][2] = {
  { PPC::ADD4o, PPC::ADD4 },
  { PPC::ADD8o, PPC::ADD8 },
  { PPC::ADDC8o, PPC::ADDC8 },
  { PPC::ADDCo, PPC::ADDC },
  { PPC::ADDE8o, PPC::ADDE8 },
  { PPC::ADDEo, PPC::ADDE },
  { PPC::ADDICo, PPC::ADDIC },
  { PPC::ADDME8o, PPC::ADDME8 },
  { PPC::ADDMEo, PPC::ADDME },
  { PPC::ADDZE8o, PPC::ADDZE8 },
  { PPC::ADDZEo, PPC::ADDZE },
  { PPC::AND8o, PPC::AND8 },
  { PPC::ANDC8o, PPC::ANDC8 },
  { PPC::ANDCo, PPC::ANDC },
  { PPC::ANDo, PPC::AND },
  { PPC::CNTLZDo, PPC::CNTLZD },
  { PPC::CNTLZWo, PPC::CNTLZW },
  { PPC::DIVDUo, PPC::DIVDU },
  { PPC::DIVDo, PPC::DIVD },
  { PPC::DIVWUo, PPC::DIVWU },
  { PPC::DIVWo, PPC::DIVW },
  { PPC::EQV8o, PPC::EQV8 },
  { PPC::EQVo, PPC::EQV },
  { PPC::EXTSB8o, PPC::EXTSB8 },
  { PPC::EXTSBo, PPC::EXTSB },
  { PPC::EXTSH8o, PPC::EXTSH8 },
  { PPC::EXTSHo, PPC::EXTSH },
  { PPC::EXTSW_32_64o, PPC::EXTSW_32_64 },
  { PPC::EXTSWo, PPC::EXTSW },
  { PPC::FABSDo, PPC::FABSD },
  { PPC::FABSSo, PPC::FABSS },
  { PPC::FADDSo, PPC::FADDS },
  { PPC::FADDo, PPC::FADD },
  { PPC::FCFIDSo, PPC::FCFIDS },
  { PPC::FCFIDUSo, PPC::FCFIDUS },
  { PPC::FCFIDUo, PPC::FCFIDU },
  { PPC::FCFIDo, PPC::FCFID },
  { PPC::FCPSGNDo, PPC::FCPSGND },
  { PPC::FCPSGNSo, PPC::FCPSGNS },
  { PPC::FCTIDUZo, PPC::FCTIDUZ },
  { PPC::FCTIDZo, PPC::FCTIDZ },
  { PPC::FCTIWUZo, PPC::FCTIWUZ },
  { PPC::FCTIWZo, PPC::FCTIWZ },
  { PPC::FDIVSo, PPC::FDIVS },
  { PPC::FDIVo, PPC::FDIV },
  { PPC::FMADDSo, PPC::FMADDS },
  { PPC::FMADDo, PPC::FMADD },
  { PPC::FMRo, PPC::FMR },
  { PPC::FMSUBSo, PPC::FMSUBS },
  { PPC::FMSUBo, PPC::FMSUB },
  { PPC::FMULSo, PPC::FMULS },
  { PPC::FMULo, PPC::FMUL },
  { PPC::FNABSDo, PPC::FNABSD },
  { PPC::FNABSSo, PPC::FNABSS },
  { PPC::FNEGDo, PPC::FNEGD },
  { PPC::FNEGSo, PPC::FNEGS },
  { PPC::FNMADDSo, PPC::FNMADDS },
  { PPC::FNMADDo, PPC::FNMADD },
  { PPC::FNMSUBSo, PPC::FNMSUBS },
  { PPC::FNMSUBo, PPC::FNMSUB },
  { PPC::FRESo, PPC::FRES },
  { PPC::FREo, PPC::FRE },
  { PPC::FRIMDo, PPC::FRIMD },
  { PPC::FRIMSo, PPC::FRIMS },
  { PPC::FRINDo, PPC::FRIND },
  { PPC::FRINSo, PPC::FRINS },
  { PPC::FRIPDo, PPC::FRIPD },
  { PPC::FRIPSo, PPC::FRIPS },
  { PPC::FRIZDo, PPC::FRIZD },
  { PPC::FRIZSo, PPC::FRIZS },
  { PPC::FRSPo, PPC::FRSP },
  { PPC::FRSQRTESo, PPC::FRSQRTES },
  { PPC::FRSQRTEo, PPC::FRSQRTE },
  { PPC::FSELDo, PPC::FSELD },
  { PPC::FSELSo, PPC::FSELS },
  { PPC::FSQRTSo, PPC::FSQRTS },
  { PPC::FSQRTo, PPC::FSQRT },
  { PPC::FSUBSo, PPC::FSUBS },
  { PPC::FSUBo, PPC::FSUB },
  { PPC::MULHDUo, PPC::MULHDU },
  { PPC::MULHDo, PPC::MULHD },
  { PPC::MULHWUo, PPC::MULHWU },
  { PPC::MULHWo, PPC::MULHW },
  { PPC::MULLDo, PPC::MULLD },
  { PPC::MULLWo, PPC::MULLW },
  { PPC::NAND8o, PPC::NAND8 },
  { PPC::NANDo, PPC::NAND },
  { PPC::NEG8o, PPC::NEG8 },
  { PPC::NEGo, PPC::NEG },
  { PPC::NOR8o, PPC::NOR8 },
  { PPC::NORo, PPC::NOR },
  { PPC::OR8o, PPC::OR8 },
  { PPC::ORC8o, PPC::ORC8 },
  { PPC::ORCo, PPC::ORC },
  { PPC::ORo, PPC::OR },
  { PPC::POPCNTDo, PPC::POPCNTD },
  { PPC::POPCNTWo, PPC::POPCNTW },
  { PPC::RLDCLo, PPC::RLDCL },
  { PPC::RLDCRo, PPC::RLDCR },
  { PPC::RLDICLo, PPC::RLDICL },
  { PPC::RLDICRo, PPC::RLDICR },
  { PPC::RLDICo, PPC::RLDIC },
  { PPC::RLDIMIo, PPC::RLDIMI },
  { PPC::RLWIMIo, PPC::RLWIMI },
  { PPC::RLWINM8o, PPC::RLWINM8 },
  { PPC::RLWINMo, PPC::RLWINM },
  { PPC::RLWNMo, PPC::RLWNM },
  { PPC::SLDo, PPC::SLD },
  { PPC::SLWo, PPC::SLW },
  { PPC::SRADIo, PPC::SRADI },
  { PPC::SRADo, PPC::SRAD },
  { PPC::SRAWIo, PPC::SRAWI },
  { PPC::SRAWo, PPC::SRAW },
  { PPC::SRDo, PPC::SRD },
  { PPC::SRWo, PPC::SRW },
  { PPC::SUBF8o, PPC::SUBF8 },
  { PPC::SUBFC8o, PPC::SUBFC8 },
  { PPC::SUBFCo, PPC::SUBFC },
  { PPC::SUBFE8o, PPC::SUBFE8 },
  { PPC::SUBFEo, PPC::SUBFE },
  { PPC::SUBFME8o, PPC::SUBFME8 },
  { PPC::SUBFMEo, PPC::SUBFME },
  { PPC::SUBFZE8o, PPC::SUBFZE8 },
  { PPC::SUBFZEo, PPC::SUBFZE },
  { PPC::SUBFo, PPC::SUBF },
  { PPC::XOR8o, PPC::XOR8 },
  { PPC::XORo, PPC::XOR },
}; // End of getNonRecordFormOpcodeTable

  unsigned mid;
  unsigned start = 0;
  unsigned end = 127;
  while (start < end) {
    mid = start + (end - start)/2;
    if (Opcode == getNonRecordFormOpcodeTable[mid][0]) {
      break;
    }
    if (Opcode < getNonRecordFormOpcodeTable[mid][0])
      end = mid;
    else
      start = mid + 1;
  }
  if (start == end)
    return -1; // Instruction doesn't exist in this table.

  return getNonRecordFormOpcodeTable[mid][1];
}

// getRecordFormOpcode
int getRecordFormOpcode(uint16_t Opcode) {
static const uint16_t getRecordFormOpcodeTable[][2] = {
  { PPC::ADD4, PPC::ADD4o },
  { PPC::ADD8, PPC::ADD8o },
  { PPC::ADDC, PPC::ADDCo },
  { PPC::ADDC8, PPC::ADDC8o },
  { PPC::ADDE, PPC::ADDEo },
  { PPC::ADDE8, PPC::ADDE8o },
  { PPC::ADDIC, PPC::ADDICo },
  { PPC::ADDME, PPC::ADDMEo },
  { PPC::ADDME8, PPC::ADDME8o },
  { PPC::ADDZE, PPC::ADDZEo },
  { PPC::ADDZE8, PPC::ADDZE8o },
  { PPC::AND, PPC::ANDo },
  { PPC::AND8, PPC::AND8o },
  { PPC::ANDC, PPC::ANDCo },
  { PPC::ANDC8, PPC::ANDC8o },
  { PPC::CNTLZD, PPC::CNTLZDo },
  { PPC::CNTLZW, PPC::CNTLZWo },
  { PPC::DIVD, PPC::DIVDo },
  { PPC::DIVDU, PPC::DIVDUo },
  { PPC::DIVW, PPC::DIVWo },
  { PPC::DIVWU, PPC::DIVWUo },
  { PPC::EQV, PPC::EQVo },
  { PPC::EQV8, PPC::EQV8o },
  { PPC::EXTSB, PPC::EXTSBo },
  { PPC::EXTSB8, PPC::EXTSB8o },
  { PPC::EXTSH, PPC::EXTSHo },
  { PPC::EXTSH8, PPC::EXTSH8o },
  { PPC::EXTSW, PPC::EXTSWo },
  { PPC::EXTSW_32_64, PPC::EXTSW_32_64o },
  { PPC::FABSD, PPC::FABSDo },
  { PPC::FABSS, PPC::FABSSo },
  { PPC::FADD, PPC::FADDo },
  { PPC::FADDS, PPC::FADDSo },
  { PPC::FCFID, PPC::FCFIDo },
  { PPC::FCFIDS, PPC::FCFIDSo },
  { PPC::FCFIDU, PPC::FCFIDUo },
  { PPC::FCFIDUS, PPC::FCFIDUSo },
  { PPC::FCPSGND, PPC::FCPSGNDo },
  { PPC::FCPSGNS, PPC::FCPSGNSo },
  { PPC::FCTIDUZ, PPC::FCTIDUZo },
  { PPC::FCTIDZ, PPC::FCTIDZo },
  { PPC::FCTIWUZ, PPC::FCTIWUZo },
  { PPC::FCTIWZ, PPC::FCTIWZo },
  { PPC::FDIV, PPC::FDIVo },
  { PPC::FDIVS, PPC::FDIVSo },
  { PPC::FMADD, PPC::FMADDo },
  { PPC::FMADDS, PPC::FMADDSo },
  { PPC::FMR, PPC::FMRo },
  { PPC::FMSUB, PPC::FMSUBo },
  { PPC::FMSUBS, PPC::FMSUBSo },
  { PPC::FMUL, PPC::FMULo },
  { PPC::FMULS, PPC::FMULSo },
  { PPC::FNABSD, PPC::FNABSDo },
  { PPC::FNABSS, PPC::FNABSSo },
  { PPC::FNEGD, PPC::FNEGDo },
  { PPC::FNEGS, PPC::FNEGSo },
  { PPC::FNMADD, PPC::FNMADDo },
  { PPC::FNMADDS, PPC::FNMADDSo },
  { PPC::FNMSUB, PPC::FNMSUBo },
  { PPC::FNMSUBS, PPC::FNMSUBSo },
  { PPC::FRE, PPC::FREo },
  { PPC::FRES, PPC::FRESo },
  { PPC::FRIMD, PPC::FRIMDo },
  { PPC::FRIMS, PPC::FRIMSo },
  { PPC::FRIND, PPC::FRINDo },
  { PPC::FRINS, PPC::FRINSo },
  { PPC::FRIPD, PPC::FRIPDo },
  { PPC::FRIPS, PPC::FRIPSo },
  { PPC::FRIZD, PPC::FRIZDo },
  { PPC::FRIZS, PPC::FRIZSo },
  { PPC::FRSP, PPC::FRSPo },
  { PPC::FRSQRTE, PPC::FRSQRTEo },
  { PPC::FRSQRTES, PPC::FRSQRTESo },
  { PPC::FSELD, PPC::FSELDo },
  { PPC::FSELS, PPC::FSELSo },
  { PPC::FSQRT, PPC::FSQRTo },
  { PPC::FSQRTS, PPC::FSQRTSo },
  { PPC::FSUB, PPC::FSUBo },
  { PPC::FSUBS, PPC::FSUBSo },
  { PPC::MULHD, PPC::MULHDo },
  { PPC::MULHDU, PPC::MULHDUo },
  { PPC::MULHW, PPC::MULHWo },
  { PPC::MULHWU, PPC::MULHWUo },
  { PPC::MULLD, PPC::MULLDo },
  { PPC::MULLW, PPC::MULLWo },
  { PPC::NAND, PPC::NANDo },
  { PPC::NAND8, PPC::NAND8o },
  { PPC::NEG, PPC::NEGo },
  { PPC::NEG8, PPC::NEG8o },
  { PPC::NOR, PPC::NORo },
  { PPC::NOR8, PPC::NOR8o },
  { PPC::OR, PPC::ORo },
  { PPC::OR8, PPC::OR8o },
  { PPC::ORC, PPC::ORCo },
  { PPC::ORC8, PPC::ORC8o },
  { PPC::POPCNTD, PPC::POPCNTDo },
  { PPC::POPCNTW, PPC::POPCNTWo },
  { PPC::RLDCL, PPC::RLDCLo },
  { PPC::RLDCR, PPC::RLDCRo },
  { PPC::RLDIC, PPC::RLDICo },
  { PPC::RLDICL, PPC::RLDICLo },
  { PPC::RLDICR, PPC::RLDICRo },
  { PPC::RLDIMI, PPC::RLDIMIo },
  { PPC::RLWIMI, PPC::RLWIMIo },
  { PPC::RLWINM, PPC::RLWINMo },
  { PPC::RLWINM8, PPC::RLWINM8o },
  { PPC::RLWNM, PPC::RLWNMo },
  { PPC::SLD, PPC::SLDo },
  { PPC::SLW, PPC::SLWo },
  { PPC::SRAD, PPC::SRADo },
  { PPC::SRADI, PPC::SRADIo },
  { PPC::SRAW, PPC::SRAWo },
  { PPC::SRAWI, PPC::SRAWIo },
  { PPC::SRD, PPC::SRDo },
  { PPC::SRW, PPC::SRWo },
  { PPC::SUBF, PPC::SUBFo },
  { PPC::SUBF8, PPC::SUBF8o },
  { PPC::SUBFC, PPC::SUBFCo },
  { PPC::SUBFC8, PPC::SUBFC8o },
  { PPC::SUBFE, PPC::SUBFEo },
  { PPC::SUBFE8, PPC::SUBFE8o },
  { PPC::SUBFME, PPC::SUBFMEo },
  { PPC::SUBFME8, PPC::SUBFME8o },
  { PPC::SUBFZE, PPC::SUBFZEo },
  { PPC::SUBFZE8, PPC::SUBFZE8o },
  { PPC::XOR, PPC::XORo },
  { PPC::XOR8, PPC::XOR8o },
}; // End of getRecordFormOpcodeTable

  unsigned mid;
  unsigned start = 0;
  unsigned end = 127;
  while (start < end) {
    mid = start + (end - start)/2;
    if (Opcode == getRecordFormOpcodeTable[mid][0]) {
      break;
    }
    if (Opcode < getRecordFormOpcodeTable[mid][0])
      end = mid;
    else
      start = mid + 1;
  }
  if (start == end)
    return -1; // Instruction doesn't exist in this table.

  return getRecordFormOpcodeTable[mid][1];
}

} // End PPC namespace
} // End llvm namespace
#endif // GET_INSTRMAP_INFO

