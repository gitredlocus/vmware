/*===- TableGen'erated file -------------------------------------*- C++ -*-===*\
|*                                                                            *|
|*Assembly Writer Source Fragment                                             *|
|*                                                                            *|
|* Automatically generated file, do not edit!                                 *|
|*                                                                            *|
\*===----------------------------------------------------------------------===*/

/// printInstruction - This method is automatically generated by tablegen
/// from the instruction set description.
void ARMInstPrinter::printInstruction(const MCInst *MI, raw_ostream &O) {
  static const uint32_t OpInfo[] = {
    0U,	// PHI
    0U,	// INLINEASM
    0U,	// PROLOG_LABEL
    0U,	// EH_LABEL
    0U,	// GC_LABEL
    0U,	// KILL
    0U,	// EXTRACT_SUBREG
    0U,	// INSERT_SUBREG
    0U,	// IMPLICIT_DEF
    0U,	// SUBREG_TO_REG
    0U,	// COPY_TO_REGCLASS
    1080U,	// DBG_VALUE
    0U,	// REG_SEQUENCE
    0U,	// COPY
    1073U,	// BUNDLE
    1090U,	// LIFETIME_START
    1060U,	// LIFETIME_END
    0U,	// ABS
    5519U,	// ADCri
    5519U,	// ADCrr
    9615U,	// ADCrsi
    13711U,	// ADCrsr
    0U,	// ADDSri
    0U,	// ADDSrr
    0U,	// ADDSrsi
    0U,	// ADDSrsr
    5580U,	// ADDri
    5580U,	// ADDrr
    9676U,	// ADDrsi
    13772U,	// ADDrsr
    0U,	// ADJCALLSTACKDOWN
    0U,	// ADJCALLSTACKUP
    18575U,	// ADR
    5639U,	// ANDri
    5639U,	// ANDrr
    9735U,	// ANDrsi
    13831U,	// ANDrsr
    137405U,	// ASRi
    137405U,	// ASRr
    0U,	// ATOMADD6432
    0U,	// ATOMAND6432
    0U,	// ATOMCMPXCHG6432
    0U,	// ATOMIC_CMP_SWAP_I16
    0U,	// ATOMIC_CMP_SWAP_I32
    0U,	// ATOMIC_CMP_SWAP_I8
    0U,	// ATOMIC_LOAD_ADD_I16
    0U,	// ATOMIC_LOAD_ADD_I32
    0U,	// ATOMIC_LOAD_ADD_I8
    0U,	// ATOMIC_LOAD_AND_I16
    0U,	// ATOMIC_LOAD_AND_I32
    0U,	// ATOMIC_LOAD_AND_I8
    0U,	// ATOMIC_LOAD_MAX_I16
    0U,	// ATOMIC_LOAD_MAX_I32
    0U,	// ATOMIC_LOAD_MAX_I8
    0U,	// ATOMIC_LOAD_MIN_I16
    0U,	// ATOMIC_LOAD_MIN_I32
    0U,	// ATOMIC_LOAD_MIN_I8
    0U,	// ATOMIC_LOAD_NAND_I16
    0U,	// ATOMIC_LOAD_NAND_I32
    0U,	// ATOMIC_LOAD_NAND_I8
    0U,	// ATOMIC_LOAD_OR_I16
    0U,	// ATOMIC_LOAD_OR_I32
    0U,	// ATOMIC_LOAD_OR_I8
    0U,	// ATOMIC_LOAD_SUB_I16
    0U,	// ATOMIC_LOAD_SUB_I32
    0U,	// ATOMIC_LOAD_SUB_I8
    0U,	// ATOMIC_LOAD_UMAX_I16
    0U,	// ATOMIC_LOAD_UMAX_I32
    0U,	// ATOMIC_LOAD_UMAX_I8
    0U,	// ATOMIC_LOAD_UMIN_I16
    0U,	// ATOMIC_LOAD_UMIN_I32
    0U,	// ATOMIC_LOAD_UMIN_I8
    0U,	// ATOMIC_LOAD_XOR_I16
    0U,	// ATOMIC_LOAD_XOR_I32
    0U,	// ATOMIC_LOAD_XOR_I8
    0U,	// ATOMIC_SWAP_I16
    0U,	// ATOMIC_SWAP_I32
    0U,	// ATOMIC_SWAP_I8
    0U,	// ATOMMAX6432
    0U,	// ATOMMIN6432
    0U,	// ATOMNAND6432
    0U,	// ATOMOR6432
    0U,	// ATOMSUB6432
    0U,	// ATOMSWAP6432
    0U,	// ATOMUMAX6432
    0U,	// ATOMUMIN6432
    0U,	// ATOMXOR6432
    0U,	// B
    0U,	// BCCZi64
    0U,	// BCCi64
    21911U,	// BFC
    26342U,	// BFI
    5532U,	// BICri
    5532U,	// BICrr
    9628U,	// BICrsi
    13724U,	// BICrsr
    291455U,	// BKPT
    291440U,	// BL
    291471U,	// BLX
    1073777354U,	// BLX_pred
    291471U,	// BLXi
    1073776443U,	// BL_pred
    0U,	// BMOVPCB_CALL
    0U,	// BMOVPCRX_CALL
    0U,	// BR_JTadd
    0U,	// BR_JTm
    0U,	// BR_JTr
    291467U,	// BX
    1073776380U,	// BXJ
    0U,	// BX_CALL
    432742U,	// BX_RET
    1073777254U,	// BX_pred
    1073775786U,	// Bcc
    2164303958U,	// CDP
    34124066U,	// CDP2
    2740U,	// CLREX
    19190U,	// CLZ
    18428U,	// CMNri
    18428U,	// CMNzrr
    22524U,	// CMNzrsi
    26620U,	// CMNzrsr
    18528U,	// CMPri
    18528U,	// CMPrr
    22624U,	// CMPrsi
    26720U,	// CMPrsr
    0U,	// CONSTPOOL_ENTRY
    0U,	// COPY_STRUCT_BYVAL_I32
    291444U,	// CPS1p
    1124124947U,	// CPS2p
    50383123U,	// CPS3p
    1073776235U,	// DBG
    53825U,	// DMB
    53830U,	// DSB
    6315U,	// EORri
    6315U,	// EORrr
    10411U,	// EORrsi
    14507U,	// EORrsr
    3289008655U,	// FCONSTD
    3289139727U,	// FCONSTS
    83905121U,	// FLDMXDB_UPD
    35370U,	// FLDMXIA
    83905066U,	// FLDMXIA_UPD
    956695U,	// FMSTAT
    83905129U,	// FSTMXDB_UPD
    35378U,	// FSTMXIA
    83905074U,	// FSTMXIA_UPD
    1073777054U,	// HINT
    57931U,	// ISB
    100858252U,	// ITasm
    0U,	// Int_eh_sjlj_dispatchsetup
    0U,	// Int_eh_sjlj_longjmp
    0U,	// Int_eh_sjlj_setjmp
    0U,	// Int_eh_sjlj_setjmp_nofp
    17494U,	// LDA
    17575U,	// LDAB
    19106U,	// LDAEX
    17775U,	// LDAEXB
    117458465U,	// LDAEXD
    18122U,	// LDAEXH
    18042U,	// LDAH
    135311970U,	// LDC2L_OFFSET
    1225831010U,	// LDC2L_OPTION
    2299572834U,	// LDC2L_POST
    168866402U,	// LDC2L_PRE
    135311625U,	// LDC2_OFFSET
    1225830665U,	// LDC2_OPTION
    2299572489U,	// LDC2_POST
    168866057U,	// LDC2_PRE
    3238029124U,	// LDCL_OFFSET
    3238029124U,	// LDCL_OPTION
    3238029124U,	// LDCL_POST
    3238029124U,	// LDCL_PRE
    3238028691U,	// LDC_OFFSET
    3238028691U,	// LDC_OPTION
    3238028691U,	// LDC_POST
    3238028691U,	// LDC_PRE
    33882U,	// LDMDA
    83903578U,	// LDMDA_UPD
    34009U,	// LDMDB
    83903705U,	// LDMDB_UPD
    34763U,	// LDMIA
    0U,	// LDMIA_RET
    83904459U,	// LDMIA_UPD
    34028U,	// LDMIB
    83903724U,	// LDMIB_UPD
    67929U,	// LDRBT_POST_IMM
    67929U,	// LDRBT_POST_REG
    66822U,	// LDRB_POST_IMM
    66822U,	// LDRB_POST_REG
    25862U,	// LDRB_PRE_IMM
    66822U,	// LDRB_PRE_REG
    21766U,	// LDRBi12
    25862U,	// LDRBrs
    67083U,	// LDRD
    42507U,	// LDRD_POST
    42507U,	// LDRD_PRE
    19118U,	// LDREX
    17789U,	// LDREXB
    117458479U,	// LDREXD
    18136U,	// LDREXH
    26277U,	// LDRH
    26999U,	// LDRHTi
    67959U,	// LDRHTr
    67237U,	// LDRH_POST
    67237U,	// LDRH_PRE
    25880U,	// LDRSB
    26981U,	// LDRSBTi
    67941U,	// LDRSBTr
    66840U,	// LDRSB_POST
    66840U,	// LDRSB_PRE
    26287U,	// LDRSH
    27011U,	// LDRSHTi
    67971U,	// LDRSHTr
    67247U,	// LDRSH_POST
    67247U,	// LDRSH_PRE
    68003U,	// LDRT_POST_IMM
    68003U,	// LDRT_POST_REG
    67732U,	// LDR_POST_IMM
    67732U,	// LDR_POST_REG
    26772U,	// LDR_PRE_IMM
    67732U,	// LDR_PRE_REG
    22676U,	// LDRcp
    22676U,	// LDRi12
    26772U,	// LDRrs
    0U,	// LEApcrel
    0U,	// LEApcrelJT
    137126U,	// LSLi
    137126U,	// LSLr
    137412U,	// LSRi
    137412U,	// LSRr
    2164304011U,	// MCR
    185119016U,	// MCR2
    2164328627U,	// MCRR
    185119022U,	// MCRR2
    9346U,	// MLA
    0U,	// MLAv5
    26870U,	// MLS
    0U,	// MOVCCi
    0U,	// MOVCCi16
    0U,	// MOVCCi32imm
    0U,	// MOVCCr
    0U,	// MOVCCsi
    0U,	// MOVCCsr
    1219088U,	// MOVPCLR
    0U,	// MOVPCRX
    23001U,	// MOVTi16
    0U,	// MOVTi16_ga_pcrel
    0U,	// MOV_ga_dyn
    0U,	// MOV_ga_pcrel
    0U,	// MOV_ga_pcrel_ldr
    72208U,	// MOVi
    18981U,	// MOVi16
    0U,	// MOVi16_ga_pcrel
    0U,	// MOVi32imm
    72208U,	// MOVr
    72208U,	// MOVr_TC
    6672U,	// MOVsi
    10768U,	// MOVsr
    0U,	// MOVsra_flag
    0U,	// MOVsrl_flag
    201368996U,	// MRC
    73999U,	// MRC2
    2164327848U,	// MRRC
    185118997U,	// MRRC2
    35096U,	// MRS
    1073776920U,	// MRSsys
    218122441U,	// MSR
    218122441U,	// MSRi
    6070U,	// MUL
    0U,	// MULv5
    0U,	// MVNCCi
    71744U,	// MVNi
    71744U,	// MVNr
    6208U,	// MVNsi
    10304U,	// MVNsr
    6329U,	// ORRri
    6329U,	// ORRrr
    10425U,	// ORRrsi
    14521U,	// ORRrsr
    0U,	// PICADD
    0U,	// PICLDR
    0U,	// PICLDRB
    0U,	// PICLDRH
    0U,	// PICLDRSB
    0U,	// PICLDRSH
    0U,	// PICSTR
    0U,	// PICSTRB
    0U,	// PICSTRH
    26948U,	// PKHBT
    25893U,	// PKHTB
    78469U,	// PLDWi12
    82565U,	// PLDWrs
    78416U,	// PLDi12
    82512U,	// PLDrs
    78429U,	// PLIi12
    82525U,	// PLIrs
    21988U,	// QADD
    21419U,	// QADD16
    21522U,	// QADD8
    23263U,	// QASX
    21962U,	// QDADD
    21834U,	// QDSUB
    23122U,	// QSAX
    21847U,	// QSUB
    21381U,	// QSUB16
    21483U,	// QSUB8
    18826U,	// RBIT
    18936U,	// REV
    17359U,	// REV16
    18106U,	// REVSH
    291365U,	// RFEDA
    1339941U,	// RFEDA_UPD
    291379U,	// RFEDB
    1339955U,	// RFEDB_UPD
    291372U,	// RFEIA
    1339948U,	// RFEIA_UPD
    291386U,	// RFEIB
    1339962U,	// RFEIB_UPD
    137391U,	// RORi
    137391U,	// RORr
    0U,	// RRX
    203470U,	// RRXi
    0U,	// RSBSri
    0U,	// RSBSrsi
    0U,	// RSBSrsr
    5402U,	// RSBri
    5402U,	// RSBrr
    9498U,	// RSBrsi
    13594U,	// RSBrsr
    5549U,	// RSCri
    5549U,	// RSCrr
    9645U,	// RSCrsi
    13741U,	// RSCrsr
    21426U,	// SADD16
    21528U,	// SADD8
    23268U,	// SASX
    5515U,	// SBCri
    5515U,	// SBCrr
    9611U,	// SBCrsi
    13707U,	// SBCrsr
    27328U,	// SBFX
    23040U,	// SDIV
    22369U,	// SEL
    86613U,	// SETEND
    21402U,	// SHADD16
    21507U,	// SHADD8
    23250U,	// SHASX
    23109U,	// SHSAX
    21364U,	// SHSUB16
    21468U,	// SHSUB8
    1073776032U,	// SMC
    25784U,	// SMLABB
    26941U,	// SMLABT
    26041U,	// SMLAD
    27254U,	// SMLADX
    91943U,	// SMLAL
    25791U,	// SMLALBB
    26954U,	// SMLALBT
    26094U,	// SMLALD
    27268U,	// SMLALDX
    25899U,	// SMLALTB
    27071U,	// SMLALTT
    0U,	// SMLALv5
    25886U,	// SMLATB
    27064U,	// SMLATT
    25953U,	// SMLAWB
    27102U,	// SMLAWT
    26133U,	// SMLSD
    27284U,	// SMLSDX
    26111U,	// SMLSLD
    27276U,	// SMLSLDX
    25728U,	// SMMLA
    26756U,	// SMMLAR
    26868U,	// SMMLS
    26817U,	// SMMLSR
    22452U,	// SMMUL
    22691U,	// SMMULR
    21951U,	// SMUAD
    23165U,	// SMUADX
    21703U,	// SMULBB
    22866U,	// SMULBT
    10123U,	// SMULL
    0U,	// SMULLv5
    21811U,	// SMULTB
    22983U,	// SMULTT
    21864U,	// SMULWB
    23013U,	// SMULWT
    22043U,	// SMUSD
    23195U,	// SMUSDX
    291535U,	// SRSDA
    291487U,	// SRSDA_UPD
    291557U,	// SRSDB
    291511U,	// SRSDB_UPD
    291546U,	// SRSIA
    291499U,	// SRSIA_UPD
    291568U,	// SRSIB
    291523U,	// SRSIB_UPD
    26931U,	// SSAT
    21440U,	// SSAT16
    23127U,	// SSAX
    21388U,	// SSUB16
    21489U,	// SSUB8
    135311977U,	// STC2L_OFFSET
    1225831017U,	// STC2L_OPTION
    2299572841U,	// STC2L_POST
    168866409U,	// STC2L_PRE
    135311644U,	// STC2_OFFSET
    1225830684U,	// STC2_OPTION
    2299572508U,	// STC2_POST
    168866076U,	// STC2_PRE
    3238029129U,	// STCL_OFFSET
    3238029129U,	// STCL_OPTION
    3238029129U,	// STCL_POST
    3238029129U,	// STCL_PRE
    3238028721U,	// STC_OFFSET
    3238028721U,	// STC_OPTION
    3238028721U,	// STC_POST
    3238028721U,	// STC_PRE
    18352U,	// STL
    17656U,	// STLB
    23208U,	// STLEX
    21878U,	// STLEXB
    22056U,	// STLEXD
    22225U,	// STLEXH
    18063U,	// STLH
    33888U,	// STMDA
    83903584U,	// STMDA_UPD
    34016U,	// STMDB
    83903712U,	// STMDB_UPD
    34767U,	// STMIA
    83904463U,	// STMIA_UPD
    34034U,	// STMIB
    83903730U,	// STMIB_UPD
    83954015U,	// STRBT_POST_IMM
    83954015U,	// STRBT_POST_REG
    83952907U,	// STRB_POST_IMM
    83952907U,	// STRB_POST_REG
    83911947U,	// STRB_PRE_IMM
    83952907U,	// STRB_PRE_REG
    21771U,	// STRBi12
    0U,	// STRBi_preidx
    0U,	// STRBr_preidx
    25867U,	// STRBrs
    67088U,	// STRD
    83928592U,	// STRD_POST
    83928592U,	// STRD_PRE
    23226U,	// STREX
    21892U,	// STREXB
    22070U,	// STREXD
    22239U,	// STREXH
    26282U,	// STRH
    83913085U,	// STRHTi
    83954045U,	// STRHTr
    83953322U,	// STRH_POST
    83953322U,	// STRH_PRE
    0U,	// STRH_preidx
    83954094U,	// STRT_POST_IMM
    83954094U,	// STRT_POST_REG
    83953877U,	// STR_POST_IMM
    83953877U,	// STR_POST_REG
    83912917U,	// STR_PRE_IMM
    83953877U,	// STR_PRE_REG
    22741U,	// STRi12
    0U,	// STRi_preidx
    0U,	// STRr_preidx
    26837U,	// STRrs
    0U,	// SUBSri
    0U,	// SUBSrr
    0U,	// SUBSrsi
    0U,	// SUBSrsr
    5452U,	// SUBri
    5452U,	// SUBrr
    9548U,	// SUBrsi
    13644U,	// SUBrsr
    1073776053U,	// SVC
    22642U,	// SWP
    21761U,	// SWPB
    25772U,	// SXTAB
    25430U,	// SXTAB16
    26239U,	// SXTAH
    21824U,	// SXTB
    21350U,	// SXTB16
    22208U,	// SXTH
    0U,	// TAILJMPd
    0U,	// TAILJMPr
    0U,	// TCRETURNdi
    0U,	// TCRETURNri
    18560U,	// TEQri
    18560U,	// TEQrr
    22656U,	// TEQrsi
    26752U,	// TEQrsr
    0U,	// TPsoft
    2129U,	// TRAP
    2129U,	// TRAPNaCl
    18868U,	// TSTri
    18868U,	// TSTrr
    22964U,	// TSTrsi
    27060U,	// TSTrsr
    21433U,	// UADD16
    21534U,	// UADD8
    23273U,	// UASX
    27333U,	// UBFX
    23045U,	// UDIV
    21410U,	// UHADD16
    21514U,	// UHADD8
    23256U,	// UHASX
    23115U,	// UHSAX
    21372U,	// UHSUB16
    21475U,	// UHSUB8
    26380U,	// UMAAL
    0U,	// UMAALv5
    91949U,	// UMLAL
    0U,	// UMLALv5
    10129U,	// UMULL
    0U,	// UMULLv5
    21418U,	// UQADD16
    21521U,	// UQADD8
    23262U,	// UQASX
    23121U,	// UQSAX
    21380U,	// UQSUB16
    21482U,	// UQSUB8
    21501U,	// USAD8
    25557U,	// USADA8
    26936U,	// USAT
    21447U,	// USAT16
    23132U,	// USAX
    21395U,	// USUB16
    21495U,	// USUB8
    25778U,	// UXTAB
    25438U,	// UXTAB16
    26245U,	// UXTAH
    21829U,	// UXTB
    21357U,	// UXTB16
    22213U,	// UXTH
    186017554U,	// VABALsv2i64
    186148626U,	// VABALsv4i32
    186279698U,	// VABALsv8i16
    186410770U,	// VABALuv2i64
    186541842U,	// VABALuv4i32
    186672914U,	// VABALuv8i16
    186278993U,	// VABAsv16i8
    186016849U,	// VABAsv2i32
    186147921U,	// VABAsv4i16
    186016849U,	// VABAsv4i32
    186147921U,	// VABAsv8i16
    186278993U,	// VABAsv8i8
    186672209U,	// VABAuv16i8
    186410065U,	// VABAuv2i32
    186541137U,	// VABAuv4i16
    186410065U,	// VABAuv4i32
    186541137U,	// VABAuv8i16
    186672209U,	// VABAuv8i8
    85350222U,	// VABDLsv2i64
    85481294U,	// VABDLsv4i32
    85612366U,	// VABDLsv8i16
    85743438U,	// VABDLuv2i64
    85874510U,	// VABDLuv4i32
    86005582U,	// VABDLuv8i16
    2215400901U,	// VABDfd
    2215400901U,	// VABDfq
    85611973U,	// VABDsv16i8
    85349829U,	// VABDsv2i32
    85480901U,	// VABDsv4i16
    85349829U,	// VABDsv4i32
    85480901U,	// VABDsv8i16
    85611973U,	// VABDsv8i8
    86005189U,	// VABDuv16i8
    85743045U,	// VABDuv2i32
    85874117U,	// VABDuv4i16
    85743045U,	// VABDuv4i32
    85874117U,	// VABDuv8i16
    86005189U,	// VABDuv8i8
    2215266533U,	// VABSD
    2215397605U,	// VABSS
    2215397605U,	// VABSfd
    2215397605U,	// VABSfq
    1159350501U,	// VABSv16i8
    1159088357U,	// VABSv2i32
    1159219429U,	// VABSv4i16
    1159088357U,	// VABSv4i32
    1159219429U,	// VABSv8i16
    1159350501U,	// VABSv8i8
    2215401025U,	// VACGEd
    2215401025U,	// VACGEq
    2215401836U,	// VACGTd
    2215401836U,	// VACGTq
    2215269865U,	// VADDD
    86136810U,	// VADDHNv2i32
    86267882U,	// VADDHNv4i16
    86398954U,	// VADDHNv8i8
    85350235U,	// VADDLsv2i64
    85481307U,	// VADDLsv4i32
    85612379U,	// VADDLsv8i16
    85743451U,	// VADDLuv2i64
    85874523U,	// VADDLuv4i32
    86005595U,	// VADDLuv8i16
    2215400937U,	// VADDS
    85350938U,	// VADDWsv2i64
    85482010U,	// VADDWsv4i32
    85613082U,	// VADDWsv8i16
    85744154U,	// VADDWuv2i64
    85875226U,	// VADDWuv4i32
    86006298U,	// VADDWuv8i16
    2215400937U,	// VADDfd
    2215400937U,	// VADDfq
    86529513U,	// VADDv16i8
    86136297U,	// VADDv1i64
    86267369U,	// VADDv2i32
    86136297U,	// VADDv2i64
    86398441U,	// VADDv4i16
    86267369U,	// VADDv4i32
    86398441U,	// VADDv8i16
    86529513U,	// VADDv8i8
    22022U,	// VANDd
    22022U,	// VANDq
    21915U,	// VBICd
    237262235U,	// VBICiv2i32
    237393307U,	// VBICiv4i16
    237262235U,	// VBICiv4i32
    237393307U,	// VBICiv8i16
    21915U,	// VBICq
    26214U,	// VBIFd
    26214U,	// VBIFq
    27023U,	// VBITd
    27023U,	// VBITq
    26525U,	// VBSLd
    26525U,	// VBSLq
    2215401595U,	// VCEQfd
    2215401595U,	// VCEQfq
    86530171U,	// VCEQv16i8
    86268027U,	// VCEQv2i32
    86399099U,	// VCEQv4i16
    86268027U,	// VCEQv4i32
    86399099U,	// VCEQv8i16
    86530171U,	// VCEQv8i8
    2234009723U,	// VCEQzv16i8
    2215397499U,	// VCEQzv2f32
    2233747579U,	// VCEQzv2i32
    2215397499U,	// VCEQzv4f32
    2233878651U,	// VCEQzv4i16
    2233747579U,	// VCEQzv4i32
    2233878651U,	// VCEQzv8i16
    2234009723U,	// VCEQzv8i8
    2215401031U,	// VCGEfd
    2215401031U,	// VCGEfq
    85612103U,	// VCGEsv16i8
    85349959U,	// VCGEsv2i32
    85481031U,	// VCGEsv4i16
    85349959U,	// VCGEsv4i32
    85481031U,	// VCGEsv8i16
    85612103U,	// VCGEsv8i8
    86005319U,	// VCGEuv16i8
    85743175U,	// VCGEuv2i32
    85874247U,	// VCGEuv4i16
    85743175U,	// VCGEuv4i32
    85874247U,	// VCGEuv8i16
    86005319U,	// VCGEuv8i8
    2233091655U,	// VCGEzv16i8
    2215396935U,	// VCGEzv2f32
    2232829511U,	// VCGEzv2i32
    2215396935U,	// VCGEzv4f32
    2232960583U,	// VCGEzv4i16
    2232829511U,	// VCGEzv4i32
    2232960583U,	// VCGEzv8i16
    2233091655U,	// VCGEzv8i8
    2215401842U,	// VCGTfd
    2215401842U,	// VCGTfq
    85612914U,	// VCGTsv16i8
    85350770U,	// VCGTsv2i32
    85481842U,	// VCGTsv4i16
    85350770U,	// VCGTsv4i32
    85481842U,	// VCGTsv8i16
    85612914U,	// VCGTsv8i8
    86006130U,	// VCGTuv16i8
    85743986U,	// VCGTuv2i32
    85875058U,	// VCGTuv4i16
    85743986U,	// VCGTuv4i32
    85875058U,	// VCGTuv8i16
    86006130U,	// VCGTuv8i8
    2233092466U,	// VCGTzv16i8
    2215397746U,	// VCGTzv2f32
    2232830322U,	// VCGTzv2i32
    2215397746U,	// VCGTzv4f32
    2232961394U,	// VCGTzv4i16
    2232830322U,	// VCGTzv4i32
    2232961394U,	// VCGTzv8i16
    2233092466U,	// VCGTzv8i8
    2233091660U,	// VCLEzv16i8
    2215396940U,	// VCLEzv2f32
    2232829516U,	// VCLEzv2i32
    2215396940U,	// VCLEzv4f32
    2232960588U,	// VCLEzv4i16
    2232829516U,	// VCLEzv4i32
    2232960588U,	// VCLEzv8i16
    2233091660U,	// VCLEzv8i8
    1159350511U,	// VCLSv16i8
    1159088367U,	// VCLSv2i32
    1159219439U,	// VCLSv4i16
    1159088367U,	// VCLSv4i32
    1159219439U,	// VCLSv8i16
    1159350511U,	// VCLSv8i8
    2233092500U,	// VCLTzv16i8
    2215397780U,	// VCLTzv2f32
    2232830356U,	// VCLTzv2i32
    2215397780U,	// VCLTzv4f32
    2232961428U,	// VCLTzv4i16
    2232830356U,	// VCLTzv4i32
    2232961428U,	// VCLTzv8i16
    2233092500U,	// VCLTzv8i8
    1160268533U,	// VCLZv16i8
    1160006389U,	// VCLZv2i32
    1160137461U,	// VCLZv4i16
    1160006389U,	// VCLZv4i32
    1160137461U,	// VCLZv8i16
    1160268533U,	// VCLZv8i8
    2215266399U,	// VCMPD
    2215265880U,	// VCMPED
    2215396952U,	// VCMPES
    252347992U,	// VCMPEZD
    252479064U,	// VCMPEZS
    2215397471U,	// VCMPS
    252348511U,	// VCMPZD
    252479583U,	// VCMPZS
    2771353U,	// VCNTd
    2771353U,	// VCNTq
    271347713U,	// VCVTANSD
    271347713U,	// VCVTANSQ
    271347773U,	// VCVTANUD
    271347773U,	// VCVTANUQ
    271348021U,	// VCVTASD
    271347713U,	// VCVTASS
    271348081U,	// VCVTAUD
    271347773U,	// VCVTAUS
    3032378U,	// VCVTBDH
    3163450U,	// VCVTBHD
    3294522U,	// VCVTBHS
    3425594U,	// VCVTBSH
    3557844U,	// VCVTDS
    271347728U,	// VCVTMNSD
    271347728U,	// VCVTMNSQ
    271347788U,	// VCVTMNUD
    271347788U,	// VCVTMNUQ
    271348036U,	// VCVTMSD
    271347728U,	// VCVTMSS
    271348096U,	// VCVTMUD
    271347788U,	// VCVTMUS
    271347743U,	// VCVTNNSD
    271347743U,	// VCVTNNSQ
    271347803U,	// VCVTNNUD
    271347803U,	// VCVTNNUQ
    271348051U,	// VCVTNSD
    271347743U,	// VCVTNSS
    271348111U,	// VCVTNUD
    271347803U,	// VCVTNUS
    271347758U,	// VCVTPNSD
    271347758U,	// VCVTPNSQ
    271347818U,	// VCVTPNUD
    271347818U,	// VCVTPNUQ
    271348066U,	// VCVTPSD
    271347758U,	// VCVTPSS
    271348126U,	// VCVTPUD
    271347818U,	// VCVTPUS
    3688916U,	// VCVTSD
    3033550U,	// VCVTTDH
    3164622U,	// VCVTTHD
    3295694U,	// VCVTTHS
    3426766U,	// VCVTTSH
    3426772U,	// VCVTf2h
    272255444U,	// VCVTf2sd
    272255444U,	// VCVTf2sq
    272386516U,	// VCVTf2ud
    272386516U,	// VCVTf2uq
    3292158420U,	// VCVTf2xsd
    3292158420U,	// VCVTf2xsq
    3292289492U,	// VCVTf2xud
    3292289492U,	// VCVTf2xuq
    3295700U,	// VCVTh2f
    272517588U,	// VCVTs2fd
    272517588U,	// VCVTs2fq
    272648660U,	// VCVTu2fd
    272648660U,	// VCVTu2fq
    3292420564U,	// VCVTxs2fd
    3292420564U,	// VCVTxs2fq
    3292551636U,	// VCVTxu2fd
    3292551636U,	// VCVTxu2fq
    2215270922U,	// VDIVD
    2215401994U,	// VDIVS
    4343916U,	// VDUP16d
    4343916U,	// VDUP16q
    4474988U,	// VDUP32d
    4474988U,	// VDUP32q
    2771052U,	// VDUP8d
    2771052U,	// VDUP8q
    4348012U,	// VDUPLN16d
    4348012U,	// VDUPLN16q
    4479084U,	// VDUPLN32d
    4479084U,	// VDUPLN32q
    2775148U,	// VDUPLN8d
    2775148U,	// VDUPLN8q
    0U,	// VDUPfdf
    0U,	// VDUPfqf
    22698U,	// VEORd
    22698U,	// VEORq
    4352492U,	// VEXTd16
    4483564U,	// VEXTd32
    2779628U,	// VEXTd8
    4352492U,	// VEXTq16
    4483564U,	// VEXTq32
    4614636U,	// VEXTq64
    2779628U,	// VEXTq8
    3289015441U,	// VFMAD
    3289146513U,	// VFMAS
    3289146513U,	// VFMAfd
    3289146513U,	// VFMAfq
    3289016581U,	// VFMSD
    3289147653U,	// VFMSS
    3289147653U,	// VFMSfd
    3289147653U,	// VFMSfq
    3289015446U,	// VFNMAD
    3289146518U,	// VFNMAS
    3289016586U,	// VFNMSD
    3289147658U,	// VFNMSS
    4479503U,	// VGETLNi32
    85481999U,	// VGETLNs16
    85613071U,	// VGETLNs8
    85875215U,	// VGETLNu16
    86006287U,	// VGETLNu8
    85611991U,	// VHADDsv16i8
    85349847U,	// VHADDsv2i32
    85480919U,	// VHADDsv4i16
    85349847U,	// VHADDsv4i32
    85480919U,	// VHADDsv8i16
    85611991U,	// VHADDsv8i8
    86005207U,	// VHADDuv16i8
    85743063U,	// VHADDuv2i32
    85874135U,	// VHADDuv4i16
    85743063U,	// VHADDuv4i32
    85874135U,	// VHADDuv8i16
    86005207U,	// VHADDuv8i8
    85611856U,	// VHSUBsv16i8
    85349712U,	// VHSUBsv2i32
    85480784U,	// VHSUBsv4i16
    85349712U,	// VHSUBsv4i32
    85480784U,	// VHSUBsv8i16
    85611856U,	// VHSUBsv8i8
    86005072U,	// VHSUBuv16i8
    85742928U,	// VHSUBuv2i32
    85874000U,	// VHSUBuv4i16
    85742928U,	// VHSUBuv4i32
    85874000U,	// VHSUBuv8i16
    86005072U,	// VHSUBuv8i8
    1363301115U,	// VLD1DUPd16
    2437047035U,	// VLD1DUPd16wb_fixed
    2437087995U,	// VLD1DUPd16wb_register
    1363432187U,	// VLD1DUPd32
    2437178107U,	// VLD1DUPd32wb_fixed
    2437219067U,	// VLD1DUPd32wb_register
    1361728251U,	// VLD1DUPd8
    2435474171U,	// VLD1DUPd8wb_fixed
    2435515131U,	// VLD1DUPd8wb_register
    1380078331U,	// VLD1DUPq16
    2453824251U,	// VLD1DUPq16wb_fixed
    2453865211U,	// VLD1DUPq16wb_register
    1380209403U,	// VLD1DUPq32
    2453955323U,	// VLD1DUPq32wb_fixed
    2453996283U,	// VLD1DUPq32wb_register
    1378505467U,	// VLD1DUPq8
    2452251387U,	// VLD1DUPq8wb_fixed
    2452292347U,	// VLD1DUPq8wb_register
    3226010363U,	// VLD1LNd16
    3226039035U,	// VLD1LNd16_UPD
    3226141435U,	// VLD1LNd32
    3226170107U,	// VLD1LNd32_UPD
    3226272507U,	// VLD1LNd8
    3226301179U,	// VLD1LNd8_UPD
    4350715U,	// VLD1LNdAsm_16
    4481787U,	// VLD1LNdAsm_32
    2777851U,	// VLD1LNdAsm_8
    4350715U,	// VLD1LNdWB_fixed_Asm_16
    4481787U,	// VLD1LNdWB_fixed_Asm_32
    2777851U,	// VLD1LNdWB_fixed_Asm_8
    4391675U,	// VLD1LNdWB_register_Asm_16
    4522747U,	// VLD1LNdWB_register_Asm_32
    2818811U,	// VLD1LNdWB_register_Asm_8
    0U,	// VLD1LNq16Pseudo
    0U,	// VLD1LNq16Pseudo_UPD
    0U,	// VLD1LNq32Pseudo
    0U,	// VLD1LNq32Pseudo_UPD
    0U,	// VLD1LNq8Pseudo
    0U,	// VLD1LNq8Pseudo_UPD
    1396855547U,	// VLD1d16
    1413632763U,	// VLD1d16Q
    2487378683U,	// VLD1d16Qwb_fixed
    2487419643U,	// VLD1d16Qwb_register
    1430409979U,	// VLD1d16T
    2504155899U,	// VLD1d16Twb_fixed
    2504196859U,	// VLD1d16Twb_register
    2470601467U,	// VLD1d16wb_fixed
    2470642427U,	// VLD1d16wb_register
    1396986619U,	// VLD1d32
    1413763835U,	// VLD1d32Q
    2487509755U,	// VLD1d32Qwb_fixed
    2487550715U,	// VLD1d32Qwb_register
    1430541051U,	// VLD1d32T
    2504286971U,	// VLD1d32Twb_fixed
    2504327931U,	// VLD1d32Twb_register
    2470732539U,	// VLD1d32wb_fixed
    2470773499U,	// VLD1d32wb_register
    1397117691U,	// VLD1d64
    1413894907U,	// VLD1d64Q
    0U,	// VLD1d64QPseudo
    2487640827U,	// VLD1d64Qwb_fixed
    2487681787U,	// VLD1d64Qwb_register
    1430672123U,	// VLD1d64T
    0U,	// VLD1d64TPseudo
    2504418043U,	// VLD1d64Twb_fixed
    2504459003U,	// VLD1d64Twb_register
    2470863611U,	// VLD1d64wb_fixed
    2470904571U,	// VLD1d64wb_register
    1395282683U,	// VLD1d8
    1412059899U,	// VLD1d8Q
    2485805819U,	// VLD1d8Qwb_fixed
    2485846779U,	// VLD1d8Qwb_register
    1428837115U,	// VLD1d8T
    2502583035U,	// VLD1d8Twb_fixed
    2502623995U,	// VLD1d8Twb_register
    2469028603U,	// VLD1d8wb_fixed
    2469069563U,	// VLD1d8wb_register
    1447187195U,	// VLD1q16
    2520933115U,	// VLD1q16wb_fixed
    2520974075U,	// VLD1q16wb_register
    1447318267U,	// VLD1q32
    2521064187U,	// VLD1q32wb_fixed
    2521105147U,	// VLD1q32wb_register
    1447449339U,	// VLD1q64
    2521195259U,	// VLD1q64wb_fixed
    2521236219U,	// VLD1q64wb_register
    1445614331U,	// VLD1q8
    2519360251U,	// VLD1q8wb_fixed
    2519401211U,	// VLD1q8wb_register
    1380078369U,	// VLD2DUPd16
    2453824289U,	// VLD2DUPd16wb_fixed
    2453865249U,	// VLD2DUPd16wb_register
    1463964449U,	// VLD2DUPd16x2
    2537710369U,	// VLD2DUPd16x2wb_fixed
    2537751329U,	// VLD2DUPd16x2wb_register
    1380209441U,	// VLD2DUPd32
    2453955361U,	// VLD2DUPd32wb_fixed
    2453996321U,	// VLD2DUPd32wb_register
    1464095521U,	// VLD2DUPd32x2
    2537841441U,	// VLD2DUPd32x2wb_fixed
    2537882401U,	// VLD2DUPd32x2wb_register
    1378505505U,	// VLD2DUPd8
    2452251425U,	// VLD2DUPd8wb_fixed
    2452292385U,	// VLD2DUPd8wb_register
    1462391585U,	// VLD2DUPd8x2
    2536137505U,	// VLD2DUPd8x2wb_fixed
    2536178465U,	// VLD2DUPd8x2wb_register
    3226039073U,	// VLD2LNd16
    0U,	// VLD2LNd16Pseudo
    0U,	// VLD2LNd16Pseudo_UPD
    3226043169U,	// VLD2LNd16_UPD
    3226170145U,	// VLD2LNd32
    0U,	// VLD2LNd32Pseudo
    0U,	// VLD2LNd32Pseudo_UPD
    3226174241U,	// VLD2LNd32_UPD
    3226301217U,	// VLD2LNd8
    0U,	// VLD2LNd8Pseudo
    0U,	// VLD2LNd8Pseudo_UPD
    3226305313U,	// VLD2LNd8_UPD
    4350753U,	// VLD2LNdAsm_16
    4481825U,	// VLD2LNdAsm_32
    2777889U,	// VLD2LNdAsm_8
    4350753U,	// VLD2LNdWB_fixed_Asm_16
    4481825U,	// VLD2LNdWB_fixed_Asm_32
    2777889U,	// VLD2LNdWB_fixed_Asm_8
    4391713U,	// VLD2LNdWB_register_Asm_16
    4522785U,	// VLD2LNdWB_register_Asm_32
    2818849U,	// VLD2LNdWB_register_Asm_8
    3226039073U,	// VLD2LNq16
    0U,	// VLD2LNq16Pseudo
    0U,	// VLD2LNq16Pseudo_UPD
    3226043169U,	// VLD2LNq16_UPD
    3226170145U,	// VLD2LNq32
    0U,	// VLD2LNq32Pseudo
    0U,	// VLD2LNq32Pseudo_UPD
    3226174241U,	// VLD2LNq32_UPD
    4350753U,	// VLD2LNqAsm_16
    4481825U,	// VLD2LNqAsm_32
    4350753U,	// VLD2LNqWB_fixed_Asm_16
    4481825U,	// VLD2LNqWB_fixed_Asm_32
    4391713U,	// VLD2LNqWB_register_Asm_16
    4522785U,	// VLD2LNqWB_register_Asm_32
    1480741665U,	// VLD2b16
    2554487585U,	// VLD2b16wb_fixed
    2554528545U,	// VLD2b16wb_register
    1480872737U,	// VLD2b32
    2554618657U,	// VLD2b32wb_fixed
    2554659617U,	// VLD2b32wb_register
    1479168801U,	// VLD2b8
    2552914721U,	// VLD2b8wb_fixed
    2552955681U,	// VLD2b8wb_register
    1447187233U,	// VLD2d16
    2520933153U,	// VLD2d16wb_fixed
    2520974113U,	// VLD2d16wb_register
    1447318305U,	// VLD2d32
    2521064225U,	// VLD2d32wb_fixed
    2521105185U,	// VLD2d32wb_register
    1445614369U,	// VLD2d8
    2519360289U,	// VLD2d8wb_fixed
    2519401249U,	// VLD2d8wb_register
    1413632801U,	// VLD2q16
    0U,	// VLD2q16Pseudo
    0U,	// VLD2q16PseudoWB_fixed
    0U,	// VLD2q16PseudoWB_register
    2487378721U,	// VLD2q16wb_fixed
    2487419681U,	// VLD2q16wb_register
    1413763873U,	// VLD2q32
    0U,	// VLD2q32Pseudo
    0U,	// VLD2q32PseudoWB_fixed
    0U,	// VLD2q32PseudoWB_register
    2487509793U,	// VLD2q32wb_fixed
    2487550753U,	// VLD2q32wb_register
    1412059937U,	// VLD2q8
    0U,	// VLD2q8Pseudo
    0U,	// VLD2q8PseudoWB_fixed
    0U,	// VLD2q8PseudoWB_register
    2485805857U,	// VLD2q8wb_fixed
    2485846817U,	// VLD2q8wb_register
    4784955U,	// VLD3DUPd16
    0U,	// VLD3DUPd16Pseudo
    0U,	// VLD3DUPd16Pseudo_UPD
    4813627U,	// VLD3DUPd16_UPD
    4916027U,	// VLD3DUPd32
    0U,	// VLD3DUPd32Pseudo
    0U,	// VLD3DUPd32Pseudo_UPD
    4944699U,	// VLD3DUPd32_UPD
    5047099U,	// VLD3DUPd8
    0U,	// VLD3DUPd8Pseudo
    0U,	// VLD3DUPd8Pseudo_UPD
    5075771U,	// VLD3DUPd8_UPD
    1497518907U,	// VLD3DUPdAsm_16
    1497649979U,	// VLD3DUPdAsm_32
    1495946043U,	// VLD3DUPdAsm_8
    1497518907U,	// VLD3DUPdWB_fixed_Asm_16
    1497649979U,	// VLD3DUPdWB_fixed_Asm_32
    1495946043U,	// VLD3DUPdWB_fixed_Asm_8
    423781179U,	// VLD3DUPdWB_register_Asm_16
    423912251U,	// VLD3DUPdWB_register_Asm_32
    422208315U,	// VLD3DUPdWB_register_Asm_8
    4784955U,	// VLD3DUPq16
    4813627U,	// VLD3DUPq16_UPD
    4916027U,	// VLD3DUPq32
    4944699U,	// VLD3DUPq32_UPD
    5047099U,	// VLD3DUPq8
    5075771U,	// VLD3DUPq8_UPD
    1514296123U,	// VLD3DUPqAsm_16
    1514427195U,	// VLD3DUPqAsm_32
    1512723259U,	// VLD3DUPqAsm_8
    1514296123U,	// VLD3DUPqWB_fixed_Asm_16
    1514427195U,	// VLD3DUPqWB_fixed_Asm_32
    1512723259U,	// VLD3DUPqWB_fixed_Asm_8
    440558395U,	// VLD3DUPqWB_register_Asm_16
    440689467U,	// VLD3DUPqWB_register_Asm_32
    438985531U,	// VLD3DUPqWB_register_Asm_8
    3226043195U,	// VLD3LNd16
    0U,	// VLD3LNd16Pseudo
    0U,	// VLD3LNd16Pseudo_UPD
    3226047291U,	// VLD3LNd16_UPD
    3226174267U,	// VLD3LNd32
    0U,	// VLD3LNd32Pseudo
    0U,	// VLD3LNd32Pseudo_UPD
    3226178363U,	// VLD3LNd32_UPD
    3226305339U,	// VLD3LNd8
    0U,	// VLD3LNd8Pseudo
    0U,	// VLD3LNd8Pseudo_UPD
    3226309435U,	// VLD3LNd8_UPD
    4350779U,	// VLD3LNdAsm_16
    4481851U,	// VLD3LNdAsm_32
    2777915U,	// VLD3LNdAsm_8
    4350779U,	// VLD3LNdWB_fixed_Asm_16
    4481851U,	// VLD3LNdWB_fixed_Asm_32
    2777915U,	// VLD3LNdWB_fixed_Asm_8
    4391739U,	// VLD3LNdWB_register_Asm_16
    4522811U,	// VLD3LNdWB_register_Asm_32
    2818875U,	// VLD3LNdWB_register_Asm_8
    3226043195U,	// VLD3LNq16
    0U,	// VLD3LNq16Pseudo
    0U,	// VLD3LNq16Pseudo_UPD
    3226047291U,	// VLD3LNq16_UPD
    3226174267U,	// VLD3LNq32
    0U,	// VLD3LNq32Pseudo
    0U,	// VLD3LNq32Pseudo_UPD
    3226178363U,	// VLD3LNq32_UPD
    4350779U,	// VLD3LNqAsm_16
    4481851U,	// VLD3LNqAsm_32
    4350779U,	// VLD3LNqWB_fixed_Asm_16
    4481851U,	// VLD3LNqWB_fixed_Asm_32
    4391739U,	// VLD3LNqWB_register_Asm_16
    4522811U,	// VLD3LNqWB_register_Asm_32
    4784955U,	// VLD3d16
    0U,	// VLD3d16Pseudo
    0U,	// VLD3d16Pseudo_UPD
    4813627U,	// VLD3d16_UPD
    4916027U,	// VLD3d32
    0U,	// VLD3d32Pseudo
    0U,	// VLD3d32Pseudo_UPD
    4944699U,	// VLD3d32_UPD
    5047099U,	// VLD3d8
    0U,	// VLD3d8Pseudo
    0U,	// VLD3d8Pseudo_UPD
    5075771U,	// VLD3d8_UPD
    1430410043U,	// VLD3dAsm_16
    1430541115U,	// VLD3dAsm_32
    1428837179U,	// VLD3dAsm_8
    1430410043U,	// VLD3dWB_fixed_Asm_16
    1430541115U,	// VLD3dWB_fixed_Asm_32
    1428837179U,	// VLD3dWB_fixed_Asm_8
    1430414139U,	// VLD3dWB_register_Asm_16
    1430545211U,	// VLD3dWB_register_Asm_32
    1428841275U,	// VLD3dWB_register_Asm_8
    4784955U,	// VLD3q16
    0U,	// VLD3q16Pseudo_UPD
    4813627U,	// VLD3q16_UPD
    0U,	// VLD3q16oddPseudo
    0U,	// VLD3q16oddPseudo_UPD
    4916027U,	// VLD3q32
    0U,	// VLD3q32Pseudo_UPD
    4944699U,	// VLD3q32_UPD
    0U,	// VLD3q32oddPseudo
    0U,	// VLD3q32oddPseudo_UPD
    5047099U,	// VLD3q8
    0U,	// VLD3q8Pseudo_UPD
    5075771U,	// VLD3q8_UPD
    0U,	// VLD3q8oddPseudo
    0U,	// VLD3q8oddPseudo_UPD
    1531073339U,	// VLD3qAsm_16
    1531204411U,	// VLD3qAsm_32
    1529500475U,	// VLD3qAsm_8
    1531073339U,	// VLD3qWB_fixed_Asm_16
    1531204411U,	// VLD3qWB_fixed_Asm_32
    1529500475U,	// VLD3qWB_fixed_Asm_8
    457335611U,	// VLD3qWB_register_Asm_16
    457466683U,	// VLD3qWB_register_Asm_32
    455762747U,	// VLD3qWB_register_Asm_8
    4760396U,	// VLD4DUPd16
    0U,	// VLD4DUPd16Pseudo
    0U,	// VLD4DUPd16Pseudo_UPD
    4825932U,	// VLD4DUPd16_UPD
    4891468U,	// VLD4DUPd32
    0U,	// VLD4DUPd32Pseudo
    0U,	// VLD4DUPd32Pseudo_UPD
    4957004U,	// VLD4DUPd32_UPD
    5022540U,	// VLD4DUPd8
    0U,	// VLD4DUPd8Pseudo
    0U,	// VLD4DUPd8Pseudo_UPD
    5088076U,	// VLD4DUPd8_UPD
    1547850572U,	// VLD4DUPdAsm_16
    1547981644U,	// VLD4DUPdAsm_32
    1546277708U,	// VLD4DUPdAsm_8
    1547850572U,	// VLD4DUPdWB_fixed_Asm_16
    1547981644U,	// VLD4DUPdWB_fixed_Asm_32
    1546277708U,	// VLD4DUPdWB_fixed_Asm_8
    474112844U,	// VLD4DUPdWB_register_Asm_16
    474243916U,	// VLD4DUPdWB_register_Asm_32
    472539980U,	// VLD4DUPdWB_register_Asm_8
    4760396U,	// VLD4DUPq16
    4825932U,	// VLD4DUPq16_UPD
    4891468U,	// VLD4DUPq32
    4957004U,	// VLD4DUPq32_UPD
    5022540U,	// VLD4DUPq8
    5088076U,	// VLD4DUPq8_UPD
    1564627788U,	// VLD4DUPqAsm_16
    1564758860U,	// VLD4DUPqAsm_32
    1563054924U,	// VLD4DUPqAsm_8
    1564627788U,	// VLD4DUPqWB_fixed_Asm_16
    1564758860U,	// VLD4DUPqWB_fixed_Asm_32
    1563054924U,	// VLD4DUPqWB_fixed_Asm_8
    490890060U,	// VLD4DUPqWB_register_Asm_16
    491021132U,	// VLD4DUPqWB_register_Asm_32
    489317196U,	// VLD4DUPqWB_register_Asm_8
    3226047308U,	// VLD4LNd16
    0U,	// VLD4LNd16Pseudo
    0U,	// VLD4LNd16Pseudo_UPD
    3226055500U,	// VLD4LNd16_UPD
    3226178380U,	// VLD4LNd32
    0U,	// VLD4LNd32Pseudo
    0U,	// VLD4LNd32Pseudo_UPD
    3226186572U,	// VLD4LNd32_UPD
    3226309452U,	// VLD4LNd8
    0U,	// VLD4LNd8Pseudo
    0U,	// VLD4LNd8Pseudo_UPD
    3226317644U,	// VLD4LNd8_UPD
    4350796U,	// VLD4LNdAsm_16
    4481868U,	// VLD4LNdAsm_32
    2777932U,	// VLD4LNdAsm_8
    4350796U,	// VLD4LNdWB_fixed_Asm_16
    4481868U,	// VLD4LNdWB_fixed_Asm_32
    2777932U,	// VLD4LNdWB_fixed_Asm_8
    4391756U,	// VLD4LNdWB_register_Asm_16
    4522828U,	// VLD4LNdWB_register_Asm_32
    2818892U,	// VLD4LNdWB_register_Asm_8
    3226047308U,	// VLD4LNq16
    0U,	// VLD4LNq16Pseudo
    0U,	// VLD4LNq16Pseudo_UPD
    3226055500U,	// VLD4LNq16_UPD
    3226178380U,	// VLD4LNq32
    0U,	// VLD4LNq32Pseudo
    0U,	// VLD4LNq32Pseudo_UPD
    3226186572U,	// VLD4LNq32_UPD
    4350796U,	// VLD4LNqAsm_16
    4481868U,	// VLD4LNqAsm_32
    4350796U,	// VLD4LNqWB_fixed_Asm_16
    4481868U,	// VLD4LNqWB_fixed_Asm_32
    4391756U,	// VLD4LNqWB_register_Asm_16
    4522828U,	// VLD4LNqWB_register_Asm_32
    4760396U,	// VLD4d16
    0U,	// VLD4d16Pseudo
    0U,	// VLD4d16Pseudo_UPD
    4825932U,	// VLD4d16_UPD
    4891468U,	// VLD4d32
    0U,	// VLD4d32Pseudo
    0U,	// VLD4d32Pseudo_UPD
    4957004U,	// VLD4d32_UPD
    5022540U,	// VLD4d8
    0U,	// VLD4d8Pseudo
    0U,	// VLD4d8Pseudo_UPD
    5088076U,	// VLD4d8_UPD
    1413632844U,	// VLD4dAsm_16
    1413763916U,	// VLD4dAsm_32
    1412059980U,	// VLD4dAsm_8
    1413632844U,	// VLD4dWB_fixed_Asm_16
    1413763916U,	// VLD4dWB_fixed_Asm_32
    1412059980U,	// VLD4dWB_fixed_Asm_8
    1413636940U,	// VLD4dWB_register_Asm_16
    1413768012U,	// VLD4dWB_register_Asm_32
    1412064076U,	// VLD4dWB_register_Asm_8
    4760396U,	// VLD4q16
    0U,	// VLD4q16Pseudo_UPD
    4825932U,	// VLD4q16_UPD
    0U,	// VLD4q16oddPseudo
    0U,	// VLD4q16oddPseudo_UPD
    4891468U,	// VLD4q32
    0U,	// VLD4q32Pseudo_UPD
    4957004U,	// VLD4q32_UPD
    0U,	// VLD4q32oddPseudo
    0U,	// VLD4q32oddPseudo_UPD
    5022540U,	// VLD4q8
    0U,	// VLD4q8Pseudo_UPD
    5088076U,	// VLD4q8_UPD
    0U,	// VLD4q8oddPseudo
    0U,	// VLD4q8oddPseudo_UPD
    1581405004U,	// VLD4qAsm_16
    1581536076U,	// VLD4qAsm_32
    1579832140U,	// VLD4qAsm_8
    1581405004U,	// VLD4qWB_fixed_Asm_16
    1581536076U,	// VLD4qWB_fixed_Asm_32
    1579832140U,	// VLD4qWB_fixed_Asm_8
    507667276U,	// VLD4qWB_register_Asm_16
    507798348U,	// VLD4qWB_register_Asm_32
    506094412U,	// VLD4qWB_register_Asm_8
    83903704U,	// VLDMDDB_UPD
    33900U,	// VLDMDIA
    83903596U,	// VLDMDIA_UPD
    0U,	// VLDMQIA
    83903704U,	// VLDMSDB_UPD
    33900U,	// VLDMSIA
    83903596U,	// VLDMSIA_UPD
    22675U,	// VLDRD
    22675U,	// VLDRS
    3291247057U,	// VMAXNMD
    3291246749U,	// VMAXNMND
    3291246749U,	// VMAXNMNQ
    3291246749U,	// VMAXNMS
    2215402048U,	// VMAXfd
    2215402048U,	// VMAXfq
    85613120U,	// VMAXsv16i8
    85350976U,	// VMAXsv2i32
    85482048U,	// VMAXsv4i16
    85350976U,	// VMAXsv4i32
    85482048U,	// VMAXsv8i16
    85613120U,	// VMAXsv8i8
    86006336U,	// VMAXuv16i8
    85744192U,	// VMAXuv2i32
    85875264U,	// VMAXuv4i16
    85744192U,	// VMAXuv4i32
    85875264U,	// VMAXuv8i16
    86006336U,	// VMAXuv8i8
    3291247045U,	// VMINNMD
    3291246737U,	// VMINNMND
    3291246737U,	// VMINNMNQ
    3291246737U,	// VMINNMS
    2215401463U,	// VMINfd
    2215401463U,	// VMINfq
    85612535U,	// VMINsv16i8
    85350391U,	// VMINsv2i32
    85481463U,	// VMINsv4i16
    85350391U,	// VMINsv4i32
    85481463U,	// VMINsv8i16
    85612535U,	// VMINsv8i8
    86005751U,	// VMINuv16i8
    85743607U,	// VMINuv2i32
    85874679U,	// VMINuv4i16
    85743607U,	// VMINuv4i32
    85874679U,	// VMINuv8i16
    86005751U,	// VMINuv8i8
    3289015436U,	// VMLAD
    186058547U,	// VMLALslsv2i32
    186189619U,	// VMLALslsv4i16
    186451763U,	// VMLALsluv2i32
    186582835U,	// VMLALsluv4i16
    186017587U,	// VMLALsv2i64
    186148659U,	// VMLALsv4i32
    186279731U,	// VMLALsv8i16
    186410803U,	// VMLALuv2i64
    186541875U,	// VMLALuv4i32
    186672947U,	// VMLALuv8i16
    3289146508U,	// VMLAS
    3289146508U,	// VMLAfd
    3289146508U,	// VMLAfq
    3289187468U,	// VMLAslfd
    3289187468U,	// VMLAslfq
    186975372U,	// VMLAslv2i32
    187106444U,	// VMLAslv4i16
    186975372U,	// VMLAslv4i32
    187106444U,	// VMLAslv8i16
    187196556U,	// VMLAv16i8
    186934412U,	// VMLAv2i32
    187065484U,	// VMLAv4i16
    186934412U,	// VMLAv4i32
    187065484U,	// VMLAv8i16
    187196556U,	// VMLAv8i8
    3289016576U,	// VMLSD
    186058666U,	// VMLSLslsv2i32
    186189738U,	// VMLSLslsv4i16
    186451882U,	// VMLSLsluv2i32
    186582954U,	// VMLSLsluv4i16
    186017706U,	// VMLSLsv2i64
    186148778U,	// VMLSLsv4i32
    186279850U,	// VMLSLsv8i16
    186410922U,	// VMLSLuv2i64
    186541994U,	// VMLSLuv4i32
    186673066U,	// VMLSLuv8i16
    3289147648U,	// VMLSS
    3289147648U,	// VMLSfd
    3289147648U,	// VMLSfq
    3289188608U,	// VMLSslfd
    3289188608U,	// VMLSslfq
    186976512U,	// VMLSslv2i32
    187107584U,	// VMLSslv4i16
    186976512U,	// VMLSslv4i32
    187107584U,	// VMLSslv8i16
    187197696U,	// VMLSv16i8
    186935552U,	// VMLSv2i32
    187066624U,	// VMLSv4i16
    186935552U,	// VMLSv4i32
    187066624U,	// VMLSv8i16
    187197696U,	// VMLSv8i8
    2215266831U,	// VMOVD
    23055U,	// VMOVDRR
    0U,	// VMOVDcc
    1159088069U,	// VMOVLsv2i64
    1159219141U,	// VMOVLsv4i32
    1159350213U,	// VMOVLsv8i16
    1159481285U,	// VMOVLuv2i64
    1159612357U,	// VMOVLuv4i32
    1159743429U,	// VMOVLuv8i16
    1159874635U,	// VMOVNv2i32
    1160005707U,	// VMOVNv4i16
    1160136779U,	// VMOVNv8i8
    23055U,	// VMOVRRD
    27151U,	// VMOVRRS
    18959U,	// VMOVRS
    2215397903U,	// VMOVS
    18959U,	// VMOVSR
    27151U,	// VMOVSRR
    0U,	// VMOVScc
    237521423U,	// VMOVv16i8
    237128207U,	// VMOVv1i64
    3289139727U,	// VMOVv2f32
    237259279U,	// VMOVv2i32
    237128207U,	// VMOVv2i64
    3289139727U,	// VMOVv4f32
    237390351U,	// VMOVv4i16
    237259279U,	// VMOVv4i32
    237390351U,	// VMOVv8i16
    237521423U,	// VMOVv8i8
    2147518743U,	// VMRS
    3221260567U,	// VMRS_FPEXC
    35095U,	// VMRS_FPINST
    1073776919U,	// VMRS_FPINST2
    2147518743U,	// VMRS_FPSID
    3221260567U,	// VMRS_MVFR0
    35095U,	// VMRS_MVFR1
    5146824U,	// VMSR
    5277896U,	// VMSR_FPEXC
    5408968U,	// VMSR_FPINST
    5540040U,	// VMSR_FPINST2
    5671112U,	// VMSR_FPSID
    2215270336U,	// VMULD
    5789591U,	// VMULLp
    85354391U,	// VMULLslsv2i32
    85485463U,	// VMULLslsv4i16
    85747607U,	// VMULLsluv2i32
    85878679U,	// VMULLsluv4i16
    85350295U,	// VMULLsv2i64
    85481367U,	// VMULLsv4i32
    85612439U,	// VMULLsv8i16
    85743511U,	// VMULLuv2i64
    85874583U,	// VMULLuv4i32
    86005655U,	// VMULLuv8i16
    2215401408U,	// VMULS
    2215401408U,	// VMULfd
    2215401408U,	// VMULfq
    5789632U,	// VMULpd
    5789632U,	// VMULpq
    2215405504U,	// VMULslfd
    2215405504U,	// VMULslfq
    86271936U,	// VMULslv2i32
    86403008U,	// VMULslv4i16
    86271936U,	// VMULslv4i32
    86403008U,	// VMULslv8i16
    86529984U,	// VMULv16i8
    86267840U,	// VMULv2i32
    86398912U,	// VMULv4i16
    86267840U,	// VMULv4i32
    86398912U,	// VMULv8i16
    86529984U,	// VMULv8i8
    18495U,	// VMVNd
    18495U,	// VMVNq
    237258815U,	// VMVNv2i32
    237389887U,	// VMVNv4i16
    237258815U,	// VMVNv4i32
    237389887U,	// VMVNv8i16
    2215265909U,	// VNEGD
    2215396981U,	// VNEGS
    2215396981U,	// VNEGf32q
    2215396981U,	// VNEGfd
    1159218805U,	// VNEGs16d
    1159218805U,	// VNEGs16q
    1159087733U,	// VNEGs32d
    1159087733U,	// VNEGs32q
    1159349877U,	// VNEGs8d
    1159349877U,	// VNEGs8q
    3289015430U,	// VNMLAD
    3289146502U,	// VNMLAS
    3289016570U,	// VNMLSD
    3289147642U,	// VNMLSS
    2215270330U,	// VNMULD
    2215401402U,	// VNMULS
    22556U,	// VORNd
    22556U,	// VORNq
    22712U,	// VORRd
    237263032U,	// VORRiv2i32
    237394104U,	// VORRiv4i16
    237263032U,	// VORRiv4i32
    237394104U,	// VORRiv8i16
    22712U,	// VORRq
    1260017432U,	// VPADALsv16i8
    1259755288U,	// VPADALsv2i32
    1259886360U,	// VPADALsv4i16
    1259755288U,	// VPADALsv4i32
    1259886360U,	// VPADALsv8i16
    1260017432U,	// VPADALsv8i8
    1260410648U,	// VPADALuv16i8
    1260148504U,	// VPADALuv2i32
    1260279576U,	// VPADALuv4i16
    1260148504U,	// VPADALuv4i32
    1260279576U,	// VPADALuv8i16
    1260410648U,	// VPADALuv8i8
    1159350100U,	// VPADDLsv16i8
    1159087956U,	// VPADDLsv2i32
    1159219028U,	// VPADDLsv4i16
    1159087956U,	// VPADDLsv4i32
    1159219028U,	// VPADDLsv8i16
    1159350100U,	// VPADDLsv8i8
    1159743316U,	// VPADDLuv16i8
    1159481172U,	// VPADDLuv2i32
    1159612244U,	// VPADDLuv4i16
    1159481172U,	// VPADDLuv4i32
    1159612244U,	// VPADDLuv8i16
    1159743316U,	// VPADDLuv8i8
    2215400925U,	// VPADDf
    86398429U,	// VPADDi16
    86267357U,	// VPADDi32
    86529501U,	// VPADDi8
    2215402042U,	// VPMAXf
    85482042U,	// VPMAXs16
    85350970U,	// VPMAXs32
    85613114U,	// VPMAXs8
    85875258U,	// VPMAXu16
    85744186U,	// VPMAXu32
    86006330U,	// VPMAXu8
    2215401457U,	// VPMINf
    85481457U,	// VPMINs16
    85350385U,	// VPMINs32
    85612529U,	// VPMINs8
    85874673U,	// VPMINu16
    85743601U,	// VPMINu32
    86005745U,	// VPMINu8
    1159350495U,	// VQABSv16i8
    1159088351U,	// VQABSv2i32
    1159219423U,	// VQABSv4i16
    1159088351U,	// VQABSv4i32
    1159219423U,	// VQABSv8i16
    1159350495U,	// VQABSv8i8
    85612003U,	// VQADDsv16i8
    89806307U,	// VQADDsv1i64
    85349859U,	// VQADDsv2i32
    89806307U,	// VQADDsv2i64
    85480931U,	// VQADDsv4i16
    85349859U,	// VQADDsv4i32
    85480931U,	// VQADDsv8i16
    85612003U,	// VQADDsv8i8
    86005219U,	// VQADDuv16i8
    89937379U,	// VQADDuv1i64
    85743075U,	// VQADDuv2i32
    89937379U,	// VQADDuv2i64
    85874147U,	// VQADDuv4i16
    85743075U,	// VQADDuv4i32
    85874147U,	// VQADDuv8i16
    86005219U,	// VQADDuv8i8
    186058527U,	// VQDMLALslv2i32
    186189599U,	// VQDMLALslv4i16
    186017567U,	// VQDMLALv2i64
    186148639U,	// VQDMLALv4i32
    186058658U,	// VQDMLSLslv2i32
    186189730U,	// VQDMLSLslv4i16
    186017698U,	// VQDMLSLv2i64
    186148770U,	// VQDMLSLv4i32
    85354132U,	// VQDMULHslv2i32
    85485204U,	// VQDMULHslv4i16
    85354132U,	// VQDMULHslv4i32
    85485204U,	// VQDMULHslv8i16
    85350036U,	// VQDMULHv2i32
    85481108U,	// VQDMULHv4i16
    85350036U,	// VQDMULHv4i32
    85481108U,	// VQDMULHv8i16
    85354371U,	// VQDMULLslv2i32
    85485443U,	// VQDMULLslv4i16
    85350275U,	// VQDMULLv2i64
    85481347U,	// VQDMULLv4i32
    1163544631U,	// VQMOVNsuv2i32
    1159088183U,	// VQMOVNsuv4i16
    1159219255U,	// VQMOVNsuv8i8
    1163544644U,	// VQMOVNsv2i32
    1159088196U,	// VQMOVNsv4i16
    1159219268U,	// VQMOVNsv8i8
    1163675716U,	// VQMOVNuv2i32
    1159481412U,	// VQMOVNuv4i16
    1159612484U,	// VQMOVNuv8i8
    1159349871U,	// VQNEGv16i8
    1159087727U,	// VQNEGv2i32
    1159218799U,	// VQNEGv4i16
    1159087727U,	// VQNEGv4i32
    1159218799U,	// VQNEGv8i16
    1159349871U,	// VQNEGv8i8
    85354140U,	// VQRDMULHslv2i32
    85485212U,	// VQRDMULHslv4i16
    85354140U,	// VQRDMULHslv4i32
    85485212U,	// VQRDMULHslv8i16
    85350044U,	// VQRDMULHv2i32
    85481116U,	// VQRDMULHv4i16
    85350044U,	// VQRDMULHv4i32
    85481116U,	// VQRDMULHv8i16
    85612395U,	// VQRSHLsv16i8
    89806699U,	// VQRSHLsv1i64
    85350251U,	// VQRSHLsv2i32
    89806699U,	// VQRSHLsv2i64
    85481323U,	// VQRSHLsv4i16
    85350251U,	// VQRSHLsv4i32
    85481323U,	// VQRSHLsv8i16
    85612395U,	// VQRSHLsv8i8
    86005611U,	// VQRSHLuv16i8
    89937771U,	// VQRSHLuv1i64
    85743467U,	// VQRSHLuv2i32
    89937771U,	// VQRSHLuv2i64
    85874539U,	// VQRSHLuv4i16
    85743467U,	// VQRSHLuv4i32
    85874539U,	// VQRSHLuv8i16
    86005611U,	// VQRSHLuv8i8
    89806855U,	// VQRSHRNsv2i32
    85350407U,	// VQRSHRNsv4i16
    85481479U,	// VQRSHRNsv8i8
    89937927U,	// VQRSHRNuv2i32
    85743623U,	// VQRSHRNuv4i16
    85874695U,	// VQRSHRNuv8i8
    89806894U,	// VQRSHRUNv2i32
    85350446U,	// VQRSHRUNv4i16
    85481518U,	// VQRSHRUNv8i8
    85612389U,	// VQSHLsiv16i8
    89806693U,	// VQSHLsiv1i64
    85350245U,	// VQSHLsiv2i32
    89806693U,	// VQSHLsiv2i64
    85481317U,	// VQSHLsiv4i16
    85350245U,	// VQSHLsiv4i32
    85481317U,	// VQSHLsiv8i16
    85612389U,	// VQSHLsiv8i8
    85613041U,	// VQSHLsuv16i8
    89807345U,	// VQSHLsuv1i64
    85350897U,	// VQSHLsuv2i32
    89807345U,	// VQSHLsuv2i64
    85481969U,	// VQSHLsuv4i16
    85350897U,	// VQSHLsuv4i32
    85481969U,	// VQSHLsuv8i16
    85613041U,	// VQSHLsuv8i8
    85612389U,	// VQSHLsv16i8
    89806693U,	// VQSHLsv1i64
    85350245U,	// VQSHLsv2i32
    89806693U,	// VQSHLsv2i64
    85481317U,	// VQSHLsv4i16
    85350245U,	// VQSHLsv4i32
    85481317U,	// VQSHLsv8i16
    85612389U,	// VQSHLsv8i8
    86005605U,	// VQSHLuiv16i8
    89937765U,	// VQSHLuiv1i64
    85743461U,	// VQSHLuiv2i32
    89937765U,	// VQSHLuiv2i64
    85874533U,	// VQSHLuiv4i16
    85743461U,	// VQSHLuiv4i32
    85874533U,	// VQSHLuiv8i16
    86005605U,	// VQSHLuiv8i8
    86005605U,	// VQSHLuv16i8
    89937765U,	// VQSHLuv1i64
    85743461U,	// VQSHLuv2i32
    89937765U,	// VQSHLuv2i64
    85874533U,	// VQSHLuv4i16
    85743461U,	// VQSHLuv4i32
    85874533U,	// VQSHLuv8i16
    86005605U,	// VQSHLuv8i8
    89806848U,	// VQSHRNsv2i32
    85350400U,	// VQSHRNsv4i16
    85481472U,	// VQSHRNsv8i8
    89937920U,	// VQSHRNuv2i32
    85743616U,	// VQSHRNuv4i16
    85874688U,	// VQSHRNuv8i8
    89806886U,	// VQSHRUNv2i32
    85350438U,	// VQSHRUNv4i16
    85481510U,	// VQSHRUNv8i8
    85611862U,	// VQSUBsv16i8
    89806166U,	// VQSUBsv1i64
    85349718U,	// VQSUBsv2i32
    89806166U,	// VQSUBsv2i64
    85480790U,	// VQSUBsv4i16
    85349718U,	// VQSUBsv4i32
    85480790U,	// VQSUBsv8i16
    85611862U,	// VQSUBsv8i8
    86005078U,	// VQSUBuv16i8
    89937238U,	// VQSUBuv1i64
    85742934U,	// VQSUBuv2i32
    89937238U,	// VQSUBuv2i64
    85874006U,	// VQSUBuv4i16
    85742934U,	// VQSUBuv4i32
    85874006U,	// VQSUBuv8i16
    86005078U,	// VQSUBuv8i8
    86136802U,	// VRADDHNv2i32
    86267874U,	// VRADDHNv4i16
    86398946U,	// VRADDHNv8i8
    1159480913U,	// VRECPEd
    2215396945U,	// VRECPEfd
    2215396945U,	// VRECPEfq
    1159480913U,	// VRECPEq
    2215401744U,	// VRECPSfd
    2215401744U,	// VRECPSfq
    2769870U,	// VREV16d8
    2769870U,	// VREV16q8
    4342533U,	// VREV32d16
    2769669U,	// VREV32d8
    4342533U,	// VREV32q16
    2769669U,	// VREV32q8
    4342597U,	// VREV64d16
    4473669U,	// VREV64d32
    2769733U,	// VREV64d8
    4342597U,	// VREV64q16
    4473669U,	// VREV64q32
    2769733U,	// VREV64q8
    85611984U,	// VRHADDsv16i8
    85349840U,	// VRHADDsv2i32
    85480912U,	// VRHADDsv4i16
    85349840U,	// VRHADDsv4i32
    85480912U,	// VRHADDsv8i16
    85611984U,	// VRHADDsv8i8
    86005200U,	// VRHADDuv16i8
    85743056U,	// VRHADDuv2i32
    85874128U,	// VRHADDuv4i16
    85743056U,	// VRHADDuv4i32
    85874128U,	// VRHADDuv8i16
    86005200U,	// VRHADDuv8i8
    271348141U,	// VRINTAD
    271347833U,	// VRINTAND
    271347833U,	// VRINTANQ
    271347833U,	// VRINTAS
    271348189U,	// VRINTMD
    271347881U,	// VRINTMND
    271347881U,	// VRINTMNQ
    271347881U,	// VRINTMS
    271348201U,	// VRINTND
    271347893U,	// VRINTNND
    271347893U,	// VRINTNNQ
    271347893U,	// VRINTNS
    271348213U,	// VRINTPD
    271347905U,	// VRINTPND
    271347905U,	// VRINTPNQ
    271347905U,	// VRINTPS
    2215266509U,	// VRINTRD
    2215397581U,	// VRINTRS
    2215267054U,	// VRINTXD
    271347953U,	// VRINTXND
    271347953U,	// VRINTXNQ
    2215398126U,	// VRINTXS
    2215267066U,	// VRINTZD
    271347965U,	// VRINTZND
    271347965U,	// VRINTZNQ
    2215398138U,	// VRINTZS
    85612402U,	// VRSHLsv16i8
    89806706U,	// VRSHLsv1i64
    85350258U,	// VRSHLsv2i32
    89806706U,	// VRSHLsv2i64
    85481330U,	// VRSHLsv4i16
    85350258U,	// VRSHLsv4i32
    85481330U,	// VRSHLsv8i16
    85612402U,	// VRSHLsv8i8
    86005618U,	// VRSHLuv16i8
    89937778U,	// VRSHLuv1i64
    85743474U,	// VRSHLuv2i32
    89937778U,	// VRSHLuv2i64
    85874546U,	// VRSHLuv4i16
    85743474U,	// VRSHLuv4i32
    85874546U,	// VRSHLuv8i16
    86005618U,	// VRSHLuv8i8
    86136847U,	// VRSHRNv2i32
    86267919U,	// VRSHRNv4i16
    86398991U,	// VRSHRNv8i8
    85612696U,	// VRSHRsv16i8
    89807000U,	// VRSHRsv1i64
    85350552U,	// VRSHRsv2i32
    89807000U,	// VRSHRsv2i64
    85481624U,	// VRSHRsv4i16
    85350552U,	// VRSHRsv4i32
    85481624U,	// VRSHRsv8i16
    85612696U,	// VRSHRsv8i8
    86005912U,	// VRSHRuv16i8
    89938072U,	// VRSHRuv1i64
    85743768U,	// VRSHRuv2i32
    89938072U,	// VRSHRuv2i64
    85874840U,	// VRSHRuv4i16
    85743768U,	// VRSHRuv4i32
    85874840U,	// VRSHRuv8i16
    86005912U,	// VRSHRuv8i8
    1159480926U,	// VRSQRTEd
    2215396958U,	// VRSQRTEfd
    2215396958U,	// VRSQRTEfq
    1159480926U,	// VRSQRTEq
    2215401766U,	// VRSQRTSfd
    2215401766U,	// VRSQRTSfq
    186279068U,	// VRSRAsv16i8
    190473372U,	// VRSRAsv1i64
    186016924U,	// VRSRAsv2i32
    190473372U,	// VRSRAsv2i64
    186147996U,	// VRSRAsv4i16
    186016924U,	// VRSRAsv4i32
    186147996U,	// VRSRAsv8i16
    186279068U,	// VRSRAsv8i8
    186672284U,	// VRSRAuv16i8
    190604444U,	// VRSRAuv1i64
    186410140U,	// VRSRAuv2i32
    190604444U,	// VRSRAuv2i64
    186541212U,	// VRSRAuv4i16
    186410140U,	// VRSRAuv4i32
    186541212U,	// VRSRAuv8i16
    186672284U,	// VRSRAuv8i8
    86136787U,	// VRSUBHNv2i32
    86267859U,	// VRSUBHNv4i16
    86398931U,	// VRSUBHNv8i8
    3291247105U,	// VSELEQD
    3291246797U,	// VSELEQS
    3291247033U,	// VSELGED
    3291246725U,	// VSELGES
    3291247129U,	// VSELGTD
    3291246821U,	// VSELGTS
    3291247117U,	// VSELVSD
    3291246809U,	// VSELVSS
    1078094351U,	// VSETLNi16
    1078225423U,	// VSETLNi32
    1076521487U,	// VSETLNi8
    86398845U,	// VSHLLi16
    86267773U,	// VSHLLi32
    86529917U,	// VSHLLi8
    85350269U,	// VSHLLsv2i64
    85481341U,	// VSHLLsv4i32
    85612413U,	// VSHLLsv8i16
    85743485U,	// VSHLLuv2i64
    85874557U,	// VSHLLuv4i32
    86005629U,	// VSHLLuv8i16
    86529912U,	// VSHLiv16i8
    86136696U,	// VSHLiv1i64
    86267768U,	// VSHLiv2i32
    86136696U,	// VSHLiv2i64
    86398840U,	// VSHLiv4i16
    86267768U,	// VSHLiv4i32
    86398840U,	// VSHLiv8i16
    86529912U,	// VSHLiv8i8
    85612408U,	// VSHLsv16i8
    89806712U,	// VSHLsv1i64
    85350264U,	// VSHLsv2i32
    89806712U,	// VSHLsv2i64
    85481336U,	// VSHLsv4i16
    85350264U,	// VSHLsv4i32
    85481336U,	// VSHLsv8i16
    85612408U,	// VSHLsv8i8
    86005624U,	// VSHLuv16i8
    89937784U,	// VSHLuv1i64
    85743480U,	// VSHLuv2i32
    89937784U,	// VSHLuv2i64
    85874552U,	// VSHLuv4i16
    85743480U,	// VSHLuv4i32
    85874552U,	// VSHLuv8i16
    86005624U,	// VSHLuv8i8
    86136854U,	// VSHRNv2i32
    86267926U,	// VSHRNv4i16
    86398998U,	// VSHRNv8i8
    85612702U,	// VSHRsv16i8
    89807006U,	// VSHRsv1i64
    85350558U,	// VSHRsv2i32
    89807006U,	// VSHRsv2i64
    85481630U,	// VSHRsv4i16
    85350558U,	// VSHRsv4i32
    85481630U,	// VSHRsv8i16
    85612702U,	// VSHRsv8i8
    86005918U,	// VSHRuv16i8
    89938078U,	// VSHRuv1i64
    85743774U,	// VSHRuv2i32
    89938078U,	// VSHRuv2i64
    85874846U,	// VSHRuv4i16
    85743774U,	// VSHRuv4i32
    85874846U,	// VSHRuv8i16
    86005918U,	// VSHRuv8i8
    6183380U,	// VSHTOD
    6314452U,	// VSHTOS
    274876884U,	// VSITOD
    272517588U,	// VSITOS
    2778866U,	// VSLIv16i8
    4613874U,	// VSLIv1i64
    4482802U,	// VSLIv2i32
    4613874U,	// VSLIv2i64
    4351730U,	// VSLIv4i16
    4482802U,	// VSLIv4i32
    4351730U,	// VSLIv8i16
    2778866U,	// VSLIv8i8
    2221038036U,	// VSLTOD
    2218678740U,	// VSLTOS
    2215266728U,	// VSQRTD
    2215397800U,	// VSQRTS
    186279074U,	// VSRAsv16i8
    190473378U,	// VSRAsv1i64
    186016930U,	// VSRAsv2i32
    190473378U,	// VSRAsv2i64
    186148002U,	// VSRAsv4i16
    186016930U,	// VSRAsv4i32
    186148002U,	// VSRAsv8i16
    186279074U,	// VSRAsv8i8
    186672290U,	// VSRAuv16i8
    190604450U,	// VSRAuv1i64
    186410146U,	// VSRAuv2i32
    190604450U,	// VSRAuv2i64
    186541218U,	// VSRAuv4i16
    186410146U,	// VSRAuv4i32
    186541218U,	// VSRAuv8i16
    186672290U,	// VSRAuv8i8
    2778871U,	// VSRIv16i8
    4613879U,	// VSRIv1i64
    4482807U,	// VSRIv2i32
    4613879U,	// VSRIv2i64
    4351735U,	// VSRIv4i16
    4482807U,	// VSRIv4i32
    4351735U,	// VSRIv8i16
    2778871U,	// VSRIv8i8
    3410518784U,	// VST1LNd16
    3746079488U,	// VST1LNd16_UPD
    3410649856U,	// VST1LNd32
    3746210560U,	// VST1LNd32_UPD
    3410780928U,	// VST1LNd8
    3746341632U,	// VST1LNd8_UPD
    4350720U,	// VST1LNdAsm_16
    4481792U,	// VST1LNdAsm_32
    2777856U,	// VST1LNdAsm_8
    4350720U,	// VST1LNdWB_fixed_Asm_16
    4481792U,	// VST1LNdWB_fixed_Asm_32
    2777856U,	// VST1LNdWB_fixed_Asm_8
    4391680U,	// VST1LNdWB_register_Asm_16
    4522752U,	// VST1LNdWB_register_Asm_32
    2818816U,	// VST1LNdWB_register_Asm_8
    0U,	// VST1LNq16Pseudo
    0U,	// VST1LNq16Pseudo_UPD
    0U,	// VST1LNq32Pseudo
    0U,	// VST1LNq32Pseudo_UPD
    0U,	// VST1LNq8Pseudo
    0U,	// VST1LNq8Pseudo_UPD
    541217536U,	// VST1d16
    557994752U,	// VST1d16Q
    574776064U,	// VST1d16Qwb_fixed
    591594240U,	// VST1d16Qwb_register
    608326400U,	// VST1d16T
    625107712U,	// VST1d16Twb_fixed
    641925888U,	// VST1d16Twb_register
    658662144U,	// VST1d16wb_fixed
    675480320U,	// VST1d16wb_register
    541348608U,	// VST1d32
    558125824U,	// VST1d32Q
    574907136U,	// VST1d32Qwb_fixed
    591725312U,	// VST1d32Qwb_register
    608457472U,	// VST1d32T
    625238784U,	// VST1d32Twb_fixed
    642056960U,	// VST1d32Twb_register
    658793216U,	// VST1d32wb_fixed
    675611392U,	// VST1d32wb_register
    541479680U,	// VST1d64
    558256896U,	// VST1d64Q
    0U,	// VST1d64QPseudo
    0U,	// VST1d64QPseudoWB_fixed
    0U,	// VST1d64QPseudoWB_register
    575038208U,	// VST1d64Qwb_fixed
    591856384U,	// VST1d64Qwb_register
    608588544U,	// VST1d64T
    0U,	// VST1d64TPseudo
    0U,	// VST1d64TPseudoWB_fixed
    0U,	// VST1d64TPseudoWB_register
    625369856U,	// VST1d64Twb_fixed
    642188032U,	// VST1d64Twb_register
    658924288U,	// VST1d64wb_fixed
    675742464U,	// VST1d64wb_register
    539644672U,	// VST1d8
    556421888U,	// VST1d8Q
    573203200U,	// VST1d8Qwb_fixed
    590021376U,	// VST1d8Qwb_register
    606753536U,	// VST1d8T
    623534848U,	// VST1d8Twb_fixed
    640353024U,	// VST1d8Twb_register
    657089280U,	// VST1d8wb_fixed
    673907456U,	// VST1d8wb_register
    692212480U,	// VST1q16
    708993792U,	// VST1q16wb_fixed
    725811968U,	// VST1q16wb_register
    692343552U,	// VST1q32
    709124864U,	// VST1q32wb_fixed
    725943040U,	// VST1q32wb_register
    692474624U,	// VST1q64
    709255936U,	// VST1q64wb_fixed
    726074112U,	// VST1q64wb_register
    690639616U,	// VST1q8
    707420928U,	// VST1q8wb_fixed
    724239104U,	// VST1q8wb_register
    3410559798U,	// VST2LNd16
    0U,	// VST2LNd16Pseudo
    0U,	// VST2LNd16Pseudo_UPD
    3746132790U,	// VST2LNd16_UPD
    3410690870U,	// VST2LNd32
    0U,	// VST2LNd32Pseudo
    0U,	// VST2LNd32Pseudo_UPD
    3746263862U,	// VST2LNd32_UPD
    3410821942U,	// VST2LNd8
    0U,	// VST2LNd8Pseudo
    0U,	// VST2LNd8Pseudo_UPD
    3746394934U,	// VST2LNd8_UPD
    4350774U,	// VST2LNdAsm_16
    4481846U,	// VST2LNdAsm_32
    2777910U,	// VST2LNdAsm_8
    4350774U,	// VST2LNdWB_fixed_Asm_16
    4481846U,	// VST2LNdWB_fixed_Asm_32
    2777910U,	// VST2LNdWB_fixed_Asm_8
    4391734U,	// VST2LNdWB_register_Asm_16
    4522806U,	// VST2LNdWB_register_Asm_32
    2818870U,	// VST2LNdWB_register_Asm_8
    3410559798U,	// VST2LNq16
    0U,	// VST2LNq16Pseudo
    0U,	// VST2LNq16Pseudo_UPD
    3746132790U,	// VST2LNq16_UPD
    3410690870U,	// VST2LNq32
    0U,	// VST2LNq32Pseudo
    0U,	// VST2LNq32Pseudo_UPD
    3746263862U,	// VST2LNq32_UPD
    4350774U,	// VST2LNqAsm_16
    4481846U,	// VST2LNqAsm_32
    4350774U,	// VST2LNqWB_fixed_Asm_16
    4481846U,	// VST2LNqWB_fixed_Asm_32
    4391734U,	// VST2LNqWB_register_Asm_16
    4522806U,	// VST2LNqWB_register_Asm_32
    742544182U,	// VST2b16
    759325494U,	// VST2b16wb_fixed
    776143670U,	// VST2b16wb_register
    742675254U,	// VST2b32
    759456566U,	// VST2b32wb_fixed
    776274742U,	// VST2b32wb_register
    740971318U,	// VST2b8
    757752630U,	// VST2b8wb_fixed
    774570806U,	// VST2b8wb_register
    692212534U,	// VST2d16
    708993846U,	// VST2d16wb_fixed
    725812022U,	// VST2d16wb_register
    692343606U,	// VST2d32
    709124918U,	// VST2d32wb_fixed
    725943094U,	// VST2d32wb_register
    690639670U,	// VST2d8
    707420982U,	// VST2d8wb_fixed
    724239158U,	// VST2d8wb_register
    557994806U,	// VST2q16
    0U,	// VST2q16Pseudo
    0U,	// VST2q16PseudoWB_fixed
    0U,	// VST2q16PseudoWB_register
    574776118U,	// VST2q16wb_fixed
    591594294U,	// VST2q16wb_register
    558125878U,	// VST2q32
    0U,	// VST2q32Pseudo
    0U,	// VST2q32PseudoWB_fixed
    0U,	// VST2q32PseudoWB_register
    574907190U,	// VST2q32wb_fixed
    591725366U,	// VST2q32wb_register
    556421942U,	// VST2q8
    0U,	// VST2q8Pseudo
    0U,	// VST2q8PseudoWB_fixed
    0U,	// VST2q8PseudoWB_register
    573203254U,	// VST2q8wb_fixed
    590021430U,	// VST2q8wb_register
    3410535232U,	// VST3LNd16
    0U,	// VST3LNd16Pseudo
    0U,	// VST3LNd16Pseudo_UPD
    3746145088U,	// VST3LNd16_UPD
    3410666304U,	// VST3LNd32
    0U,	// VST3LNd32Pseudo
    0U,	// VST3LNd32Pseudo_UPD
    3746276160U,	// VST3LNd32_UPD
    3410797376U,	// VST3LNd8
    0U,	// VST3LNd8Pseudo
    0U,	// VST3LNd8Pseudo_UPD
    3746407232U,	// VST3LNd8_UPD
    4350784U,	// VST3LNdAsm_16
    4481856U,	// VST3LNdAsm_32
    2777920U,	// VST3LNdAsm_8
    4350784U,	// VST3LNdWB_fixed_Asm_16
    4481856U,	// VST3LNdWB_fixed_Asm_32
    2777920U,	// VST3LNdWB_fixed_Asm_8
    4391744U,	// VST3LNdWB_register_Asm_16
    4522816U,	// VST3LNdWB_register_Asm_32
    2818880U,	// VST3LNdWB_register_Asm_8
    3410535232U,	// VST3LNq16
    0U,	// VST3LNq16Pseudo
    0U,	// VST3LNq16Pseudo_UPD
    3746145088U,	// VST3LNq16_UPD
    3410666304U,	// VST3LNq32
    0U,	// VST3LNq32Pseudo
    0U,	// VST3LNq32Pseudo_UPD
    3746276160U,	// VST3LNq32_UPD
    4350784U,	// VST3LNqAsm_16
    4481856U,	// VST3LNqAsm_32
    4350784U,	// VST3LNqWB_fixed_Asm_16
    4481856U,	// VST3LNqWB_fixed_Asm_32
    4391744U,	// VST3LNqWB_register_Asm_16
    4522816U,	// VST3LNqWB_register_Asm_32
    189334336U,	// VST3d16
    0U,	// VST3d16Pseudo
    0U,	// VST3d16Pseudo_UPD
    524907328U,	// VST3d16_UPD
    189465408U,	// VST3d32
    0U,	// VST3d32Pseudo
    0U,	// VST3d32Pseudo_UPD
    525038400U,	// VST3d32_UPD
    189596480U,	// VST3d8
    0U,	// VST3d8Pseudo
    0U,	// VST3d8Pseudo_UPD
    525169472U,	// VST3d8_UPD
    1430410048U,	// VST3dAsm_16
    1430541120U,	// VST3dAsm_32
    1428837184U,	// VST3dAsm_8
    1430410048U,	// VST3dWB_fixed_Asm_16
    1430541120U,	// VST3dWB_fixed_Asm_32
    1428837184U,	// VST3dWB_fixed_Asm_8
    1430414144U,	// VST3dWB_register_Asm_16
    1430545216U,	// VST3dWB_register_Asm_32
    1428841280U,	// VST3dWB_register_Asm_8
    189334336U,	// VST3q16
    0U,	// VST3q16Pseudo_UPD
    524907328U,	// VST3q16_UPD
    0U,	// VST3q16oddPseudo
    0U,	// VST3q16oddPseudo_UPD
    189465408U,	// VST3q32
    0U,	// VST3q32Pseudo_UPD
    525038400U,	// VST3q32_UPD
    0U,	// VST3q32oddPseudo
    0U,	// VST3q32oddPseudo_UPD
    189596480U,	// VST3q8
    0U,	// VST3q8Pseudo_UPD
    525169472U,	// VST3q8_UPD
    0U,	// VST3q8oddPseudo
    0U,	// VST3q8oddPseudo_UPD
    1531073344U,	// VST3qAsm_16
    1531204416U,	// VST3qAsm_32
    1529500480U,	// VST3qAsm_8
    1531073344U,	// VST3qWB_fixed_Asm_16
    1531204416U,	// VST3qWB_fixed_Asm_32
    1529500480U,	// VST3qWB_fixed_Asm_8
    457335616U,	// VST3qWB_register_Asm_16
    457466688U,	// VST3qWB_register_Asm_32
    455762752U,	// VST3qWB_register_Asm_8
    3410588497U,	// VST4LNd16
    0U,	// VST4LNd16Pseudo
    0U,	// VST4LNd16Pseudo_UPD
    3746136913U,	// VST4LNd16_UPD
    3410719569U,	// VST4LNd32
    0U,	// VST4LNd32Pseudo
    0U,	// VST4LNd32Pseudo_UPD
    3746267985U,	// VST4LNd32_UPD
    3410850641U,	// VST4LNd8
    0U,	// VST4LNd8Pseudo
    0U,	// VST4LNd8Pseudo_UPD
    3746399057U,	// VST4LNd8_UPD
    4350801U,	// VST4LNdAsm_16
    4481873U,	// VST4LNdAsm_32
    2777937U,	// VST4LNdAsm_8
    4350801U,	// VST4LNdWB_fixed_Asm_16
    4481873U,	// VST4LNdWB_fixed_Asm_32
    2777937U,	// VST4LNdWB_fixed_Asm_8
    4391761U,	// VST4LNdWB_register_Asm_16
    4522833U,	// VST4LNdWB_register_Asm_32
    2818897U,	// VST4LNdWB_register_Asm_8
    3410588497U,	// VST4LNq16
    0U,	// VST4LNq16Pseudo
    0U,	// VST4LNq16Pseudo_UPD
    3746136913U,	// VST4LNq16_UPD
    3410719569U,	// VST4LNq32
    0U,	// VST4LNq32Pseudo
    0U,	// VST4LNq32Pseudo_UPD
    3746267985U,	// VST4LNq32_UPD
    4350801U,	// VST4LNqAsm_16
    4481873U,	// VST4LNqAsm_32
    4350801U,	// VST4LNqWB_fixed_Asm_16
    4481873U,	// VST4LNqWB_fixed_Asm_32
    4391761U,	// VST4LNqWB_register_Asm_16
    4522833U,	// VST4LNqWB_register_Asm_32
    189309777U,	// VST4d16
    0U,	// VST4d16Pseudo
    0U,	// VST4d16Pseudo_UPD
    524919633U,	// VST4d16_UPD
    189440849U,	// VST4d32
    0U,	// VST4d32Pseudo
    0U,	// VST4d32Pseudo_UPD
    525050705U,	// VST4d32_UPD
    189571921U,	// VST4d8
    0U,	// VST4d8Pseudo
    0U,	// VST4d8Pseudo_UPD
    525181777U,	// VST4d8_UPD
    1413632849U,	// VST4dAsm_16
    1413763921U,	// VST4dAsm_32
    1412059985U,	// VST4dAsm_8
    1413632849U,	// VST4dWB_fixed_Asm_16
    1413763921U,	// VST4dWB_fixed_Asm_32
    1412059985U,	// VST4dWB_fixed_Asm_8
    1413636945U,	// VST4dWB_register_Asm_16
    1413768017U,	// VST4dWB_register_Asm_32
    1412064081U,	// VST4dWB_register_Asm_8
    189309777U,	// VST4q16
    0U,	// VST4q16Pseudo_UPD
    524919633U,	// VST4q16_UPD
    0U,	// VST4q16oddPseudo
    0U,	// VST4q16oddPseudo_UPD
    189440849U,	// VST4q32
    0U,	// VST4q32Pseudo_UPD
    525050705U,	// VST4q32_UPD
    0U,	// VST4q32oddPseudo
    0U,	// VST4q32oddPseudo_UPD
    189571921U,	// VST4q8
    0U,	// VST4q8Pseudo_UPD
    525181777U,	// VST4q8_UPD
    0U,	// VST4q8oddPseudo
    0U,	// VST4q8oddPseudo_UPD
    1581405009U,	// VST4qAsm_16
    1581536081U,	// VST4qAsm_32
    1579832145U,	// VST4qAsm_8
    1581405009U,	// VST4qWB_fixed_Asm_16
    1581536081U,	// VST4qWB_fixed_Asm_32
    1579832145U,	// VST4qWB_fixed_Asm_8
    507667281U,	// VST4qWB_register_Asm_16
    507798353U,	// VST4qWB_register_Asm_32
    506094417U,	// VST4qWB_register_Asm_8
    83903711U,	// VSTMDDB_UPD
    33907U,	// VSTMDIA
    83903603U,	// VSTMDIA_UPD
    0U,	// VSTMQIA
    83903711U,	// VSTMSDB_UPD
    33907U,	// VSTMSIA
    83903603U,	// VSTMSIA_UPD
    22740U,	// VSTRD
    22740U,	// VSTRS
    2215269724U,	// VSUBD
    86136795U,	// VSUBHNv2i32
    86267867U,	// VSUBHNv4i16
    86398939U,	// VSUBHNv8i8
    85350206U,	// VSUBLsv2i64
    85481278U,	// VSUBLsv4i32
    85612350U,	// VSUBLsv8i16
    85743422U,	// VSUBLuv2i64
    85874494U,	// VSUBLuv4i32
    86005566U,	// VSUBLuv8i16
    2215400796U,	// VSUBS
    85350932U,	// VSUBWsv2i64
    85482004U,	// VSUBWsv4i32
    85613076U,	// VSUBWsv8i16
    85744148U,	// VSUBWuv2i64
    85875220U,	// VSUBWuv4i32
    86006292U,	// VSUBWuv8i16
    2215400796U,	// VSUBfd
    2215400796U,	// VSUBfq
    86529372U,	// VSUBv16i8
    86136156U,	// VSUBv1i64
    86267228U,	// VSUBv2i32
    86136156U,	// VSUBv2i64
    86398300U,	// VSUBv4i16
    86267228U,	// VSUBv4i32
    86398300U,	// VSUBv8i16
    86529372U,	// VSUBv8i8
    26737U,	// VSWPd
    26737U,	// VSWPq
    2774841U,	// VTBL1
    2774841U,	// VTBL2
    2774841U,	// VTBL3
    0U,	// VTBL3Pseudo
    2774841U,	// VTBL4
    0U,	// VTBL4Pseudo
    2779761U,	// VTBX1
    2779761U,	// VTBX2
    2779761U,	// VTBX3
    0U,	// VTBX3Pseudo
    2779761U,	// VTBX4
    0U,	// VTBX4Pseudo
    6576596U,	// VTOSHD
    6707668U,	// VTOSHS
    275269849U,	// VTOSIRD
    272255193U,	// VTOSIRS
    275270100U,	// VTOSIZD
    272255444U,	// VTOSIZS
    2221431252U,	// VTOSLD
    2218416596U,	// VTOSLS
    6969812U,	// VTOUHD
    7100884U,	// VTOUHS
    275663065U,	// VTOUIRD
    272386265U,	// VTOUIRS
    275663316U,	// VTOUIZD
    272386516U,	// VTOUIZS
    2221824468U,	// VTOULD
    2218547668U,	// VTOULS
    4352033U,	// VTRNd16
    4483105U,	// VTRNd32
    2779169U,	// VTRNd8
    4352033U,	// VTRNq16
    4483105U,	// VTRNq32
    2779169U,	// VTRNq8
    2775475U,	// VTSTv16i8
    4479411U,	// VTSTv2i32
    4348339U,	// VTSTv4i16
    4479411U,	// VTSTv4i32
    4348339U,	// VTSTv8i16
    2775475U,	// VTSTv8i8
    7363028U,	// VUHTOD
    7494100U,	// VUHTOS
    276056532U,	// VUITOD
    272648660U,	// VUITOS
    2222217684U,	// VULTOD
    2218809812U,	// VULTOS
    4352118U,	// VUZPd16
    2779254U,	// VUZPd8
    4352118U,	// VUZPq16
    4483190U,	// VUZPq32
    2779254U,	// VUZPq8
    4352090U,	// VZIPd16
    2779226U,	// VZIPd8
    4352090U,	// VZIPq16
    4483162U,	// VZIPq32
    2779226U,	// VZIPq8
    33882U,	// sysLDMDA
    83903578U,	// sysLDMDA_UPD
    34009U,	// sysLDMDB
    83903705U,	// sysLDMDB_UPD
    34763U,	// sysLDMIA
    83904459U,	// sysLDMIA_UPD
    34028U,	// sysLDMIB
    83903724U,	// sysLDMIB_UPD
    33888U,	// sysSTMDA
    83903584U,	// sysSTMDA_UPD
    34016U,	// sysSTMDB
    83903712U,	// sysSTMDB_UPD
    34767U,	// sysSTMIA
    83904463U,	// sysSTMIA_UPD
    34034U,	// sysSTMIB
    83903730U,	// sysSTMIB_UPD
    0U,	// t2ABS
    5519U,	// t2ADCri
    7738767U,	// t2ADCrr
    7742863U,	// t2ADCrs
    0U,	// t2ADDSri
    0U,	// t2ADDSrr
    0U,	// t2ADDSrs
    7738828U,	// t2ADDri
    23067U,	// t2ADDri12
    7738828U,	// t2ADDrr
    7742924U,	// t2ADDrs
    7751823U,	// t2ADR
    5639U,	// t2ANDri
    7738887U,	// t2ANDrr
    7742983U,	// t2ANDrs
    7739581U,	// t2ASRri
    7739581U,	// t2ASRrr
    1081509034U,	// t2B
    21911U,	// t2BFC
    26342U,	// t2BFI
    5532U,	// t2BICri
    7738780U,	// t2BICrr
    7742876U,	// t2BICrs
    0U,	// t2BR_JT
    1073776380U,	// t2BXJ
    1081509034U,	// t2Bcc
    2164303958U,	// t2CDP
    2164302630U,	// t2CDP2
    301748U,	// t2CLREX
    19190U,	// t2CLZ
    7751676U,	// t2CMNri
    7751676U,	// t2CMNzrr
    7755772U,	// t2CMNzrs
    7751776U,	// t2CMPri
    7751776U,	// t2CMPrr
    7755872U,	// t2CMPrs
    291444U,	// t2CPS1p
    1131858195U,	// t2CPS2p
    50383123U,	// t2CPS3p
    1073776235U,	// t2DBG
    788563197U,	// t2DMB
    788563216U,	// t2DSB
    6315U,	// t2EORri
    7739563U,	// t2EORrr
    7743659U,	// t2EORrs
    1073777054U,	// t2HINT
    805340436U,	// t2ISB
    100727180U,	// t2IT
    0U,	// t2Int_eh_sjlj_setjmp
    0U,	// t2Int_eh_sjlj_setjmp_nofp
    17494U,	// t2LDA
    17575U,	// t2LDAB
    19106U,	// t2LDAEX
    17775U,	// t2LDAEXB
    22049U,	// t2LDAEXD
    18122U,	// t2LDAEXH
    18042U,	// t2LDAH
    3238029056U,	// t2LDC2L_OFFSET
    3238029056U,	// t2LDC2L_OPTION
    3238029056U,	// t2LDC2L_POST
    3238029056U,	// t2LDC2L_PRE
    3238028044U,	// t2LDC2_OFFSET
    3238028044U,	// t2LDC2_OPTION
    3238028044U,	// t2LDC2_POST
    3238028044U,	// t2LDC2_PRE
    3238029124U,	// t2LDCL_OFFSET
    3238029124U,	// t2LDCL_OPTION
    3238029124U,	// t2LDCL_POST
    3238029124U,	// t2LDCL_PRE
    3238028691U,	// t2LDC_OFFSET
    3238028691U,	// t2LDC_OPTION
    3238028691U,	// t2LDC_POST
    3238028691U,	// t2LDC_PRE
    34009U,	// t2LDMDB
    83903705U,	// t2LDMDB_UPD
    7768011U,	// t2LDMIA
    0U,	// t2LDMIA_RET
    91637707U,	// t2LDMIA_UPD
    22873U,	// t2LDRBT
    25862U,	// t2LDRB_POST
    25862U,	// t2LDRB_PRE
    7755014U,	// t2LDRBi12
    21766U,	// t2LDRBi8
    7750918U,	// t2LDRBpci
    148742U,	// t2LDRBpcrel
    7759110U,	// t2LDRBs
    67083U,	// t2LDRD_POST
    67083U,	// t2LDRD_PRE
    26123U,	// t2LDRDi8
    23214U,	// t2LDREX
    17789U,	// t2LDREXB
    22063U,	// t2LDREXD
    18136U,	// t2LDREXH
    22903U,	// t2LDRHT
    26277U,	// t2LDRH_POST
    26277U,	// t2LDRH_PRE
    7755429U,	// t2LDRHi12
    22181U,	// t2LDRHi8
    7751333U,	// t2LDRHpci
    149157U,	// t2LDRHpcrel
    7759525U,	// t2LDRHs
    22885U,	// t2LDRSBT
    25880U,	// t2LDRSB_POST
    25880U,	// t2LDRSB_PRE
    7755032U,	// t2LDRSBi12
    21784U,	// t2LDRSBi8
    7750936U,	// t2LDRSBpci
    148760U,	// t2LDRSBpcrel
    7759128U,	// t2LDRSBs
    22915U,	// t2LDRSHT
    26287U,	// t2LDRSH_POST
    26287U,	// t2LDRSH_PRE
    7755439U,	// t2LDRSHi12
    22191U,	// t2LDRSHi8
    7751343U,	// t2LDRSHpci
    149167U,	// t2LDRSHpcrel
    7759535U,	// t2LDRSHs
    22947U,	// t2LDRT
    26772U,	// t2LDR_POST
    26772U,	// t2LDR_PRE
    7755924U,	// t2LDRi12
    22676U,	// t2LDRi8
    7751828U,	// t2LDRpci
    0U,	// t2LDRpci_pic
    149652U,	// t2LDRpcrel
    7760020U,	// t2LDRs
    0U,	// t2LEApcrel
    0U,	// t2LEApcrelJT
    7739302U,	// t2LSLri
    7739302U,	// t2LSLrr
    7739588U,	// t2LSRri
    7739588U,	// t2LSRrr
    2164304011U,	// t2MCR
    2164302635U,	// t2MCR2
    2164328627U,	// t2MCRR
    2164327216U,	// t2MCRR2
    25730U,	// t2MLA
    26870U,	// t2MLS
    0U,	// t2MOVCCasr
    0U,	// t2MOVCCi
    0U,	// t2MOVCCi16
    0U,	// t2MOVCCi32imm
    0U,	// t2MOVCClsl
    0U,	// t2MOVCClsr
    0U,	// t2MOVCCr
    0U,	// t2MOVCCror
    153902U,	// t2MOVSsi
    157998U,	// t2MOVSsr
    23001U,	// t2MOVTi16
    0U,	// t2MOVTi16_ga_pcrel
    0U,	// t2MOV_ga_dyn
    0U,	// t2MOV_ga_pcrel
    7805456U,	// t2MOVi
    18981U,	// t2MOVi16
    0U,	// t2MOVi16_ga_pcrel
    0U,	// t2MOVi32imm
    7805456U,	// t2MOVr
    154128U,	// t2MOVsi
    158224U,	// t2MOVsr
    7751964U,	// t2MOVsra_flag
    7751969U,	// t2MOVsrl_flag
    201368996U,	// t2MRC
    201368337U,	// t2MRC2
    2164327848U,	// t2MRRC
    2164327190U,	// t2MRRC2
    35096U,	// t2MRS_AR
    18712U,	// t2MRS_M
    1073776920U,	// t2MRSsys_AR
    218122441U,	// t2MSR_AR
    218122441U,	// t2MSR_M
    22454U,	// t2MUL
    0U,	// t2MVNCCi
    71744U,	// t2MVNi
    7804992U,	// t2MVNr
    7739456U,	// t2MVNs
    6173U,	// t2ORNri
    6173U,	// t2ORNrr
    10269U,	// t2ORNrs
    6329U,	// t2ORRri
    7739577U,	// t2ORRrr
    7743673U,	// t2ORRrs
    26948U,	// t2PKHBT
    25893U,	// t2PKHTB
    822102560U,	// t2PLDWi12
    838879776U,	// t2PLDWi8
    855661088U,	// t2PLDWs
    822101499U,	// t2PLDi12
    838878715U,	// t2PLDi8
    872449531U,	// t2PLDpci
    855660027U,	// t2PLDs
    822101742U,	// t2PLIi12
    838878958U,	// t2PLIi8
    872449774U,	// t2PLIpci
    855660270U,	// t2PLIs
    21988U,	// t2QADD
    21419U,	// t2QADD16
    21522U,	// t2QADD8
    23263U,	// t2QASX
    21962U,	// t2QDADD
    21834U,	// t2QDSUB
    23122U,	// t2QSAX
    21847U,	// t2QSUB
    21381U,	// t2QSUB16
    21483U,	// t2QSUB8
    18826U,	// t2RBIT
    7752184U,	// t2REV
    7750607U,	// t2REV16
    7751354U,	// t2REVSH
    1073775826U,	// t2RFEDB
    1073775826U,	// t2RFEDBW
    1073775718U,	// t2RFEIA
    1073775718U,	// t2RFEIAW
    7739567U,	// t2RORri
    7739567U,	// t2RORrr
    72398U,	// t2RRX
    0U,	// t2RSBSri
    0U,	// t2RSBSrs
    7738650U,	// t2RSBri
    5402U,	// t2RSBrr
    9498U,	// t2RSBrs
    21426U,	// t2SADD16
    21528U,	// t2SADD8
    23268U,	// t2SASX
    5515U,	// t2SBCri
    7738763U,	// t2SBCrr
    7742859U,	// t2SBCrs
    27328U,	// t2SBFX
    23040U,	// t2SDIV
    22369U,	// t2SEL
    21402U,	// t2SHADD16
    21507U,	// t2SHADD8
    23250U,	// t2SHASX
    23109U,	// t2SHSAX
    21364U,	// t2SHSUB16
    21468U,	// t2SHSUB8
    1073776032U,	// t2SMC
    25784U,	// t2SMLABB
    26941U,	// t2SMLABT
    26041U,	// t2SMLAD
    27254U,	// t2SMLADX
    42791U,	// t2SMLAL
    25791U,	// t2SMLALBB
    26954U,	// t2SMLALBT
    26094U,	// t2SMLALD
    27268U,	// t2SMLALDX
    25899U,	// t2SMLALTB
    27071U,	// t2SMLALTT
    25886U,	// t2SMLATB
    27064U,	// t2SMLATT
    25953U,	// t2SMLAWB
    27102U,	// t2SMLAWT
    26133U,	// t2SMLSD
    27284U,	// t2SMLSDX
    26111U,	// t2SMLSLD
    27276U,	// t2SMLSLDX
    25728U,	// t2SMMLA
    26756U,	// t2SMMLAR
    26868U,	// t2SMMLS
    26817U,	// t2SMMLSR
    22452U,	// t2SMMUL
    22691U,	// t2SMMULR
    21951U,	// t2SMUAD
    23165U,	// t2SMUADX
    21703U,	// t2SMULBB
    22866U,	// t2SMULBT
    26507U,	// t2SMULL
    21811U,	// t2SMULTB
    22983U,	// t2SMULTT
    21864U,	// t2SMULWB
    23013U,	// t2SMULWT
    22043U,	// t2SMUSD
    23195U,	// t2SMUSDX
    7898342U,	// t2SRSDB
    8029414U,	// t2SRSDB_UPD
    7898234U,	// t2SRSIA
    8029306U,	// t2SRSIA_UPD
    26931U,	// t2SSAT
    21440U,	// t2SSAT16
    23127U,	// t2SSAX
    21388U,	// t2SSUB16
    21489U,	// t2SSUB8
    3238029062U,	// t2STC2L_OFFSET
    3238029062U,	// t2STC2L_OPTION
    3238029062U,	// t2STC2L_POST
    3238029062U,	// t2STC2L_PRE
    3238028060U,	// t2STC2_OFFSET
    3238028060U,	// t2STC2_OPTION
    3238028060U,	// t2STC2_POST
    3238028060U,	// t2STC2_PRE
    3238029129U,	// t2STCL_OFFSET
    3238029129U,	// t2STCL_OPTION
    3238029129U,	// t2STCL_POST
    3238029129U,	// t2STCL_PRE
    3238028721U,	// t2STC_OFFSET
    3238028721U,	// t2STC_OPTION
    3238028721U,	// t2STC_POST
    3238028721U,	// t2STC_PRE
    18352U,	// t2STL
    17656U,	// t2STLB
    23208U,	// t2STLEX
    21878U,	// t2STLEXB
    26152U,	// t2STLEXD
    22225U,	// t2STLEXH
    18063U,	// t2STLH
    34016U,	// t2STMDB
    83903712U,	// t2STMDB_UPD
    7768015U,	// t2STMIA
    91637711U,	// t2STMIA_UPD
    22879U,	// t2STRBT
    83911947U,	// t2STRB_POST
    83911947U,	// t2STRB_PRE
    0U,	// t2STRB_preidx
    7755019U,	// t2STRBi12
    21771U,	// t2STRBi8
    7759115U,	// t2STRBs
    83953168U,	// t2STRD_POST
    83953168U,	// t2STRD_PRE
    26128U,	// t2STRDi8
    27322U,	// t2STREX
    21892U,	// t2STREXB
    26166U,	// t2STREXD
    22239U,	// t2STREXH
    22909U,	// t2STRHT
    83912362U,	// t2STRH_POST
    83912362U,	// t2STRH_PRE
    0U,	// t2STRH_preidx
    7755434U,	// t2STRHi12
    22186U,	// t2STRHi8
    7759530U,	// t2STRHs
    22958U,	// t2STRT
    83912917U,	// t2STR_POST
    83912917U,	// t2STR_PRE
    0U,	// t2STR_preidx
    7755989U,	// t2STRi12
    22741U,	// t2STRi8
    7760085U,	// t2STRs
    8161514U,	// t2SUBS_PC_LR
    0U,	// t2SUBSri
    0U,	// t2SUBSrr
    0U,	// t2SUBSrs
    7738700U,	// t2SUBri
    23061U,	// t2SUBri12
    7738700U,	// t2SUBrr
    7742796U,	// t2SUBrs
    25772U,	// t2SXTAB
    25430U,	// t2SXTAB16
    26239U,	// t2SXTAH
    7755072U,	// t2SXTB
    21350U,	// t2SXTB16
    7755456U,	// t2SXTH
    889210062U,	// t2TBB
    0U,	// t2TBB_JT
    905987723U,	// t2TBH
    0U,	// t2TBH_JT
    7751808U,	// t2TEQri
    7751808U,	// t2TEQrr
    7755904U,	// t2TEQrs
    7752116U,	// t2TSTri
    7752116U,	// t2TSTrr
    7756212U,	// t2TSTrs
    21433U,	// t2UADD16
    21534U,	// t2UADD8
    23273U,	// t2UASX
    27333U,	// t2UBFX
    23045U,	// t2UDIV
    21410U,	// t2UHADD16
    21514U,	// t2UHADD8
    23256U,	// t2UHASX
    23115U,	// t2UHSAX
    21372U,	// t2UHSUB16
    21475U,	// t2UHSUB8
    26380U,	// t2UMAAL
    42797U,	// t2UMLAL
    26513U,	// t2UMULL
    21418U,	// t2UQADD16
    21521U,	// t2UQADD8
    23262U,	// t2UQASX
    23121U,	// t2UQSAX
    21380U,	// t2UQSUB16
    21482U,	// t2UQSUB8
    21501U,	// t2USAD8
    25557U,	// t2USADA8
    26936U,	// t2USAT
    21447U,	// t2USAT16
    23132U,	// t2USAX
    21395U,	// t2USUB16
    21495U,	// t2USUB8
    25778U,	// t2UXTAB
    25438U,	// t2UXTAB16
    26245U,	// t2UXTAH
    7755077U,	// t2UXTB
    21357U,	// t2UXTB16
    7755461U,	// t2UXTH
    931120527U,	// tADC
    21964U,	// tADDhirr
    192923084U,	// tADDi3
    931120588U,	// tADDi8
    21964U,	// tADDrSP
    21964U,	// tADDrSPi
    192923084U,	// tADDrr
    21964U,	// tADDspi
    21964U,	// tADDspr
    0U,	// tADJCALLSTACKDOWN
    0U,	// tADJCALLSTACKUP
    18575U,	// tADR
    931120647U,	// tAND
    192923837U,	// tASRri
    931121341U,	// tASRrr
    1073775786U,	// tB
    931120540U,	// tBIC
    291455U,	// tBKPT
    1258329915U,	// tBL
    1258330826U,	// tBLXi
    1258330826U,	// tBLXr
    0U,	// tBRIND
    0U,	// tBR_JTr
    1073777254U,	// tBX
    0U,	// tBX_CALL
    0U,	// tBX_RET
    0U,	// tBX_RET_vararg
    1073775786U,	// tBcc
    0U,	// tBfar
    271348377U,	// tCBNZ
    271348372U,	// tCBZ
    18428U,	// tCMNz
    18528U,	// tCMPhir
    18528U,	// tCMPi8
    18528U,	// tCMPr
    1124256019U,	// tCPS
    931121323U,	// tEOR
    0U,	// tInt_eh_sjlj_longjmp
    0U,	// tInt_eh_sjlj_setjmp
    34763U,	// tLDMIA
    0U,	// tLDMIA_UPD
    21766U,	// tLDRBi
    21766U,	// tLDRBr
    22181U,	// tLDRHi
    22181U,	// tLDRHr
    21784U,	// tLDRSB
    22191U,	// tLDRSH
    22676U,	// tLDRi
    18580U,	// tLDRpci
    0U,	// tLDRpci_pic
    22676U,	// tLDRr
    22676U,	// tLDRspi
    0U,	// tLEApcrel
    0U,	// tLEApcrelJT
    192923558U,	// tLSLri
    931121062U,	// tLSLrr
    192923844U,	// tLSRri
    931121348U,	// tLSRrr
    0U,	// tMOVCCr_pseudo
    271348345U,	// tMOVSr
    276941328U,	// tMOVi8
    18960U,	// tMOVr
    192923574U,	// tMUL
    276940864U,	// tMVN
    301156U,	// tNOP
    931121337U,	// tORR
    0U,	// tPICADD
    939563112U,	// tPOP
    0U,	// tPOP_RET
    939562677U,	// tPUSH
    18936U,	// tREV
    17359U,	// tREV16
    18106U,	// tREVSH
    931121327U,	// tROR
    260162842U,	// tRSB
    931120523U,	// tSBC
    86613U,	// tSETEND
    301564U,	// tSEV
    83904463U,	// tSTMIA_UPD
    21771U,	// tSTRBi
    21771U,	// tSTRBr
    22186U,	// tSTRHi
    22186U,	// tSTRHr
    22741U,	// tSTRi
    22741U,	// tSTRr
    22741U,	// tSTRspi
    192922956U,	// tSUBi3
    931120460U,	// tSUBi8
    192922956U,	// tSUBrr
    21836U,	// tSUBspi
    1073776053U,	// tSVC
    17728U,	// tSXTB
    18112U,	// tSXTH
    0U,	// tTAILJMPd
    0U,	// tTAILJMPdND
    0U,	// tTAILJMPr
    0U,	// tTPsoft
    2129U,	// tTRAP
    18868U,	// tTST
    17733U,	// tUXTB
    18117U,	// tUXTH
    300605U,	// tWFE
    300778U,	// tWFI
    300533U,	// tYIELD
    0U
  };

  static const uint32_t OpInfo2[] = {
    0U,	// PHI
    0U,	// INLINEASM
    0U,	// PROLOG_LABEL
    0U,	// EH_LABEL
    0U,	// GC_LABEL
    0U,	// KILL
    0U,	// EXTRACT_SUBREG
    0U,	// INSERT_SUBREG
    0U,	// IMPLICIT_DEF
    0U,	// SUBREG_TO_REG
    0U,	// COPY_TO_REGCLASS
    0U,	// DBG_VALUE
    0U,	// REG_SEQUENCE
    0U,	// COPY
    0U,	// BUNDLE
    0U,	// LIFETIME_START
    0U,	// LIFETIME_END
    0U,	// ABS
    0U,	// ADCri
    0U,	// ADCrr
    16384U,	// ADCrsi
    0U,	// ADCrsr
    0U,	// ADDSri
    0U,	// ADDSrr
    0U,	// ADDSrsi
    0U,	// ADDSrsr
    0U,	// ADDri
    0U,	// ADDrr
    16384U,	// ADDrsi
    0U,	// ADDrsr
    0U,	// ADJCALLSTACKDOWN
    0U,	// ADJCALLSTACKUP
    8U,	// ADR
    0U,	// ANDri
    0U,	// ANDrr
    16384U,	// ANDrsi
    0U,	// ANDrsr
    0U,	// ASRi
    0U,	// ASRr
    0U,	// ATOMADD6432
    0U,	// ATOMAND6432
    0U,	// ATOMCMPXCHG6432
    0U,	// ATOMIC_CMP_SWAP_I16
    0U,	// ATOMIC_CMP_SWAP_I32
    0U,	// ATOMIC_CMP_SWAP_I8
    0U,	// ATOMIC_LOAD_ADD_I16
    0U,	// ATOMIC_LOAD_ADD_I32
    0U,	// ATOMIC_LOAD_ADD_I8
    0U,	// ATOMIC_LOAD_AND_I16
    0U,	// ATOMIC_LOAD_AND_I32
    0U,	// ATOMIC_LOAD_AND_I8
    0U,	// ATOMIC_LOAD_MAX_I16
    0U,	// ATOMIC_LOAD_MAX_I32
    0U,	// ATOMIC_LOAD_MAX_I8
    0U,	// ATOMIC_LOAD_MIN_I16
    0U,	// ATOMIC_LOAD_MIN_I32
    0U,	// ATOMIC_LOAD_MIN_I8
    0U,	// ATOMIC_LOAD_NAND_I16
    0U,	// ATOMIC_LOAD_NAND_I32
    0U,	// ATOMIC_LOAD_NAND_I8
    0U,	// ATOMIC_LOAD_OR_I16
    0U,	// ATOMIC_LOAD_OR_I32
    0U,	// ATOMIC_LOAD_OR_I8
    0U,	// ATOMIC_LOAD_SUB_I16
    0U,	// ATOMIC_LOAD_SUB_I32
    0U,	// ATOMIC_LOAD_SUB_I8
    0U,	// ATOMIC_LOAD_UMAX_I16
    0U,	// ATOMIC_LOAD_UMAX_I32
    0U,	// ATOMIC_LOAD_UMAX_I8
    0U,	// ATOMIC_LOAD_UMIN_I16
    0U,	// ATOMIC_LOAD_UMIN_I32
    0U,	// ATOMIC_LOAD_UMIN_I8
    0U,	// ATOMIC_LOAD_XOR_I16
    0U,	// ATOMIC_LOAD_XOR_I32
    0U,	// ATOMIC_LOAD_XOR_I8
    0U,	// ATOMIC_SWAP_I16
    0U,	// ATOMIC_SWAP_I32
    0U,	// ATOMIC_SWAP_I8
    0U,	// ATOMMAX6432
    0U,	// ATOMMIN6432
    0U,	// ATOMNAND6432
    0U,	// ATOMOR6432
    0U,	// ATOMSUB6432
    0U,	// ATOMSWAP6432
    0U,	// ATOMUMAX6432
    0U,	// ATOMUMIN6432
    0U,	// ATOMXOR6432
    0U,	// B
    0U,	// BCCZi64
    0U,	// BCCi64
    16U,	// BFC
    32792U,	// BFI
    0U,	// BICri
    0U,	// BICrr
    16384U,	// BICrsi
    0U,	// BICrsr
    0U,	// BKPT
    0U,	// BL
    0U,	// BLX
    0U,	// BLX_pred
    0U,	// BLXi
    0U,	// BL_pred
    0U,	// BMOVPCB_CALL
    0U,	// BMOVPCRX_CALL
    0U,	// BR_JTadd
    0U,	// BR_JTm
    0U,	// BR_JTr
    0U,	// BX
    0U,	// BXJ
    0U,	// BX_CALL
    0U,	// BX_RET
    0U,	// BX_pred
    0U,	// Bcc
    544U,	// CDP
    0U,	// CDP2
    0U,	// CLREX
    1024U,	// CLZ
    1024U,	// CMNri
    1024U,	// CMNzrr
    40U,	// CMNzrsi
    48U,	// CMNzrsr
    1024U,	// CMPri
    1024U,	// CMPrr
    40U,	// CMPrsi
    48U,	// CMPrsr
    0U,	// CONSTPOOL_ENTRY
    0U,	// COPY_STRUCT_BYVAL_I32
    0U,	// CPS1p
    0U,	// CPS2p
    1048U,	// CPS3p
    0U,	// DBG
    0U,	// DMB
    0U,	// DSB
    0U,	// EORri
    0U,	// EORrr
    16384U,	// EORrsi
    0U,	// EORrsr
    0U,	// FCONSTD
    0U,	// FCONSTS
    57U,	// FLDMXDB_UPD
    1088U,	// FLDMXIA
    57U,	// FLDMXIA_UPD
    0U,	// FMSTAT
    57U,	// FSTMXDB_UPD
    1088U,	// FSTMXIA
    57U,	// FSTMXIA_UPD
    0U,	// HINT
    0U,	// ISB
    0U,	// ITasm
    0U,	// Int_eh_sjlj_dispatchsetup
    0U,	// Int_eh_sjlj_longjmp
    0U,	// Int_eh_sjlj_setjmp
    0U,	// Int_eh_sjlj_setjmp_nofp
    72U,	// LDA
    72U,	// LDAB
    72U,	// LDAEX
    72U,	// LDAEXB
    0U,	// LDAEXD
    72U,	// LDAEXH
    72U,	// LDAH
    0U,	// LDC2L_OFFSET
    1U,	// LDC2L_OPTION
    1U,	// LDC2L_POST
    0U,	// LDC2L_PRE
    0U,	// LDC2_OFFSET
    1U,	// LDC2_OPTION
    1U,	// LDC2_POST
    0U,	// LDC2_PRE
    81U,	// LDCL_OFFSET
    49241U,	// LDCL_OPTION
    65625U,	// LDCL_POST
    97U,	// LDCL_PRE
    81U,	// LDC_OFFSET
    49241U,	// LDC_OPTION
    65625U,	// LDC_POST
    97U,	// LDC_PRE
    1088U,	// LDMDA
    57U,	// LDMDA_UPD
    1088U,	// LDMDB
    57U,	// LDMDB_UPD
    1088U,	// LDMIA
    0U,	// LDMIA_RET
    57U,	// LDMIA_UPD
    1088U,	// LDMIB
    57U,	// LDMIB_UPD
    82008U,	// LDRBT_POST_IMM
    82008U,	// LDRBT_POST_REG
    82008U,	// LDRB_POST_IMM
    82008U,	// LDRB_POST_REG
    104U,	// LDRB_PRE_IMM
    112U,	// LDRB_PRE_REG
    120U,	// LDRBi12
    128U,	// LDRBrs
    98304U,	// LDRD
    1163264U,	// LDRD_POST
    131072U,	// LDRD_PRE
    72U,	// LDREX
    72U,	// LDREXB
    0U,	// LDREXD
    72U,	// LDREXH
    136U,	// LDRH
    147544U,	// LDRHTi
    163928U,	// LDRHTr
    180312U,	// LDRH_POST
    144U,	// LDRH_PRE
    136U,	// LDRSB
    147544U,	// LDRSBTi
    163928U,	// LDRSBTr
    180312U,	// LDRSB_POST
    144U,	// LDRSB_PRE
    136U,	// LDRSH
    147544U,	// LDRSHTi
    163928U,	// LDRSHTr
    180312U,	// LDRSH_POST
    144U,	// LDRSH_PRE
    82008U,	// LDRT_POST_IMM
    82008U,	// LDRT_POST_REG
    82008U,	// LDR_POST_IMM
    82008U,	// LDR_POST_REG
    104U,	// LDR_PRE_IMM
    112U,	// LDR_PRE_REG
    120U,	// LDRcp
    120U,	// LDRi12
    128U,	// LDRrs
    0U,	// LEApcrel
    0U,	// LEApcrelJT
    0U,	// LSLi
    0U,	// LSLr
    0U,	// LSRi
    0U,	// LSRr
    2295328U,	// MCR
    152U,	// MCR2
    3343904U,	// MCRR
    213152U,	// MCRR2
    17825792U,	// MLA
    0U,	// MLAv5
    17825792U,	// MLS
    0U,	// MOVCCi
    0U,	// MOVCCi16
    0U,	// MOVCCi32imm
    0U,	// MOVCCr
    0U,	// MOVCCsi
    0U,	// MOVCCsr
    0U,	// MOVPCLR
    0U,	// MOVPCRX
    1048U,	// MOVTi16
    0U,	// MOVTi16_ga_pcrel
    0U,	// MOV_ga_dyn
    0U,	// MOV_ga_pcrel
    0U,	// MOV_ga_pcrel_ldr
    1024U,	// MOVi
    1024U,	// MOVi16
    0U,	// MOVi16_ga_pcrel
    0U,	// MOVi32imm
    1024U,	// MOVr
    1024U,	// MOVr_TC
    40U,	// MOVsi
    48U,	// MOVsr
    0U,	// MOVsra_flag
    0U,	// MOVsrl_flag
    0U,	// MRC
    0U,	// MRC2
    3343904U,	// MRRC
    213152U,	// MRRC2
    2U,	// MRS
    2U,	// MRSsys
    0U,	// MSR
    0U,	// MSRi
    0U,	// MUL
    0U,	// MULv5
    0U,	// MVNCCi
    1024U,	// MVNi
    1024U,	// MVNr
    40U,	// MVNsi
    48U,	// MVNsr
    0U,	// ORRri
    0U,	// ORRrr
    16384U,	// ORRrsi
    0U,	// ORRrsr
    0U,	// PICADD
    0U,	// PICLDR
    0U,	// PICLDRB
    0U,	// PICLDRH
    0U,	// PICLDRSB
    0U,	// PICLDRSH
    0U,	// PICSTR
    0U,	// PICSTRB
    0U,	// PICSTRH
    4194304U,	// PKHBT
    5242880U,	// PKHTB
    0U,	// PLDWi12
    0U,	// PLDWrs
    0U,	// PLDi12
    0U,	// PLDrs
    0U,	// PLIi12
    0U,	// PLIrs
    0U,	// QADD
    0U,	// QADD16
    0U,	// QADD8
    0U,	// QASX
    0U,	// QDADD
    0U,	// QDSUB
    0U,	// QSAX
    0U,	// QSUB
    0U,	// QSUB16
    0U,	// QSUB8
    1024U,	// RBIT
    1024U,	// REV
    1024U,	// REV16
    1024U,	// REVSH
    0U,	// RFEDA
    0U,	// RFEDA_UPD
    0U,	// RFEDB
    0U,	// RFEDB_UPD
    0U,	// RFEIA
    0U,	// RFEIA_UPD
    0U,	// RFEIB
    0U,	// RFEIB_UPD
    0U,	// RORi
    0U,	// RORr
    0U,	// RRX
    1024U,	// RRXi
    0U,	// RSBSri
    0U,	// RSBSrsi
    0U,	// RSBSrsr
    0U,	// RSBri
    0U,	// RSBrr
    16384U,	// RSBrsi
    0U,	// RSBrsr
    0U,	// RSCri
    0U,	// RSCrr
    16384U,	// RSCrsi
    0U,	// RSCrsr
    0U,	// SADD16
    0U,	// SADD8
    0U,	// SASX
    0U,	// SBCri
    0U,	// SBCrr
    16384U,	// SBCrsi
    0U,	// SBCrsr
    34603008U,	// SBFX
    0U,	// SDIV
    0U,	// SEL
    0U,	// SETEND
    0U,	// SHADD16
    0U,	// SHADD8
    0U,	// SHASX
    0U,	// SHSAX
    0U,	// SHSUB16
    0U,	// SHSUB8
    0U,	// SMC
    17825792U,	// SMLABB
    17825792U,	// SMLABT
    17825792U,	// SMLAD
    17825792U,	// SMLADX
    0U,	// SMLAL
    17825792U,	// SMLALBB
    17825792U,	// SMLALBT
    17825792U,	// SMLALD
    17825792U,	// SMLALDX
    17825792U,	// SMLALTB
    17825792U,	// SMLALTT
    0U,	// SMLALv5
    17825792U,	// SMLATB
    17825792U,	// SMLATT
    17825792U,	// SMLAWB
    17825792U,	// SMLAWT
    17825792U,	// SMLSD
    17825792U,	// SMLSDX
    17825792U,	// SMLSLD
    17825792U,	// SMLSLDX
    17825792U,	// SMMLA
    17825792U,	// SMMLAR
    17825792U,	// SMMLS
    17825792U,	// SMMLSR
    0U,	// SMMUL
    0U,	// SMMULR
    0U,	// SMUAD
    0U,	// SMUADX
    0U,	// SMULBB
    0U,	// SMULBT
    17825792U,	// SMULL
    0U,	// SMULLv5
    0U,	// SMULTB
    0U,	// SMULTT
    0U,	// SMULWB
    0U,	// SMULWT
    0U,	// SMUSD
    0U,	// SMUSDX
    0U,	// SRSDA
    0U,	// SRSDA_UPD
    0U,	// SRSDB
    0U,	// SRSDB_UPD
    0U,	// SRSIA
    0U,	// SRSIA_UPD
    0U,	// SRSIB
    0U,	// SRSIB_UPD
    2216U,	// SSAT
    1192U,	// SSAT16
    0U,	// SSAX
    0U,	// SSUB16
    0U,	// SSUB8
    0U,	// STC2L_OFFSET
    1U,	// STC2L_OPTION
    1U,	// STC2L_POST
    0U,	// STC2L_PRE
    0U,	// STC2_OFFSET
    1U,	// STC2_OPTION
    1U,	// STC2_POST
    0U,	// STC2_PRE
    81U,	// STCL_OFFSET
    49241U,	// STCL_OPTION
    65625U,	// STCL_POST
    97U,	// STCL_PRE
    81U,	// STC_OFFSET
    49241U,	// STC_OPTION
    65625U,	// STC_POST
    97U,	// STC_PRE
    72U,	// STL
    72U,	// STLB
    229376U,	// STLEX
    229376U,	// STLEXB
    176U,	// STLEXD
    229376U,	// STLEXH
    72U,	// STLH
    1088U,	// STMDA
    57U,	// STMDA_UPD
    1088U,	// STMDB
    57U,	// STMDB_UPD
    1088U,	// STMIA
    57U,	// STMIA_UPD
    1088U,	// STMIB
    57U,	// STMIB_UPD
    82008U,	// STRBT_POST_IMM
    82008U,	// STRBT_POST_REG
    82008U,	// STRB_POST_IMM
    82008U,	// STRB_POST_REG
    104U,	// STRB_PRE_IMM
    112U,	// STRB_PRE_REG
    120U,	// STRBi12
    0U,	// STRBi_preidx
    0U,	// STRBr_preidx
    128U,	// STRBrs
    98304U,	// STRD
    1163288U,	// STRD_POST
    131096U,	// STRD_PRE
    229376U,	// STREX
    229376U,	// STREXB
    176U,	// STREXD
    229376U,	// STREXH
    136U,	// STRH
    147544U,	// STRHTi
    163928U,	// STRHTr
    180312U,	// STRH_POST
    144U,	// STRH_PRE
    0U,	// STRH_preidx
    82008U,	// STRT_POST_IMM
    82008U,	// STRT_POST_REG
    82008U,	// STR_POST_IMM
    82008U,	// STR_POST_REG
    104U,	// STR_PRE_IMM
    112U,	// STR_PRE_REG
    120U,	// STRi12
    0U,	// STRi_preidx
    0U,	// STRr_preidx
    128U,	// STRrs
    0U,	// SUBSri
    0U,	// SUBSrr
    0U,	// SUBSrsi
    0U,	// SUBSrsr
    0U,	// SUBri
    0U,	// SUBrr
    16384U,	// SUBrsi
    0U,	// SUBrsr
    0U,	// SVC
    229376U,	// SWP
    229376U,	// SWPB
    6291456U,	// SXTAB
    6291456U,	// SXTAB16
    6291456U,	// SXTAH
    2560U,	// SXTB
    2560U,	// SXTB16
    2560U,	// SXTH
    0U,	// TAILJMPd
    0U,	// TAILJMPr
    0U,	// TCRETURNdi
    0U,	// TCRETURNri
    1024U,	// TEQri
    1024U,	// TEQrr
    40U,	// TEQrsi
    48U,	// TEQrsr
    0U,	// TPsoft
    0U,	// TRAP
    0U,	// TRAPNaCl
    1024U,	// TSTri
    1024U,	// TSTrr
    40U,	// TSTrsi
    48U,	// TSTrsr
    0U,	// UADD16
    0U,	// UADD8
    0U,	// UASX
    34603008U,	// UBFX
    0U,	// UDIV
    0U,	// UHADD16
    0U,	// UHADD8
    0U,	// UHASX
    0U,	// UHSAX
    0U,	// UHSUB16
    0U,	// UHSUB8
    17825792U,	// UMAAL
    0U,	// UMAALv5
    0U,	// UMLAL
    0U,	// UMLALv5
    17825792U,	// UMULL
    0U,	// UMULLv5
    0U,	// UQADD16
    0U,	// UQADD8
    0U,	// UQASX
    0U,	// UQSAX
    0U,	// UQSUB16
    0U,	// UQSUB8
    0U,	// USAD8
    17825792U,	// USADA8
    7340032U,	// USAT
    0U,	// USAT16
    0U,	// USAX
    0U,	// USUB16
    0U,	// USUB8
    6291456U,	// UXTAB
    6291456U,	// UXTAB16
    6291456U,	// UXTAH
    2560U,	// UXTB
    2560U,	// UXTB16
    2560U,	// UXTH
    1184U,	// VABALsv2i64
    1184U,	// VABALsv4i32
    1184U,	// VABALsv8i16
    1184U,	// VABALuv2i64
    1184U,	// VABALuv4i32
    1184U,	// VABALuv8i16
    1184U,	// VABAsv16i8
    1184U,	// VABAsv2i32
    1184U,	// VABAsv4i16
    1184U,	// VABAsv4i32
    1184U,	// VABAsv8i16
    1184U,	// VABAsv8i8
    1184U,	// VABAuv16i8
    1184U,	// VABAuv2i32
    1184U,	// VABAuv4i16
    1184U,	// VABAuv4i32
    1184U,	// VABAuv8i16
    1184U,	// VABAuv8i8
    1048U,	// VABDLsv2i64
    1048U,	// VABDLsv4i32
    1048U,	// VABDLsv8i16
    1048U,	// VABDLuv2i64
    1048U,	// VABDLuv4i32
    1048U,	// VABDLuv8i16
    247328U,	// VABDfd
    247328U,	// VABDfq
    1048U,	// VABDsv16i8
    1048U,	// VABDsv2i32
    1048U,	// VABDsv4i16
    1048U,	// VABDsv4i32
    1048U,	// VABDsv8i16
    1048U,	// VABDsv8i8
    1048U,	// VABDuv16i8
    1048U,	// VABDuv2i32
    1048U,	// VABDuv4i16
    1048U,	// VABDuv4i32
    1048U,	// VABDuv8i16
    1048U,	// VABDuv8i8
    56U,	// VABSD
    56U,	// VABSS
    56U,	// VABSfd
    56U,	// VABSfq
    0U,	// VABSv16i8
    0U,	// VABSv2i32
    0U,	// VABSv4i16
    0U,	// VABSv4i32
    0U,	// VABSv8i16
    0U,	// VABSv8i8
    247328U,	// VACGEd
    247328U,	// VACGEq
    247328U,	// VACGTd
    247328U,	// VACGTq
    247328U,	// VADDD
    1048U,	// VADDHNv2i32
    1048U,	// VADDHNv4i16
    1048U,	// VADDHNv8i8
    1048U,	// VADDLsv2i64
    1048U,	// VADDLsv4i32
    1048U,	// VADDLsv8i16
    1048U,	// VADDLuv2i64
    1048U,	// VADDLuv4i32
    1048U,	// VADDLuv8i16
    247328U,	// VADDS
    1048U,	// VADDWsv2i64
    1048U,	// VADDWsv4i32
    1048U,	// VADDWsv8i16
    1048U,	// VADDWuv2i64
    1048U,	// VADDWuv4i32
    1048U,	// VADDWuv8i16
    247328U,	// VADDfd
    247328U,	// VADDfq
    1048U,	// VADDv16i8
    1048U,	// VADDv1i64
    1048U,	// VADDv2i32
    1048U,	// VADDv2i64
    1048U,	// VADDv4i16
    1048U,	// VADDv4i32
    1048U,	// VADDv8i16
    1048U,	// VADDv8i8
    0U,	// VANDd
    0U,	// VANDq
    0U,	// VBICd
    0U,	// VBICiv2i32
    0U,	// VBICiv4i16
    0U,	// VBICiv4i32
    0U,	// VBICiv8i16
    0U,	// VBICq
    262168U,	// VBIFd
    262168U,	// VBIFq
    262168U,	// VBITd
    262168U,	// VBITq
    262168U,	// VBSLd
    262168U,	// VBSLq
    247328U,	// VCEQfd
    247328U,	// VCEQfq
    1048U,	// VCEQv16i8
    1048U,	// VCEQv2i32
    1048U,	// VCEQv4i16
    1048U,	// VCEQv4i32
    1048U,	// VCEQv8i16
    1048U,	// VCEQv8i8
    2U,	// VCEQzv16i8
    184U,	// VCEQzv2f32
    2U,	// VCEQzv2i32
    184U,	// VCEQzv4f32
    2U,	// VCEQzv4i16
    2U,	// VCEQzv4i32
    2U,	// VCEQzv8i16
    2U,	// VCEQzv8i8
    247328U,	// VCGEfd
    247328U,	// VCGEfq
    1048U,	// VCGEsv16i8
    1048U,	// VCGEsv2i32
    1048U,	// VCGEsv4i16
    1048U,	// VCGEsv4i32
    1048U,	// VCGEsv8i16
    1048U,	// VCGEsv8i8
    1048U,	// VCGEuv16i8
    1048U,	// VCGEuv2i32
    1048U,	// VCGEuv4i16
    1048U,	// VCGEuv4i32
    1048U,	// VCGEuv8i16
    1048U,	// VCGEuv8i8
    2U,	// VCGEzv16i8
    184U,	// VCGEzv2f32
    2U,	// VCGEzv2i32
    184U,	// VCGEzv4f32
    2U,	// VCGEzv4i16
    2U,	// VCGEzv4i32
    2U,	// VCGEzv8i16
    2U,	// VCGEzv8i8
    247328U,	// VCGTfd
    247328U,	// VCGTfq
    1048U,	// VCGTsv16i8
    1048U,	// VCGTsv2i32
    1048U,	// VCGTsv4i16
    1048U,	// VCGTsv4i32
    1048U,	// VCGTsv8i16
    1048U,	// VCGTsv8i8
    1048U,	// VCGTuv16i8
    1048U,	// VCGTuv2i32
    1048U,	// VCGTuv4i16
    1048U,	// VCGTuv4i32
    1048U,	// VCGTuv8i16
    1048U,	// VCGTuv8i8
    2U,	// VCGTzv16i8
    184U,	// VCGTzv2f32
    2U,	// VCGTzv2i32
    184U,	// VCGTzv4f32
    2U,	// VCGTzv4i16
    2U,	// VCGTzv4i32
    2U,	// VCGTzv8i16
    2U,	// VCGTzv8i8
    2U,	// VCLEzv16i8
    184U,	// VCLEzv2f32
    2U,	// VCLEzv2i32
    184U,	// VCLEzv4f32
    2U,	// VCLEzv4i16
    2U,	// VCLEzv4i32
    2U,	// VCLEzv8i16
    2U,	// VCLEzv8i8
    0U,	// VCLSv16i8
    0U,	// VCLSv2i32
    0U,	// VCLSv4i16
    0U,	// VCLSv4i32
    0U,	// VCLSv8i16
    0U,	// VCLSv8i8
    2U,	// VCLTzv16i8
    184U,	// VCLTzv2f32
    2U,	// VCLTzv2i32
    184U,	// VCLTzv4f32
    2U,	// VCLTzv4i16
    2U,	// VCLTzv4i32
    2U,	// VCLTzv8i16
    2U,	// VCLTzv8i8
    0U,	// VCLZv16i8
    0U,	// VCLZv2i32
    0U,	// VCLZv4i16
    0U,	// VCLZv4i32
    0U,	// VCLZv8i16
    0U,	// VCLZv8i8
    56U,	// VCMPD
    56U,	// VCMPED
    56U,	// VCMPES
    0U,	// VCMPEZD
    0U,	// VCMPEZS
    56U,	// VCMPS
    0U,	// VCMPZD
    0U,	// VCMPZS
    1024U,	// VCNTd
    1024U,	// VCNTq
    0U,	// VCVTANSD
    0U,	// VCVTANSQ
    0U,	// VCVTANUD
    0U,	// VCVTANUQ
    0U,	// VCVTASD
    0U,	// VCVTASS
    0U,	// VCVTAUD
    0U,	// VCVTAUS
    0U,	// VCVTBDH
    0U,	// VCVTBHD
    0U,	// VCVTBHS
    0U,	// VCVTBSH
    0U,	// VCVTDS
    0U,	// VCVTMNSD
    0U,	// VCVTMNSQ
    0U,	// VCVTMNUD
    0U,	// VCVTMNUQ
    0U,	// VCVTMSD
    0U,	// VCVTMSS
    0U,	// VCVTMUD
    0U,	// VCVTMUS
    0U,	// VCVTNNSD
    0U,	// VCVTNNSQ
    0U,	// VCVTNNUD
    0U,	// VCVTNNUQ
    0U,	// VCVTNSD
    0U,	// VCVTNSS
    0U,	// VCVTNUD
    0U,	// VCVTNUS
    0U,	// VCVTPNSD
    0U,	// VCVTPNSQ
    0U,	// VCVTPNUD
    0U,	// VCVTPNUQ
    0U,	// VCVTPSD
    0U,	// VCVTPSS
    0U,	// VCVTPUD
    0U,	// VCVTPUS
    0U,	// VCVTSD
    0U,	// VCVTTDH
    0U,	// VCVTTHD
    0U,	// VCVTTHS
    0U,	// VCVTTSH
    0U,	// VCVTf2h
    0U,	// VCVTf2sd
    0U,	// VCVTf2sq
    0U,	// VCVTf2ud
    0U,	// VCVTf2uq
    58U,	// VCVTf2xsd
    58U,	// VCVTf2xsq
    58U,	// VCVTf2xud
    58U,	// VCVTf2xuq
    0U,	// VCVTh2f
    0U,	// VCVTs2fd
    0U,	// VCVTs2fq
    0U,	// VCVTu2fd
    0U,	// VCVTu2fq
    58U,	// VCVTxs2fd
    58U,	// VCVTxs2fq
    58U,	// VCVTxu2fd
    58U,	// VCVTxu2fq
    247328U,	// VDIVD
    247328U,	// VDIVS
    1024U,	// VDUP16d
    1024U,	// VDUP16q
    1024U,	// VDUP32d
    1024U,	// VDUP32q
    1024U,	// VDUP8d
    1024U,	// VDUP8q
    3072U,	// VDUPLN16d
    3072U,	// VDUPLN16q
    3072U,	// VDUPLN32d
    3072U,	// VDUPLN32q
    3072U,	// VDUPLN8d
    3072U,	// VDUPLN8q
    0U,	// VDUPfdf
    0U,	// VDUPfqf
    0U,	// VEORd
    0U,	// VEORq
    17825792U,	// VEXTd16
    17825792U,	// VEXTd32
    17825792U,	// VEXTd8
    17825792U,	// VEXTq16
    17825792U,	// VEXTq32
    17825792U,	// VEXTq64
    17825792U,	// VEXTq8
    249378U,	// VFMAD
    249378U,	// VFMAS
    249378U,	// VFMAfd
    249378U,	// VFMAfq
    249378U,	// VFMSD
    249378U,	// VFMSS
    249378U,	// VFMSfd
    249378U,	// VFMSfq
    249378U,	// VFNMAD
    249378U,	// VFNMAS
    249378U,	// VFNMSD
    249378U,	// VFNMSS
    3072U,	// VGETLNi32
    3U,	// VGETLNs16
    3U,	// VGETLNs8
    3U,	// VGETLNu16
    3U,	// VGETLNu8
    1048U,	// VHADDsv16i8
    1048U,	// VHADDsv2i32
    1048U,	// VHADDsv4i16
    1048U,	// VHADDsv4i32
    1048U,	// VHADDsv8i16
    1048U,	// VHADDsv8i8
    1048U,	// VHADDuv16i8
    1048U,	// VHADDuv2i32
    1048U,	// VHADDuv4i16
    1048U,	// VHADDuv4i32
    1048U,	// VHADDuv8i16
    1048U,	// VHADDuv8i8
    1048U,	// VHSUBsv16i8
    1048U,	// VHSUBsv2i32
    1048U,	// VHSUBsv4i16
    1048U,	// VHSUBsv4i32
    1048U,	// VHSUBsv8i16
    1048U,	// VHSUBsv8i8
    1048U,	// VHSUBuv16i8
    1048U,	// VHSUBuv2i32
    1048U,	// VHSUBuv4i16
    1048U,	// VHSUBuv4i32
    1048U,	// VHSUBuv8i16
    1048U,	// VHSUBuv8i8
    59U,	// VLD1DUPd16
    195U,	// VLD1DUPd16wb_fixed
    4131U,	// VLD1DUPd16wb_register
    59U,	// VLD1DUPd32
    195U,	// VLD1DUPd32wb_fixed
    4131U,	// VLD1DUPd32wb_register
    59U,	// VLD1DUPd8
    195U,	// VLD1DUPd8wb_fixed
    4131U,	// VLD1DUPd8wb_register
    59U,	// VLD1DUPq16
    195U,	// VLD1DUPq16wb_fixed
    4131U,	// VLD1DUPq16wb_register
    59U,	// VLD1DUPq32
    195U,	// VLD1DUPq32wb_fixed
    4131U,	// VLD1DUPq32wb_register
    59U,	// VLD1DUPq8
    195U,	// VLD1DUPq8wb_fixed
    4131U,	// VLD1DUPq8wb_register
    283339U,	// VLD1LNd16
    299731U,	// VLD1LNd16_UPD
    283339U,	// VLD1LNd32
    299731U,	// VLD1LNd32_UPD
    283339U,	// VLD1LNd8
    299731U,	// VLD1LNd8_UPD
    1240U,	// VLD1LNdAsm_16
    1240U,	// VLD1LNdAsm_32
    1240U,	// VLD1LNdAsm_8
    5336U,	// VLD1LNdWB_fixed_Asm_16
    5336U,	// VLD1LNdWB_fixed_Asm_32
    5336U,	// VLD1LNdWB_fixed_Asm_8
    311512U,	// VLD1LNdWB_register_Asm_16
    311512U,	// VLD1LNdWB_register_Asm_32
    311512U,	// VLD1LNdWB_register_Asm_8
    0U,	// VLD1LNq16Pseudo
    0U,	// VLD1LNq16Pseudo_UPD
    0U,	// VLD1LNq32Pseudo
    0U,	// VLD1LNq32Pseudo_UPD
    0U,	// VLD1LNq8Pseudo
    0U,	// VLD1LNq8Pseudo_UPD
    59U,	// VLD1d16
    59U,	// VLD1d16Q
    195U,	// VLD1d16Qwb_fixed
    4131U,	// VLD1d16Qwb_register
    59U,	// VLD1d16T
    195U,	// VLD1d16Twb_fixed
    4131U,	// VLD1d16Twb_register
    195U,	// VLD1d16wb_fixed
    4131U,	// VLD1d16wb_register
    59U,	// VLD1d32
    59U,	// VLD1d32Q
    195U,	// VLD1d32Qwb_fixed
    4131U,	// VLD1d32Qwb_register
    59U,	// VLD1d32T
    195U,	// VLD1d32Twb_fixed
    4131U,	// VLD1d32Twb_register
    195U,	// VLD1d32wb_fixed
    4131U,	// VLD1d32wb_register
    59U,	// VLD1d64
    59U,	// VLD1d64Q
    0U,	// VLD1d64QPseudo
    195U,	// VLD1d64Qwb_fixed
    4131U,	// VLD1d64Qwb_register
    59U,	// VLD1d64T
    0U,	// VLD1d64TPseudo
    195U,	// VLD1d64Twb_fixed
    4131U,	// VLD1d64Twb_register
    195U,	// VLD1d64wb_fixed
    4131U,	// VLD1d64wb_register
    59U,	// VLD1d8
    59U,	// VLD1d8Q
    195U,	// VLD1d8Qwb_fixed
    4131U,	// VLD1d8Qwb_register
    59U,	// VLD1d8T
    195U,	// VLD1d8Twb_fixed
    4131U,	// VLD1d8Twb_register
    195U,	// VLD1d8wb_fixed
    4131U,	// VLD1d8wb_register
    59U,	// VLD1q16
    195U,	// VLD1q16wb_fixed
    4131U,	// VLD1q16wb_register
    59U,	// VLD1q32
    195U,	// VLD1q32wb_fixed
    4131U,	// VLD1q32wb_register
    59U,	// VLD1q64
    195U,	// VLD1q64wb_fixed
    4131U,	// VLD1q64wb_register
    59U,	// VLD1q8
    195U,	// VLD1q8wb_fixed
    4131U,	// VLD1q8wb_register
    59U,	// VLD2DUPd16
    195U,	// VLD2DUPd16wb_fixed
    4131U,	// VLD2DUPd16wb_register
    59U,	// VLD2DUPd16x2
    195U,	// VLD2DUPd16x2wb_fixed
    4131U,	// VLD2DUPd16x2wb_register
    59U,	// VLD2DUPd32
    195U,	// VLD2DUPd32wb_fixed
    4131U,	// VLD2DUPd32wb_register
    59U,	// VLD2DUPd32x2
    195U,	// VLD2DUPd32x2wb_fixed
    4131U,	// VLD2DUPd32x2wb_register
    59U,	// VLD2DUPd8
    195U,	// VLD2DUPd8wb_fixed
    4131U,	// VLD2DUPd8wb_register
    59U,	// VLD2DUPd8x2
    195U,	// VLD2DUPd8x2wb_fixed
    4131U,	// VLD2DUPd8x2wb_register
    333523U,	// VLD2LNd16
    0U,	// VLD2LNd16Pseudo
    0U,	// VLD2LNd16Pseudo_UPD
    350435U,	// VLD2LNd16_UPD
    333523U,	// VLD2LNd32
    0U,	// VLD2LNd32Pseudo
    0U,	// VLD2LNd32Pseudo_UPD
    350435U,	// VLD2LNd32_UPD
    333523U,	// VLD2LNd8
    0U,	// VLD2LNd8Pseudo
    0U,	// VLD2LNd8Pseudo_UPD
    350435U,	// VLD2LNd8_UPD
    1240U,	// VLD2LNdAsm_16
    1240U,	// VLD2LNdAsm_32
    1240U,	// VLD2LNdAsm_8
    5336U,	// VLD2LNdWB_fixed_Asm_16
    5336U,	// VLD2LNdWB_fixed_Asm_32
    5336U,	// VLD2LNdWB_fixed_Asm_8
    311512U,	// VLD2LNdWB_register_Asm_16
    311512U,	// VLD2LNdWB_register_Asm_32
    311512U,	// VLD2LNdWB_register_Asm_8
    333523U,	// VLD2LNq16
    0U,	// VLD2LNq16Pseudo
    0U,	// VLD2LNq16Pseudo_UPD
    350435U,	// VLD2LNq16_UPD
    333523U,	// VLD2LNq32
    0U,	// VLD2LNq32Pseudo
    0U,	// VLD2LNq32Pseudo_UPD
    350435U,	// VLD2LNq32_UPD
    1240U,	// VLD2LNqAsm_16
    1240U,	// VLD2LNqAsm_32
    5336U,	// VLD2LNqWB_fixed_Asm_16
    5336U,	// VLD2LNqWB_fixed_Asm_32
    311512U,	// VLD2LNqWB_register_Asm_16
    311512U,	// VLD2LNqWB_register_Asm_32
    59U,	// VLD2b16
    195U,	// VLD2b16wb_fixed
    4131U,	// VLD2b16wb_register
    59U,	// VLD2b32
    195U,	// VLD2b32wb_fixed
    4131U,	// VLD2b32wb_register
    59U,	// VLD2b8
    195U,	// VLD2b8wb_fixed
    4131U,	// VLD2b8wb_register
    59U,	// VLD2d16
    195U,	// VLD2d16wb_fixed
    4131U,	// VLD2d16wb_register
    59U,	// VLD2d32
    195U,	// VLD2d32wb_fixed
    4131U,	// VLD2d32wb_register
    59U,	// VLD2d8
    195U,	// VLD2d8wb_fixed
    4131U,	// VLD2d8wb_register
    59U,	// VLD2q16
    0U,	// VLD2q16Pseudo
    0U,	// VLD2q16PseudoWB_fixed
    0U,	// VLD2q16PseudoWB_register
    195U,	// VLD2q16wb_fixed
    4131U,	// VLD2q16wb_register
    59U,	// VLD2q32
    0U,	// VLD2q32Pseudo
    0U,	// VLD2q32PseudoWB_fixed
    0U,	// VLD2q32PseudoWB_register
    195U,	// VLD2q32wb_fixed
    4131U,	// VLD2q32wb_register
    59U,	// VLD2q8
    0U,	// VLD2q8Pseudo
    0U,	// VLD2q8PseudoWB_fixed
    0U,	// VLD2q8PseudoWB_register
    195U,	// VLD2q8wb_fixed
    4131U,	// VLD2q8wb_register
    6892U,	// VLD3DUPd16
    0U,	// VLD3DUPd16Pseudo
    0U,	// VLD3DUPd16Pseudo_UPD
    367852U,	// VLD3DUPd16_UPD
    6892U,	// VLD3DUPd32
    0U,	// VLD3DUPd32Pseudo
    0U,	// VLD3DUPd32Pseudo_UPD
    367852U,	// VLD3DUPd32_UPD
    6892U,	// VLD3DUPd8
    0U,	// VLD3DUPd8Pseudo
    0U,	// VLD3DUPd8Pseudo_UPD
    367852U,	// VLD3DUPd8_UPD
    0U,	// VLD3DUPdAsm_16
    0U,	// VLD3DUPdAsm_32
    0U,	// VLD3DUPdAsm_8
    4U,	// VLD3DUPdWB_fixed_Asm_16
    4U,	// VLD3DUPdWB_fixed_Asm_32
    4U,	// VLD3DUPdWB_fixed_Asm_8
    1184U,	// VLD3DUPdWB_register_Asm_16
    1184U,	// VLD3DUPdWB_register_Asm_32
    1184U,	// VLD3DUPdWB_register_Asm_8
    6892U,	// VLD3DUPq16
    367852U,	// VLD3DUPq16_UPD
    6892U,	// VLD3DUPq32
    367852U,	// VLD3DUPq32_UPD
    6892U,	// VLD3DUPq8
    367852U,	// VLD3DUPq8_UPD
    0U,	// VLD3DUPqAsm_16
    0U,	// VLD3DUPqAsm_32
    0U,	// VLD3DUPqAsm_8
    4U,	// VLD3DUPqWB_fixed_Asm_16
    4U,	// VLD3DUPqWB_fixed_Asm_32
    4U,	// VLD3DUPqWB_fixed_Asm_8
    1184U,	// VLD3DUPqWB_register_Asm_16
    1184U,	// VLD3DUPqWB_register_Asm_32
    1184U,	// VLD3DUPqWB_register_Asm_8
    383203U,	// VLD3LNd16
    0U,	// VLD3LNd16Pseudo
    0U,	// VLD3LNd16Pseudo_UPD
    398067U,	// VLD3LNd16_UPD
    383203U,	// VLD3LNd32
    0U,	// VLD3LNd32Pseudo
    0U,	// VLD3LNd32Pseudo_UPD
    398067U,	// VLD3LNd32_UPD
    383203U,	// VLD3LNd8
    0U,	// VLD3LNd8Pseudo
    0U,	// VLD3LNd8Pseudo_UPD
    398067U,	// VLD3LNd8_UPD
    1240U,	// VLD3LNdAsm_16
    1240U,	// VLD3LNdAsm_32
    1240U,	// VLD3LNdAsm_8
    5336U,	// VLD3LNdWB_fixed_Asm_16
    5336U,	// VLD3LNdWB_fixed_Asm_32
    5336U,	// VLD3LNdWB_fixed_Asm_8
    311512U,	// VLD3LNdWB_register_Asm_16
    311512U,	// VLD3LNdWB_register_Asm_32
    311512U,	// VLD3LNdWB_register_Asm_8
    383203U,	// VLD3LNq16
    0U,	// VLD3LNq16Pseudo
    0U,	// VLD3LNq16Pseudo_UPD
    398067U,	// VLD3LNq16_UPD
    383203U,	// VLD3LNq32
    0U,	// VLD3LNq32Pseudo
    0U,	// VLD3LNq32Pseudo_UPD
    398067U,	// VLD3LNq32_UPD
    1240U,	// VLD3LNqAsm_16
    1240U,	// VLD3LNqAsm_32
    5336U,	// VLD3LNqWB_fixed_Asm_16
    5336U,	// VLD3LNqWB_fixed_Asm_32
    311512U,	// VLD3LNqWB_register_Asm_16
    311512U,	// VLD3LNqWB_register_Asm_32
    58720256U,	// VLD3d16
    0U,	// VLD3d16Pseudo
    0U,	// VLD3d16Pseudo_UPD
    75497472U,	// VLD3d16_UPD
    58720256U,	// VLD3d32
    0U,	// VLD3d32Pseudo
    0U,	// VLD3d32Pseudo_UPD
    75497472U,	// VLD3d32_UPD
    58720256U,	// VLD3d8
    0U,	// VLD3d8Pseudo
    0U,	// VLD3d8Pseudo_UPD
    75497472U,	// VLD3d8_UPD
    59U,	// VLD3dAsm_16
    59U,	// VLD3dAsm_32
    59U,	// VLD3dAsm_8
    195U,	// VLD3dWB_fixed_Asm_16
    195U,	// VLD3dWB_fixed_Asm_32
    195U,	// VLD3dWB_fixed_Asm_8
    249379U,	// VLD3dWB_register_Asm_16
    249379U,	// VLD3dWB_register_Asm_32
    249379U,	// VLD3dWB_register_Asm_8
    58720256U,	// VLD3q16
    0U,	// VLD3q16Pseudo_UPD
    75497472U,	// VLD3q16_UPD
    0U,	// VLD3q16oddPseudo
    0U,	// VLD3q16oddPseudo_UPD
    58720256U,	// VLD3q32
    0U,	// VLD3q32Pseudo_UPD
    75497472U,	// VLD3q32_UPD
    0U,	// VLD3q32oddPseudo
    0U,	// VLD3q32oddPseudo_UPD
    58720256U,	// VLD3q8
    0U,	// VLD3q8Pseudo_UPD
    75497472U,	// VLD3q8_UPD
    0U,	// VLD3q8oddPseudo
    0U,	// VLD3q8oddPseudo_UPD
    0U,	// VLD3qAsm_16
    0U,	// VLD3qAsm_32
    0U,	// VLD3qAsm_8
    4U,	// VLD3qWB_fixed_Asm_16
    4U,	// VLD3qWB_fixed_Asm_32
    4U,	// VLD3qWB_fixed_Asm_8
    1184U,	// VLD3qWB_register_Asm_16
    1184U,	// VLD3qWB_register_Asm_32
    1184U,	// VLD3qWB_register_Asm_8
    253180U,	// VLD4DUPd16
    0U,	// VLD4DUPd16Pseudo
    0U,	// VLD4DUPd16Pseudo_UPD
    7932U,	// VLD4DUPd16_UPD
    253180U,	// VLD4DUPd32
    0U,	// VLD4DUPd32Pseudo
    0U,	// VLD4DUPd32Pseudo_UPD
    7932U,	// VLD4DUPd32_UPD
    253180U,	// VLD4DUPd8
    0U,	// VLD4DUPd8Pseudo
    0U,	// VLD4DUPd8Pseudo_UPD
    7932U,	// VLD4DUPd8_UPD
    0U,	// VLD4DUPdAsm_16
    0U,	// VLD4DUPdAsm_32
    0U,	// VLD4DUPdAsm_8
    4U,	// VLD4DUPdWB_fixed_Asm_16
    4U,	// VLD4DUPdWB_fixed_Asm_32
    4U,	// VLD4DUPdWB_fixed_Asm_8
    1184U,	// VLD4DUPdWB_register_Asm_16
    1184U,	// VLD4DUPdWB_register_Asm_32
    1184U,	// VLD4DUPdWB_register_Asm_8
    253180U,	// VLD4DUPq16
    7932U,	// VLD4DUPq16_UPD
    253180U,	// VLD4DUPq32
    7932U,	// VLD4DUPq32_UPD
    253180U,	// VLD4DUPq8
    7932U,	// VLD4DUPq8_UPD
    0U,	// VLD4DUPqAsm_16
    0U,	// VLD4DUPqAsm_32
    0U,	// VLD4DUPqAsm_8
    4U,	// VLD4DUPqWB_fixed_Asm_16
    4U,	// VLD4DUPqWB_fixed_Asm_32
    4U,	// VLD4DUPqWB_fixed_Asm_8
    1184U,	// VLD4DUPqWB_register_Asm_16
    1184U,	// VLD4DUPqWB_register_Asm_32
    1184U,	// VLD4DUPqWB_register_Asm_8
    93591283U,	// VLD4LNd16
    0U,	// VLD4LNd16Pseudo
    0U,	// VLD4LNd16Pseudo_UPD
    259U,	// VLD4LNd16_UPD
    93591283U,	// VLD4LNd32
    0U,	// VLD4LNd32Pseudo
    0U,	// VLD4LNd32Pseudo_UPD
    259U,	// VLD4LNd32_UPD
    93591283U,	// VLD4LNd8
    0U,	// VLD4LNd8Pseudo
    0U,	// VLD4LNd8Pseudo_UPD
    259U,	// VLD4LNd8_UPD
    1240U,	// VLD4LNdAsm_16
    1240U,	// VLD4LNdAsm_32
    1240U,	// VLD4LNdAsm_8
    5336U,	// VLD4LNdWB_fixed_Asm_16
    5336U,	// VLD4LNdWB_fixed_Asm_32
    5336U,	// VLD4LNdWB_fixed_Asm_8
    311512U,	// VLD4LNdWB_register_Asm_16
    311512U,	// VLD4LNdWB_register_Asm_32
    311512U,	// VLD4LNdWB_register_Asm_8
    93591283U,	// VLD4LNq16
    0U,	// VLD4LNq16Pseudo
    0U,	// VLD4LNq16Pseudo_UPD
    259U,	// VLD4LNq16_UPD
    93591283U,	// VLD4LNq32
    0U,	// VLD4LNq32Pseudo
    0U,	// VLD4LNq32Pseudo_UPD
    259U,	// VLD4LNq32_UPD
    1240U,	// VLD4LNqAsm_16
    1240U,	// VLD4LNqAsm_32
    5336U,	// VLD4LNqWB_fixed_Asm_16
    5336U,	// VLD4LNqWB_fixed_Asm_32
    311512U,	// VLD4LNqWB_register_Asm_16
    311512U,	// VLD4LNqWB_register_Asm_32
    286261248U,	// VLD4d16
    0U,	// VLD4d16Pseudo
    0U,	// VLD4d16Pseudo_UPD
    823132160U,	// VLD4d16_UPD
    286261248U,	// VLD4d32
    0U,	// VLD4d32Pseudo
    0U,	// VLD4d32Pseudo_UPD
    823132160U,	// VLD4d32_UPD
    286261248U,	// VLD4d8
    0U,	// VLD4d8Pseudo
    0U,	// VLD4d8Pseudo_UPD
    823132160U,	// VLD4d8_UPD
    59U,	// VLD4dAsm_16
    59U,	// VLD4dAsm_32
    59U,	// VLD4dAsm_8
    195U,	// VLD4dWB_fixed_Asm_16
    195U,	// VLD4dWB_fixed_Asm_32
    195U,	// VLD4dWB_fixed_Asm_8
    249379U,	// VLD4dWB_register_Asm_16
    249379U,	// VLD4dWB_register_Asm_32
    249379U,	// VLD4dWB_register_Asm_8
    286261248U,	// VLD4q16
    0U,	// VLD4q16Pseudo_UPD
    823132160U,	// VLD4q16_UPD
    0U,	// VLD4q16oddPseudo
    0U,	// VLD4q16oddPseudo_UPD
    286261248U,	// VLD4q32
    0U,	// VLD4q32Pseudo_UPD
    823132160U,	// VLD4q32_UPD
    0U,	// VLD4q32oddPseudo
    0U,	// VLD4q32oddPseudo_UPD
    286261248U,	// VLD4q8
    0U,	// VLD4q8Pseudo_UPD
    823132160U,	// VLD4q8_UPD
    0U,	// VLD4q8oddPseudo
    0U,	// VLD4q8oddPseudo_UPD
    0U,	// VLD4qAsm_16
    0U,	// VLD4qAsm_32
    0U,	// VLD4qAsm_8
    4U,	// VLD4qWB_fixed_Asm_16
    4U,	// VLD4qWB_fixed_Asm_32
    4U,	// VLD4qWB_fixed_Asm_8
    1184U,	// VLD4qWB_register_Asm_16
    1184U,	// VLD4qWB_register_Asm_32
    1184U,	// VLD4qWB_register_Asm_8
    57U,	// VLDMDDB_UPD
    1088U,	// VLDMDIA
    57U,	// VLDMDIA_UPD
    0U,	// VLDMQIA
    57U,	// VLDMSDB_UPD
    1088U,	// VLDMSIA
    57U,	// VLDMSIA_UPD
    264U,	// VLDRD
    264U,	// VLDRS
    58U,	// VMAXNMD
    58U,	// VMAXNMND
    58U,	// VMAXNMNQ
    58U,	// VMAXNMS
    247328U,	// VMAXfd
    247328U,	// VMAXfq
    1048U,	// VMAXsv16i8
    1048U,	// VMAXsv2i32
    1048U,	// VMAXsv4i16
    1048U,	// VMAXsv4i32
    1048U,	// VMAXsv8i16
    1048U,	// VMAXsv8i8
    1048U,	// VMAXuv16i8
    1048U,	// VMAXuv2i32
    1048U,	// VMAXuv4i16
    1048U,	// VMAXuv4i32
    1048U,	// VMAXuv8i16
    1048U,	// VMAXuv8i8
    58U,	// VMINNMD
    58U,	// VMINNMND
    58U,	// VMINNMNQ
    58U,	// VMINNMS
    247328U,	// VMINfd
    247328U,	// VMINfq
    1048U,	// VMINsv16i8
    1048U,	// VMINsv2i32
    1048U,	// VMINsv4i16
    1048U,	// VMINsv4i32
    1048U,	// VMINsv8i16
    1048U,	// VMINsv8i8
    1048U,	// VMINuv16i8
    1048U,	// VMINuv2i32
    1048U,	// VMINuv4i16
    1048U,	// VMINuv4i32
    1048U,	// VMINuv8i16
    1048U,	// VMINuv8i8
    249378U,	// VMLAD
    8352U,	// VMLALslsv2i32
    8352U,	// VMLALslsv4i16
    8352U,	// VMLALsluv2i32
    8352U,	// VMLALsluv4i16
    1184U,	// VMLALsv2i64
    1184U,	// VMLALsv4i32
    1184U,	// VMLALsv8i16
    1184U,	// VMLALuv2i64
    1184U,	// VMLALuv4i32
    1184U,	// VMLALuv8i16
    249378U,	// VMLAS
    249378U,	// VMLAfd
    249378U,	// VMLAfq
    413218U,	// VMLAslfd
    413218U,	// VMLAslfq
    8352U,	// VMLAslv2i32
    8352U,	// VMLAslv4i16
    8352U,	// VMLAslv4i32
    8352U,	// VMLAslv8i16
    1184U,	// VMLAv16i8
    1184U,	// VMLAv2i32
    1184U,	// VMLAv4i16
    1184U,	// VMLAv4i32
    1184U,	// VMLAv8i16
    1184U,	// VMLAv8i8
    249378U,	// VMLSD
    8352U,	// VMLSLslsv2i32
    8352U,	// VMLSLslsv4i16
    8352U,	// VMLSLsluv2i32
    8352U,	// VMLSLsluv4i16
    1184U,	// VMLSLsv2i64
    1184U,	// VMLSLsv4i32
    1184U,	// VMLSLsv8i16
    1184U,	// VMLSLuv2i64
    1184U,	// VMLSLuv4i32
    1184U,	// VMLSLuv8i16
    249378U,	// VMLSS
    249378U,	// VMLSfd
    249378U,	// VMLSfq
    413218U,	// VMLSslfd
    413218U,	// VMLSslfq
    8352U,	// VMLSslv2i32
    8352U,	// VMLSslv4i16
    8352U,	// VMLSslv4i32
    8352U,	// VMLSslv8i16
    1184U,	// VMLSv16i8
    1184U,	// VMLSv2i32
    1184U,	// VMLSv4i16
    1184U,	// VMLSv4i32
    1184U,	// VMLSv8i16
    1184U,	// VMLSv8i8
    56U,	// VMOVD
    0U,	// VMOVDRR
    0U,	// VMOVDcc
    0U,	// VMOVLsv2i64
    0U,	// VMOVLsv4i32
    0U,	// VMOVLsv8i16
    0U,	// VMOVLuv2i64
    0U,	// VMOVLuv4i32
    0U,	// VMOVLuv8i16
    0U,	// VMOVNv2i32
    0U,	// VMOVNv4i16
    0U,	// VMOVNv8i8
    0U,	// VMOVRRD
    17825792U,	// VMOVRRS
    1024U,	// VMOVRS
    56U,	// VMOVS
    1024U,	// VMOVSR
    17825792U,	// VMOVSRR
    0U,	// VMOVScc
    0U,	// VMOVv16i8
    0U,	// VMOVv1i64
    0U,	// VMOVv2f32
    0U,	// VMOVv2i32
    0U,	// VMOVv2i64
    0U,	// VMOVv4f32
    0U,	// VMOVv4i16
    0U,	// VMOVv4i32
    0U,	// VMOVv8i16
    0U,	// VMOVv8i8
    4U,	// VMRS
    4U,	// VMRS_FPEXC
    5U,	// VMRS_FPINST
    5U,	// VMRS_FPINST2
    5U,	// VMRS_FPSID
    5U,	// VMRS_MVFR0
    6U,	// VMRS_MVFR1
    0U,	// VMSR
    0U,	// VMSR_FPEXC
    0U,	// VMSR_FPINST
    0U,	// VMSR_FPINST2
    0U,	// VMSR_FPSID
    247328U,	// VMULD
    0U,	// VMULLp
    8728U,	// VMULLslsv2i32
    8728U,	// VMULLslsv4i16
    8728U,	// VMULLsluv2i32
    8728U,	// VMULLsluv4i16
    1048U,	// VMULLsv2i64
    1048U,	// VMULLsv4i32
    1048U,	// VMULLsv8i16
    1048U,	// VMULLuv2i64
    1048U,	// VMULLuv4i32
    1048U,	// VMULLuv8i16
    247328U,	// VMULS
    247328U,	// VMULfd
    247328U,	// VMULfq
    0U,	// VMULpd
    0U,	// VMULpq
    427552U,	// VMULslfd
    427552U,	// VMULslfq
    8728U,	// VMULslv2i32
    8728U,	// VMULslv4i16
    8728U,	// VMULslv4i32
    8728U,	// VMULslv8i16
    1048U,	// VMULv16i8
    1048U,	// VMULv2i32
    1048U,	// VMULv4i16
    1048U,	// VMULv4i32
    1048U,	// VMULv8i16
    1048U,	// VMULv8i8
    1024U,	// VMVNd
    1024U,	// VMVNq
    0U,	// VMVNv2i32
    0U,	// VMVNv4i16
    0U,	// VMVNv4i32
    0U,	// VMVNv8i16
    56U,	// VNEGD
    56U,	// VNEGS
    56U,	// VNEGf32q
    56U,	// VNEGfd
    0U,	// VNEGs16d
    0U,	// VNEGs16q
    0U,	// VNEGs32d
    0U,	// VNEGs32q
    0U,	// VNEGs8d
    0U,	// VNEGs8q
    249378U,	// VNMLAD
    249378U,	// VNMLAS
    249378U,	// VNMLSD
    249378U,	// VNMLSS
    247328U,	// VNMULD
    247328U,	// VNMULS
    0U,	// VORNd
    0U,	// VORNq
    0U,	// VORRd
    0U,	// VORRiv2i32
    0U,	// VORRiv4i16
    0U,	// VORRiv4i32
    0U,	// VORRiv8i16
    0U,	// VORRq
    0U,	// VPADALsv16i8
    0U,	// VPADALsv2i32
    0U,	// VPADALsv4i16
    0U,	// VPADALsv4i32
    0U,	// VPADALsv8i16
    0U,	// VPADALsv8i8
    0U,	// VPADALuv16i8
    0U,	// VPADALuv2i32
    0U,	// VPADALuv4i16
    0U,	// VPADALuv4i32
    0U,	// VPADALuv8i16
    0U,	// VPADALuv8i8
    0U,	// VPADDLsv16i8
    0U,	// VPADDLsv2i32
    0U,	// VPADDLsv4i16
    0U,	// VPADDLsv4i32
    0U,	// VPADDLsv8i16
    0U,	// VPADDLsv8i8
    0U,	// VPADDLuv16i8
    0U,	// VPADDLuv2i32
    0U,	// VPADDLuv4i16
    0U,	// VPADDLuv4i32
    0U,	// VPADDLuv8i16
    0U,	// VPADDLuv8i8
    247328U,	// VPADDf
    1048U,	// VPADDi16
    1048U,	// VPADDi32
    1048U,	// VPADDi8
    247328U,	// VPMAXf
    1048U,	// VPMAXs16
    1048U,	// VPMAXs32
    1048U,	// VPMAXs8
    1048U,	// VPMAXu16
    1048U,	// VPMAXu32
    1048U,	// VPMAXu8
    247328U,	// VPMINf
    1048U,	// VPMINs16
    1048U,	// VPMINs32
    1048U,	// VPMINs8
    1048U,	// VPMINu16
    1048U,	// VPMINu32
    1048U,	// VPMINu8
    0U,	// VQABSv16i8
    0U,	// VQABSv2i32
    0U,	// VQABSv4i16
    0U,	// VQABSv4i32
    0U,	// VQABSv8i16
    0U,	// VQABSv8i8
    1048U,	// VQADDsv16i8
    1048U,	// VQADDsv1i64
    1048U,	// VQADDsv2i32
    1048U,	// VQADDsv2i64
    1048U,	// VQADDsv4i16
    1048U,	// VQADDsv4i32
    1048U,	// VQADDsv8i16
    1048U,	// VQADDsv8i8
    1048U,	// VQADDuv16i8
    1048U,	// VQADDuv1i64
    1048U,	// VQADDuv2i32
    1048U,	// VQADDuv2i64
    1048U,	// VQADDuv4i16
    1048U,	// VQADDuv4i32
    1048U,	// VQADDuv8i16
    1048U,	// VQADDuv8i8
    8352U,	// VQDMLALslv2i32
    8352U,	// VQDMLALslv4i16
    1184U,	// VQDMLALv2i64
    1184U,	// VQDMLALv4i32
    8352U,	// VQDMLSLslv2i32
    8352U,	// VQDMLSLslv4i16
    1184U,	// VQDMLSLv2i64
    1184U,	// VQDMLSLv4i32
    8728U,	// VQDMULHslv2i32
    8728U,	// VQDMULHslv4i16
    8728U,	// VQDMULHslv4i32
    8728U,	// VQDMULHslv8i16
    1048U,	// VQDMULHv2i32
    1048U,	// VQDMULHv4i16
    1048U,	// VQDMULHv4i32
    1048U,	// VQDMULHv8i16
    8728U,	// VQDMULLslv2i32
    8728U,	// VQDMULLslv4i16
    1048U,	// VQDMULLv2i64
    1048U,	// VQDMULLv4i32
    0U,	// VQMOVNsuv2i32
    0U,	// VQMOVNsuv4i16
    0U,	// VQMOVNsuv8i8
    0U,	// VQMOVNsv2i32
    0U,	// VQMOVNsv4i16
    0U,	// VQMOVNsv8i8
    0U,	// VQMOVNuv2i32
    0U,	// VQMOVNuv4i16
    0U,	// VQMOVNuv8i8
    0U,	// VQNEGv16i8
    0U,	// VQNEGv2i32
    0U,	// VQNEGv4i16
    0U,	// VQNEGv4i32
    0U,	// VQNEGv8i16
    0U,	// VQNEGv8i8
    8728U,	// VQRDMULHslv2i32
    8728U,	// VQRDMULHslv4i16
    8728U,	// VQRDMULHslv4i32
    8728U,	// VQRDMULHslv8i16
    1048U,	// VQRDMULHv2i32
    1048U,	// VQRDMULHv4i16
    1048U,	// VQRDMULHv4i32
    1048U,	// VQRDMULHv8i16
    1048U,	// VQRSHLsv16i8
    1048U,	// VQRSHLsv1i64
    1048U,	// VQRSHLsv2i32
    1048U,	// VQRSHLsv2i64
    1048U,	// VQRSHLsv4i16
    1048U,	// VQRSHLsv4i32
    1048U,	// VQRSHLsv8i16
    1048U,	// VQRSHLsv8i8
    1048U,	// VQRSHLuv16i8
    1048U,	// VQRSHLuv1i64
    1048U,	// VQRSHLuv2i32
    1048U,	// VQRSHLuv2i64
    1048U,	// VQRSHLuv4i16
    1048U,	// VQRSHLuv4i32
    1048U,	// VQRSHLuv8i16
    1048U,	// VQRSHLuv8i8
    1048U,	// VQRSHRNsv2i32
    1048U,	// VQRSHRNsv4i16
    1048U,	// VQRSHRNsv8i8
    1048U,	// VQRSHRNuv2i32
    1048U,	// VQRSHRNuv4i16
    1048U,	// VQRSHRNuv8i8
    1048U,	// VQRSHRUNv2i32
    1048U,	// VQRSHRUNv4i16
    1048U,	// VQRSHRUNv8i8
    1048U,	// VQSHLsiv16i8
    1048U,	// VQSHLsiv1i64
    1048U,	// VQSHLsiv2i32
    1048U,	// VQSHLsiv2i64
    1048U,	// VQSHLsiv4i16
    1048U,	// VQSHLsiv4i32
    1048U,	// VQSHLsiv8i16
    1048U,	// VQSHLsiv8i8
    1048U,	// VQSHLsuv16i8
    1048U,	// VQSHLsuv1i64
    1048U,	// VQSHLsuv2i32
    1048U,	// VQSHLsuv2i64
    1048U,	// VQSHLsuv4i16
    1048U,	// VQSHLsuv4i32
    1048U,	// VQSHLsuv8i16
    1048U,	// VQSHLsuv8i8
    1048U,	// VQSHLsv16i8
    1048U,	// VQSHLsv1i64
    1048U,	// VQSHLsv2i32
    1048U,	// VQSHLsv2i64
    1048U,	// VQSHLsv4i16
    1048U,	// VQSHLsv4i32
    1048U,	// VQSHLsv8i16
    1048U,	// VQSHLsv8i8
    1048U,	// VQSHLuiv16i8
    1048U,	// VQSHLuiv1i64
    1048U,	// VQSHLuiv2i32
    1048U,	// VQSHLuiv2i64
    1048U,	// VQSHLuiv4i16
    1048U,	// VQSHLuiv4i32
    1048U,	// VQSHLuiv8i16
    1048U,	// VQSHLuiv8i8
    1048U,	// VQSHLuv16i8
    1048U,	// VQSHLuv1i64
    1048U,	// VQSHLuv2i32
    1048U,	// VQSHLuv2i64
    1048U,	// VQSHLuv4i16
    1048U,	// VQSHLuv4i32
    1048U,	// VQSHLuv8i16
    1048U,	// VQSHLuv8i8
    1048U,	// VQSHRNsv2i32
    1048U,	// VQSHRNsv4i16
    1048U,	// VQSHRNsv8i8
    1048U,	// VQSHRNuv2i32
    1048U,	// VQSHRNuv4i16
    1048U,	// VQSHRNuv8i8
    1048U,	// VQSHRUNv2i32
    1048U,	// VQSHRUNv4i16
    1048U,	// VQSHRUNv8i8
    1048U,	// VQSUBsv16i8
    1048U,	// VQSUBsv1i64
    1048U,	// VQSUBsv2i32
    1048U,	// VQSUBsv2i64
    1048U,	// VQSUBsv4i16
    1048U,	// VQSUBsv4i32
    1048U,	// VQSUBsv8i16
    1048U,	// VQSUBsv8i8
    1048U,	// VQSUBuv16i8
    1048U,	// VQSUBuv1i64
    1048U,	// VQSUBuv2i32
    1048U,	// VQSUBuv2i64
    1048U,	// VQSUBuv4i16
    1048U,	// VQSUBuv4i32
    1048U,	// VQSUBuv8i16
    1048U,	// VQSUBuv8i8
    1048U,	// VRADDHNv2i32
    1048U,	// VRADDHNv4i16
    1048U,	// VRADDHNv8i8
    0U,	// VRECPEd
    56U,	// VRECPEfd
    56U,	// VRECPEfq
    0U,	// VRECPEq
    247328U,	// VRECPSfd
    247328U,	// VRECPSfq
    1024U,	// VREV16d8
    1024U,	// VREV16q8
    1024U,	// VREV32d16
    1024U,	// VREV32d8
    1024U,	// VREV32q16
    1024U,	// VREV32q8
    1024U,	// VREV64d16
    1024U,	// VREV64d32
    1024U,	// VREV64d8
    1024U,	// VREV64q16
    1024U,	// VREV64q32
    1024U,	// VREV64q8
    1048U,	// VRHADDsv16i8
    1048U,	// VRHADDsv2i32
    1048U,	// VRHADDsv4i16
    1048U,	// VRHADDsv4i32
    1048U,	// VRHADDsv8i16
    1048U,	// VRHADDsv8i8
    1048U,	// VRHADDuv16i8
    1048U,	// VRHADDuv2i32
    1048U,	// VRHADDuv4i16
    1048U,	// VRHADDuv4i32
    1048U,	// VRHADDuv8i16
    1048U,	// VRHADDuv8i8
    0U,	// VRINTAD
    0U,	// VRINTAND
    0U,	// VRINTANQ
    0U,	// VRINTAS
    0U,	// VRINTMD
    0U,	// VRINTMND
    0U,	// VRINTMNQ
    0U,	// VRINTMS
    0U,	// VRINTND
    0U,	// VRINTNND
    0U,	// VRINTNNQ
    0U,	// VRINTNS
    0U,	// VRINTPD
    0U,	// VRINTPND
    0U,	// VRINTPNQ
    0U,	// VRINTPS
    56U,	// VRINTRD
    56U,	// VRINTRS
    56U,	// VRINTXD
    0U,	// VRINTXND
    0U,	// VRINTXNQ
    56U,	// VRINTXS
    56U,	// VRINTZD
    0U,	// VRINTZND
    0U,	// VRINTZNQ
    56U,	// VRINTZS
    1048U,	// VRSHLsv16i8
    1048U,	// VRSHLsv1i64
    1048U,	// VRSHLsv2i32
    1048U,	// VRSHLsv2i64
    1048U,	// VRSHLsv4i16
    1048U,	// VRSHLsv4i32
    1048U,	// VRSHLsv8i16
    1048U,	// VRSHLsv8i8
    1048U,	// VRSHLuv16i8
    1048U,	// VRSHLuv1i64
    1048U,	// VRSHLuv2i32
    1048U,	// VRSHLuv2i64
    1048U,	// VRSHLuv4i16
    1048U,	// VRSHLuv4i32
    1048U,	// VRSHLuv8i16
    1048U,	// VRSHLuv8i8
    1048U,	// VRSHRNv2i32
    1048U,	// VRSHRNv4i16
    1048U,	// VRSHRNv8i8
    1048U,	// VRSHRsv16i8
    1048U,	// VRSHRsv1i64
    1048U,	// VRSHRsv2i32
    1048U,	// VRSHRsv2i64
    1048U,	// VRSHRsv4i16
    1048U,	// VRSHRsv4i32
    1048U,	// VRSHRsv8i16
    1048U,	// VRSHRsv8i8
    1048U,	// VRSHRuv16i8
    1048U,	// VRSHRuv1i64
    1048U,	// VRSHRuv2i32
    1048U,	// VRSHRuv2i64
    1048U,	// VRSHRuv4i16
    1048U,	// VRSHRuv4i32
    1048U,	// VRSHRuv8i16
    1048U,	// VRSHRuv8i8
    0U,	// VRSQRTEd
    56U,	// VRSQRTEfd
    56U,	// VRSQRTEfq
    0U,	// VRSQRTEq
    247328U,	// VRSQRTSfd
    247328U,	// VRSQRTSfq
    1184U,	// VRSRAsv16i8
    1184U,	// VRSRAsv1i64
    1184U,	// VRSRAsv2i32
    1184U,	// VRSRAsv2i64
    1184U,	// VRSRAsv4i16
    1184U,	// VRSRAsv4i32
    1184U,	// VRSRAsv8i16
    1184U,	// VRSRAsv8i8
    1184U,	// VRSRAuv16i8
    1184U,	// VRSRAuv1i64
    1184U,	// VRSRAuv2i32
    1184U,	// VRSRAuv2i64
    1184U,	// VRSRAuv4i16
    1184U,	// VRSRAuv4i32
    1184U,	// VRSRAuv8i16
    1184U,	// VRSRAuv8i8
    1048U,	// VRSUBHNv2i32
    1048U,	// VRSUBHNv4i16
    1048U,	// VRSUBHNv8i8
    58U,	// VSELEQD
    58U,	// VSELEQS
    58U,	// VSELGED
    58U,	// VSELGES
    58U,	// VSELGTD
    58U,	// VSELGTS
    58U,	// VSELVSD
    58U,	// VSELVSS
    6U,	// VSETLNi16
    6U,	// VSETLNi32
    6U,	// VSETLNi8
    1048U,	// VSHLLi16
    1048U,	// VSHLLi32
    1048U,	// VSHLLi8
    1048U,	// VSHLLsv2i64
    1048U,	// VSHLLsv4i32
    1048U,	// VSHLLsv8i16
    1048U,	// VSHLLuv2i64
    1048U,	// VSHLLuv4i32
    1048U,	// VSHLLuv8i16
    1048U,	// VSHLiv16i8
    1048U,	// VSHLiv1i64
    1048U,	// VSHLiv2i32
    1048U,	// VSHLiv2i64
    1048U,	// VSHLiv4i16
    1048U,	// VSHLiv4i32
    1048U,	// VSHLiv8i16
    1048U,	// VSHLiv8i8
    1048U,	// VSHLsv16i8
    1048U,	// VSHLsv1i64
    1048U,	// VSHLsv2i32
    1048U,	// VSHLsv2i64
    1048U,	// VSHLsv4i16
    1048U,	// VSHLsv4i32
    1048U,	// VSHLsv8i16
    1048U,	// VSHLsv8i8
    1048U,	// VSHLuv16i8
    1048U,	// VSHLuv1i64
    1048U,	// VSHLuv2i32
    1048U,	// VSHLuv2i64
    1048U,	// VSHLuv4i16
    1048U,	// VSHLuv4i32
    1048U,	// VSHLuv8i16
    1048U,	// VSHLuv8i8
    1048U,	// VSHRNv2i32
    1048U,	// VSHRNv4i16
    1048U,	// VSHRNv8i8
    1048U,	// VSHRsv16i8
    1048U,	// VSHRsv1i64
    1048U,	// VSHRsv2i32
    1048U,	// VSHRsv2i64
    1048U,	// VSHRsv4i16
    1048U,	// VSHRsv4i32
    1048U,	// VSHRsv8i16
    1048U,	// VSHRsv8i8
    1048U,	// VSHRuv16i8
    1048U,	// VSHRuv1i64
    1048U,	// VSHRuv2i32
    1048U,	// VSHRuv2i64
    1048U,	// VSHRuv4i16
    1048U,	// VSHRuv4i32
    1048U,	// VSHRuv8i16
    1048U,	// VSHRuv8i8
    0U,	// VSHTOD
    0U,	// VSHTOS
    0U,	// VSITOD
    0U,	// VSITOS
    262168U,	// VSLIv16i8
    262168U,	// VSLIv1i64
    262168U,	// VSLIv2i32
    262168U,	// VSLIv2i64
    262168U,	// VSLIv4i16
    262168U,	// VSLIv4i32
    262168U,	// VSLIv8i16
    262168U,	// VSLIv8i8
    6U,	// VSLTOD
    6U,	// VSLTOS
    56U,	// VSQRTD
    56U,	// VSQRTS
    1184U,	// VSRAsv16i8
    1184U,	// VSRAsv1i64
    1184U,	// VSRAsv2i32
    1184U,	// VSRAsv2i64
    1184U,	// VSRAsv4i16
    1184U,	// VSRAsv4i32
    1184U,	// VSRAsv8i16
    1184U,	// VSRAsv8i8
    1184U,	// VSRAuv16i8
    1184U,	// VSRAuv1i64
    1184U,	// VSRAuv2i32
    1184U,	// VSRAuv2i64
    1184U,	// VSRAuv4i16
    1184U,	// VSRAuv4i32
    1184U,	// VSRAuv8i16
    1184U,	// VSRAuv8i8
    262168U,	// VSRIv16i8
    262168U,	// VSRIv1i64
    262168U,	// VSRIv2i32
    262168U,	// VSRIv2i64
    262168U,	// VSRIv4i16
    262168U,	// VSRIv4i32
    262168U,	// VSRIv8i16
    262168U,	// VSRIv8i8
    275U,	// VST1LNd16
    10769179U,	// VST1LNd16_UPD
    275U,	// VST1LNd32
    10769179U,	// VST1LNd32_UPD
    275U,	// VST1LNd8
    10769179U,	// VST1LNd8_UPD
    1240U,	// VST1LNdAsm_16
    1240U,	// VST1LNdAsm_32
    1240U,	// VST1LNdAsm_8
    5336U,	// VST1LNdWB_fixed_Asm_16
    5336U,	// VST1LNdWB_fixed_Asm_32
    5336U,	// VST1LNdWB_fixed_Asm_8
    311512U,	// VST1LNdWB_register_Asm_16
    311512U,	// VST1LNdWB_register_Asm_32
    311512U,	// VST1LNdWB_register_Asm_8
    0U,	// VST1LNq16Pseudo
    0U,	// VST1LNq16Pseudo_UPD
    0U,	// VST1LNq32Pseudo
    0U,	// VST1LNq32Pseudo_UPD
    0U,	// VST1LNq8Pseudo
    0U,	// VST1LNq8Pseudo_UPD
    0U,	// VST1d16
    0U,	// VST1d16Q
    0U,	// VST1d16Qwb_fixed
    0U,	// VST1d16Qwb_register
    0U,	// VST1d16T
    0U,	// VST1d16Twb_fixed
    0U,	// VST1d16Twb_register
    0U,	// VST1d16wb_fixed
    0U,	// VST1d16wb_register
    0U,	// VST1d32
    0U,	// VST1d32Q
    0U,	// VST1d32Qwb_fixed
    0U,	// VST1d32Qwb_register
    0U,	// VST1d32T
    0U,	// VST1d32Twb_fixed
    0U,	// VST1d32Twb_register
    0U,	// VST1d32wb_fixed
    0U,	// VST1d32wb_register
    0U,	// VST1d64
    0U,	// VST1d64Q
    0U,	// VST1d64QPseudo
    0U,	// VST1d64QPseudoWB_fixed
    0U,	// VST1d64QPseudoWB_register
    0U,	// VST1d64Qwb_fixed
    0U,	// VST1d64Qwb_register
    0U,	// VST1d64T
    0U,	// VST1d64TPseudo
    0U,	// VST1d64TPseudoWB_fixed
    0U,	// VST1d64TPseudoWB_register
    0U,	// VST1d64Twb_fixed
    0U,	// VST1d64Twb_register
    0U,	// VST1d64wb_fixed
    0U,	// VST1d64wb_register
    0U,	// VST1d8
    0U,	// VST1d8Q
    0U,	// VST1d8Qwb_fixed
    0U,	// VST1d8Qwb_register
    0U,	// VST1d8T
    0U,	// VST1d8Twb_fixed
    0U,	// VST1d8Twb_register
    0U,	// VST1d8wb_fixed
    0U,	// VST1d8wb_register
    0U,	// VST1q16
    0U,	// VST1q16wb_fixed
    0U,	// VST1q16wb_register
    0U,	// VST1q32
    0U,	// VST1q32wb_fixed
    0U,	// VST1q32wb_register
    0U,	// VST1q64
    0U,	// VST1q64wb_fixed
    0U,	// VST1q64wb_register
    0U,	// VST1q8
    0U,	// VST1q8wb_fixed
    0U,	// VST1q8wb_register
    110368459U,	// VST2LNd16
    0U,	// VST2LNd16Pseudo
    0U,	// VST2LNd16Pseudo_UPD
    448211U,	// VST2LNd16_UPD
    110368459U,	// VST2LNd32
    0U,	// VST2LNd32Pseudo
    0U,	// VST2LNd32Pseudo_UPD
    448211U,	// VST2LNd32_UPD
    110368459U,	// VST2LNd8
    0U,	// VST2LNd8Pseudo
    0U,	// VST2LNd8Pseudo_UPD
    448211U,	// VST2LNd8_UPD
    1240U,	// VST2LNdAsm_16
    1240U,	// VST2LNdAsm_32
    1240U,	// VST2LNdAsm_8
    5336U,	// VST2LNdWB_fixed_Asm_16
    5336U,	// VST2LNdWB_fixed_Asm_32
    5336U,	// VST2LNdWB_fixed_Asm_8
    311512U,	// VST2LNdWB_register_Asm_16
    311512U,	// VST2LNdWB_register_Asm_32
    311512U,	// VST2LNdWB_register_Asm_8
    110368459U,	// VST2LNq16
    0U,	// VST2LNq16Pseudo
    0U,	// VST2LNq16Pseudo_UPD
    448211U,	// VST2LNq16_UPD
    110368459U,	// VST2LNq32
    0U,	// VST2LNq32Pseudo
    0U,	// VST2LNq32Pseudo_UPD
    448211U,	// VST2LNq32_UPD
    1240U,	// VST2LNqAsm_16
    1240U,	// VST2LNqAsm_32
    5336U,	// VST2LNqWB_fixed_Asm_16
    5336U,	// VST2LNqWB_fixed_Asm_32
    311512U,	// VST2LNqWB_register_Asm_16
    311512U,	// VST2LNqWB_register_Asm_32
    0U,	// VST2b16
    0U,	// VST2b16wb_fixed
    0U,	// VST2b16wb_register
    0U,	// VST2b32
    0U,	// VST2b32wb_fixed
    0U,	// VST2b32wb_register
    0U,	// VST2b8
    0U,	// VST2b8wb_fixed
    0U,	// VST2b8wb_register
    0U,	// VST2d16
    0U,	// VST2d16wb_fixed
    0U,	// VST2d16wb_register
    0U,	// VST2d32
    0U,	// VST2d32wb_fixed
    0U,	// VST2d32wb_register
    0U,	// VST2d8
    0U,	// VST2d8wb_fixed
    0U,	// VST2d8wb_register
    0U,	// VST2q16
    0U,	// VST2q16Pseudo
    0U,	// VST2q16PseudoWB_fixed
    0U,	// VST2q16PseudoWB_register
    0U,	// VST2q16wb_fixed
    0U,	// VST2q16wb_register
    0U,	// VST2q32
    0U,	// VST2q32Pseudo
    0U,	// VST2q32PseudoWB_fixed
    0U,	// VST2q32PseudoWB_register
    0U,	// VST2q32wb_fixed
    0U,	// VST2q32wb_register
    0U,	// VST2q8
    0U,	// VST2q8Pseudo
    0U,	// VST2q8PseudoWB_fixed
    0U,	// VST2q8PseudoWB_register
    0U,	// VST2q8wb_fixed
    0U,	// VST2q8wb_register
    127145755U,	// VST3LNd16
    0U,	// VST3LNd16Pseudo
    0U,	// VST3LNd16Pseudo_UPD
    291U,	// VST3LNd16_UPD
    127145755U,	// VST3LNd32
    0U,	// VST3LNd32Pseudo
    0U,	// VST3LNd32Pseudo_UPD
    291U,	// VST3LNd32_UPD
    127145755U,	// VST3LNd8
    0U,	// VST3LNd8Pseudo
    0U,	// VST3LNd8Pseudo_UPD
    291U,	// VST3LNd8_UPD
    1240U,	// VST3LNdAsm_16
    1240U,	// VST3LNdAsm_32
    1240U,	// VST3LNdAsm_8
    5336U,	// VST3LNdWB_fixed_Asm_16
    5336U,	// VST3LNdWB_fixed_Asm_32
    5336U,	// VST3LNdWB_fixed_Asm_8
    311512U,	// VST3LNdWB_register_Asm_16
    311512U,	// VST3LNdWB_register_Asm_32
    311512U,	// VST3LNdWB_register_Asm_8
    127145755U,	// VST3LNq16
    0U,	// VST3LNq16Pseudo
    0U,	// VST3LNq16Pseudo_UPD
    291U,	// VST3LNq16_UPD
    127145755U,	// VST3LNq32
    0U,	// VST3LNq32Pseudo
    0U,	// VST3LNq32Pseudo_UPD
    291U,	// VST3LNq32_UPD
    1240U,	// VST3LNqAsm_16
    1240U,	// VST3LNqAsm_32
    5336U,	// VST3LNqWB_fixed_Asm_16
    5336U,	// VST3LNqWB_fixed_Asm_32
    311512U,	// VST3LNqWB_register_Asm_16
    311512U,	// VST3LNqWB_register_Asm_32
    142917792U,	// VST3d16
    0U,	// VST3d16Pseudo
    0U,	// VST3d16Pseudo_UPD
    9512U,	// VST3d16_UPD
    142917792U,	// VST3d32
    0U,	// VST3d32Pseudo
    0U,	// VST3d32Pseudo_UPD
    9512U,	// VST3d32_UPD
    142917792U,	// VST3d8
    0U,	// VST3d8Pseudo
    0U,	// VST3d8Pseudo_UPD
    9512U,	// VST3d8_UPD
    59U,	// VST3dAsm_16
    59U,	// VST3dAsm_32
    59U,	// VST3dAsm_8
    195U,	// VST3dWB_fixed_Asm_16
    195U,	// VST3dWB_fixed_Asm_32
    195U,	// VST3dWB_fixed_Asm_8
    249379U,	// VST3dWB_register_Asm_16
    249379U,	// VST3dWB_register_Asm_32
    249379U,	// VST3dWB_register_Asm_8
    142917792U,	// VST3q16
    0U,	// VST3q16Pseudo_UPD
    9512U,	// VST3q16_UPD
    0U,	// VST3q16oddPseudo
    0U,	// VST3q16oddPseudo_UPD
    142917792U,	// VST3q32
    0U,	// VST3q32Pseudo_UPD
    9512U,	// VST3q32_UPD
    0U,	// VST3q32oddPseudo
    0U,	// VST3q32oddPseudo_UPD
    142917792U,	// VST3q8
    0U,	// VST3q8Pseudo_UPD
    9512U,	// VST3q8_UPD
    0U,	// VST3q8oddPseudo
    0U,	// VST3q8oddPseudo_UPD
    0U,	// VST3qAsm_16
    0U,	// VST3qAsm_32
    0U,	// VST3qAsm_8
    4U,	// VST3qWB_fixed_Asm_16
    4U,	// VST3qWB_fixed_Asm_32
    4U,	// VST3qWB_fixed_Asm_8
    1184U,	// VST3qWB_register_Asm_16
    1184U,	// VST3qWB_register_Asm_32
    1184U,	// VST3qWB_register_Asm_8
    160700115U,	// VST4LNd16
    0U,	// VST4LNd16Pseudo
    0U,	// VST4LNd16Pseudo_UPD
    9955U,	// VST4LNd16_UPD
    160700115U,	// VST4LNd32
    0U,	// VST4LNd32Pseudo
    0U,	// VST4LNd32Pseudo_UPD
    9955U,	// VST4LNd32_UPD
    160700115U,	// VST4LNd8
    0U,	// VST4LNd8Pseudo
    0U,	// VST4LNd8Pseudo_UPD
    9955U,	// VST4LNd8_UPD
    1240U,	// VST4LNdAsm_16
    1240U,	// VST4LNdAsm_32
    1240U,	// VST4LNdAsm_8
    5336U,	// VST4LNdWB_fixed_Asm_16
    5336U,	// VST4LNdWB_fixed_Asm_32
    5336U,	// VST4LNdWB_fixed_Asm_8
    311512U,	// VST4LNdWB_register_Asm_16
    311512U,	// VST4LNdWB_register_Asm_32
    311512U,	// VST4LNdWB_register_Asm_8
    160700115U,	// VST4LNq16
    0U,	// VST4LNq16Pseudo
    0U,	// VST4LNq16Pseudo_UPD
    9955U,	// VST4LNq16_UPD
    160700115U,	// VST4LNq32
    0U,	// VST4LNq32Pseudo
    0U,	// VST4LNq32Pseudo_UPD
    9955U,	// VST4LNq32_UPD
    1240U,	// VST4LNqAsm_16
    1240U,	// VST4LNqAsm_32
    5336U,	// VST4LNqWB_fixed_Asm_16
    5336U,	// VST4LNqWB_fixed_Asm_32
    311512U,	// VST4LNqWB_register_Asm_16
    311512U,	// VST4LNqWB_register_Asm_32
    169132192U,	// VST4d16
    0U,	// VST4d16Pseudo
    0U,	// VST4d16Pseudo_UPD
    459048U,	// VST4d16_UPD
    169132192U,	// VST4d32
    0U,	// VST4d32Pseudo
    0U,	// VST4d32Pseudo_UPD
    459048U,	// VST4d32_UPD
    169132192U,	// VST4d8
    0U,	// VST4d8Pseudo
    0U,	// VST4d8Pseudo_UPD
    459048U,	// VST4d8_UPD
    59U,	// VST4dAsm_16
    59U,	// VST4dAsm_32
    59U,	// VST4dAsm_8
    195U,	// VST4dWB_fixed_Asm_16
    195U,	// VST4dWB_fixed_Asm_32
    195U,	// VST4dWB_fixed_Asm_8
    249379U,	// VST4dWB_register_Asm_16
    249379U,	// VST4dWB_register_Asm_32
    249379U,	// VST4dWB_register_Asm_8
    169132192U,	// VST4q16
    0U,	// VST4q16Pseudo_UPD
    459048U,	// VST4q16_UPD
    0U,	// VST4q16oddPseudo
    0U,	// VST4q16oddPseudo_UPD
    169132192U,	// VST4q32
    0U,	// VST4q32Pseudo_UPD
    459048U,	// VST4q32_UPD
    0U,	// VST4q32oddPseudo
    0U,	// VST4q32oddPseudo_UPD
    169132192U,	// VST4q8
    0U,	// VST4q8Pseudo_UPD
    459048U,	// VST4q8_UPD
    0U,	// VST4q8oddPseudo
    0U,	// VST4q8oddPseudo_UPD
    0U,	// VST4qAsm_16
    0U,	// VST4qAsm_32
    0U,	// VST4qAsm_8
    4U,	// VST4qWB_fixed_Asm_16
    4U,	// VST4qWB_fixed_Asm_32
    4U,	// VST4qWB_fixed_Asm_8
    1184U,	// VST4qWB_register_Asm_16
    1184U,	// VST4qWB_register_Asm_32
    1184U,	// VST4qWB_register_Asm_8
    57U,	// VSTMDDB_UPD
    1088U,	// VSTMDIA
    57U,	// VSTMDIA_UPD
    0U,	// VSTMQIA
    57U,	// VSTMSDB_UPD
    1088U,	// VSTMSIA
    57U,	// VSTMSIA_UPD
    264U,	// VSTRD
    264U,	// VSTRS
    247328U,	// VSUBD
    1048U,	// VSUBHNv2i32
    1048U,	// VSUBHNv4i16
    1048U,	// VSUBHNv8i8
    1048U,	// VSUBLsv2i64
    1048U,	// VSUBLsv4i32
    1048U,	// VSUBLsv8i16
    1048U,	// VSUBLuv2i64
    1048U,	// VSUBLuv4i32
    1048U,	// VSUBLuv8i16
    247328U,	// VSUBS
    1048U,	// VSUBWsv2i64
    1048U,	// VSUBWsv4i32
    1048U,	// VSUBWsv8i16
    1048U,	// VSUBWuv2i64
    1048U,	// VSUBWuv4i32
    1048U,	// VSUBWuv8i16
    247328U,	// VSUBfd
    247328U,	// VSUBfq
    1048U,	// VSUBv16i8
    1048U,	// VSUBv1i64
    1048U,	// VSUBv2i32
    1048U,	// VSUBv2i64
    1048U,	// VSUBv4i16
    1048U,	// VSUBv4i32
    1048U,	// VSUBv8i16
    1048U,	// VSUBv8i8
    1024U,	// VSWPd
    1024U,	// VSWPq
    304U,	// VTBL1
    312U,	// VTBL2
    320U,	// VTBL3
    0U,	// VTBL3Pseudo
    328U,	// VTBL4
    0U,	// VTBL4Pseudo
    336U,	// VTBX1
    344U,	// VTBX2
    352U,	// VTBX3
    0U,	// VTBX3Pseudo
    360U,	// VTBX4
    0U,	// VTBX4Pseudo
    0U,	// VTOSHD
    0U,	// VTOSHS
    0U,	// VTOSIRD
    0U,	// VTOSIRS
    0U,	// VTOSIZD
    0U,	// VTOSIZS
    6U,	// VTOSLD
    6U,	// VTOSLS
    0U,	// VTOUHD
    0U,	// VTOUHS
    0U,	// VTOUIRD
    0U,	// VTOUIRS
    0U,	// VTOUIZD
    0U,	// VTOUIZS
    6U,	// VTOULD
    6U,	// VTOULS
    1024U,	// VTRNd16
    1024U,	// VTRNd32
    1024U,	// VTRNd8
    1024U,	// VTRNq16
    1024U,	// VTRNq32
    1024U,	// VTRNq8
    0U,	// VTSTv16i8
    0U,	// VTSTv2i32
    0U,	// VTSTv4i16
    0U,	// VTSTv4i32
    0U,	// VTSTv8i16
    0U,	// VTSTv8i8
    0U,	// VUHTOD
    0U,	// VUHTOS
    0U,	// VUITOD
    0U,	// VUITOS
    6U,	// VULTOD
    6U,	// VULTOS
    1024U,	// VUZPd16
    1024U,	// VUZPd8
    1024U,	// VUZPq16
    1024U,	// VUZPq32
    1024U,	// VUZPq8
    1024U,	// VZIPd16
    1024U,	// VZIPd8
    1024U,	// VZIPq16
    1024U,	// VZIPq32
    1024U,	// VZIPq8
    10304U,	// sysLDMDA
    369U,	// sysLDMDA_UPD
    10304U,	// sysLDMDB
    369U,	// sysLDMDB_UPD
    10304U,	// sysLDMIA
    369U,	// sysLDMIA_UPD
    10304U,	// sysLDMIB
    369U,	// sysLDMIB_UPD
    10304U,	// sysSTMDA
    369U,	// sysSTMDA_UPD
    10304U,	// sysSTMDB
    369U,	// sysSTMDB_UPD
    10304U,	// sysSTMIA
    369U,	// sysSTMIA_UPD
    10304U,	// sysSTMIB
    369U,	// sysSTMIB_UPD
    0U,	// t2ABS
    0U,	// t2ADCri
    0U,	// t2ADCrr
    475136U,	// t2ADCrs
    0U,	// t2ADDSri
    0U,	// t2ADDSrr
    0U,	// t2ADDSrs
    0U,	// t2ADDri
    0U,	// t2ADDri12
    0U,	// t2ADDrr
    475136U,	// t2ADDrs
    8U,	// t2ADR
    0U,	// t2ANDri
    0U,	// t2ANDrr
    475136U,	// t2ANDrs
    491520U,	// t2ASRri
    0U,	// t2ASRrr
    0U,	// t2B
    16U,	// t2BFC
    32792U,	// t2BFI
    0U,	// t2BICri
    0U,	// t2BICrr
    475136U,	// t2BICrs
    0U,	// t2BR_JT
    0U,	// t2BXJ
    0U,	// t2Bcc
    544U,	// t2CDP
    544U,	// t2CDP2
    0U,	// t2CLREX
    1024U,	// t2CLZ
    1024U,	// t2CMNri
    1024U,	// t2CMNzrr
    376U,	// t2CMNzrs
    1024U,	// t2CMPri
    1024U,	// t2CMPrr
    376U,	// t2CMPrs
    0U,	// t2CPS1p
    0U,	// t2CPS2p
    1048U,	// t2CPS3p
    0U,	// t2DBG
    0U,	// t2DMB
    0U,	// t2DSB
    0U,	// t2EORri
    0U,	// t2EORrr
    475136U,	// t2EORrs
    0U,	// t2HINT
    0U,	// t2ISB
    0U,	// t2IT
    0U,	// t2Int_eh_sjlj_setjmp
    0U,	// t2Int_eh_sjlj_setjmp_nofp
    72U,	// t2LDA
    72U,	// t2LDAB
    72U,	// t2LDAEX
    72U,	// t2LDAEXB
    229376U,	// t2LDAEXD
    72U,	// t2LDAEXH
    72U,	// t2LDAH
    81U,	// t2LDC2L_OFFSET
    49241U,	// t2LDC2L_OPTION
    65625U,	// t2LDC2L_POST
    97U,	// t2LDC2L_PRE
    81U,	// t2LDC2_OFFSET
    49241U,	// t2LDC2_OPTION
    65625U,	// t2LDC2_POST
    97U,	// t2LDC2_PRE
    81U,	// t2LDCL_OFFSET
    49241U,	// t2LDCL_OPTION
    65625U,	// t2LDCL_POST
    97U,	// t2LDCL_PRE
    81U,	// t2LDC_OFFSET
    49241U,	// t2LDC_OPTION
    65625U,	// t2LDC_POST
    97U,	// t2LDC_PRE
    1088U,	// t2LDMDB
    57U,	// t2LDMDB_UPD
    1088U,	// t2LDMIA
    0U,	// t2LDMIA_RET
    57U,	// t2LDMIA_UPD
    384U,	// t2LDRBT
    10840U,	// t2LDRB_POST
    392U,	// t2LDRB_PRE
    120U,	// t2LDRBi12
    384U,	// t2LDRBi8
    400U,	// t2LDRBpci
    1024U,	// t2LDRBpcrel
    408U,	// t2LDRBs
    11649024U,	// t2LDRD_POST
    507904U,	// t2LDRD_PRE
    524288U,	// t2LDRDi8
    416U,	// t2LDREX
    72U,	// t2LDREXB
    229376U,	// t2LDREXD
    72U,	// t2LDREXH
    384U,	// t2LDRHT
    10840U,	// t2LDRH_POST
    392U,	// t2LDRH_PRE
    120U,	// t2LDRHi12
    384U,	// t2LDRHi8
    400U,	// t2LDRHpci
    1024U,	// t2LDRHpcrel
    408U,	// t2LDRHs
    384U,	// t2LDRSBT
    10840U,	// t2LDRSB_POST
    392U,	// t2LDRSB_PRE
    120U,	// t2LDRSBi12
    384U,	// t2LDRSBi8
    400U,	// t2LDRSBpci
    1024U,	// t2LDRSBpcrel
    408U,	// t2LDRSBs
    384U,	// t2LDRSHT
    10840U,	// t2LDRSH_POST
    392U,	// t2LDRSH_PRE
    120U,	// t2LDRSHi12
    384U,	// t2LDRSHi8
    400U,	// t2LDRSHpci
    1024U,	// t2LDRSHpcrel
    408U,	// t2LDRSHs
    384U,	// t2LDRT
    10840U,	// t2LDR_POST
    392U,	// t2LDR_PRE
    120U,	// t2LDRi12
    384U,	// t2LDRi8
    400U,	// t2LDRpci
    0U,	// t2LDRpci_pic
    1024U,	// t2LDRpcrel
    408U,	// t2LDRs
    0U,	// t2LEApcrel
    0U,	// t2LEApcrelJT
    0U,	// t2LSLri
    0U,	// t2LSLrr
    491520U,	// t2LSRri
    0U,	// t2LSRrr
    2295328U,	// t2MCR
    2295328U,	// t2MCR2
    3343904U,	// t2MCRR
    3343904U,	// t2MCRR2
    17825792U,	// t2MLA
    17825792U,	// t2MLS
    0U,	// t2MOVCCasr
    0U,	// t2MOVCCi
    0U,	// t2MOVCCi16
    0U,	// t2MOVCCi32imm
    0U,	// t2MOVCClsl
    0U,	// t2MOVCClsr
    0U,	// t2MOVCCr
    0U,	// t2MOVCCror
    376U,	// t2MOVSsi
    48U,	// t2MOVSsr
    1048U,	// t2MOVTi16
    0U,	// t2MOVTi16_ga_pcrel
    0U,	// t2MOV_ga_dyn
    0U,	// t2MOV_ga_pcrel
    1024U,	// t2MOVi
    1024U,	// t2MOVi16
    0U,	// t2MOVi16_ga_pcrel
    0U,	// t2MOVi32imm
    1024U,	// t2MOVr
    376U,	// t2MOVsi
    48U,	// t2MOVsr
    11264U,	// t2MOVsra_flag
    11264U,	// t2MOVsrl_flag
    0U,	// t2MRC
    0U,	// t2MRC2
    3343904U,	// t2MRRC
    3343904U,	// t2MRRC2
    2U,	// t2MRS_AR
    424U,	// t2MRS_M
    2U,	// t2MRSsys_AR
    0U,	// t2MSR_AR
    0U,	// t2MSR_M
    0U,	// t2MUL
    0U,	// t2MVNCCi
    1024U,	// t2MVNi
    1024U,	// t2MVNr
    376U,	// t2MVNs
    0U,	// t2ORNri
    0U,	// t2ORNrr
    475136U,	// t2ORNrs
    0U,	// t2ORRri
    0U,	// t2ORRrr
    475136U,	// t2ORRrs
    4194304U,	// t2PKHBT
    5242880U,	// t2PKHTB
    0U,	// t2PLDWi12
    0U,	// t2PLDWi8
    0U,	// t2PLDWs
    0U,	// t2PLDi12
    0U,	// t2PLDi8
    0U,	// t2PLDpci
    0U,	// t2PLDs
    0U,	// t2PLIi12
    0U,	// t2PLIi8
    0U,	// t2PLIpci
    0U,	// t2PLIs
    0U,	// t2QADD
    0U,	// t2QADD16
    0U,	// t2QADD8
    0U,	// t2QASX
    0U,	// t2QDADD
    0U,	// t2QDSUB
    0U,	// t2QSAX
    0U,	// t2QSUB
    0U,	// t2QSUB16
    0U,	// t2QSUB8
    1024U,	// t2RBIT
    1024U,	// t2REV
    1024U,	// t2REV16
    1024U,	// t2REVSH
    0U,	// t2RFEDB
    4U,	// t2RFEDBW
    0U,	// t2RFEIA
    4U,	// t2RFEIAW
    0U,	// t2RORri
    0U,	// t2RORrr
    1024U,	// t2RRX
    0U,	// t2RSBSri
    0U,	// t2RSBSrs
    0U,	// t2RSBri
    0U,	// t2RSBrr
    475136U,	// t2RSBrs
    0U,	// t2SADD16
    0U,	// t2SADD8
    0U,	// t2SASX
    0U,	// t2SBCri
    0U,	// t2SBCrr
    475136U,	// t2SBCrs
    34603008U,	// t2SBFX
    0U,	// t2SDIV
    0U,	// t2SEL
    0U,	// t2SHADD16
    0U,	// t2SHADD8
    0U,	// t2SHASX
    0U,	// t2SHSAX
    0U,	// t2SHSUB16
    0U,	// t2SHSUB8
    0U,	// t2SMC
    17825792U,	// t2SMLABB
    17825792U,	// t2SMLABT
    17825792U,	// t2SMLAD
    17825792U,	// t2SMLADX
    17825792U,	// t2SMLAL
    17825792U,	// t2SMLALBB
    17825792U,	// t2SMLALBT
    17825792U,	// t2SMLALD
    17825792U,	// t2SMLALDX
    17825792U,	// t2SMLALTB
    17825792U,	// t2SMLALTT
    17825792U,	// t2SMLATB
    17825792U,	// t2SMLATT
    17825792U,	// t2SMLAWB
    17825792U,	// t2SMLAWT
    17825792U,	// t2SMLSD
    17825792U,	// t2SMLSDX
    17825792U,	// t2SMLSLD
    185860096U,	// t2SMLSLDX
    17825792U,	// t2SMMLA
    17825792U,	// t2SMMLAR
    17825792U,	// t2SMMLS
    17825792U,	// t2SMMLSR
    0U,	// t2SMMUL
    0U,	// t2SMMULR
    0U,	// t2SMUAD
    0U,	// t2SMUADX
    0U,	// t2SMULBB
    0U,	// t2SMULBT
    17825792U,	// t2SMULL
    0U,	// t2SMULTB
    0U,	// t2SMULTT
    0U,	// t2SMULWB
    0U,	// t2SMULWT
    0U,	// t2SMUSD
    0U,	// t2SMUSDX
    0U,	// t2SRSDB
    0U,	// t2SRSDB_UPD
    0U,	// t2SRSIA
    0U,	// t2SRSIA_UPD
    2216U,	// t2SSAT
    1192U,	// t2SSAT16
    0U,	// t2SSAX
    0U,	// t2SSUB16
    0U,	// t2SSUB8
    81U,	// t2STC2L_OFFSET
    49241U,	// t2STC2L_OPTION
    65625U,	// t2STC2L_POST
    97U,	// t2STC2L_PRE
    81U,	// t2STC2_OFFSET
    49241U,	// t2STC2_OPTION
    65625U,	// t2STC2_POST
    97U,	// t2STC2_PRE
    81U,	// t2STCL_OFFSET
    49241U,	// t2STCL_OPTION
    65625U,	// t2STCL_POST
    97U,	// t2STCL_PRE
    81U,	// t2STC_OFFSET
    49241U,	// t2STC_OPTION
    65625U,	// t2STC_POST
    97U,	// t2STC_PRE
    72U,	// t2STL
    72U,	// t2STLB
    229376U,	// t2STLEX
    229376U,	// t2STLEXB
    202375168U,	// t2STLEXD
    229376U,	// t2STLEXH
    72U,	// t2STLH
    1088U,	// t2STMDB
    57U,	// t2STMDB_UPD
    1088U,	// t2STMIA
    57U,	// t2STMIA_UPD
    384U,	// t2STRBT
    10840U,	// t2STRB_POST
    392U,	// t2STRB_PRE
    0U,	// t2STRB_preidx
    120U,	// t2STRBi12
    384U,	// t2STRBi8
    408U,	// t2STRBs
    11649048U,	// t2STRD_POST
    507928U,	// t2STRD_PRE
    524288U,	// t2STRDi8
    540672U,	// t2STREX
    229376U,	// t2STREXB
    202375168U,	// t2STREXD
    229376U,	// t2STREXH
    384U,	// t2STRHT
    10840U,	// t2STRH_POST
    392U,	// t2STRH_PRE
    0U,	// t2STRH_preidx
    120U,	// t2STRHi12
    384U,	// t2STRHi8
    408U,	// t2STRHs
    384U,	// t2STRT
    10840U,	// t2STR_POST
    392U,	// t2STR_PRE
    0U,	// t2STR_preidx
    120U,	// t2STRi12
    384U,	// t2STRi8
    408U,	// t2STRs
    0U,	// t2SUBS_PC_LR
    0U,	// t2SUBSri
    0U,	// t2SUBSrr
    0U,	// t2SUBSrs
    0U,	// t2SUBri
    0U,	// t2SUBri12
    0U,	// t2SUBrr
    475136U,	// t2SUBrs
    6291456U,	// t2SXTAB
    6291456U,	// t2SXTAB16
    6291456U,	// t2SXTAH
    2560U,	// t2SXTB
    2560U,	// t2SXTB16
    2560U,	// t2SXTH
    0U,	// t2TBB
    0U,	// t2TBB_JT
    0U,	// t2TBH
    0U,	// t2TBH_JT
    1024U,	// t2TEQri
    1024U,	// t2TEQrr
    376U,	// t2TEQrs
    1024U,	// t2TSTri
    1024U,	// t2TSTrr
    376U,	// t2TSTrs
    0U,	// t2UADD16
    0U,	// t2UADD8
    0U,	// t2UASX
    34603008U,	// t2UBFX
    0U,	// t2UDIV
    0U,	// t2UHADD16
    0U,	// t2UHADD8
    0U,	// t2UHASX
    0U,	// t2UHSAX
    0U,	// t2UHSUB16
    0U,	// t2UHSUB8
    17825792U,	// t2UMAAL
    17825792U,	// t2UMLAL
    17825792U,	// t2UMULL
    0U,	// t2UQADD16
    0U,	// t2UQADD8
    0U,	// t2UQASX
    0U,	// t2UQSAX
    0U,	// t2UQSUB16
    0U,	// t2UQSUB8
    0U,	// t2USAD8
    17825792U,	// t2USADA8
    7340032U,	// t2USAT
    0U,	// t2USAT16
    0U,	// t2USAX
    0U,	// t2USUB16
    0U,	// t2USUB8
    6291456U,	// t2UXTAB
    6291456U,	// t2UXTAB16
    6291456U,	// t2UXTAH
    2560U,	// t2UXTB
    2560U,	// t2UXTB16
    2560U,	// t2UXTH
    0U,	// tADC
    1048U,	// tADDhirr
    1184U,	// tADDi3
    0U,	// tADDi8
    0U,	// tADDrSP
    557056U,	// tADDrSPi
    1184U,	// tADDrr
    432U,	// tADDspi
    1048U,	// tADDspr
    0U,	// tADJCALLSTACKDOWN
    0U,	// tADJCALLSTACKUP
    440U,	// tADR
    0U,	// tAND
    448U,	// tASRri
    0U,	// tASRrr
    0U,	// tB
    0U,	// tBIC
    0U,	// tBKPT
    0U,	// tBL
    0U,	// tBLXi
    0U,	// tBLXr
    0U,	// tBRIND
    0U,	// tBR_JTr
    0U,	// tBX
    0U,	// tBX_CALL
    0U,	// tBX_RET
    0U,	// tBX_RET_vararg
    0U,	// tBcc
    0U,	// tBfar
    0U,	// tCBNZ
    0U,	// tCBZ
    1024U,	// tCMNz
    1024U,	// tCMPhir
    1024U,	// tCMPi8
    1024U,	// tCMPr
    0U,	// tCPS
    0U,	// tEOR
    0U,	// tInt_eh_sjlj_longjmp
    0U,	// tInt_eh_sjlj_setjmp
    1088U,	// tLDMIA
    0U,	// tLDMIA_UPD
    456U,	// tLDRBi
    464U,	// tLDRBr
    472U,	// tLDRHi
    464U,	// tLDRHr
    464U,	// tLDRSB
    464U,	// tLDRSH
    480U,	// tLDRi
    400U,	// tLDRpci
    0U,	// tLDRpci_pic
    464U,	// tLDRr
    488U,	// tLDRspi
    0U,	// tLEApcrel
    0U,	// tLEApcrelJT
    1184U,	// tLSLri
    0U,	// tLSLrr
    448U,	// tLSRri
    0U,	// tLSRrr
    0U,	// tMOVCCr_pseudo
    0U,	// tMOVSr
    0U,	// tMOVi8
    1024U,	// tMOVr
    1184U,	// tMUL
    0U,	// tMVN
    0U,	// tNOP
    0U,	// tORR
    0U,	// tPICADD
    0U,	// tPOP
    0U,	// tPOP_RET
    0U,	// tPUSH
    1024U,	// tREV
    1024U,	// tREV16
    1024U,	// tREVSH
    0U,	// tROR
    0U,	// tRSB
    0U,	// tSBC
    0U,	// tSETEND
    0U,	// tSEV
    57U,	// tSTMIA_UPD
    456U,	// tSTRBi
    464U,	// tSTRBr
    472U,	// tSTRHi
    464U,	// tSTRHr
    480U,	// tSTRi
    464U,	// tSTRr
    488U,	// tSTRspi
    1184U,	// tSUBi3
    0U,	// tSUBi8
    1184U,	// tSUBrr
    432U,	// tSUBspi
    0U,	// tSVC
    1024U,	// tSXTB
    1024U,	// tSXTH
    0U,	// tTAILJMPd
    0U,	// tTAILJMPdND
    0U,	// tTAILJMPr
    0U,	// tTPsoft
    0U,	// tTRAP
    1024U,	// tTST
    1024U,	// tUXTB
    1024U,	// tUXTH
    0U,	// tWFE
    0U,	// tWFI
    0U,	// tYIELD
    0U
  };

  const char AsmStrs[] = {
  /* 0 */ 'v', 'c', 'v', 't', 'a', '.', 's', '3', '2', '.', 'f', '3', '2', 9, 0,
  /* 15 */ 'v', 'c', 'v', 't', 'm', '.', 's', '3', '2', '.', 'f', '3', '2', 9, 0,
  /* 30 */ 'v', 'c', 'v', 't', 'n', '.', 's', '3', '2', '.', 'f', '3', '2', 9, 0,
  /* 45 */ 'v', 'c', 'v', 't', 'p', '.', 's', '3', '2', '.', 'f', '3', '2', 9, 0,
  /* 60 */ 'v', 'c', 'v', 't', 'a', '.', 'u', '3', '2', '.', 'f', '3', '2', 9, 0,
  /* 75 */ 'v', 'c', 'v', 't', 'm', '.', 'u', '3', '2', '.', 'f', '3', '2', 9, 0,
  /* 90 */ 'v', 'c', 'v', 't', 'n', '.', 'u', '3', '2', '.', 'f', '3', '2', 9, 0,
  /* 105 */ 'v', 'c', 'v', 't', 'p', '.', 'u', '3', '2', '.', 'f', '3', '2', 9, 0,
  /* 120 */ 'v', 'r', 'i', 'n', 't', 'a', '.', 'f', '3', '2', 9, 0,
  /* 132 */ 'v', 's', 'e', 'l', 'g', 'e', '.', 'f', '3', '2', 9, 0,
  /* 144 */ 'v', 'm', 'i', 'n', 'n', 'm', '.', 'f', '3', '2', 9, 0,
  /* 156 */ 'v', 'm', 'a', 'x', 'n', 'm', '.', 'f', '3', '2', 9, 0,
  /* 168 */ 'v', 'r', 'i', 'n', 't', 'm', '.', 'f', '3', '2', 9, 0,
  /* 180 */ 'v', 'r', 'i', 'n', 't', 'n', '.', 'f', '3', '2', 9, 0,
  /* 192 */ 'v', 'r', 'i', 'n', 't', 'p', '.', 'f', '3', '2', 9, 0,
  /* 204 */ 'v', 's', 'e', 'l', 'e', 'q', '.', 'f', '3', '2', 9, 0,
  /* 216 */ 'v', 's', 'e', 'l', 'v', 's', '.', 'f', '3', '2', 9, 0,
  /* 228 */ 'v', 's', 'e', 'l', 'g', 't', '.', 'f', '3', '2', 9, 0,
  /* 240 */ 'v', 'r', 'i', 'n', 't', 'x', '.', 'f', '3', '2', 9, 0,
  /* 252 */ 'v', 'r', 'i', 'n', 't', 'z', '.', 'f', '3', '2', 9, 0,
  /* 264 */ 'l', 'd', 'c', '2', 9, 0,
  /* 270 */ 'm', 'r', 'c', '2', 9, 0,
  /* 276 */ 'm', 'r', 'r', 'c', '2', 9, 0,
  /* 283 */ 's', 't', 'c', '2', 9, 0,
  /* 289 */ 'c', 'd', 'p', '2', 9, 0,
  /* 295 */ 'm', 'c', 'r', '2', 9, 0,
  /* 301 */ 'm', 'c', 'r', 'r', '2', 9, 0,
  /* 308 */ 'v', 'c', 'v', 't', 'a', '.', 's', '3', '2', '.', 'f', '6', '4', 9, 0,
  /* 323 */ 'v', 'c', 'v', 't', 'm', '.', 's', '3', '2', '.', 'f', '6', '4', 9, 0,
  /* 338 */ 'v', 'c', 'v', 't', 'n', '.', 's', '3', '2', '.', 'f', '6', '4', 9, 0,
  /* 353 */ 'v', 'c', 'v', 't', 'p', '.', 's', '3', '2', '.', 'f', '6', '4', 9, 0,
  /* 368 */ 'v', 'c', 'v', 't', 'a', '.', 'u', '3', '2', '.', 'f', '6', '4', 9, 0,
  /* 383 */ 'v', 'c', 'v', 't', 'm', '.', 'u', '3', '2', '.', 'f', '6', '4', 9, 0,
  /* 398 */ 'v', 'c', 'v', 't', 'n', '.', 'u', '3', '2', '.', 'f', '6', '4', 9, 0,
  /* 413 */ 'v', 'c', 'v', 't', 'p', '.', 'u', '3', '2', '.', 'f', '6', '4', 9, 0,
  /* 428 */ 'v', 'r', 'i', 'n', 't', 'a', '.', 'f', '6', '4', 9, 0,
  /* 440 */ 'v', 's', 'e', 'l', 'g', 'e', '.', 'f', '6', '4', 9, 0,
  /* 452 */ 'v', 'm', 'i', 'n', 'n', 'm', '.', 'f', '6', '4', 9, 0,
  /* 464 */ 'v', 'm', 'a', 'x', 'n', 'm', '.', 'f', '6', '4', 9, 0,
  /* 476 */ 'v', 'r', 'i', 'n', 't', 'm', '.', 'f', '6', '4', 9, 0,
  /* 488 */ 'v', 'r', 'i', 'n', 't', 'n', '.', 'f', '6', '4', 9, 0,
  /* 500 */ 'v', 'r', 'i', 'n', 't', 'p', '.', 'f', '6', '4', 9, 0,
  /* 512 */ 'v', 's', 'e', 'l', 'e', 'q', '.', 'f', '6', '4', 9, 0,
  /* 524 */ 'v', 's', 'e', 'l', 'v', 's', '.', 'f', '6', '4', 9, 0,
  /* 536 */ 'v', 's', 'e', 'l', 'g', 't', '.', 'f', '6', '4', 9, 0,
  /* 548 */ 'r', 'f', 'e', 'd', 'a', 9, 0,
  /* 555 */ 'r', 'f', 'e', 'i', 'a', 9, 0,
  /* 562 */ 'r', 'f', 'e', 'd', 'b', 9, 0,
  /* 569 */ 'r', 'f', 'e', 'i', 'b', 9, 0,
  /* 576 */ 'd', 'm', 'b', 9, 0,
  /* 581 */ 'd', 's', 'b', 9, 0,
  /* 586 */ 'i', 's', 'b', 9, 0,
  /* 591 */ 'p', 'l', 'd', 9, 0,
  /* 596 */ 's', 'e', 't', 'e', 'n', 'd', 9, 0,
  /* 604 */ 'p', 'l', 'i', 9, 0,
  /* 609 */ 'l', 'd', 'c', '2', 'l', 9, 0,
  /* 616 */ 's', 't', 'c', '2', 'l', 9, 0,
  /* 623 */ 'b', 'l', 9, 0,
  /* 627 */ 'c', 'p', 's', 9, 0,
  /* 632 */ 'm', 'o', 'v', 's', 9, 0,
  /* 638 */ 'b', 'k', 'p', 't', 9, 0,
  /* 644 */ 'p', 'l', 'd', 'w', 9, 0,
  /* 650 */ 'b', 'x', 9, 0,
  /* 654 */ 'b', 'l', 'x', 9, 0,
  /* 659 */ 'c', 'b', 'z', 9, 0,
  /* 664 */ 'c', 'b', 'n', 'z', 9, 0,
  /* 670 */ 's', 'r', 's', 'd', 'a', 9, 's', 'p', '!', ',', 32, 0,
  /* 682 */ 's', 'r', 's', 'i', 'a', 9, 's', 'p', '!', ',', 32, 0,
  /* 694 */ 's', 'r', 's', 'd', 'b', 9, 's', 'p', '!', ',', 32, 0,
  /* 706 */ 's', 'r', 's', 'i', 'b', 9, 's', 'p', '!', ',', 32, 0,
  /* 718 */ 's', 'r', 's', 'd', 'a', 9, 's', 'p', ',', 32, 0,
  /* 729 */ 's', 'r', 's', 'i', 'a', 9, 's', 'p', ',', 32, 0,
  /* 740 */ 's', 'r', 's', 'd', 'b', 9, 's', 'p', ',', 32, 0,
  /* 751 */ 's', 'r', 's', 'i', 'b', 9, 's', 'p', ',', 32, 0,
  /* 762 */ 'v', 'l', 'd', '1', 0,
  /* 767 */ 'v', 's', 't', '1', 0,
  /* 772 */ 'v', 'r', 'e', 'v', '3', '2', 0,
  /* 779 */ 'l', 'd', 'c', '2', 0,
  /* 784 */ 'm', 'r', 'c', '2', 0,
  /* 789 */ 'm', 'r', 'r', 'c', '2', 0,
  /* 795 */ 's', 't', 'c', '2', 0,
  /* 800 */ 'v', 'l', 'd', '2', 0,
  /* 805 */ 'c', 'd', 'p', '2', 0,
  /* 810 */ 'm', 'c', 'r', '2', 0,
  /* 815 */ 'm', 'c', 'r', 'r', '2', 0,
  /* 821 */ 'v', 's', 't', '2', 0,
  /* 826 */ 'v', 'l', 'd', '3', 0,
  /* 831 */ 'v', 's', 't', '3', 0,
  /* 836 */ 'v', 'r', 'e', 'v', '6', '4', 0,
  /* 843 */ 'v', 'l', 'd', '4', 0,
  /* 848 */ 'v', 's', 't', '4', 0,
  /* 853 */ 's', 'x', 't', 'a', 'b', '1', '6', 0,
  /* 861 */ 'u', 'x', 't', 'a', 'b', '1', '6', 0,
  /* 869 */ 's', 'x', 't', 'b', '1', '6', 0,
  /* 876 */ 'u', 'x', 't', 'b', '1', '6', 0,
  /* 883 */ 's', 'h', 's', 'u', 'b', '1', '6', 0,
  /* 891 */ 'u', 'h', 's', 'u', 'b', '1', '6', 0,
  /* 899 */ 'u', 'q', 's', 'u', 'b', '1', '6', 0,
  /* 907 */ 's', 's', 'u', 'b', '1', '6', 0,
  /* 914 */ 'u', 's', 'u', 'b', '1', '6', 0,
  /* 921 */ 's', 'h', 'a', 'd', 'd', '1', '6', 0,
  /* 929 */ 'u', 'h', 'a', 'd', 'd', '1', '6', 0,
  /* 937 */ 'u', 'q', 'a', 'd', 'd', '1', '6', 0,
  /* 945 */ 's', 'a', 'd', 'd', '1', '6', 0,
  /* 952 */ 'u', 'a', 'd', 'd', '1', '6', 0,
  /* 959 */ 's', 's', 'a', 't', '1', '6', 0,
  /* 966 */ 'u', 's', 'a', 't', '1', '6', 0,
  /* 973 */ 'v', 'r', 'e', 'v', '1', '6', 0,
  /* 980 */ 'u', 's', 'a', 'd', 'a', '8', 0,
  /* 987 */ 's', 'h', 's', 'u', 'b', '8', 0,
  /* 994 */ 'u', 'h', 's', 'u', 'b', '8', 0,
  /* 1001 */ 'u', 'q', 's', 'u', 'b', '8', 0,
  /* 1008 */ 's', 's', 'u', 'b', '8', 0,
  /* 1014 */ 'u', 's', 'u', 'b', '8', 0,
  /* 1020 */ 'u', 's', 'a', 'd', '8', 0,
  /* 1026 */ 's', 'h', 'a', 'd', 'd', '8', 0,
  /* 1033 */ 'u', 'h', 'a', 'd', 'd', '8', 0,
  /* 1040 */ 'u', 'q', 'a', 'd', 'd', '8', 0,
  /* 1047 */ 's', 'a', 'd', 'd', '8', 0,
  /* 1053 */ 'u', 'a', 'd', 'd', '8', 0,
  /* 1059 */ 'L', 'I', 'F', 'E', 'T', 'I', 'M', 'E', '_', 'E', 'N', 'D', 0,
  /* 1072 */ 'B', 'U', 'N', 'D', 'L', 'E', 0,
  /* 1079 */ 'D', 'B', 'G', '_', 'V', 'A', 'L', 'U', 'E', 0,
  /* 1089 */ 'L', 'I', 'F', 'E', 'T', 'I', 'M', 'E', '_', 'S', 'T', 'A', 'R', 'T', 0,
  /* 1104 */ 'v', 'a', 'b', 'a', 0,
  /* 1109 */ 'l', 'd', 'a', 0,
  /* 1113 */ 'l', 'd', 'm', 'd', 'a', 0,
  /* 1119 */ 's', 't', 'm', 'd', 'a', 0,
  /* 1125 */ 'r', 'f', 'e', 'i', 'a', 0,
  /* 1131 */ 'v', 'l', 'd', 'm', 'i', 'a', 0,
  /* 1138 */ 'v', 's', 't', 'm', 'i', 'a', 0,
  /* 1145 */ 's', 'r', 's', 'i', 'a', 0,
  /* 1151 */ 's', 'm', 'm', 'l', 'a', 0,
  /* 1157 */ 'v', 'n', 'm', 'l', 'a', 0,
  /* 1163 */ 'v', 'm', 'l', 'a', 0,
  /* 1168 */ 'v', 'f', 'm', 'a', 0,
  /* 1173 */ 'v', 'f', 'n', 'm', 'a', 0,
  /* 1179 */ 'v', 'r', 's', 'r', 'a', 0,
  /* 1185 */ 'v', 's', 'r', 'a', 0,
  /* 1190 */ 'l', 'd', 'a', 'b', 0,
  /* 1195 */ 's', 'x', 't', 'a', 'b', 0,
  /* 1201 */ 'u', 'x', 't', 'a', 'b', 0,
  /* 1207 */ 's', 'm', 'l', 'a', 'b', 'b', 0,
  /* 1214 */ 's', 'm', 'l', 'a', 'l', 'b', 'b', 0,
  /* 1222 */ 's', 'm', 'u', 'l', 'b', 'b', 0,
  /* 1229 */ 't', 'b', 'b', 0,
  /* 1233 */ 'r', 'f', 'e', 'd', 'b', 0,
  /* 1239 */ 'v', 'l', 'd', 'm', 'd', 'b', 0,
  /* 1246 */ 'v', 's', 't', 'm', 'd', 'b', 0,
  /* 1253 */ 's', 'r', 's', 'd', 'b', 0,
  /* 1259 */ 'l', 'd', 'm', 'i', 'b', 0,
  /* 1265 */ 's', 't', 'm', 'i', 'b', 0,
  /* 1271 */ 's', 't', 'l', 'b', 0,
  /* 1276 */ 'd', 'm', 'b', 0,
  /* 1280 */ 's', 'w', 'p', 'b', 0,
  /* 1285 */ 'l', 'd', 'r', 'b', 0,
  /* 1290 */ 's', 't', 'r', 'b', 0,
  /* 1295 */ 'd', 's', 'b', 0,
  /* 1299 */ 'i', 's', 'b', 0,
  /* 1303 */ 'l', 'd', 'r', 's', 'b', 0,
  /* 1309 */ 's', 'm', 'l', 'a', 't', 'b', 0,
  /* 1316 */ 'p', 'k', 'h', 't', 'b', 0,
  /* 1322 */ 's', 'm', 'l', 'a', 'l', 't', 'b', 0,
  /* 1330 */ 's', 'm', 'u', 'l', 't', 'b', 0,
  /* 1337 */ 'v', 'c', 'v', 't', 'b', 0,
  /* 1343 */ 's', 'x', 't', 'b', 0,
  /* 1348 */ 'u', 'x', 't', 'b', 0,
  /* 1353 */ 'q', 'd', 's', 'u', 'b', 0,
  /* 1359 */ 'v', 'h', 's', 'u', 'b', 0,
  /* 1365 */ 'v', 'q', 's', 'u', 'b', 0,
  /* 1371 */ 'v', 's', 'u', 'b', 0,
  /* 1376 */ 's', 'm', 'l', 'a', 'w', 'b', 0,
  /* 1383 */ 's', 'm', 'u', 'l', 'w', 'b', 0,
  /* 1390 */ 'l', 'd', 'a', 'e', 'x', 'b', 0,
  /* 1397 */ 's', 't', 'l', 'e', 'x', 'b', 0,
  /* 1404 */ 'l', 'd', 'r', 'e', 'x', 'b', 0,
  /* 1411 */ 's', 't', 'r', 'e', 'x', 'b', 0,
  /* 1418 */ 's', 'b', 'c', 0,
  /* 1422 */ 'a', 'd', 'c', 0,
  /* 1426 */ 'l', 'd', 'c', 0,
  /* 1430 */ 'b', 'f', 'c', 0,
  /* 1434 */ 'v', 'b', 'i', 'c', 0,
  /* 1439 */ 's', 'm', 'c', 0,
  /* 1443 */ 'm', 'r', 'c', 0,
  /* 1447 */ 'm', 'r', 'r', 'c', 0,
  /* 1452 */ 'r', 's', 'c', 0,
  /* 1456 */ 's', 't', 'c', 0,
  /* 1460 */ 's', 'v', 'c', 0,
  /* 1464 */ 's', 'm', 'l', 'a', 'd', 0,
  /* 1470 */ 's', 'm', 'u', 'a', 'd', 0,
  /* 1476 */ 'v', 'a', 'b', 'd', 0,
  /* 1481 */ 'q', 'd', 'a', 'd', 'd', 0,
  /* 1487 */ 'v', 'r', 'h', 'a', 'd', 'd', 0,
  /* 1494 */ 'v', 'h', 'a', 'd', 'd', 0,
  /* 1500 */ 'v', 'p', 'a', 'd', 'd', 0,
  /* 1506 */ 'v', 'q', 'a', 'd', 'd', 0,
  /* 1512 */ 'v', 'a', 'd', 'd', 0,
  /* 1517 */ 's', 'm', 'l', 'a', 'l', 'd', 0,
  /* 1524 */ 'y', 'i', 'e', 'l', 'd', 0,
  /* 1530 */ 'p', 'l', 'd', 0,
  /* 1534 */ 's', 'm', 'l', 's', 'l', 'd', 0,
  /* 1541 */ 'v', 'a', 'n', 'd', 0,
  /* 1546 */ 'l', 'd', 'r', 'd', 0,
  /* 1551 */ 's', 't', 'r', 'd', 0,
  /* 1556 */ 's', 'm', 'l', 's', 'd', 0,
  /* 1562 */ 's', 'm', 'u', 's', 'd', 0,
  /* 1568 */ 'l', 'd', 'a', 'e', 'x', 'd', 0,
  /* 1575 */ 's', 't', 'l', 'e', 'x', 'd', 0,
  /* 1582 */ 'l', 'd', 'r', 'e', 'x', 'd', 0,
  /* 1589 */ 's', 't', 'r', 'e', 'x', 'd', 0,
  /* 1596 */ 'w', 'f', 'e', 0,
  /* 1600 */ 'v', 'a', 'c', 'g', 'e', 0,
  /* 1606 */ 'v', 'c', 'g', 'e', 0,
  /* 1611 */ 'v', 'c', 'l', 'e', 0,
  /* 1616 */ 'v', 'r', 'e', 'c', 'p', 'e', 0,
  /* 1623 */ 'v', 'c', 'm', 'p', 'e', 0,
  /* 1629 */ 'v', 'r', 's', 'q', 'r', 't', 'e', 0,
  /* 1637 */ 'v', 'b', 'i', 'f', 0,
  /* 1642 */ 'd', 'b', 'g', 0,
  /* 1646 */ 'v', 'q', 'n', 'e', 'g', 0,
  /* 1652 */ 'v', 'n', 'e', 'g', 0,
  /* 1657 */ 'l', 'd', 'a', 'h', 0,
  /* 1662 */ 's', 'x', 't', 'a', 'h', 0,
  /* 1668 */ 'u', 'x', 't', 'a', 'h', 0,
  /* 1674 */ 't', 'b', 'h', 0,
  /* 1678 */ 's', 't', 'l', 'h', 0,
  /* 1683 */ 'v', 'q', 'd', 'm', 'u', 'l', 'h', 0,
  /* 1691 */ 'v', 'q', 'r', 'd', 'm', 'u', 'l', 'h', 0,
  /* 1700 */ 'l', 'd', 'r', 'h', 0,
  /* 1705 */ 's', 't', 'r', 'h', 0,
  /* 1710 */ 'l', 'd', 'r', 's', 'h', 0,
  /* 1716 */ 'p', 'u', 's', 'h', 0,
  /* 1721 */ 'r', 'e', 'v', 's', 'h', 0,
  /* 1727 */ 's', 'x', 't', 'h', 0,
  /* 1732 */ 'u', 'x', 't', 'h', 0,
  /* 1737 */ 'l', 'd', 'a', 'e', 'x', 'h', 0,
  /* 1744 */ 's', 't', 'l', 'e', 'x', 'h', 0,
  /* 1751 */ 'l', 'd', 'r', 'e', 'x', 'h', 0,
  /* 1758 */ 's', 't', 'r', 'e', 'x', 'h', 0,
  /* 1765 */ 'b', 'f', 'i', 0,
  /* 1769 */ 'w', 'f', 'i', 0,
  /* 1773 */ 'p', 'l', 'i', 0,
  /* 1777 */ 'v', 's', 'l', 'i', 0,
  /* 1782 */ 'v', 's', 'r', 'i', 0,
  /* 1787 */ 'b', 'x', 'j', 0,
  /* 1791 */ 'l', 'd', 'c', '2', 'l', 0,
  /* 1797 */ 's', 't', 'c', '2', 'l', 0,
  /* 1803 */ 'u', 'm', 'a', 'a', 'l', 0,
  /* 1809 */ 'v', 'a', 'b', 'a', 'l', 0,
  /* 1815 */ 'v', 'p', 'a', 'd', 'a', 'l', 0,
  /* 1822 */ 'v', 'q', 'd', 'm', 'l', 'a', 'l', 0,
  /* 1830 */ 's', 'm', 'l', 'a', 'l', 0,
  /* 1836 */ 'u', 'm', 'l', 'a', 'l', 0,
  /* 1842 */ 'v', 'm', 'l', 'a', 'l', 0,
  /* 1848 */ 'v', 't', 'b', 'l', 0,
  /* 1853 */ 'v', 's', 'u', 'b', 'l', 0,
  /* 1859 */ 'l', 'd', 'c', 'l', 0,
  /* 1864 */ 's', 't', 'c', 'l', 0,
  /* 1869 */ 'v', 'a', 'b', 'd', 'l', 0,
  /* 1875 */ 'v', 'p', 'a', 'd', 'd', 'l', 0,
  /* 1882 */ 'v', 'a', 'd', 'd', 'l', 0,
  /* 1888 */ 's', 'e', 'l', 0,
  /* 1892 */ 'v', 'q', 's', 'h', 'l', 0,
  /* 1898 */ 'v', 'q', 'r', 's', 'h', 'l', 0,
  /* 1905 */ 'v', 'r', 's', 'h', 'l', 0,
  /* 1911 */ 'v', 's', 'h', 'l', 0,
  /* 1916 */ 'v', 's', 'h', 'l', 'l', 0,
  /* 1922 */ 'v', 'q', 'd', 'm', 'u', 'l', 'l', 0,
  /* 1930 */ 's', 'm', 'u', 'l', 'l', 0,
  /* 1936 */ 'u', 'm', 'u', 'l', 'l', 0,
  /* 1942 */ 'v', 'm', 'u', 'l', 'l', 0,
  /* 1948 */ 'v', 'b', 's', 'l', 0,
  /* 1953 */ 'v', 'q', 'd', 'm', 'l', 's', 'l', 0,
  /* 1961 */ 'v', 'm', 'l', 's', 'l', 0,
  /* 1967 */ 's', 't', 'l', 0,
  /* 1971 */ 's', 'm', 'm', 'u', 'l', 0,
  /* 1977 */ 'v', 'n', 'm', 'u', 'l', 0,
  /* 1983 */ 'v', 'm', 'u', 'l', 0,
  /* 1988 */ 'v', 'm', 'o', 'v', 'l', 0,
  /* 1994 */ 'l', 'd', 'm', 0,
  /* 1998 */ 's', 't', 'm', 0,
  /* 2002 */ 'v', 'r', 's', 'u', 'b', 'h', 'n', 0,
  /* 2010 */ 'v', 's', 'u', 'b', 'h', 'n', 0,
  /* 2017 */ 'v', 'r', 'a', 'd', 'd', 'h', 'n', 0,
  /* 2025 */ 'v', 'a', 'd', 'd', 'h', 'n', 0,
  /* 2032 */ 'v', 'p', 'm', 'i', 'n', 0,
  /* 2038 */ 'v', 'm', 'i', 'n', 0,
  /* 2043 */ 'c', 'm', 'n', 0,
  /* 2047 */ 'v', 'q', 's', 'h', 'r', 'n', 0,
  /* 2054 */ 'v', 'q', 'r', 's', 'h', 'r', 'n', 0,
  /* 2062 */ 'v', 'r', 's', 'h', 'r', 'n', 0,
  /* 2069 */ 'v', 's', 'h', 'r', 'n', 0,
  /* 2075 */ 'v', 'o', 'r', 'n', 0,
  /* 2080 */ 'v', 't', 'r', 'n', 0,
  /* 2085 */ 'v', 'q', 's', 'h', 'r', 'u', 'n', 0,
  /* 2093 */ 'v', 'q', 'r', 's', 'h', 'r', 'u', 'n', 0,
  /* 2102 */ 'v', 'q', 'm', 'o', 'v', 'u', 'n', 0,
  /* 2110 */ 'v', 'm', 'v', 'n', 0,
  /* 2115 */ 'v', 'q', 'm', 'o', 'v', 'n', 0,
  /* 2122 */ 'v', 'm', 'o', 'v', 'n', 0,
  /* 2128 */ 't', 'r', 'a', 'p', 0,
  /* 2133 */ 'c', 'd', 'p', 0,
  /* 2137 */ 'v', 'z', 'i', 'p', 0,
  /* 2142 */ 'v', 'c', 'm', 'p', 0,
  /* 2147 */ 'n', 'o', 'p', 0,
  /* 2151 */ 'p', 'o', 'p', 0,
  /* 2155 */ 'v', 'd', 'u', 'p', 0,
  /* 2160 */ 'v', 's', 'w', 'p', 0,
  /* 2165 */ 'v', 'u', 'z', 'p', 0,
  /* 2170 */ 'v', 'c', 'e', 'q', 0,
  /* 2175 */ 't', 'e', 'q', 0,
  /* 2179 */ 's', 'm', 'm', 'l', 'a', 'r', 0,
  /* 2186 */ 'm', 'c', 'r', 0,
  /* 2190 */ 'a', 'd', 'r', 0,
  /* 2194 */ 'v', 'l', 'd', 'r', 0,
  /* 2199 */ 'v', 'r', 's', 'h', 'r', 0,
  /* 2205 */ 'v', 's', 'h', 'r', 0,
  /* 2210 */ 's', 'm', 'm', 'u', 'l', 'r', 0,
  /* 2217 */ 'v', 'e', 'o', 'r', 0,
  /* 2222 */ 'r', 'o', 'r', 0,
  /* 2226 */ 'm', 'c', 'r', 'r', 0,
  /* 2231 */ 'v', 'o', 'r', 'r', 0,
  /* 2236 */ 'a', 's', 'r', 0,
  /* 2240 */ 's', 'm', 'm', 'l', 's', 'r', 0,
  /* 2247 */ 'v', 'm', 's', 'r', 0,
  /* 2252 */ 'v', 'r', 'i', 'n', 't', 'r', 0,
  /* 2259 */ 'v', 's', 't', 'r', 0,
  /* 2264 */ 'v', 'c', 'v', 't', 'r', 0,
  /* 2270 */ 'v', 'q', 'a', 'b', 's', 0,
  /* 2276 */ 'v', 'a', 'b', 's', 0,
  /* 2281 */ 's', 'u', 'b', 's', 0,
  /* 2286 */ 'v', 'c', 'l', 's', 0,
  /* 2291 */ 's', 'm', 'm', 'l', 's', 0,
  /* 2297 */ 'v', 'n', 'm', 'l', 's', 0,
  /* 2303 */ 'v', 'm', 'l', 's', 0,
  /* 2308 */ 'v', 'f', 'm', 's', 0,
  /* 2313 */ 'v', 'f', 'n', 'm', 's', 0,
  /* 2319 */ 'v', 'r', 'e', 'c', 'p', 's', 0,
  /* 2326 */ 'v', 'm', 'r', 's', 0,
  /* 2331 */ 'a', 's', 'r', 's', 0,
  /* 2336 */ 'l', 's', 'r', 's', 0,
  /* 2341 */ 'v', 'r', 's', 'q', 'r', 't', 's', 0,
  /* 2349 */ 'm', 'o', 'v', 's', 0,
  /* 2354 */ 's', 's', 'a', 't', 0,
  /* 2359 */ 'u', 's', 'a', 't', 0,
  /* 2364 */ 's', 'm', 'l', 'a', 'b', 't', 0,
  /* 2371 */ 'p', 'k', 'h', 'b', 't', 0,
  /* 2377 */ 's', 'm', 'l', 'a', 'l', 'b', 't', 0,
  /* 2385 */ 's', 'm', 'u', 'l', 'b', 't', 0,
  /* 2392 */ 'l', 'd', 'r', 'b', 't', 0,
  /* 2398 */ 's', 't', 'r', 'b', 't', 0,
  /* 2404 */ 'l', 'd', 'r', 's', 'b', 't', 0,
  /* 2411 */ 'v', 'a', 'c', 'g', 't', 0,
  /* 2417 */ 'v', 'c', 'g', 't', 0,
  /* 2422 */ 'l', 'd', 'r', 'h', 't', 0,
  /* 2428 */ 's', 't', 'r', 'h', 't', 0,
  /* 2434 */ 'l', 'd', 'r', 's', 'h', 't', 0,
  /* 2441 */ 'r', 'b', 'i', 't', 0,
  /* 2446 */ 'v', 'b', 'i', 't', 0,
  /* 2451 */ 'v', 'c', 'l', 't', 0,
  /* 2456 */ 'v', 'c', 'n', 't', 0,
  /* 2461 */ 'h', 'i', 'n', 't', 0,
  /* 2466 */ 'l', 'd', 'r', 't', 0,
  /* 2471 */ 'v', 's', 'q', 'r', 't', 0,
  /* 2477 */ 's', 't', 'r', 't', 0,
  /* 2482 */ 'v', 't', 's', 't', 0,
  /* 2487 */ 's', 'm', 'l', 'a', 't', 't', 0,
  /* 2494 */ 's', 'm', 'l', 'a', 'l', 't', 't', 0,
  /* 2502 */ 's', 'm', 'u', 'l', 't', 't', 0,
  /* 2509 */ 'v', 'c', 'v', 't', 't', 0,
  /* 2515 */ 'v', 'c', 'v', 't', 0,
  /* 2520 */ 'm', 'o', 'v', 't', 0,
  /* 2525 */ 's', 'm', 'l', 'a', 'w', 't', 0,
  /* 2532 */ 's', 'm', 'u', 'l', 'w', 't', 0,
  /* 2539 */ 'v', 'e', 'x', 't', 0,
  /* 2544 */ 'v', 'q', 's', 'h', 'l', 'u', 0,
  /* 2551 */ 'r', 'e', 'v', 0,
  /* 2555 */ 's', 'e', 'v', 0,
  /* 2559 */ 's', 'd', 'i', 'v', 0,
  /* 2564 */ 'u', 'd', 'i', 'v', 0,
  /* 2569 */ 'v', 'd', 'i', 'v', 0,
  /* 2574 */ 'v', 'm', 'o', 'v', 0,
  /* 2579 */ 'v', 's', 'u', 'b', 'w', 0,
  /* 2585 */ 'v', 'a', 'd', 'd', 'w', 0,
  /* 2591 */ 'p', 'l', 'd', 'w', 0,
  /* 2596 */ 'm', 'o', 'v', 'w', 0,
  /* 2601 */ 'f', 'l', 'd', 'm', 'i', 'a', 'x', 0,
  /* 2609 */ 'f', 's', 't', 'm', 'i', 'a', 'x', 0,
  /* 2617 */ 'v', 'p', 'm', 'a', 'x', 0,
  /* 2623 */ 'v', 'm', 'a', 'x', 0,
  /* 2628 */ 's', 'h', 's', 'a', 'x', 0,
  /* 2634 */ 'u', 'h', 's', 'a', 'x', 0,
  /* 2640 */ 'u', 'q', 's', 'a', 'x', 0,
  /* 2646 */ 's', 's', 'a', 'x', 0,
  /* 2651 */ 'u', 's', 'a', 'x', 0,
  /* 2656 */ 'f', 'l', 'd', 'm', 'd', 'b', 'x', 0,
  /* 2664 */ 'f', 's', 't', 'm', 'd', 'b', 'x', 0,
  /* 2672 */ 'v', 't', 'b', 'x', 0,
  /* 2677 */ 's', 'm', 'l', 'a', 'd', 'x', 0,
  /* 2684 */ 's', 'm', 'u', 'a', 'd', 'x', 0,
  /* 2691 */ 's', 'm', 'l', 'a', 'l', 'd', 'x', 0,
  /* 2699 */ 's', 'm', 'l', 's', 'l', 'd', 'x', 0,
  /* 2707 */ 's', 'm', 'l', 's', 'd', 'x', 0,
  /* 2714 */ 's', 'm', 'u', 's', 'd', 'x', 0,
  /* 2721 */ 'l', 'd', 'a', 'e', 'x', 0,
  /* 2727 */ 's', 't', 'l', 'e', 'x', 0,
  /* 2733 */ 'l', 'd', 'r', 'e', 'x', 0,
  /* 2739 */ 'c', 'l', 'r', 'e', 'x', 0,
  /* 2745 */ 's', 't', 'r', 'e', 'x', 0,
  /* 2751 */ 's', 'b', 'f', 'x', 0,
  /* 2756 */ 'u', 'b', 'f', 'x', 0,
  /* 2761 */ 'b', 'l', 'x', 0,
  /* 2765 */ 'r', 'r', 'x', 0,
  /* 2769 */ 's', 'h', 'a', 's', 'x', 0,
  /* 2775 */ 'u', 'h', 'a', 's', 'x', 0,
  /* 2781 */ 'u', 'q', 'a', 's', 'x', 0,
  /* 2787 */ 's', 'a', 's', 'x', 0,
  /* 2792 */ 'u', 'a', 's', 'x', 0,
  /* 2797 */ 'v', 'r', 'i', 'n', 't', 'x', 0,
  /* 2804 */ 'v', 'c', 'l', 'z', 0,
  /* 2809 */ 'v', 'r', 'i', 'n', 't', 'z', 0,
  };

  O << "\t";

  // Emit the opcode for the instruction.
  uint64_t Bits1 = OpInfo[MI->getOpcode()];
  uint64_t Bits2 = OpInfo2[MI->getOpcode()];
  uint64_t Bits = (Bits2 << 32) | Bits1;
  assert(Bits != 0 && "Cannot print this instruction.");
  O << AsmStrs+(Bits & 4095)-1;


  // Fragment 0 encoded into 5 bits for 29 unique commands.
  switch ((Bits >> 12) & 31) {
  default:   // unreachable.
  case 0:
    // DBG_VALUE, BUNDLE, LIFETIME_START, LIFETIME_END, CLREX, TRAP, TRAPNaCl...
    return;
    break;
  case 1:
    // ADCri, ADCrr, ADDri, ADDrr, ANDri, ANDrr, ASRi, ASRr, BICri, BICrr, EO...
    printSBitModifierOperand(MI, 5, O); 
    printPredicateOperand(MI, 3, O); 
    break;
  case 2:
    // ADCrsi, ADDrsi, ANDrsi, BICrsi, EORrsi, MLA, MOVsr, MVNsr, ORRrsi, RSB...
    printSBitModifierOperand(MI, 6, O); 
    printPredicateOperand(MI, 4, O); 
    break;
  case 3:
    // ADCrsr, ADDrsr, ANDrsr, BICrsr, EORrsr, ORRrsr, RSBrsr, RSCrsr, SBCrsr...
    printSBitModifierOperand(MI, 7, O); 
    printPredicateOperand(MI, 5, O); 
    O << "\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printSORegRegOperand(MI, 2, O); 
    return;
    break;
  case 4:
    // ADR, CLZ, CMNri, CMNzrr, CMPri, CMPrr, FCONSTD, FCONSTS, FLDMXDB_UPD, ...
    printPredicateOperand(MI, 2, O); 
    break;
  case 5:
    // BFC, CMNzrsi, CMPrsi, LDRBi12, LDRcp, LDRi12, MOVTi16, QADD, QADD16, Q...
    printPredicateOperand(MI, 3, O); 
    break;
  case 6:
    // BFI, CMNzrsr, CMPrsr, LDCL_OFFSET, LDCL_OPTION, LDCL_POST, LDCL_PRE, L...
    printPredicateOperand(MI, 4, O); 
    break;
  case 7:
    // BKPT, BL, BLX, BLXi, BX, CPS1p, RFEDA, RFEDA_UPD, RFEDB, RFEDB_UPD, RF...
    printOperand(MI, 0, O); 
    break;
  case 8:
    // BLX_pred, BL_pred, BXJ, BX_pred, Bcc, DBG, FLDMXIA, FSTMXIA, HINT, LDM...
    printPredicateOperand(MI, 1, O); 
    break;
  case 9:
    // BX_RET, FMSTAT, MOVPCLR, t2CLREX, tBL, tBLXi, tBLXr, tNOP, tPOP, tPUSH...
    printPredicateOperand(MI, 0, O); 
    break;
  case 10:
    // CDP, LDRD_POST, LDRD_PRE, MCR, MRC, STRD_POST, STRD_PRE, VLD4DUPd16, V...
    printPredicateOperand(MI, 6, O); 
    break;
  case 11:
    // CDP2, LDC2L_OFFSET, LDC2L_OPTION, LDC2L_POST, LDC2L_PRE, LDC2_OFFSET, ...
    printPImmediate(MI, 0, O); 
    O << ", "; 
    break;
  case 12:
    // CPS2p, CPS3p, t2CPS2p, t2CPS3p, tCPS
    printCPSIMod(MI, 0, O); 
    break;
  case 13:
    // DMB, DSB
    printMemBOption(MI, 0, O); 
    return;
    break;
  case 14:
    // ISB
    printInstSyncBOption(MI, 0, O); 
    return;
    break;
  case 15:
    // ITasm, t2IT
    printThumbITMask(MI, 1, O); 
    break;
  case 16:
    // LDRBT_POST_IMM, LDRBT_POST_REG, LDRB_POST_IMM, LDRB_POST_REG, LDRB_PRE...
    printPredicateOperand(MI, 5, O); 
    break;
  case 17:
    // MOVi, MOVr, MOVr_TC, MVNi, MVNr, RRXi, t2MOVi, t2MOVr, t2MVNi, t2MVNr,...
    printSBitModifierOperand(MI, 4, O); 
    printPredicateOperand(MI, 2, O); 
    break;
  case 18:
    // MRC2
    printPImmediate(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printCImmediate(MI, 3, O); 
    O << ", "; 
    printCImmediate(MI, 4, O); 
    O << ", "; 
    printOperand(MI, 5, O); 
    return;
    break;
  case 19:
    // PLDWi12, PLDi12, PLIi12
    printAddrModeImm12Operand<false>(MI, 0, O); 
    return;
    break;
  case 20:
    // PLDWrs, PLDrs, PLIrs
    printAddrMode2Operand(MI, 0, O); 
    return;
    break;
  case 21:
    // SETEND, tSETEND
    printSetendOperand(MI, 0, O); 
    return;
    break;
  case 22:
    // SMLAL, UMLAL
    printSBitModifierOperand(MI, 8, O); 
    printPredicateOperand(MI, 6, O); 
    O << "\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    return;
    break;
  case 23:
    // VLD1LNd16_UPD, VLD1LNd32_UPD, VLD1LNd8_UPD, VLD2LNd16, VLD2LNd32, VLD2...
    printPredicateOperand(MI, 7, O); 
    break;
  case 24:
    // VLD2LNd16_UPD, VLD2LNd32_UPD, VLD2LNd8_UPD, VLD2LNq16_UPD, VLD2LNq32_U...
    printPredicateOperand(MI, 9, O); 
    break;
  case 25:
    // VLD3LNd16_UPD, VLD3LNd32_UPD, VLD3LNd8_UPD, VLD3LNq16_UPD, VLD3LNq32_U...
    printPredicateOperand(MI, 11, O); 
    break;
  case 26:
    // VLD4DUPd16_UPD, VLD4DUPd32_UPD, VLD4DUPd8_UPD, VLD4DUPq16_UPD, VLD4DUP...
    printPredicateOperand(MI, 8, O); 
    break;
  case 27:
    // VLD4LNd16_UPD, VLD4LNd32_UPD, VLD4LNd8_UPD, VLD4LNq16_UPD, VLD4LNq32_U...
    printPredicateOperand(MI, 13, O); 
    break;
  case 28:
    // tADC, tADDi3, tADDi8, tADDrr, tAND, tASRri, tASRrr, tBIC, tEOR, tLSLri...
    printSBitModifierOperand(MI, 1, O); 
    break;
  }


  // Fragment 1 encoded into 7 bits for 65 unique commands.
  switch ((Bits >> 17) & 127) {
  default:   // unreachable.
  case 0:
    // ADCri, ADCrr, ADCrsi, ADDri, ADDrr, ADDrsi, ADR, ANDri, ANDrr, ANDrsi,...
    O << "\t"; 
    break;
  case 1:
    // ASRi, ASRr, ITasm, LSLi, LSLr, LSRi, LSRr, RORi, RORr, RRXi, t2LDRBpcr...
    O << ' '; 
    break;
  case 2:
    // BKPT, BL, BLX, BLXi, BX, CPS1p, RFEDA, RFEDB, RFEIA, RFEIB, SRSDA, SRS...
    return;
    break;
  case 3:
    // BX_RET
    O << "\tlr"; 
    return;
    break;
  case 4:
    // CDP2, MCR2, MCRR2, MRRC2
    printOperand(MI, 1, O); 
    O << ", "; 
    break;
  case 5:
    // FCONSTD, VABSD, VADDD, VCMPD, VCMPED, VCMPEZD, VCMPZD, VDIVD, VFMAD, V...
    O << ".f64\t"; 
    printOperand(MI, 0, O); 
    break;
  case 6:
    // FCONSTS, VABDfd, VABDfq, VABSS, VABSfd, VABSfq, VACGEd, VACGEq, VACGTd...
    O << ".f32\t"; 
    printOperand(MI, 0, O); 
    break;
  case 7:
    // FMSTAT
    O << "\tAPSR_nzcv, fpscr"; 
    return;
    break;
  case 8:
    // LDC2L_OFFSET, LDC2L_OPTION, LDC2L_POST, LDC2L_PRE, LDC2_OFFSET, LDC2_O...
    printCImmediate(MI, 1, O); 
    O << ", "; 
    break;
  case 9:
    // MOVPCLR
    O << "\tpc, lr"; 
    return;
    break;
  case 10:
    // RFEDA_UPD, RFEDB_UPD, RFEIA_UPD, RFEIB_UPD
    O << '!'; 
    return;
    break;
  case 11:
    // VABALsv2i64, VABAsv2i32, VABAsv4i32, VABDLsv2i64, VABDsv2i32, VABDsv4i...
    O << ".s32\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    break;
  case 12:
    // VABALsv4i32, VABAsv4i16, VABAsv8i16, VABDLsv4i32, VABDsv4i16, VABDsv8i...
    O << ".s16\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    break;
  case 13:
    // VABALsv8i16, VABAsv16i8, VABAsv8i8, VABDLsv8i16, VABDsv16i8, VABDsv8i8...
    O << ".s8\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    break;
  case 14:
    // VABALuv2i64, VABAuv2i32, VABAuv4i32, VABDLuv2i64, VABDuv2i32, VABDuv4i...
    O << ".u32\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    break;
  case 15:
    // VABALuv4i32, VABAuv4i16, VABAuv8i16, VABDLuv4i32, VABDuv4i16, VABDuv8i...
    O << ".u16\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    break;
  case 16:
    // VABALuv8i16, VABAuv16i8, VABAuv8i8, VABDLuv8i16, VABDuv16i8, VABDuv8i8...
    O << ".u8\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    break;
  case 17:
    // VADDHNv2i32, VADDv1i64, VADDv2i64, VMOVNv2i32, VMOVv1i64, VMOVv2i64, V...
    O << ".i64\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    break;
  case 18:
    // VADDHNv4i16, VADDv2i32, VADDv4i32, VBICiv2i32, VBICiv4i32, VCEQv2i32, ...
    O << ".i32\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    break;
  case 19:
    // VADDHNv8i8, VADDv4i16, VADDv8i16, VBICiv4i16, VBICiv8i16, VCEQv4i16, V...
    O << ".i16\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    break;
  case 20:
    // VADDv16i8, VADDv8i8, VCEQv16i8, VCEQv8i8, VCEQzv16i8, VCEQzv8i8, VCLZv...
    O << ".i8\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    break;
  case 21:
    // VCNTd, VCNTq, VDUP8d, VDUP8q, VDUPLN8d, VDUPLN8q, VEXTd8, VEXTq8, VLD1...
    O << ".8\t"; 
    break;
  case 22:
    // VCVTANSD, VCVTANSQ, VCVTANUD, VCVTANUQ, VCVTASD, VCVTASS, VCVTAUD, VCV...
    O << ", "; 
    printOperand(MI, 1, O); 
    break;
  case 23:
    // VCVTBDH, VCVTTDH
    O << ".f16.f64\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 24:
    // VCVTBHD, VCVTTHD
    O << ".f64.f16\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 25:
    // VCVTBHS, VCVTTHS, VCVTh2f
    O << ".f32.f16\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 26:
    // VCVTBSH, VCVTTSH, VCVTf2h
    O << ".f16.f32\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 27:
    // VCVTDS
    O << ".f64.f32\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 28:
    // VCVTSD
    O << ".f32.f64\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 29:
    // VCVTf2sd, VCVTf2sq, VCVTf2xsd, VCVTf2xsq, VTOSIRS, VTOSIZS, VTOSLS
    O << ".s32.f32\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    break;
  case 30:
    // VCVTf2ud, VCVTf2uq, VCVTf2xud, VCVTf2xuq, VTOUIRS, VTOUIZS, VTOULS
    O << ".u32.f32\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    break;
  case 31:
    // VCVTs2fd, VCVTs2fq, VCVTxs2fd, VCVTxs2fq, VSITOS, VSLTOS
    O << ".f32.s32\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    break;
  case 32:
    // VCVTu2fd, VCVTu2fq, VCVTxu2fd, VCVTxu2fq, VUITOS, VULTOS
    O << ".f32.u32\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    break;
  case 33:
    // VDUP16d, VDUP16q, VDUPLN16d, VDUPLN16q, VEXTd16, VEXTq16, VLD1DUPd16, ...
    O << ".16\t"; 
    break;
  case 34:
    // VDUP32d, VDUP32q, VDUPLN32d, VDUPLN32q, VEXTd32, VEXTq32, VGETLNi32, V...
    O << ".32\t"; 
    break;
  case 35:
    // VEXTq64, VLD1d64, VLD1d64Q, VLD1d64Qwb_fixed, VLD1d64Qwb_register, VLD...
    O << ".64\t"; 
    break;
  case 36:
    // VLD1LNd16, VLD1LNd16_UPD, VLD2LNd16, VLD2LNd16_UPD, VLD2LNq16, VLD2LNq...
    O << ".16\t{"; 
    break;
  case 37:
    // VLD1LNd32, VLD1LNd32_UPD, VLD2LNd32, VLD2LNd32_UPD, VLD2LNq32, VLD2LNq...
    O << ".32\t{"; 
    break;
  case 38:
    // VLD1LNd8, VLD1LNd8_UPD, VLD2LNd8, VLD2LNd8_UPD, VLD3DUPd8, VLD3DUPd8_U...
    O << ".8\t{"; 
    break;
  case 39:
    // VMSR
    O << "\tfpscr, "; 
    printOperand(MI, 0, O); 
    return;
    break;
  case 40:
    // VMSR_FPEXC
    O << "\tfpexc, "; 
    printOperand(MI, 0, O); 
    return;
    break;
  case 41:
    // VMSR_FPINST
    O << "\tfpinst, "; 
    printOperand(MI, 0, O); 
    return;
    break;
  case 42:
    // VMSR_FPINST2
    O << "\tfpinst2, "; 
    printOperand(MI, 0, O); 
    return;
    break;
  case 43:
    // VMSR_FPSID
    O << "\tfpsid, "; 
    printOperand(MI, 0, O); 
    return;
    break;
  case 44:
    // VMULLp, VMULpd, VMULpq
    O << ".p8\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    return;
    break;
  case 45:
    // VQADDsv1i64, VQADDsv2i64, VQMOVNsuv2i32, VQMOVNsv2i32, VQRSHLsv1i64, V...
    O << ".s64\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    break;
  case 46:
    // VQADDuv1i64, VQADDuv2i64, VQMOVNuv2i32, VQRSHLuv1i64, VQRSHLuv2i64, VQ...
    O << ".u64\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    break;
  case 47:
    // VSHTOD
    O << ".f64.s16\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printFBits16(MI, 2, O); 
    return;
    break;
  case 48:
    // VSHTOS
    O << ".f32.s16\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printFBits16(MI, 2, O); 
    return;
    break;
  case 49:
    // VSITOD, VSLTOD
    O << ".f64.s32\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    break;
  case 50:
    // VTOSHD
    O << ".s16.f64\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printFBits16(MI, 2, O); 
    return;
    break;
  case 51:
    // VTOSHS
    O << ".s16.f32\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printFBits16(MI, 2, O); 
    return;
    break;
  case 52:
    // VTOSIRD, VTOSIZD, VTOSLD
    O << ".s32.f64\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    break;
  case 53:
    // VTOUHD
    O << ".u16.f64\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printFBits16(MI, 2, O); 
    return;
    break;
  case 54:
    // VTOUHS
    O << ".u16.f32\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printFBits16(MI, 2, O); 
    return;
    break;
  case 55:
    // VTOUIRD, VTOUIZD, VTOULD
    O << ".u32.f64\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    break;
  case 56:
    // VUHTOD
    O << ".f64.u16\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printFBits16(MI, 2, O); 
    return;
    break;
  case 57:
    // VUHTOS
    O << ".f32.u16\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printFBits16(MI, 2, O); 
    return;
    break;
  case 58:
    // VUITOD, VULTOD
    O << ".f64.u32\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    break;
  case 59:
    // t2ADCrr, t2ADCrs, t2ADDri, t2ADDrr, t2ADDrs, t2ADR, t2ANDrr, t2ANDrs, ...
    O << ".w\t"; 
    break;
  case 60:
    // t2SRSDB, t2SRSIA
    O << "\tsp, "; 
    printOperand(MI, 0, O); 
    return;
    break;
  case 61:
    // t2SRSDB_UPD, t2SRSIA_UPD
    O << "\tsp!, "; 
    printOperand(MI, 0, O); 
    return;
    break;
  case 62:
    // t2SUBS_PC_LR
    O << "\tpc, lr, "; 
    printOperand(MI, 0, O); 
    return;
    break;
  case 63:
    // tADC, tADDi3, tADDi8, tADDrr, tAND, tASRri, tASRrr, tBIC, tEOR, tLSLri...
    printPredicateOperand(MI, 4, O); 
    O << "\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    break;
  case 64:
    // tMOVi8, tMVN, tRSB
    printPredicateOperand(MI, 3, O); 
    O << "\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  }


  // Fragment 2 encoded into 6 bits for 57 unique commands.
  switch ((Bits >> 24) & 63) {
  default:   // unreachable.
  case 0:
    // ADCri, ADCrr, ADCrsi, ADDri, ADDrr, ADDrsi, ADR, ANDri, ANDrr, ANDrsi,...
    printOperand(MI, 0, O); 
    break;
  case 1:
    // CDP, LDCL_OFFSET, LDCL_OPTION, LDCL_POST, LDCL_PRE, LDC_OFFSET, LDC_OP...
    printPImmediate(MI, 0, O); 
    O << ", "; 
    break;
  case 2:
    // CDP2
    printCImmediate(MI, 2, O); 
    O << ", "; 
    printCImmediate(MI, 3, O); 
    O << ", "; 
    printCImmediate(MI, 4, O); 
    O << ", "; 
    printOperand(MI, 5, O); 
    return;
    break;
  case 3:
    // CPS2p, CPS3p, t2CPS2p, t2CPS3p, tCPS
    printCPSIFlag(MI, 1, O); 
    break;
  case 4:
    // FCONSTD, FCONSTS, VABDfd, VABDfq, VABSD, VABSS, VABSfd, VABSfq, VACGEd...
    O << ", "; 
    break;
  case 5:
    // FLDMXDB_UPD, FLDMXIA_UPD, FSTMXDB_UPD, FSTMXIA_UPD, LDMDA_UPD, LDMDB_U...
    printOperand(MI, 1, O); 
    break;
  case 6:
    // ITasm, t2IT
    printMandatoryPredicateOperand(MI, 0, O); 
    return;
    break;
  case 7:
    // LDAEXD, LDREXD
    printGPRPairOperand(MI, 0, O); 
    O << ", "; 
    printAddrMode7Operand(MI, 1, O); 
    return;
    break;
  case 8:
    // LDC2L_OFFSET, LDC2_OFFSET, STC2L_OFFSET, STC2_OFFSET
    printAddrMode5Operand<false>(MI, 2, O); 
    return;
    break;
  case 9:
    // LDC2L_OPTION, LDC2L_POST, LDC2_OPTION, LDC2_POST, STC2L_OPTION, STC2L_...
    printAddrMode7Operand(MI, 2, O); 
    O << ", "; 
    break;
  case 10:
    // LDC2L_PRE, LDC2_PRE, STC2L_PRE, STC2_PRE
    printAddrMode5Operand<true>(MI, 2, O); 
    O << '!'; 
    return;
    break;
  case 11:
    // MCR2, MCRR2, MRRC2, VABALsv2i64, VABALsv4i32, VABALsv8i16, VABALuv2i64...
    printOperand(MI, 2, O); 
    break;
  case 12:
    // MRC, t2MRC, t2MRC2
    printPImmediate(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printCImmediate(MI, 3, O); 
    O << ", "; 
    printCImmediate(MI, 4, O); 
    O << ", "; 
    printOperand(MI, 5, O); 
    return;
    break;
  case 13:
    // MSR, MSRi, t2MSR_AR, t2MSR_M
    printMSRMaskOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 14:
    // VBICiv2i32, VBICiv4i16, VBICiv4i32, VBICiv8i16, VMOVv16i8, VMOVv1i64, ...
    printNEONModImmOperand(MI, 1, O); 
    return;
    break;
  case 15:
    // VCMPEZD, VCMPEZS, VCMPZD, VCMPZS, tRSB
    O << ", #0"; 
    return;
    break;
  case 16:
    // VCVTANSD, VCVTANSQ, VCVTANUD, VCVTANUQ, VCVTASD, VCVTASS, VCVTAUD, VCV...
    return;
    break;
  case 17:
    // VLD1DUPd16, VLD1DUPd16wb_fixed, VLD1DUPd16wb_register, VLD1DUPd32, VLD...
    printVectorListOneAllLanes(MI, 0, O); 
    O << ", "; 
    break;
  case 18:
    // VLD1DUPq16, VLD1DUPq16wb_fixed, VLD1DUPq16wb_register, VLD1DUPq32, VLD...
    printVectorListTwoAllLanes(MI, 0, O); 
    O << ", "; 
    break;
  case 19:
    // VLD1d16, VLD1d16wb_fixed, VLD1d16wb_register, VLD1d32, VLD1d32wb_fixed...
    printVectorListOne(MI, 0, O); 
    O << ", "; 
    break;
  case 20:
    // VLD1d16Q, VLD1d16Qwb_fixed, VLD1d16Qwb_register, VLD1d32Q, VLD1d32Qwb_...
    printVectorListFour(MI, 0, O); 
    O << ", "; 
    break;
  case 21:
    // VLD1d16T, VLD1d16Twb_fixed, VLD1d16Twb_register, VLD1d32T, VLD1d32Twb_...
    printVectorListThree(MI, 0, O); 
    O << ", "; 
    break;
  case 22:
    // VLD1q16, VLD1q16wb_fixed, VLD1q16wb_register, VLD1q32, VLD1q32wb_fixed...
    printVectorListTwo(MI, 0, O); 
    O << ", "; 
    break;
  case 23:
    // VLD2DUPd16x2, VLD2DUPd16x2wb_fixed, VLD2DUPd16x2wb_register, VLD2DUPd3...
    printVectorListTwoSpacedAllLanes(MI, 0, O); 
    O << ", "; 
    break;
  case 24:
    // VLD2b16, VLD2b16wb_fixed, VLD2b16wb_register, VLD2b32, VLD2b32wb_fixed...
    printVectorListTwoSpaced(MI, 0, O); 
    O << ", "; 
    break;
  case 25:
    // VLD3DUPdAsm_16, VLD3DUPdAsm_32, VLD3DUPdAsm_8, VLD3DUPdWB_fixed_Asm_16...
    printVectorListThreeAllLanes(MI, 0, O); 
    O << ", "; 
    printAddrMode6Operand(MI, 1, O); 
    break;
  case 26:
    // VLD3DUPqAsm_16, VLD3DUPqAsm_32, VLD3DUPqAsm_8, VLD3DUPqWB_fixed_Asm_16...
    printVectorListThreeSpacedAllLanes(MI, 0, O); 
    O << ", "; 
    printAddrMode6Operand(MI, 1, O); 
    break;
  case 27:
    // VLD3qAsm_16, VLD3qAsm_32, VLD3qAsm_8, VLD3qWB_fixed_Asm_16, VLD3qWB_fi...
    printVectorListThreeSpaced(MI, 0, O); 
    O << ", "; 
    printAddrMode6Operand(MI, 1, O); 
    break;
  case 28:
    // VLD4DUPdAsm_16, VLD4DUPdAsm_32, VLD4DUPdAsm_8, VLD4DUPdWB_fixed_Asm_16...
    printVectorListFourAllLanes(MI, 0, O); 
    O << ", "; 
    printAddrMode6Operand(MI, 1, O); 
    break;
  case 29:
    // VLD4DUPqAsm_16, VLD4DUPqAsm_32, VLD4DUPqAsm_8, VLD4DUPqWB_fixed_Asm_16...
    printVectorListFourSpacedAllLanes(MI, 0, O); 
    O << ", "; 
    printAddrMode6Operand(MI, 1, O); 
    break;
  case 30:
    // VLD4qAsm_16, VLD4qAsm_32, VLD4qAsm_8, VLD4qWB_fixed_Asm_16, VLD4qWB_fi...
    printVectorListFourSpaced(MI, 0, O); 
    O << ", "; 
    printAddrMode6Operand(MI, 1, O); 
    break;
  case 31:
    // VST1LNd16_UPD, VST1LNd32_UPD, VST1LNd8_UPD, VST2LNd16_UPD, VST2LNd32_U...
    printOperand(MI, 4, O); 
    break;
  case 32:
    // VST1d16, VST1d32, VST1d64, VST1d8
    printVectorListOne(MI, 2, O); 
    O << ", "; 
    printAddrMode6Operand(MI, 0, O); 
    return;
    break;
  case 33:
    // VST1d16Q, VST1d32Q, VST1d64Q, VST1d8Q, VST2q16, VST2q32, VST2q8
    printVectorListFour(MI, 2, O); 
    O << ", "; 
    printAddrMode6Operand(MI, 0, O); 
    return;
    break;
  case 34:
    // VST1d16Qwb_fixed, VST1d32Qwb_fixed, VST1d64Qwb_fixed, VST1d8Qwb_fixed,...
    printVectorListFour(MI, 3, O); 
    O << ", "; 
    printAddrMode6Operand(MI, 1, O); 
    O << '!'; 
    return;
    break;
  case 35:
    // VST1d16Qwb_register, VST1d32Qwb_register, VST1d64Qwb_register, VST1d8Q...
    printVectorListFour(MI, 4, O); 
    O << ", "; 
    printAddrMode6Operand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    return;
    break;
  case 36:
    // VST1d16T, VST1d32T, VST1d64T, VST1d8T
    printVectorListThree(MI, 2, O); 
    O << ", "; 
    printAddrMode6Operand(MI, 0, O); 
    return;
    break;
  case 37:
    // VST1d16Twb_fixed, VST1d32Twb_fixed, VST1d64Twb_fixed, VST1d8Twb_fixed
    printVectorListThree(MI, 3, O); 
    O << ", "; 
    printAddrMode6Operand(MI, 1, O); 
    O << '!'; 
    return;
    break;
  case 38:
    // VST1d16Twb_register, VST1d32Twb_register, VST1d64Twb_register, VST1d8T...
    printVectorListThree(MI, 4, O); 
    O << ", "; 
    printAddrMode6Operand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    return;
    break;
  case 39:
    // VST1d16wb_fixed, VST1d32wb_fixed, VST1d64wb_fixed, VST1d8wb_fixed
    printVectorListOne(MI, 3, O); 
    O << ", "; 
    printAddrMode6Operand(MI, 1, O); 
    O << '!'; 
    return;
    break;
  case 40:
    // VST1d16wb_register, VST1d32wb_register, VST1d64wb_register, VST1d8wb_r...
    printVectorListOne(MI, 4, O); 
    O << ", "; 
    printAddrMode6Operand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    return;
    break;
  case 41:
    // VST1q16, VST1q32, VST1q64, VST1q8, VST2d16, VST2d32, VST2d8
    printVectorListTwo(MI, 2, O); 
    O << ", "; 
    printAddrMode6Operand(MI, 0, O); 
    return;
    break;
  case 42:
    // VST1q16wb_fixed, VST1q32wb_fixed, VST1q64wb_fixed, VST1q8wb_fixed, VST...
    printVectorListTwo(MI, 3, O); 
    O << ", "; 
    printAddrMode6Operand(MI, 1, O); 
    O << '!'; 
    return;
    break;
  case 43:
    // VST1q16wb_register, VST1q32wb_register, VST1q64wb_register, VST1q8wb_r...
    printVectorListTwo(MI, 4, O); 
    O << ", "; 
    printAddrMode6Operand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    return;
    break;
  case 44:
    // VST2b16, VST2b32, VST2b8
    printVectorListTwoSpaced(MI, 2, O); 
    O << ", "; 
    printAddrMode6Operand(MI, 0, O); 
    return;
    break;
  case 45:
    // VST2b16wb_fixed, VST2b32wb_fixed, VST2b8wb_fixed
    printVectorListTwoSpaced(MI, 3, O); 
    O << ", "; 
    printAddrMode6Operand(MI, 1, O); 
    O << '!'; 
    return;
    break;
  case 46:
    // VST2b16wb_register, VST2b32wb_register, VST2b8wb_register
    printVectorListTwoSpaced(MI, 4, O); 
    O << ", "; 
    printAddrMode6Operand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    return;
    break;
  case 47:
    // t2DMB, t2DSB
    printMemBOption(MI, 0, O); 
    return;
    break;
  case 48:
    // t2ISB
    printInstSyncBOption(MI, 0, O); 
    return;
    break;
  case 49:
    // t2PLDWi12, t2PLDi12, t2PLIi12
    printAddrModeImm12Operand<false>(MI, 0, O); 
    return;
    break;
  case 50:
    // t2PLDWi8, t2PLDi8, t2PLIi8
    printT2AddrModeImm8Operand<false>(MI, 0, O); 
    return;
    break;
  case 51:
    // t2PLDWs, t2PLDs, t2PLIs
    printT2AddrModeSoRegOperand(MI, 0, O); 
    return;
    break;
  case 52:
    // t2PLDpci, t2PLIpci
    printThumbLdrLabelOperand(MI, 0, O); 
    return;
    break;
  case 53:
    // t2TBB
    printAddrModeTBB(MI, 0, O); 
    return;
    break;
  case 54:
    // t2TBH
    printAddrModeTBH(MI, 0, O); 
    return;
    break;
  case 55:
    // tADC, tADDi8, tAND, tASRrr, tBIC, tEOR, tLSLrr, tLSRrr, tORR, tROR, tS...
    printOperand(MI, 3, O); 
    return;
    break;
  case 56:
    // tPOP, tPUSH
    printRegisterList(MI, 2, O); 
    return;
    break;
  }


  // Fragment 3 encoded into 5 bits for 27 unique commands.
  switch ((Bits >> 30) & 31) {
  default:   // unreachable.
  case 0:
    // ADCri, ADCrr, ADCrsi, ADDri, ADDrr, ADDrsi, ADR, ANDri, ANDrr, ANDrsi,...
    O << ", "; 
    break;
  case 1:
    // BLX_pred, BL_pred, BXJ, BX_pred, Bcc, CPS2p, DBG, HINT, SMC, SVC, VABS...
    return;
    break;
  case 2:
    // CDP, MCR, MCRR, MRRC, VABDfd, VABDfq, VABSD, VABSS, VABSfd, VABSfq, VA...
    printOperand(MI, 1, O); 
    break;
  case 3:
    // FCONSTD, FCONSTS, VMOVv2f32, VMOVv4f32
    printFPImmOperand(MI, 1, O); 
    return;
    break;
  case 4:
    // FLDMXDB_UPD, FLDMXIA_UPD, FSTMXDB_UPD, FSTMXIA_UPD, LDMDA_UPD, LDMDB_U...
    O << "!, "; 
    printRegisterList(MI, 4, O); 
    break;
  case 5:
    // LDC2L_OPTION, LDC2_OPTION, STC2L_OPTION, STC2_OPTION
    printCoprocOptionImm(MI, 3, O); 
    return;
    break;
  case 6:
    // LDC2L_POST, LDC2_POST, STC2L_POST, STC2_POST
    printPostIdxImm8s4Operand(MI, 3, O); 
    return;
    break;
  case 7:
    // LDCL_OFFSET, LDCL_OPTION, LDCL_POST, LDCL_PRE, LDC_OFFSET, LDC_OPTION,...
    printCImmediate(MI, 1, O); 
    O << ", "; 
    break;
  case 8:
    // MRS, t2MRS_AR
    O << ", apsr"; 
    return;
    break;
  case 9:
    // MRSsys, t2MRSsys_AR
    O << ", spsr"; 
    return;
    break;
  case 10:
    // VCEQzv16i8, VCEQzv2i32, VCEQzv4i16, VCEQzv4i32, VCEQzv8i16, VCEQzv8i8,...
    O << ", #0"; 
    return;
    break;
  case 11:
    // VCVTf2xsd, VCVTf2xsq, VCVTf2xud, VCVTf2xuq, VCVTxs2fd, VCVTxs2fq, VCVT...
    printOperand(MI, 2, O); 
    break;
  case 12:
    // VGETLNs16, VGETLNs8, VGETLNu16, VGETLNu8
    printVectorIndex(MI, 2, O); 
    return;
    break;
  case 13:
    // VLD1DUPd16, VLD1DUPd32, VLD1DUPd8, VLD1DUPq16, VLD1DUPq32, VLD1DUPq8, ...
    printAddrMode6Operand(MI, 1, O); 
    break;
  case 14:
    // VLD1DUPd16wb_fixed, VLD1DUPd16wb_register, VLD1DUPd32wb_fixed, VLD1DUP...
    printAddrMode6Operand(MI, 2, O); 
    break;
  case 15:
    // VLD1LNd16, VLD1LNd16_UPD, VLD1LNd32, VLD1LNd32_UPD, VLD1LNd8, VLD1LNd8...
    O << '['; 
    break;
  case 16:
    // VLD3DUPd16, VLD3DUPd16_UPD, VLD3DUPd32, VLD3DUPd32_UPD, VLD3DUPd8, VLD...
    O << "[], "; 
    printOperand(MI, 1, O); 
    O << "[], "; 
    printOperand(MI, 2, O); 
    break;
  case 17:
    // VLD3DUPdWB_fixed_Asm_16, VLD3DUPdWB_fixed_Asm_32, VLD3DUPdWB_fixed_Asm...
    O << '!'; 
    return;
    break;
  case 18:
    // VMRS
    O << ", fpscr"; 
    return;
    break;
  case 19:
    // VMRS_FPEXC
    O << ", fpexc"; 
    return;
    break;
  case 20:
    // VMRS_FPINST
    O << ", fpinst"; 
    return;
    break;
  case 21:
    // VMRS_FPINST2
    O << ", fpinst2"; 
    return;
    break;
  case 22:
    // VMRS_FPSID
    O << ", fpsid"; 
    return;
    break;
  case 23:
    // VMRS_MVFR0
    O << ", mvfr0"; 
    return;
    break;
  case 24:
    // VMRS_MVFR1
    O << ", mvfr1"; 
    return;
    break;
  case 25:
    // VSETLNi16, VSETLNi32, VSETLNi8
    printVectorIndex(MI, 3, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    return;
    break;
  case 26:
    // VSLTOD, VSLTOS, VTOSLD, VTOSLS, VTOULD, VTOULS, VULTOD, VULTOS
    printFBits32(MI, 2, O); 
    return;
    break;
  }


  // Fragment 4 encoded into 6 bits for 62 unique commands.
  switch ((Bits >> 35) & 63) {
  default:   // unreachable.
  case 0:
    // ADCri, ADCrr, ADCrsi, ADDri, ADDrr, ADDrsi, ANDri, ANDrr, ANDrsi, ASRi...
    printOperand(MI, 1, O); 
    break;
  case 1:
    // ADR, t2ADR
    printAdrLabelOperand<0>(MI, 1, O); 
    return;
    break;
  case 2:
    // BFC, t2BFC
    printBitfieldInvMaskImmOperand(MI, 2, O); 
    return;
    break;
  case 3:
    // BFI, CPS3p, MOVTi16, STRD_POST, STRD_PRE, VABDLsv2i64, VABDLsv4i32, VA...
    printOperand(MI, 2, O); 
    break;
  case 4:
    // CDP, MCR, MCRR, MRRC, VABDfd, VABDfq, VACGEd, VACGEq, VACGTd, VACGTq, ...
    O << ", "; 
    break;
  case 5:
    // CMNzrsi, CMPrsi, MOVsi, MVNsi, TEQrsi, TSTrsi
    printSORegImmOperand(MI, 1, O); 
    return;
    break;
  case 6:
    // CMNzrsr, CMPrsr, MOVsr, MVNsr, TEQrsr, TSTrsr, t2MOVSsr, t2MOVsr
    printSORegRegOperand(MI, 1, O); 
    return;
    break;
  case 7:
    // FLDMXDB_UPD, FLDMXIA_UPD, FSTMXDB_UPD, FSTMXIA_UPD, LDMDA_UPD, LDMDB_U...
    return;
    break;
  case 8:
    // FLDMXIA, FSTMXIA, LDMDA, LDMDB, LDMIA, LDMIB, STMDA, STMDB, STMIA, STM...
    printRegisterList(MI, 3, O); 
    break;
  case 9:
    // LDA, LDAB, LDAEX, LDAEXB, LDAEXH, LDAH, LDREX, LDREXB, LDREXH, STL, ST...
    printAddrMode7Operand(MI, 1, O); 
    return;
    break;
  case 10:
    // LDCL_OFFSET, LDC_OFFSET, STCL_OFFSET, STC_OFFSET, t2LDC2L_OFFSET, t2LD...
    printAddrMode5Operand<false>(MI, 2, O); 
    return;
    break;
  case 11:
    // LDCL_OPTION, LDCL_POST, LDC_OPTION, LDC_POST, LDRBT_POST_IMM, LDRBT_PO...
    printAddrMode7Operand(MI, 2, O); 
    break;
  case 12:
    // LDCL_PRE, LDC_PRE, STCL_PRE, STC_PRE, t2LDC2L_PRE, t2LDC2_PRE, t2LDCL_...
    printAddrMode5Operand<true>(MI, 2, O); 
    O << '!'; 
    return;
    break;
  case 13:
    // LDRB_PRE_IMM, LDR_PRE_IMM, STRB_PRE_IMM, STR_PRE_IMM
    printAddrModeImm12Operand<true>(MI, 2, O); 
    O << '!'; 
    return;
    break;
  case 14:
    // LDRB_PRE_REG, LDR_PRE_REG, STRB_PRE_REG, STR_PRE_REG
    printAddrMode2Operand(MI, 2, O); 
    O << '!'; 
    return;
    break;
  case 15:
    // LDRBi12, LDRcp, LDRi12, STRBi12, STRi12, t2LDRBi12, t2LDRHi12, t2LDRSB...
    printAddrModeImm12Operand<false>(MI, 1, O); 
    return;
    break;
  case 16:
    // LDRBrs, LDRrs, STRBrs, STRrs
    printAddrMode2Operand(MI, 1, O); 
    return;
    break;
  case 17:
    // LDRH, LDRSB, LDRSH, STRH
    printAddrMode3Operand<false>(MI, 1, O); 
    return;
    break;
  case 18:
    // LDRH_PRE, LDRSB_PRE, LDRSH_PRE, STRH_PRE
    printAddrMode3Operand<true>(MI, 2, O); 
    O << '!'; 
    return;
    break;
  case 19:
    // MCR2
    printCImmediate(MI, 3, O); 
    O << ", "; 
    printCImmediate(MI, 4, O); 
    O << ", "; 
    printOperand(MI, 5, O); 
    return;
    break;
  case 20:
    // MCRR2, MRRC2, VABALsv2i64, VABALsv4i32, VABALsv8i16, VABALuv2i64, VABA...
    printOperand(MI, 3, O); 
    break;
  case 21:
    // SSAT, SSAT16, t2SSAT, t2SSAT16
    printImmPlusOneOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 22:
    // STLEXD, STREXD
    printGPRPairOperand(MI, 1, O); 
    O << ", "; 
    printAddrMode7Operand(MI, 2, O); 
    return;
    break;
  case 23:
    // VCEQzv2f32, VCEQzv4f32, VCGEzv2f32, VCGEzv4f32, VCGTzv2f32, VCGTzv4f32...
    O << ", #0"; 
    return;
    break;
  case 24:
    // VLD1DUPd16wb_fixed, VLD1DUPd32wb_fixed, VLD1DUPd8wb_fixed, VLD1DUPq16w...
    O << '!'; 
    return;
    break;
  case 25:
    // VLD1LNd16, VLD1LNd32, VLD1LNd8, VST2LNd16, VST2LNd32, VST2LNd8, VST2LN...
    printNoHashImmediate(MI, 4, O); 
    break;
  case 26:
    // VLD1LNd16_UPD, VLD1LNd32_UPD, VLD1LNd8_UPD, VLD2LNd16, VLD2LNd32, VLD2...
    printNoHashImmediate(MI, 6, O); 
    break;
  case 27:
    // VLD1LNdAsm_16, VLD1LNdAsm_32, VLD1LNdAsm_8, VLD1LNdWB_fixed_Asm_16, VL...
    printAddrMode6Operand(MI, 2, O); 
    break;
  case 28:
    // VLD2LNd16_UPD, VLD2LNd32_UPD, VLD2LNd8_UPD, VLD2LNq16_UPD, VLD2LNq32_U...
    printNoHashImmediate(MI, 8, O); 
    O << "], "; 
    break;
  case 29:
    // VLD3DUPd16, VLD3DUPd16_UPD, VLD3DUPd32, VLD3DUPd32_UPD, VLD3DUPd8, VLD...
    O << "[]}, "; 
    break;
  case 30:
    // VLD3LNd16_UPD, VLD3LNd32_UPD, VLD3LNd8_UPD, VLD3LNq16_UPD, VLD3LNq32_U...
    printNoHashImmediate(MI, 10, O); 
    O << "], "; 
    printOperand(MI, 1, O); 
    O << '['; 
    printNoHashImmediate(MI, 10, O); 
    O << "], "; 
    printOperand(MI, 2, O); 
    O << '['; 
    printNoHashImmediate(MI, 10, O); 
    break;
  case 31:
    // VLD4DUPd16, VLD4DUPd16_UPD, VLD4DUPd32, VLD4DUPd32_UPD, VLD4DUPd8, VLD...
    O << "[], "; 
    printOperand(MI, 3, O); 
    O << "[]}, "; 
    break;
  case 32:
    // VLD4LNd16_UPD, VLD4LNd32_UPD, VLD4LNd8_UPD, VLD4LNq16_UPD, VLD4LNq32_U...
    printNoHashImmediate(MI, 12, O); 
    O << "], "; 
    printOperand(MI, 1, O); 
    O << '['; 
    printNoHashImmediate(MI, 12, O); 
    O << "], "; 
    printOperand(MI, 2, O); 
    O << '['; 
    printNoHashImmediate(MI, 12, O); 
    O << "], "; 
    printOperand(MI, 3, O); 
    O << '['; 
    printNoHashImmediate(MI, 12, O); 
    O << "]}, "; 
    printAddrMode6Operand(MI, 5, O); 
    printAddrMode6OffsetOperand(MI, 7, O); 
    return;
    break;
  case 33:
    // VLDRD, VLDRS, VSTRD, VSTRS
    printAddrMode5Operand<false>(MI, 1, O); 
    return;
    break;
  case 34:
    // VST1LNd16, VST1LNd32, VST1LNd8
    printNoHashImmediate(MI, 3, O); 
    O << "]}, "; 
    printAddrMode6Operand(MI, 0, O); 
    return;
    break;
  case 35:
    // VST1LNd16_UPD, VST1LNd32_UPD, VST1LNd8_UPD, VST3LNd16, VST3LNd32, VST3...
    printNoHashImmediate(MI, 5, O); 
    break;
  case 36:
    // VST3LNd16_UPD, VST3LNd32_UPD, VST3LNd8_UPD, VST3LNq16_UPD, VST3LNq32_U...
    printNoHashImmediate(MI, 7, O); 
    O << "], "; 
    printOperand(MI, 5, O); 
    O << '['; 
    printNoHashImmediate(MI, 7, O); 
    O << "], "; 
    printOperand(MI, 6, O); 
    O << '['; 
    printNoHashImmediate(MI, 7, O); 
    O << "]}, "; 
    printAddrMode6Operand(MI, 1, O); 
    printAddrMode6OffsetOperand(MI, 3, O); 
    return;
    break;
  case 37:
    // VST3d16_UPD, VST3d32_UPD, VST3d8_UPD, VST3q16_UPD, VST3q32_UPD, VST3q8...
    printOperand(MI, 5, O); 
    O << ", "; 
    printOperand(MI, 6, O); 
    break;
  case 38:
    // VTBL1
    printVectorListOne(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    return;
    break;
  case 39:
    // VTBL2
    printVectorListTwo(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    return;
    break;
  case 40:
    // VTBL3
    printVectorListThree(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    return;
    break;
  case 41:
    // VTBL4
    printVectorListFour(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    return;
    break;
  case 42:
    // VTBX1
    printVectorListOne(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    return;
    break;
  case 43:
    // VTBX2
    printVectorListTwo(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    return;
    break;
  case 44:
    // VTBX3
    printVectorListThree(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    return;
    break;
  case 45:
    // VTBX4
    printVectorListFour(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    return;
    break;
  case 46:
    // sysLDMDA_UPD, sysLDMDB_UPD, sysLDMIA_UPD, sysLDMIB_UPD, sysSTMDA_UPD, ...
    O << " ^"; 
    return;
    break;
  case 47:
    // t2CMNzrs, t2CMPrs, t2MOVSsi, t2MOVsi, t2MVNs, t2TEQrs, t2TSTrs
    printT2SOOperand(MI, 1, O); 
    return;
    break;
  case 48:
    // t2LDRBT, t2LDRBi8, t2LDRHT, t2LDRHi8, t2LDRSBT, t2LDRSBi8, t2LDRSHT, t...
    printT2AddrModeImm8Operand<false>(MI, 1, O); 
    return;
    break;
  case 49:
    // t2LDRB_PRE, t2LDRH_PRE, t2LDRSB_PRE, t2LDRSH_PRE, t2LDR_PRE, t2STRB_PR...
    printT2AddrModeImm8Operand<true>(MI, 2, O); 
    O << '!'; 
    return;
    break;
  case 50:
    // t2LDRBpci, t2LDRHpci, t2LDRSBpci, t2LDRSHpci, t2LDRpci, tLDRpci
    printThumbLdrLabelOperand(MI, 1, O); 
    return;
    break;
  case 51:
    // t2LDRBs, t2LDRHs, t2LDRSBs, t2LDRSHs, t2LDRs, t2STRBs, t2STRHs, t2STRs
    printT2AddrModeSoRegOperand(MI, 1, O); 
    return;
    break;
  case 52:
    // t2LDREX
    printT2AddrModeImm0_1020s4Operand(MI, 1, O); 
    return;
    break;
  case 53:
    // t2MRS_M
    printMSRMaskOperand(MI, 1, O); 
    return;
    break;
  case 54:
    // tADDspi, tSUBspi
    printThumbS4ImmOperand(MI, 2, O); 
    return;
    break;
  case 55:
    // tADR
    printAdrLabelOperand<2>(MI, 1, O); 
    return;
    break;
  case 56:
    // tASRri, tLSRri
    printThumbSRImm(MI, 3, O); 
    return;
    break;
  case 57:
    // tLDRBi, tSTRBi
    printThumbAddrModeImm5S1Operand(MI, 1, O); 
    return;
    break;
  case 58:
    // tLDRBr, tLDRHr, tLDRSB, tLDRSH, tLDRr, tSTRBr, tSTRHr, tSTRr
    printThumbAddrModeRROperand(MI, 1, O); 
    return;
    break;
  case 59:
    // tLDRHi, tSTRHi
    printThumbAddrModeImm5S2Operand(MI, 1, O); 
    return;
    break;
  case 60:
    // tLDRi, tSTRi
    printThumbAddrModeImm5S4Operand(MI, 1, O); 
    return;
    break;
  case 61:
    // tLDRspi, tSTRspi
    printThumbAddrModeSPOperand(MI, 1, O); 
    return;
    break;
  }


  // Fragment 5 encoded into 5 bits for 23 unique commands.
  switch ((Bits >> 41) & 31) {
  default:   // unreachable.
  case 0:
    // ADCri, ADCrr, ADCrsi, ADDri, ADDrr, ADDrsi, ANDri, ANDrr, ANDrsi, ASRi...
    O << ", "; 
    break;
  case 1:
    // CDP, t2CDP, t2CDP2
    printCImmediate(MI, 2, O); 
    O << ", "; 
    printCImmediate(MI, 3, O); 
    O << ", "; 
    printCImmediate(MI, 4, O); 
    O << ", "; 
    printOperand(MI, 5, O); 
    return;
    break;
  case 2:
    // CLZ, CMNri, CMNzrr, CMPri, CMPrr, CPS3p, FLDMXIA, FSTMXIA, LDMDA, LDMD...
    return;
    break;
  case 3:
    // MCR, MCRR, MRRC, VABDfd, VABDfq, VACGEd, VACGEq, VACGTd, VACGTq, VADDD...
    printOperand(MI, 2, O); 
    break;
  case 4:
    // SSAT, t2SSAT
    printShiftImmOperand(MI, 3, O); 
    return;
    break;
  case 5:
    // SXTB, SXTB16, SXTH, UXTB, UXTB16, UXTH, t2SXTB, t2SXTB16, t2SXTH, t2UX...
    printRotImmOperand(MI, 2, O); 
    return;
    break;
  case 6:
    // VDUPLN16d, VDUPLN16q, VDUPLN32d, VDUPLN32q, VDUPLN8d, VDUPLN8q, VGETLN...
    printVectorIndex(MI, 2, O); 
    return;
    break;
  case 7:
    // VFMAD, VFMAS, VFMAfd, VFMAfq, VFMSD, VFMSS, VFMSfd, VFMSfq, VFNMAD, VF...
    printOperand(MI, 3, O); 
    break;
  case 8:
    // VLD1DUPd16wb_register, VLD1DUPd32wb_register, VLD1DUPd8wb_register, VL...
    printOperand(MI, 4, O); 
    return;
    break;
  case 9:
    // VLD1LNd16, VLD1LNd16_UPD, VLD1LNd32, VLD1LNd32_UPD, VLD1LNd8, VLD1LNd8...
    O << "]}, "; 
    break;
  case 10:
    // VLD1LNdWB_fixed_Asm_16, VLD1LNdWB_fixed_Asm_32, VLD1LNdWB_fixed_Asm_8,...
    O << '!'; 
    return;
    break;
  case 11:
    // VLD2LNd16, VLD2LNd32, VLD2LNd8, VLD2LNq16, VLD2LNq32, VLD4LNd16, VLD4L...
    O << "], "; 
    break;
  case 12:
    // VLD2LNd16_UPD, VLD2LNd32_UPD, VLD2LNd8_UPD, VLD2LNq16_UPD, VLD2LNq32_U...
    printOperand(MI, 1, O); 
    O << '['; 
    printNoHashImmediate(MI, 8, O); 
    break;
  case 13:
    // VLD3DUPd16, VLD3DUPd32, VLD3DUPd8, VLD3DUPq16, VLD3DUPq32, VLD3DUPq8
    printAddrMode6Operand(MI, 3, O); 
    return;
    break;
  case 14:
    // VLD3DUPd16_UPD, VLD3DUPd32_UPD, VLD3DUPd8_UPD, VLD3DUPq16_UPD, VLD3DUP...
    printAddrMode6Operand(MI, 4, O); 
    break;
  case 15:
    // VLD4DUPd16_UPD, VLD4DUPd32_UPD, VLD4DUPd8_UPD, VLD4DUPq16_UPD, VLD4DUP...
    printAddrMode6Operand(MI, 5, O); 
    printAddrMode6OffsetOperand(MI, 7, O); 
    return;
    break;
  case 16:
    // VMLALslsv2i32, VMLALslsv4i16, VMLALsluv2i32, VMLALsluv4i16, VMLAslv2i3...
    printVectorIndex(MI, 4, O); 
    return;
    break;
  case 17:
    // VMULLslsv2i32, VMULLslsv4i16, VMULLsluv2i32, VMULLsluv4i16, VMULslv2i3...
    printVectorIndex(MI, 3, O); 
    return;
    break;
  case 18:
    // VST3d16_UPD, VST3d32_UPD, VST3d8_UPD, VST3q16_UPD, VST3q32_UPD, VST3q8...
    O << "}, "; 
    printAddrMode6Operand(MI, 1, O); 
    printAddrMode6OffsetOperand(MI, 3, O); 
    return;
    break;
  case 19:
    // VST4LNd16_UPD, VST4LNd32_UPD, VST4LNd8_UPD, VST4LNq16_UPD, VST4LNq32_U...
    printOperand(MI, 5, O); 
    O << '['; 
    printNoHashImmediate(MI, 8, O); 
    O << "], "; 
    printOperand(MI, 6, O); 
    O << '['; 
    printNoHashImmediate(MI, 8, O); 
    O << "], "; 
    printOperand(MI, 7, O); 
    O << '['; 
    printNoHashImmediate(MI, 8, O); 
    O << "]}, "; 
    printAddrMode6Operand(MI, 1, O); 
    printAddrMode6OffsetOperand(MI, 3, O); 
    return;
    break;
  case 20:
    // sysLDMDA, sysLDMDB, sysLDMIA, sysLDMIB, sysSTMDA, sysSTMDB, sysSTMIA, ...
    O << " ^"; 
    return;
    break;
  case 21:
    // t2LDRB_POST, t2LDRH_POST, t2LDRSB_POST, t2LDRSH_POST, t2LDR_POST, t2ST...
    printT2AddrModeImm8OffsetOperand(MI, 3, O); 
    return;
    break;
  case 22:
    // t2MOVsra_flag, t2MOVsrl_flag
    O << ", #1"; 
    return;
    break;
  }


  // Fragment 6 encoded into 6 bits for 35 unique commands.
  switch ((Bits >> 46) & 63) {
  default:   // unreachable.
  case 0:
    // ADCri, ADCrr, ADDri, ADDrr, ANDri, ANDrr, ASRi, ASRr, BICri, BICrr, EO...
    printOperand(MI, 2, O); 
    break;
  case 1:
    // ADCrsi, ADDrsi, ANDrsi, BICrsi, EORrsi, ORRrsi, RSBrsi, RSCrsi, SBCrsi...
    printSORegImmOperand(MI, 2, O); 
    return;
    break;
  case 2:
    // BFI, t2BFI
    printBitfieldInvMaskImmOperand(MI, 3, O); 
    return;
    break;
  case 3:
    // LDCL_OPTION, LDC_OPTION, STCL_OPTION, STC_OPTION, t2LDC2L_OPTION, t2LD...
    printCoprocOptionImm(MI, 3, O); 
    return;
    break;
  case 4:
    // LDCL_POST, LDC_POST, STCL_POST, STC_POST, t2LDC2L_POST, t2LDC2_POST, t...
    printPostIdxImm8s4Operand(MI, 3, O); 
    return;
    break;
  case 5:
    // LDRBT_POST_IMM, LDRBT_POST_REG, LDRB_POST_IMM, LDRB_POST_REG, LDRT_POS...
    printAddrMode2OffsetOperand(MI, 3, O); 
    return;
    break;
  case 6:
    // LDRD, STRD
    printAddrMode3Operand<false>(MI, 2, O); 
    return;
    break;
  case 7:
    // LDRD_POST, STRD_POST, t2LDRD_POST, t2STRD_POST
    printAddrMode7Operand(MI, 3, O); 
    break;
  case 8:
    // LDRD_PRE, STRD_PRE
    printAddrMode3Operand<true>(MI, 3, O); 
    O << '!'; 
    return;
    break;
  case 9:
    // LDRHTi, LDRSBTi, LDRSHTi, STRHTi
    printPostIdxImm8Operand(MI, 3, O); 
    return;
    break;
  case 10:
    // LDRHTr, LDRSBTr, LDRSHTr, STRHTr
    printPostIdxRegOperand(MI, 3, O); 
    return;
    break;
  case 11:
    // LDRH_POST, LDRSB_POST, LDRSH_POST, STRH_POST
    printAddrMode3OffsetOperand(MI, 3, O); 
    return;
    break;
  case 12:
    // MCR, MCRR, MRRC, t2MCR, t2MCR2, t2MCRR, t2MCRR2, t2MRRC, t2MRRC2
    O << ", "; 
    break;
  case 13:
    // MCRR2, MRRC2
    printCImmediate(MI, 4, O); 
    return;
    break;
  case 14:
    // STLEX, STLEXB, STLEXH, STREX, STREXB, STREXH, SWP, SWPB, t2LDAEXD, t2L...
    printAddrMode7Operand(MI, 2, O); 
    return;
    break;
  case 15:
    // VABDfd, VABDfq, VACGEd, VACGEq, VACGTd, VACGTq, VADDD, VADDS, VADDfd, ...
    return;
    break;
  case 16:
    // VBIFd, VBIFq, VBITd, VBITq, VBSLd, VBSLq, VLD4LNd16, VLD4LNd32, VLD4LN...
    printOperand(MI, 3, O); 
    break;
  case 17:
    // VLD1LNd16, VLD1LNd32, VLD1LNd8, VST1LNd16_UPD, VST1LNd32_UPD, VST1LNd8...
    printAddrMode6Operand(MI, 1, O); 
    break;
  case 18:
    // VLD1LNd16_UPD, VLD1LNd32_UPD, VLD1LNd8_UPD
    printAddrMode6Operand(MI, 2, O); 
    printAddrMode6OffsetOperand(MI, 4, O); 
    return;
    break;
  case 19:
    // VLD1LNdWB_register_Asm_16, VLD1LNdWB_register_Asm_32, VLD1LNdWB_regist...
    printOperand(MI, 4, O); 
    break;
  case 20:
    // VLD2LNd16, VLD2LNd32, VLD2LNd8, VLD2LNq16, VLD2LNq32
    printOperand(MI, 1, O); 
    O << '['; 
    printNoHashImmediate(MI, 6, O); 
    O << "]}, "; 
    printAddrMode6Operand(MI, 2, O); 
    return;
    break;
  case 21:
    // VLD2LNd16_UPD, VLD2LNd32_UPD, VLD2LNd8_UPD, VLD2LNq16_UPD, VLD2LNq32_U...
    O << "]}, "; 
    printAddrMode6Operand(MI, 3, O); 
    printAddrMode6OffsetOperand(MI, 5, O); 
    return;
    break;
  case 22:
    // VLD3DUPd16_UPD, VLD3DUPd32_UPD, VLD3DUPd8_UPD, VLD3DUPq16_UPD, VLD3DUP...
    printAddrMode6OffsetOperand(MI, 6, O); 
    return;
    break;
  case 23:
    // VLD3LNd16, VLD3LNd32, VLD3LNd8, VLD3LNq16, VLD3LNq32
    O << "], "; 
    printOperand(MI, 2, O); 
    O << '['; 
    printNoHashImmediate(MI, 8, O); 
    O << "]}, "; 
    printAddrMode6Operand(MI, 3, O); 
    return;
    break;
  case 24:
    // VLD3LNd16_UPD, VLD3LNd32_UPD, VLD3LNd8_UPD, VLD3LNq16_UPD, VLD3LNq32_U...
    printAddrMode6Operand(MI, 4, O); 
    printAddrMode6OffsetOperand(MI, 6, O); 
    return;
    break;
  case 25:
    // VMLAslfd, VMLAslfq, VMLSslfd, VMLSslfq
    printVectorIndex(MI, 4, O); 
    return;
    break;
  case 26:
    // VMULslfd, VMULslfq
    printVectorIndex(MI, 3, O); 
    return;
    break;
  case 27:
    // VST2LNd16_UPD, VST2LNd32_UPD, VST2LNd8_UPD, VST2LNq16_UPD, VST2LNq32_U...
    printOperand(MI, 5, O); 
    O << '['; 
    printNoHashImmediate(MI, 6, O); 
    O << "]}, "; 
    printAddrMode6Operand(MI, 1, O); 
    printAddrMode6OffsetOperand(MI, 3, O); 
    return;
    break;
  case 28:
    // VST4d16_UPD, VST4d32_UPD, VST4d8_UPD, VST4q16_UPD, VST4q32_UPD, VST4q8...
    printOperand(MI, 7, O); 
    O << "}, "; 
    printAddrMode6Operand(MI, 1, O); 
    printAddrMode6OffsetOperand(MI, 3, O); 
    return;
    break;
  case 29:
    // t2ADCrs, t2ADDrs, t2ANDrs, t2BICrs, t2EORrs, t2ORNrs, t2ORRrs, t2RSBrs...
    printT2SOOperand(MI, 2, O); 
    return;
    break;
  case 30:
    // t2ASRri, t2LSRri
    printThumbSRImm(MI, 2, O); 
    return;
    break;
  case 31:
    // t2LDRD_PRE, t2STRD_PRE
    printT2AddrModeImm8s4Operand<true>(MI, 3, O); 
    O << '!'; 
    return;
    break;
  case 32:
    // t2LDRDi8, t2STRDi8
    printT2AddrModeImm8s4Operand<false>(MI, 2, O); 
    return;
    break;
  case 33:
    // t2STREX
    printT2AddrModeImm0_1020s4Operand(MI, 2, O); 
    return;
    break;
  case 34:
    // tADDrSPi
    printThumbS4ImmOperand(MI, 2, O); 
    return;
    break;
  }


  // Fragment 7 encoded into 4 bits for 12 unique commands.
  switch ((Bits >> 52) & 15) {
  default:   // unreachable.
  case 0:
    // ADCri, ADCrr, ADDri, ADDrr, ANDri, ANDrr, ASRi, ASRr, BICri, BICrr, EO...
    return;
    break;
  case 1:
    // LDRD_POST, MLA, MLS, SBFX, SMLABB, SMLABT, SMLAD, SMLADX, SMLALBB, SML...
    O << ", "; 
    break;
  case 2:
    // MCR, t2MCR, t2MCR2
    printCImmediate(MI, 3, O); 
    O << ", "; 
    printCImmediate(MI, 4, O); 
    O << ", "; 
    printOperand(MI, 5, O); 
    return;
    break;
  case 3:
    // MCRR, MRRC, t2MCRR, t2MCRR2, t2MRRC, t2MRRC2
    printOperand(MI, 3, O); 
    O << ", "; 
    printCImmediate(MI, 4, O); 
    return;
    break;
  case 4:
    // PKHBT, t2PKHBT
    printPKHLSLShiftImm(MI, 3, O); 
    return;
    break;
  case 5:
    // PKHTB, t2PKHTB
    printPKHASRShiftImm(MI, 3, O); 
    return;
    break;
  case 6:
    // SXTAB, SXTAB16, SXTAH, UXTAB, UXTAB16, UXTAH, t2SXTAB, t2SXTAB16, t2SX...
    printRotImmOperand(MI, 3, O); 
    return;
    break;
  case 7:
    // USAT, t2USAT
    printShiftImmOperand(MI, 3, O); 
    return;
    break;
  case 8:
    // VLD3d16, VLD3d16_UPD, VLD3d32, VLD3d32_UPD, VLD3d8, VLD3d8_UPD, VLD3q1...
    O << "}, "; 
    break;
  case 9:
    // VLD4LNd16, VLD4LNd32, VLD4LNd8, VLD4LNq16, VLD4LNq32, VST2LNd16, VST2L...
    O << '['; 
    break;
  case 10:
    // VST1LNd16_UPD, VST1LNd32_UPD, VST1LNd8_UPD
    printAddrMode6OffsetOperand(MI, 3, O); 
    return;
    break;
  case 11:
    // t2LDRD_POST, t2STRD_POST
    printT2AddrModeImm8s4OffsetOperand(MI, 4, O); 
    return;
    break;
  }


  // Fragment 8 encoded into 4 bits for 13 unique commands.
  switch ((Bits >> 56) & 15) {
  default:   // unreachable.
  case 0:
    // LDRD_POST, STRD_POST
    printAddrMode3OffsetOperand(MI, 4, O); 
    return;
    break;
  case 1:
    // MLA, MLS, SMLABB, SMLABT, SMLAD, SMLADX, SMLALBB, SMLALBT, SMLALD, SML...
    printOperand(MI, 3, O); 
    break;
  case 2:
    // SBFX, UBFX, t2SBFX, t2UBFX
    printImmPlusOneOperand(MI, 3, O); 
    return;
    break;
  case 3:
    // VLD3d16, VLD3d32, VLD3d8, VLD3q16, VLD3q32, VLD3q8
    printAddrMode6Operand(MI, 3, O); 
    return;
    break;
  case 4:
    // VLD3d16_UPD, VLD3d32_UPD, VLD3d8_UPD, VLD3q16_UPD, VLD3q32_UPD, VLD3q8...
    printAddrMode6Operand(MI, 4, O); 
    printAddrMode6OffsetOperand(MI, 6, O); 
    return;
    break;
  case 5:
    // VLD4LNd16, VLD4LNd32, VLD4LNd8, VLD4LNq16, VLD4LNq32
    printNoHashImmediate(MI, 10, O); 
    O << "]}, "; 
    printAddrMode6Operand(MI, 4, O); 
    return;
    break;
  case 6:
    // VST2LNd16, VST2LNd32, VST2LNd8, VST2LNq16, VST2LNq32
    printNoHashImmediate(MI, 4, O); 
    O << "]}, "; 
    printAddrMode6Operand(MI, 0, O); 
    return;
    break;
  case 7:
    // VST3LNd16, VST3LNd32, VST3LNd8, VST3LNq16, VST3LNq32
    printNoHashImmediate(MI, 5, O); 
    O << "], "; 
    printOperand(MI, 4, O); 
    O << '['; 
    printNoHashImmediate(MI, 5, O); 
    O << "]}, "; 
    printAddrMode6Operand(MI, 0, O); 
    return;
    break;
  case 8:
    // VST3d16, VST3d32, VST3d8, VST3q16, VST3q32, VST3q8
    printAddrMode6Operand(MI, 0, O); 
    return;
    break;
  case 9:
    // VST4LNd16, VST4LNd32, VST4LNd8, VST4LNq16, VST4LNq32
    printNoHashImmediate(MI, 6, O); 
    O << "], "; 
    printOperand(MI, 4, O); 
    O << '['; 
    printNoHashImmediate(MI, 6, O); 
    O << "], "; 
    printOperand(MI, 5, O); 
    O << '['; 
    printNoHashImmediate(MI, 6, O); 
    O << "]}, "; 
    printAddrMode6Operand(MI, 0, O); 
    return;
    break;
  case 10:
    // VST4d16, VST4d32, VST4d8, VST4q16, VST4q32, VST4q8
    printOperand(MI, 5, O); 
    O << "}, "; 
    printAddrMode6Operand(MI, 0, O); 
    return;
    break;
  case 11:
    // t2SMLSLDX
    printOperand(MI, 2, O); 
    return;
    break;
  case 12:
    // t2STLEXD, t2STREXD
    printAddrMode7Operand(MI, 3, O); 
    return;
    break;
  }


  // Fragment 9 encoded into 1 bits for 2 unique commands.
  if ((Bits >> 60) & 1) {
    // VLD4d16, VLD4d16_UPD, VLD4d32, VLD4d32_UPD, VLD4d8, VLD4d8_UPD, VLD4q1...
    O << "}, "; 
  } else {
    // MLA, MLS, SMLABB, SMLABT, SMLAD, SMLADX, SMLALBB, SMLALBT, SMLALD, SML...
    return;
  }


  // Fragment 10 encoded into 1 bits for 2 unique commands.
  if ((Bits >> 61) & 1) {
    // VLD4d16_UPD, VLD4d32_UPD, VLD4d8_UPD, VLD4q16_UPD, VLD4q32_UPD, VLD4q8...
    printAddrMode6Operand(MI, 5, O); 
    printAddrMode6OffsetOperand(MI, 7, O); 
    return;
  } else {
    // VLD4d16, VLD4d32, VLD4d8, VLD4q16, VLD4q32, VLD4q8
    printAddrMode6Operand(MI, 4, O); 
    return;
  }

}


/// getRegisterName - This method is automatically generated by tblgen
/// from the register set description.  This returns the assembler name
/// for the specified register.
const char *ARMInstPrinter::getRegisterName(unsigned RegNo) {
  assert(RegNo && RegNo < 288 && "Invalid register number!");

  static const char AsmStrs[] = {
  /* 0 */ 'D', '4', '_', 'D', '6', '_', 'D', '8', '_', 'D', '1', '0', 0,
  /* 13 */ 'D', '7', '_', 'D', '8', '_', 'D', '9', '_', 'D', '1', '0', 0,
  /* 26 */ 'Q', '7', '_', 'Q', '8', '_', 'Q', '9', '_', 'Q', '1', '0', 0,
  /* 39 */ 'd', '1', '0', 0,
  /* 43 */ 'q', '1', '0', 0,
  /* 47 */ 'r', '1', '0', 0,
  /* 51 */ 's', '1', '0', 0,
  /* 55 */ 'D', '1', '4', '_', 'D', '1', '6', '_', 'D', '1', '8', '_', 'D', '2', '0', 0,
  /* 71 */ 'D', '1', '7', '_', 'D', '1', '8', '_', 'D', '1', '9', '_', 'D', '2', '0', 0,
  /* 87 */ 'd', '2', '0', 0,
  /* 91 */ 's', '2', '0', 0,
  /* 95 */ 'D', '2', '4', '_', 'D', '2', '6', '_', 'D', '2', '8', '_', 'D', '3', '0', 0,
  /* 111 */ 'D', '2', '7', '_', 'D', '2', '8', '_', 'D', '2', '9', '_', 'D', '3', '0', 0,
  /* 127 */ 'd', '3', '0', 0,
  /* 131 */ 's', '3', '0', 0,
  /* 135 */ 'd', '0', 0,
  /* 138 */ 'q', '0', 0,
  /* 141 */ 'm', 'v', 'f', 'r', '0', 0,
  /* 147 */ 's', '0', 0,
  /* 150 */ 'D', '9', '_', 'D', '1', '0', '_', 'D', '1', '1', 0,
  /* 161 */ 'D', '5', '_', 'D', '7', '_', 'D', '9', '_', 'D', '1', '1', 0,
  /* 174 */ 'Q', '8', '_', 'Q', '9', '_', 'Q', '1', '0', '_', 'Q', '1', '1', 0,
  /* 188 */ 'R', '1', '0', '_', 'R', '1', '1', 0,
  /* 196 */ 'd', '1', '1', 0,
  /* 200 */ 'q', '1', '1', 0,
  /* 204 */ 'r', '1', '1', 0,
  /* 208 */ 's', '1', '1', 0,
  /* 212 */ 'D', '1', '9', '_', 'D', '2', '0', '_', 'D', '2', '1', 0,
  /* 224 */ 'D', '1', '5', '_', 'D', '1', '7', '_', 'D', '1', '9', '_', 'D', '2', '1', 0,
  /* 240 */ 'd', '2', '1', 0,
  /* 244 */ 's', '2', '1', 0,
  /* 248 */ 'D', '2', '9', '_', 'D', '3', '0', '_', 'D', '3', '1', 0,
  /* 260 */ 'D', '2', '5', '_', 'D', '2', '7', '_', 'D', '2', '9', '_', 'D', '3', '1', 0,
  /* 276 */ 'd', '3', '1', 0,
  /* 280 */ 's', '3', '1', 0,
  /* 284 */ 'Q', '0', '_', 'Q', '1', 0,
  /* 290 */ 'R', '0', '_', 'R', '1', 0,
  /* 296 */ 'd', '1', 0,
  /* 299 */ 'q', '1', 0,
  /* 302 */ 'm', 'v', 'f', 'r', '1', 0,
  /* 308 */ 's', '1', 0,
  /* 311 */ 'D', '6', '_', 'D', '8', '_', 'D', '1', '0', '_', 'D', '1', '2', 0,
  /* 325 */ 'D', '9', '_', 'D', '1', '0', '_', 'D', '1', '1', '_', 'D', '1', '2', 0,
  /* 340 */ 'Q', '9', '_', 'Q', '1', '0', '_', 'Q', '1', '1', '_', 'Q', '1', '2', 0,
  /* 355 */ 'd', '1', '2', 0,
  /* 359 */ 'q', '1', '2', 0,
  /* 363 */ 'r', '1', '2', 0,
  /* 367 */ 's', '1', '2', 0,
  /* 371 */ 'D', '1', '6', '_', 'D', '1', '8', '_', 'D', '2', '0', '_', 'D', '2', '2', 0,
  /* 387 */ 'D', '1', '9', '_', 'D', '2', '0', '_', 'D', '2', '1', '_', 'D', '2', '2', 0,
  /* 403 */ 'd', '2', '2', 0,
  /* 407 */ 's', '2', '2', 0,
  /* 411 */ 'D', '0', '_', 'D', '2', 0,
  /* 417 */ 'D', '0', '_', 'D', '1', '_', 'D', '2', 0,
  /* 426 */ 'Q', '1', '_', 'Q', '2', 0,
  /* 432 */ 'd', '2', 0,
  /* 435 */ 'q', '2', 0,
  /* 438 */ 'r', '2', 0,
  /* 441 */ 's', '2', 0,
  /* 444 */ 'f', 'p', 'i', 'n', 's', 't', '2', 0,
  /* 452 */ 'D', '7', '_', 'D', '9', '_', 'D', '1', '1', '_', 'D', '1', '3', 0,
  /* 466 */ 'D', '1', '1', '_', 'D', '1', '2', '_', 'D', '1', '3', 0,
  /* 478 */ 'Q', '1', '0', '_', 'Q', '1', '1', '_', 'Q', '1', '2', '_', 'Q', '1', '3', 0,
  /* 494 */ 'd', '1', '3', 0,
  /* 498 */ 'q', '1', '3', 0,
  /* 502 */ 's', '1', '3', 0,
  /* 506 */ 'D', '1', '7', '_', 'D', '1', '9', '_', 'D', '2', '1', '_', 'D', '2', '3', 0,
  /* 522 */ 'D', '2', '1', '_', 'D', '2', '2', '_', 'D', '2', '3', 0,
  /* 534 */ 'd', '2', '3', 0,
  /* 538 */ 's', '2', '3', 0,
  /* 542 */ 'D', '1', '_', 'D', '3', 0,
  /* 548 */ 'D', '1', '_', 'D', '2', '_', 'D', '3', 0,
  /* 557 */ 'Q', '0', '_', 'Q', '1', '_', 'Q', '2', '_', 'Q', '3', 0,
  /* 569 */ 'R', '2', '_', 'R', '3', 0,
  /* 575 */ 'd', '3', 0,
  /* 578 */ 'q', '3', 0,
  /* 581 */ 'r', '3', 0,
  /* 584 */ 's', '3', 0,
  /* 587 */ 'D', '8', '_', 'D', '1', '0', '_', 'D', '1', '2', '_', 'D', '1', '4', 0,
  /* 602 */ 'D', '1', '1', '_', 'D', '1', '2', '_', 'D', '1', '3', '_', 'D', '1', '4', 0,
  /* 618 */ 'Q', '1', '1', '_', 'Q', '1', '2', '_', 'Q', '1', '3', '_', 'Q', '1', '4', 0,
  /* 634 */ 'd', '1', '4', 0,
  /* 638 */ 'q', '1', '4', 0,
  /* 642 */ 's', '1', '4', 0,
  /* 646 */ 'D', '1', '8', '_', 'D', '2', '0', '_', 'D', '2', '2', '_', 'D', '2', '4', 0,
  /* 662 */ 'D', '2', '1', '_', 'D', '2', '2', '_', 'D', '2', '3', '_', 'D', '2', '4', 0,
  /* 678 */ 'd', '2', '4', 0,
  /* 682 */ 's', '2', '4', 0,
  /* 686 */ 'D', '0', '_', 'D', '2', '_', 'D', '4', 0,
  /* 695 */ 'D', '1', '_', 'D', '2', '_', 'D', '3', '_', 'D', '4', 0,
  /* 707 */ 'Q', '1', '_', 'Q', '2', '_', 'Q', '3', '_', 'Q', '4', 0,
  /* 719 */ 'd', '4', 0,
  /* 722 */ 'q', '4', 0,
  /* 725 */ 'r', '4', 0,
  /* 728 */ 's', '4', 0,
  /* 731 */ 'D', '9', '_', 'D', '1', '1', '_', 'D', '1', '3', '_', 'D', '1', '5', 0,
  /* 746 */ 'D', '1', '3', '_', 'D', '1', '4', '_', 'D', '1', '5', 0,
  /* 758 */ 'Q', '1', '2', '_', 'Q', '1', '3', '_', 'Q', '1', '4', '_', 'Q', '1', '5', 0,
  /* 774 */ 'd', '1', '5', 0,
  /* 778 */ 'q', '1', '5', 0,
  /* 782 */ 's', '1', '5', 0,
  /* 786 */ 'D', '1', '9', '_', 'D', '2', '1', '_', 'D', '2', '3', '_', 'D', '2', '5', 0,
  /* 802 */ 'D', '2', '3', '_', 'D', '2', '4', '_', 'D', '2', '5', 0,
  /* 814 */ 'd', '2', '5', 0,
  /* 818 */ 's', '2', '5', 0,
  /* 822 */ 'D', '1', '_', 'D', '3', '_', 'D', '5', 0,
  /* 831 */ 'D', '3', '_', 'D', '4', '_', 'D', '5', 0,
  /* 840 */ 'Q', '2', '_', 'Q', '3', '_', 'Q', '4', '_', 'Q', '5', 0,
  /* 852 */ 'R', '4', '_', 'R', '5', 0,
  /* 858 */ 'd', '5', 0,
  /* 861 */ 'q', '5', 0,
  /* 864 */ 'r', '5', 0,
  /* 867 */ 's', '5', 0,
  /* 870 */ 'D', '1', '0', '_', 'D', '1', '2', '_', 'D', '1', '4', '_', 'D', '1', '6', 0,
  /* 886 */ 'D', '1', '3', '_', 'D', '1', '4', '_', 'D', '1', '5', '_', 'D', '1', '6', 0,
  /* 902 */ 'd', '1', '6', 0,
  /* 906 */ 's', '1', '6', 0,
  /* 910 */ 'D', '2', '0', '_', 'D', '2', '2', '_', 'D', '2', '4', '_', 'D', '2', '6', 0,
  /* 926 */ 'D', '2', '3', '_', 'D', '2', '4', '_', 'D', '2', '5', '_', 'D', '2', '6', 0,
  /* 942 */ 'd', '2', '6', 0,
  /* 946 */ 's', '2', '6', 0,
  /* 950 */ 'D', '0', '_', 'D', '2', '_', 'D', '4', '_', 'D', '6', 0,
  /* 962 */ 'D', '3', '_', 'D', '4', '_', 'D', '5', '_', 'D', '6', 0,
  /* 974 */ 'Q', '3', '_', 'Q', '4', '_', 'Q', '5', '_', 'Q', '6', 0,
  /* 986 */ 'd', '6', 0,
  /* 989 */ 'q', '6', 0,
  /* 992 */ 'r', '6', 0,
  /* 995 */ 's', '6', 0,
  /* 998 */ 'D', '1', '1', '_', 'D', '1', '3', '_', 'D', '1', '5', '_', 'D', '1', '7', 0,
  /* 1014 */ 'D', '1', '5', '_', 'D', '1', '6', '_', 'D', '1', '7', 0,
  /* 1026 */ 'd', '1', '7', 0,
  /* 1030 */ 's', '1', '7', 0,
  /* 1034 */ 'D', '2', '1', '_', 'D', '2', '3', '_', 'D', '2', '5', '_', 'D', '2', '7', 0,
  /* 1050 */ 'D', '2', '5', '_', 'D', '2', '6', '_', 'D', '2', '7', 0,
  /* 1062 */ 'd', '2', '7', 0,
  /* 1066 */ 's', '2', '7', 0,
  /* 1070 */ 'D', '1', '_', 'D', '3', '_', 'D', '5', '_', 'D', '7', 0,
  /* 1082 */ 'D', '5', '_', 'D', '6', '_', 'D', '7', 0,
  /* 1091 */ 'Q', '4', '_', 'Q', '5', '_', 'Q', '6', '_', 'Q', '7', 0,
  /* 1103 */ 'R', '6', '_', 'R', '7', 0,
  /* 1109 */ 'd', '7', 0,
  /* 1112 */ 'q', '7', 0,
  /* 1115 */ 'r', '7', 0,
  /* 1118 */ 's', '7', 0,
  /* 1121 */ 'D', '1', '2', '_', 'D', '1', '4', '_', 'D', '1', '6', '_', 'D', '1', '8', 0,
  /* 1137 */ 'D', '1', '5', '_', 'D', '1', '6', '_', 'D', '1', '7', '_', 'D', '1', '8', 0,
  /* 1153 */ 'd', '1', '8', 0,
  /* 1157 */ 's', '1', '8', 0,
  /* 1161 */ 'D', '2', '2', '_', 'D', '2', '4', '_', 'D', '2', '6', '_', 'D', '2', '8', 0,
  /* 1177 */ 'D', '2', '5', '_', 'D', '2', '6', '_', 'D', '2', '7', '_', 'D', '2', '8', 0,
  /* 1193 */ 'd', '2', '8', 0,
  /* 1197 */ 's', '2', '8', 0,
  /* 1201 */ 'D', '2', '_', 'D', '4', '_', 'D', '6', '_', 'D', '8', 0,
  /* 1213 */ 'D', '5', '_', 'D', '6', '_', 'D', '7', '_', 'D', '8', 0,
  /* 1225 */ 'Q', '5', '_', 'Q', '6', '_', 'Q', '7', '_', 'Q', '8', 0,
  /* 1237 */ 'd', '8', 0,
  /* 1240 */ 'q', '8', 0,
  /* 1243 */ 'r', '8', 0,
  /* 1246 */ 's', '8', 0,
  /* 1249 */ 'D', '1', '3', '_', 'D', '1', '5', '_', 'D', '1', '7', '_', 'D', '1', '9', 0,
  /* 1265 */ 'D', '1', '7', '_', 'D', '1', '8', '_', 'D', '1', '9', 0,
  /* 1277 */ 'd', '1', '9', 0,
  /* 1281 */ 's', '1', '9', 0,
  /* 1285 */ 'D', '2', '3', '_', 'D', '2', '5', '_', 'D', '2', '7', '_', 'D', '2', '9', 0,
  /* 1301 */ 'D', '2', '7', '_', 'D', '2', '8', '_', 'D', '2', '9', 0,
  /* 1313 */ 'd', '2', '9', 0,
  /* 1317 */ 's', '2', '9', 0,
  /* 1321 */ 'D', '3', '_', 'D', '5', '_', 'D', '7', '_', 'D', '9', 0,
  /* 1333 */ 'D', '7', '_', 'D', '8', '_', 'D', '9', 0,
  /* 1342 */ 'Q', '6', '_', 'Q', '7', '_', 'Q', '8', '_', 'Q', '9', 0,
  /* 1354 */ 'R', '8', '_', 'R', '9', 0,
  /* 1360 */ 'd', '9', 0,
  /* 1363 */ 'q', '9', 0,
  /* 1366 */ 'r', '9', 0,
  /* 1369 */ 's', '9', 0,
  /* 1372 */ 'R', '1', '2', '_', 'S', 'P', 0,
  /* 1379 */ 'p', 'c', 0,
  /* 1382 */ 'f', 'p', 'e', 'x', 'c', 0,
  /* 1388 */ 'f', 'p', 's', 'i', 'd', 0,
  /* 1394 */ 'i', 't', 's', 't', 'a', 't', 'e', 0,
  /* 1402 */ 's', 'p', 0,
  /* 1405 */ 'f', 'p', 's', 'c', 'r', 0,
  /* 1411 */ 'l', 'r', 0,
  /* 1414 */ 'a', 'p', 's', 'r', 0,
  /* 1419 */ 'c', 'p', 's', 'r', 0,
  /* 1424 */ 's', 'p', 's', 'r', 0,
  /* 1429 */ 'f', 'p', 'i', 'n', 's', 't', 0,
  /* 1436 */ 'f', 'p', 's', 'c', 'r', '_', 'n', 'z', 'c', 'v', 0,
  /* 1447 */ 'a', 'p', 's', 'r', '_', 'n', 'z', 'c', 'v', 0,
  };

  static const uint32_t RegAsmOffset[] = {
    1414, 1447, 1419, 1382, 1429, 1405, 1436, 1388, 1394, 1411, 1379, 1402, 1424, 135, 
    296, 432, 575, 719, 858, 986, 1109, 1237, 1360, 39, 196, 355, 494, 634, 
    774, 902, 1026, 1153, 1277, 87, 240, 403, 534, 678, 814, 942, 1062, 1193, 
    1313, 127, 276, 444, 141, 302, 138, 299, 435, 578, 722, 861, 989, 1112, 
    1240, 1363, 43, 200, 359, 498, 638, 778, 144, 305, 438, 581, 725, 864, 
    992, 1115, 1243, 1366, 47, 204, 363, 147, 308, 441, 584, 728, 867, 995, 
    1118, 1246, 1369, 51, 208, 367, 502, 642, 782, 906, 1030, 1157, 1281, 91, 
    244, 407, 538, 682, 818, 946, 1066, 1197, 1317, 131, 280, 411, 542, 689, 
    825, 956, 1076, 1207, 1327, 6, 167, 317, 458, 594, 738, 878, 1006, 1129, 
    1257, 63, 232, 379, 514, 654, 794, 918, 1042, 1169, 1293, 103, 268, 284, 
    426, 563, 713, 846, 980, 1097, 1231, 1348, 32, 180, 347, 486, 626, 766, 
    557, 707, 840, 974, 1091, 1225, 1342, 26, 174, 340, 478, 618, 758, 1372, 
    290, 569, 852, 1103, 1354, 188, 417, 548, 698, 831, 965, 1082, 1216, 1333, 
    16, 150, 328, 466, 606, 746, 890, 1014, 1141, 1265, 75, 212, 391, 522, 
    666, 802, 930, 1050, 1181, 1301, 115, 248, 686, 822, 953, 1073, 1204, 1324, 
    3, 164, 314, 455, 590, 734, 874, 1002, 1125, 1253, 59, 228, 375, 510, 
    650, 790, 914, 1038, 1165, 1289, 99, 264, 950, 1070, 1201, 1321, 0, 161, 
    311, 452, 587, 731, 870, 998, 1121, 1249, 55, 224, 371, 506, 646, 786, 
    910, 1034, 1161, 1285, 95, 260, 420, 701, 968, 1219, 19, 332, 610, 894, 
    1145, 79, 395, 670, 934, 1185, 119, 695, 962, 1213, 13, 325, 602, 886, 
    1137, 71, 387, 662, 926, 1177, 111, 
  };

  assert (*(AsmStrs+RegAsmOffset[RegNo-1]) &&
          "Invalid alt name index for register!");
  return AsmStrs+RegAsmOffset[RegNo-1];
}

#ifdef PRINT_ALIAS_INSTR
#undef PRINT_ALIAS_INSTR

static unsigned getMapOperandNumber(const SmallVectorImpl<std::pair<StringRef, unsigned> > &OpMap,
                                    StringRef Name) {
  for (SmallVectorImpl<std::pair<StringRef, unsigned> >::const_iterator
         I = OpMap.begin(), E = OpMap.end(); I != E; ++I)
    if (I->first == Name)
      return I->second;
  llvm_unreachable("Operand not in map!");
}

bool ARMInstPrinter::printAliasInstr(const MCInst *MI, raw_ostream &OS) {
  StringRef AsmString;
  SmallVector<std::pair<StringRef, unsigned>, 4> OpMap;
  switch (MI->getOpcode()) {
  default: return false;
  case ARM::DMB:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15) {
      // (DMB 15)
      AsmString = "dmb";
      break;
    }
    return false;
  case ARM::DSB:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15) {
      // (DSB 15)
      AsmString = "dsb";
      break;
    }
    return false;
  case ARM::ISB:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15) {
      // (ISB 15)
      AsmString = "isb";
      break;
    }
    return false;
  case ARM::VRINTAD:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::DPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(ARM::DPRRegClassID).contains(MI->getOperand(1).getReg())) {
      // (VRINTAD DPR:$Dd, DPR:$Dm)
      AsmString = "vrinta.f64.f64	$Dd, $Dm";
      OpMap.push_back(std::make_pair("Dd", 0));
      OpMap.push_back(std::make_pair("Dm", 1));
      break;
    }
    return false;
  case ARM::VRINTAND:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::DPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(ARM::DPRRegClassID).contains(MI->getOperand(1).getReg())) {
      // (VRINTAND DPR:$Dd, DPR:$Dm)
      AsmString = "vrinta.f32.f32	$Dd, $Dm";
      OpMap.push_back(std::make_pair("Dd", 0));
      OpMap.push_back(std::make_pair("Dm", 1));
      break;
    }
    return false;
  case ARM::VRINTANQ:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::QPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(ARM::QPRRegClassID).contains(MI->getOperand(1).getReg())) {
      // (VRINTANQ QPR:$Qd, QPR:$Qm)
      AsmString = "vrinta.f32.f32	$Qd, $Qm";
      OpMap.push_back(std::make_pair("Qd", 0));
      OpMap.push_back(std::make_pair("Qm", 1));
      break;
    }
    return false;
  case ARM::VRINTAS:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::SPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(ARM::SPRRegClassID).contains(MI->getOperand(1).getReg())) {
      // (VRINTAS SPR:$Sd, SPR:$Sm)
      AsmString = "vrinta.f32.f32	$Sd, $Sm";
      OpMap.push_back(std::make_pair("Sd", 0));
      OpMap.push_back(std::make_pair("Sm", 1));
      break;
    }
    return false;
  case ARM::VRINTMD:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::DPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(ARM::DPRRegClassID).contains(MI->getOperand(1).getReg())) {
      // (VRINTMD DPR:$Dd, DPR:$Dm)
      AsmString = "vrintm.f64.f64	$Dd, $Dm";
      OpMap.push_back(std::make_pair("Dd", 0));
      OpMap.push_back(std::make_pair("Dm", 1));
      break;
    }
    return false;
  case ARM::VRINTMND:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::DPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(ARM::DPRRegClassID).contains(MI->getOperand(1).getReg())) {
      // (VRINTMND DPR:$Dd, DPR:$Dm)
      AsmString = "vrintm.f32.f32	$Dd, $Dm";
      OpMap.push_back(std::make_pair("Dd", 0));
      OpMap.push_back(std::make_pair("Dm", 1));
      break;
    }
    return false;
  case ARM::VRINTMNQ:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::QPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(ARM::QPRRegClassID).contains(MI->getOperand(1).getReg())) {
      // (VRINTMNQ QPR:$Qd, QPR:$Qm)
      AsmString = "vrintm.f32.f32	$Qd, $Qm";
      OpMap.push_back(std::make_pair("Qd", 0));
      OpMap.push_back(std::make_pair("Qm", 1));
      break;
    }
    return false;
  case ARM::VRINTMS:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::SPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(ARM::SPRRegClassID).contains(MI->getOperand(1).getReg())) {
      // (VRINTMS SPR:$Sd, SPR:$Sm)
      AsmString = "vrintm.f32.f32	$Sd, $Sm";
      OpMap.push_back(std::make_pair("Sd", 0));
      OpMap.push_back(std::make_pair("Sm", 1));
      break;
    }
    return false;
  case ARM::VRINTND:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::DPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(ARM::DPRRegClassID).contains(MI->getOperand(1).getReg())) {
      // (VRINTND DPR:$Dd, DPR:$Dm)
      AsmString = "vrintn.f64.f64	$Dd, $Dm";
      OpMap.push_back(std::make_pair("Dd", 0));
      OpMap.push_back(std::make_pair("Dm", 1));
      break;
    }
    return false;
  case ARM::VRINTNND:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::DPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(ARM::DPRRegClassID).contains(MI->getOperand(1).getReg())) {
      // (VRINTNND DPR:$Dd, DPR:$Dm)
      AsmString = "vrintn.f32.f32	$Dd, $Dm";
      OpMap.push_back(std::make_pair("Dd", 0));
      OpMap.push_back(std::make_pair("Dm", 1));
      break;
    }
    return false;
  case ARM::VRINTNNQ:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::QPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(ARM::QPRRegClassID).contains(MI->getOperand(1).getReg())) {
      // (VRINTNNQ QPR:$Qd, QPR:$Qm)
      AsmString = "vrintn.f32.f32	$Qd, $Qm";
      OpMap.push_back(std::make_pair("Qd", 0));
      OpMap.push_back(std::make_pair("Qm", 1));
      break;
    }
    return false;
  case ARM::VRINTNS:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::SPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(ARM::SPRRegClassID).contains(MI->getOperand(1).getReg())) {
      // (VRINTNS SPR:$Sd, SPR:$Sm)
      AsmString = "vrintn.f32.f32	$Sd, $Sm";
      OpMap.push_back(std::make_pair("Sd", 0));
      OpMap.push_back(std::make_pair("Sm", 1));
      break;
    }
    return false;
  case ARM::VRINTPD:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::DPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(ARM::DPRRegClassID).contains(MI->getOperand(1).getReg())) {
      // (VRINTPD DPR:$Dd, DPR:$Dm)
      AsmString = "vrintp.f64.f64	$Dd, $Dm";
      OpMap.push_back(std::make_pair("Dd", 0));
      OpMap.push_back(std::make_pair("Dm", 1));
      break;
    }
    return false;
  case ARM::VRINTPND:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::DPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(ARM::DPRRegClassID).contains(MI->getOperand(1).getReg())) {
      // (VRINTPND DPR:$Dd, DPR:$Dm)
      AsmString = "vrintp.f32.f32	$Dd, $Dm";
      OpMap.push_back(std::make_pair("Dd", 0));
      OpMap.push_back(std::make_pair("Dm", 1));
      break;
    }
    return false;
  case ARM::VRINTPNQ:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::QPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(ARM::QPRRegClassID).contains(MI->getOperand(1).getReg())) {
      // (VRINTPNQ QPR:$Qd, QPR:$Qm)
      AsmString = "vrintp.f32.f32	$Qd, $Qm";
      OpMap.push_back(std::make_pair("Qd", 0));
      OpMap.push_back(std::make_pair("Qm", 1));
      break;
    }
    return false;
  case ARM::VRINTPS:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::SPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(ARM::SPRRegClassID).contains(MI->getOperand(1).getReg())) {
      // (VRINTPS SPR:$Sd, SPR:$Sm)
      AsmString = "vrintp.f32.f32	$Sd, $Sm";
      OpMap.push_back(std::make_pair("Sd", 0));
      OpMap.push_back(std::make_pair("Sm", 1));
      break;
    }
    return false;
  case ARM::VRINTXND:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::DPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(ARM::DPRRegClassID).contains(MI->getOperand(1).getReg())) {
      // (VRINTXND DPR:$Dd, DPR:$Dm)
      AsmString = "vrintx.f32.f32	$Dd, $Dm";
      OpMap.push_back(std::make_pair("Dd", 0));
      OpMap.push_back(std::make_pair("Dm", 1));
      break;
    }
    return false;
  case ARM::VRINTXNQ:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::QPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(ARM::QPRRegClassID).contains(MI->getOperand(1).getReg())) {
      // (VRINTXNQ QPR:$Qd, QPR:$Qm)
      AsmString = "vrintx.f32.f32	$Qd, $Qm";
      OpMap.push_back(std::make_pair("Qd", 0));
      OpMap.push_back(std::make_pair("Qm", 1));
      break;
    }
    return false;
  case ARM::VRINTZND:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::DPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(ARM::DPRRegClassID).contains(MI->getOperand(1).getReg())) {
      // (VRINTZND DPR:$Dd, DPR:$Dm)
      AsmString = "vrintz.f32.f32	$Dd, $Dm";
      OpMap.push_back(std::make_pair("Dd", 0));
      OpMap.push_back(std::make_pair("Dm", 1));
      break;
    }
    return false;
  case ARM::VRINTZNQ:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::QPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(ARM::QPRRegClassID).contains(MI->getOperand(1).getReg())) {
      // (VRINTZNQ QPR:$Qd, QPR:$Qm)
      AsmString = "vrintz.f32.f32	$Qd, $Qm";
      OpMap.push_back(std::make_pair("Qd", 0));
      OpMap.push_back(std::make_pair("Qm", 1));
      break;
    }
    return false;
  case ARM::tMOVr:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == ARM::R8 &&
        MI->getOperand(1).getReg() == ARM::R8 &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 14 &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (tMOVr R8, R8, 14, 0)
      AsmString = "nop";
      break;
    }
    return false;
  }

  std::pair<StringRef, StringRef> ASM = AsmString.split(' ');
  OS << '\t' << ASM.first;
  if (!ASM.second.empty()) {
    OS << '\t';
    for (StringRef::iterator
         I = ASM.second.begin(), E = ASM.second.end(); I != E; ) {
      if (*I == '$') {
        StringRef::iterator Start = ++I;
        while (I != E &&
               ((*I >= 'a' && *I <= 'z') ||
                (*I >= 'A' && *I <= 'Z') ||
                (*I >= '0' && *I <= '9') ||
                *I == '_'))
          ++I;
        StringRef Name(Start, I - Start);
        printOperand(MI, getMapOperandNumber(OpMap, Name), OS);
      } else {
        OS << *I++;
      }
    }
  }

  return true;
}

#endif // PRINT_ALIAS_INSTR
