/*===- TableGen'erated file -------------------------------------*- C++ -*-===*\
|*                                                                            *|
|*Assembly Writer Source Fragment                                             *|
|*                                                                            *|
|* Automatically generated file, do not edit!                                 *|
|*                                                                            *|
\*===----------------------------------------------------------------------===*/

/// printInstruction - This method is automatically generated by tablegen
/// from the instruction set description.
void SparcAsmPrinter::printInstruction(const MachineInstr *MI, raw_ostream &O) {
  static const uint32_t OpInfo[] = {
    0U,	// PHI
    0U,	// INLINEASM
    0U,	// PROLOG_LABEL
    0U,	// EH_LABEL
    0U,	// GC_LABEL
    0U,	// KILL
    0U,	// EXTRACT_SUBREG
    0U,	// INSERT_SUBREG
    0U,	// IMPLICIT_DEF
    0U,	// SUBREG_TO_REG
    0U,	// COPY_TO_REGCLASS
    794U,	// DBG_VALUE
    0U,	// REG_SEQUENCE
    0U,	// COPY
    787U,	// BUNDLE
    804U,	// LIFETIME_START
    774U,	// LIFETIME_END
    1107U,	// ADDCCri
    1107U,	// ADDCCrr
    1566U,	// ADDXri
    1566U,	// ADDXrr
    1135U,	// ADDri
    1135U,	// ADDrr
    18453U,	// ADJCALLSTACKDOWN
    18472U,	// ADJCALLSTACKUP
    1312U,	// ANDNri
    1312U,	// ANDNrr
    1169U,	// ANDri
    1169U,	// ANDrr
    18489U,	// BA
    36718U,	// BCOND
    4407U,	// BINDri
    4407U,	// BINDrr
    53102U,	// BPXCC
    18692U,	// CALL
    198955U,	// CMPri
    198955U,	// CMPrr
    83122U,	// FABSD
    83324U,	// FABSQ
    83429U,	// FABSS
    1140U,	// FADDD
    1347U,	// FADDQ
    1460U,	// FADDS
    36717U,	// FBCOND
    329899U,	// FCMPD
    330101U,	// FCMPQ
    330206U,	// FCMPS
    1222U,	// FDIVD
    1424U,	// FDIVQ
    1524U,	// FDIVS
    1361U,	// FDMULQ
    83183U,	// FDTOI
    83296U,	// FDTOQ
    83401U,	// FDTOS
    83094U,	// FITOD
    83303U,	// FITOQ
    83408U,	// FITOS
    900U,	// FLUSHW
    83149U,	// FMOVD
    104304U,	// FMOVD_FCC
    120688U,	// FMOVD_ICC
    448368U,	// FMOVD_XCC
    83351U,	// FMOVQ
    83451U,	// FMOVS
    104314U,	// FMOVS_FCC
    120698U,	// FMOVS_ICC
    448378U,	// FMOVS_XCC
    1154U,	// FMULD
    1369U,	// FMULQ
    1474U,	// FMULS
    83067U,	// FNEGD
    83274U,	// FNEGQ
    83387U,	// FNEGS
    83101U,	// FQTOD
    83190U,	// FQTOI
    83415U,	// FQTOS
    1161U,	// FSMULD
    83129U,	// FSQRTD
    83331U,	// FSQRTQ
    83436U,	// FSQRTS
    83108U,	// FSTOD
    83197U,	// FSTOI
    83310U,	// FSTOQ
    1128U,	// FSUBD
    1340U,	// FSUBQ
    1453U,	// FSUBS
    6150U,	// GETPCX
    4356U,	// JMPLri
    4356U,	// JMPLrr
    8001U,	// LDDFri
    8001U,	// LDDFrr
    8007U,	// LDFri
    8007U,	// LDFrr
    8026U,	// LDQFri
    8026U,	// LDQFrr
    7987U,	// LDSBri
    7987U,	// LDSBrr
    8012U,	// LDSHri
    8012U,	// LDSHrr
    8032U,	// LDSWri
    8032U,	// LDSWrr
    7994U,	// LDUBri
    7994U,	// LDUBrr
    8019U,	// LDUHri
    8019U,	// LDUHrr
    8039U,	// LDXri
    8039U,	// LDXrr
    8007U,	// LDri
    8007U,	// LDrr
    8303U,	// LEA_ADDri
    104320U,	// MOVFCCri
    104320U,	// MOVFCCrr
    120704U,	// MOVICCri
    120704U,	// MOVICCrr
    448384U,	// MOVXCCri
    448384U,	// MOVXCCrr
    1584U,	// MULXri
    1584U,	// MULXrr
    886U,	// NOP
    1318U,	// ORNri
    1318U,	// ORNrr
    1440U,	// ORri
    1440U,	// ORrr
    83042U,	// POPCrr
    18445U,	// RDY
    1236U,	// RESTOREri
    1236U,	// RESTORErr
    19183U,	// RET
    19192U,	// RETL
    1245U,	// SAVEri
    1245U,	// SAVErr
    1595U,	// SDIVXri
    1595U,	// SDIVXrr
    1542U,	// SDIVri
    1542U,	// SDIVrr
    585U,	// SELECT_CC_DFP_FCC
    668U,	// SELECT_CC_DFP_ICC
    613U,	// SELECT_CC_FP_FCC
    696U,	// SELECT_CC_FP_ICC
    640U,	// SELECT_CC_Int_FCC
    723U,	// SELECT_CC_Int_ICC
    83176U,	// SETHIi
    1572U,	// SLLXri
    1572U,	// SLLXrr
    1290U,	// SLLri
    1290U,	// SLLrr
    1300U,	// SMULri
    1300U,	// SMULrr
    1554U,	// SRAXri
    1554U,	// SRAXrr
    1085U,	// SRAri
    1085U,	// SRArr
    1578U,	// SRLXri
    1578U,	// SRLXrr
    1295U,	// SRLri
    1295U,	// SRLrr
    9282U,	// STBri
    9282U,	// STBrr
    9409U,	// STDFri
    9217U,	// STDFrr
    9730U,	// STFri
    9730U,	// STFrr
    9443U,	// STHri
    9443U,	// STHrr
    9611U,	// STQFri
    9223U,	// STQFrr
    9782U,	// STXri
    9782U,	// STXrr
    9730U,	// STri
    9730U,	// STrr
    1100U,	// SUBCCri
    1100U,	// SUBCCrr
    1114U,	// SUBXCCrr
    1560U,	// SUBXri
    1560U,	// SUBXrr
    1095U,	// SUBri
    1095U,	// SUBrr
    769U,	// TA3
    1602U,	// UDIVXri
    1602U,	// UDIVXrr
    1548U,	// UDIVri
    1548U,	// UDIVrr
    1306U,	// UMULri
    1306U,	// UMULrr
    18736U,	// UNIMP
    592297U,	// WRYri
    592297U,	// WRYrr
    1438U,	// XNORri
    1438U,	// XNORrr
    1444U,	// XORri
    1444U,	// XORrr
    0U
  };

  const char AsmStrs[] = {
  /* 0 */ 's', 't', 'd', 32, 32, 0,
  /* 6 */ 's', 't', 'q', 32, 32, 0,
  /* 12 */ 'r', 'd', 32, '%', 'y', ',', 32, 0,
  /* 20 */ '!', 'A', 'D', 'J', 'C', 'A', 'L', 'L', 'S', 'T', 'A', 'C', 'K', 'D', 'O', 'W', 'N', 32, 0,
  /* 39 */ '!', 'A', 'D', 'J', 'C', 'A', 'L', 'L', 'S', 'T', 'A', 'C', 'K', 'U', 'P', 32, 0,
  /* 56 */ 'b', 'a', 32, 0,
  /* 60 */ 's', 'r', 'a', 32, 0,
  /* 65 */ 's', 't', 'b', 32, 0,
  /* 70 */ 's', 'u', 'b', 32, 0,
  /* 75 */ 's', 'u', 'b', 'c', 'c', 32, 0,
  /* 82 */ 'a', 'd', 'd', 'c', 'c', 32, 0,
  /* 89 */ 's', 'u', 'b', 'x', 'c', 'c', 32, 0,
  /* 97 */ 'p', 'o', 'p', 'c', 32, 0,
  /* 103 */ 'f', 's', 'u', 'b', 'd', 32, 0,
  /* 110 */ 'a', 'd', 'd', 32, 0,
  /* 115 */ 'f', 'a', 'd', 'd', 'd', 32, 0,
  /* 122 */ 'f', 'n', 'e', 'g', 'd', 32, 0,
  /* 129 */ 'f', 'm', 'u', 'l', 'd', 32, 0,
  /* 136 */ 'f', 's', 'm', 'u', 'l', 'd', 32, 0,
  /* 144 */ 'a', 'n', 'd', 32, 0,
  /* 149 */ 'f', 'i', 't', 'o', 'd', 32, 0,
  /* 156 */ 'f', 'q', 't', 'o', 'd', 32, 0,
  /* 163 */ 'f', 's', 't', 'o', 'd', 32, 0,
  /* 170 */ 'f', 'c', 'm', 'p', 'd', 32, 0,
  /* 177 */ 'f', 'a', 'b', 's', 'd', 32, 0,
  /* 184 */ 'f', 's', 'q', 'r', 't', 'd', 32, 0,
  /* 192 */ 's', 't', 'd', 32, 0,
  /* 197 */ 'f', 'd', 'i', 'v', 'd', 32, 0,
  /* 204 */ 'f', 'm', 'o', 'v', 'd', 32, 0,
  /* 211 */ 'r', 'e', 's', 't', 'o', 'r', 'e', 32, 0,
  /* 220 */ 's', 'a', 'v', 'e', 32, 0,
  /* 226 */ 's', 't', 'h', 32, 0,
  /* 231 */ 's', 'e', 't', 'h', 'i', 32, 0,
  /* 238 */ 'f', 'd', 't', 'o', 'i', 32, 0,
  /* 245 */ 'f', 'q', 't', 'o', 'i', 32, 0,
  /* 252 */ 'f', 's', 't', 'o', 'i', 32, 0,
  /* 259 */ 'c', 'a', 'l', 'l', 32, 0,
  /* 265 */ 's', 'l', 'l', 32, 0,
  /* 270 */ 's', 'r', 'l', 32, 0,
  /* 275 */ 's', 'm', 'u', 'l', 32, 0,
  /* 281 */ 'u', 'm', 'u', 'l', 32, 0,
  /* 287 */ 'a', 'n', 'd', 'n', 32, 0,
  /* 293 */ 'o', 'r', 'n', 32, 0,
  /* 298 */ 'c', 'm', 'p', 32, 0,
  /* 303 */ 'u', 'n', 'i', 'm', 'p', 32, 0,
  /* 310 */ 'j', 'm', 'p', 32, 0,
  /* 315 */ 'f', 's', 'u', 'b', 'q', 32, 0,
  /* 322 */ 'f', 'a', 'd', 'd', 'q', 32, 0,
  /* 329 */ 'f', 'n', 'e', 'g', 'q', 32, 0,
  /* 336 */ 'f', 'd', 'm', 'u', 'l', 'q', 32, 0,
  /* 344 */ 'f', 'm', 'u', 'l', 'q', 32, 0,
  /* 351 */ 'f', 'd', 't', 'o', 'q', 32, 0,
  /* 358 */ 'f', 'i', 't', 'o', 'q', 32, 0,
  /* 365 */ 'f', 's', 't', 'o', 'q', 32, 0,
  /* 372 */ 'f', 'c', 'm', 'p', 'q', 32, 0,
  /* 379 */ 'f', 'a', 'b', 's', 'q', 32, 0,
  /* 386 */ 'f', 's', 'q', 'r', 't', 'q', 32, 0,
  /* 394 */ 's', 't', 'q', 32, 0,
  /* 399 */ 'f', 'd', 'i', 'v', 'q', 32, 0,
  /* 406 */ 'f', 'm', 'o', 'v', 'q', 32, 0,
  /* 413 */ 'x', 'n', 'o', 'r', 32, 0,
  /* 419 */ 'x', 'o', 'r', 32, 0,
  /* 424 */ 'w', 'r', 32, 0,
  /* 428 */ 'f', 's', 'u', 'b', 's', 32, 0,
  /* 435 */ 'f', 'a', 'd', 'd', 's', 32, 0,
  /* 442 */ 'f', 'n', 'e', 'g', 's', 32, 0,
  /* 449 */ 'f', 'm', 'u', 'l', 's', 32, 0,
  /* 456 */ 'f', 'd', 't', 'o', 's', 32, 0,
  /* 463 */ 'f', 'i', 't', 'o', 's', 32, 0,
  /* 470 */ 'f', 'q', 't', 'o', 's', 32, 0,
  /* 477 */ 'f', 'c', 'm', 'p', 's', 32, 0,
  /* 484 */ 'f', 'a', 'b', 's', 's', 32, 0,
  /* 491 */ 'f', 's', 'q', 'r', 't', 's', 32, 0,
  /* 499 */ 'f', 'd', 'i', 'v', 's', 32, 0,
  /* 506 */ 'f', 'm', 'o', 'v', 's', 32, 0,
  /* 513 */ 's', 't', 32, 0,
  /* 517 */ 's', 'd', 'i', 'v', 32, 0,
  /* 523 */ 'u', 'd', 'i', 'v', 32, 0,
  /* 529 */ 's', 'r', 'a', 'x', 32, 0,
  /* 535 */ 's', 'u', 'b', 'x', 32, 0,
  /* 541 */ 'a', 'd', 'd', 'x', 32, 0,
  /* 547 */ 's', 'l', 'l', 'x', 32, 0,
  /* 553 */ 's', 'r', 'l', 'x', 32, 0,
  /* 559 */ 'm', 'u', 'l', 'x', 32, 0,
  /* 565 */ 's', 't', 'x', 32, 0,
  /* 570 */ 's', 'd', 'i', 'v', 'x', 32, 0,
  /* 577 */ 'u', 'd', 'i', 'v', 'x', 32, 0,
  /* 584 */ ';', 32, 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'D', 'F', 'P', '_', 'F', 'C', 'C', 32, 'P', 'S', 'E', 'U', 'D', 'O', '!', 0,
  /* 612 */ ';', 32, 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'F', 'P', '_', 'F', 'C', 'C', 32, 'P', 'S', 'E', 'U', 'D', 'O', '!', 0,
  /* 639 */ ';', 32, 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'I', 'n', 't', '_', 'F', 'C', 'C', 32, 'P', 'S', 'E', 'U', 'D', 'O', '!', 0,
  /* 667 */ ';', 32, 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'D', 'F', 'P', '_', 'I', 'C', 'C', 32, 'P', 'S', 'E', 'U', 'D', 'O', '!', 0,
  /* 695 */ ';', 32, 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'F', 'P', '_', 'I', 'C', 'C', 32, 'P', 'S', 'E', 'U', 'D', 'O', '!', 0,
  /* 722 */ ';', 32, 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'I', 'n', 't', '_', 'I', 'C', 'C', 32, 'P', 'S', 'E', 'U', 'D', 'O', '!', 0,
  /* 750 */ 'j', 'm', 'p', 32, '%', 'i', '7', '+', 0,
  /* 759 */ 'j', 'm', 'p', 32, '%', 'o', '7', '+', 0,
  /* 768 */ 't', 'a', 32, '3', 0,
  /* 773 */ 'L', 'I', 'F', 'E', 'T', 'I', 'M', 'E', '_', 'E', 'N', 'D', 0,
  /* 786 */ 'B', 'U', 'N', 'D', 'L', 'E', 0,
  /* 793 */ 'D', 'B', 'G', '_', 'V', 'A', 'L', 'U', 'E', 0,
  /* 803 */ 'L', 'I', 'F', 'E', 'T', 'I', 'M', 'E', '_', 'S', 'T', 'A', 'R', 'T', 0,
  /* 818 */ 'l', 'd', 's', 'b', 32, '[', 0,
  /* 825 */ 'l', 'd', 'u', 'b', 32, '[', 0,
  /* 832 */ 'l', 'd', 'd', 32, '[', 0,
  /* 838 */ 'l', 'd', 32, '[', 0,
  /* 843 */ 'l', 'd', 's', 'h', 32, '[', 0,
  /* 850 */ 'l', 'd', 'u', 'h', 32, '[', 0,
  /* 857 */ 'l', 'd', 'q', 32, '[', 0,
  /* 863 */ 'l', 'd', 's', 'w', 32, '[', 0,
  /* 870 */ 'l', 'd', 'x', 32, '[', 0,
  /* 876 */ 'f', 'b', 0,
  /* 879 */ 'f', 'm', 'o', 'v', 'd', 0,
  /* 885 */ 'n', 'o', 'p', 0,
  /* 889 */ 'f', 'm', 'o', 'v', 's', 0,
  /* 895 */ 'm', 'o', 'v', 0,
  /* 899 */ 'f', 'l', 'u', 's', 'h', 'w', 0,
  };

  O << "\t";

  // Emit the opcode for the instruction.
  uint32_t Bits = OpInfo[MI->getOpcode()];
  assert(Bits != 0 && "Cannot print this instruction.");
  O << AsmStrs+(Bits & 1023)-1;


  // Fragment 0 encoded into 4 bits for 10 unique commands.
  switch ((Bits >> 10) & 15) {
  default:   // unreachable.
  case 0:
    // DBG_VALUE, BUNDLE, LIFETIME_START, LIFETIME_END, FLUSHW, NOP, SELECT_C...
    return;
    break;
  case 1:
    // ADDCCri, ADDCCrr, ADDXri, ADDXrr, ADDri, ADDrr, ANDNri, ANDNrr, ANDri,...
    printOperand(MI, 1, O); 
    O << ", "; 
    break;
  case 2:
    // ADJCALLSTACKDOWN, ADJCALLSTACKUP, BA, CALL, CMPri, CMPrr, FCMPD, FCMPQ...
    printOperand(MI, 0, O); 
    break;
  case 3:
    // BCOND, BPXCC, FBCOND
    printCCOperand(MI, 1, O); 
    break;
  case 4:
    // BINDri, BINDrr, JMPLri, JMPLrr
    printMemOperand(MI, 0, O); 
    return;
    break;
  case 5:
    // FMOVD_FCC, FMOVD_ICC, FMOVD_XCC, FMOVS_FCC, FMOVS_ICC, FMOVS_XCC, MOVF...
    printCCOperand(MI, 3, O); 
    break;
  case 6:
    // GETPCX
    printGetPCX(MI, 0, O); 
    return;
    break;
  case 7:
    // LDDFri, LDDFrr, LDFri, LDFrr, LDQFri, LDQFrr, LDSBri, LDSBrr, LDSHri, ...
    printMemOperand(MI, 1, O); 
    O << "], "; 
    printOperand(MI, 0, O); 
    return;
    break;
  case 8:
    // LEA_ADDri
    printMemOperand(MI, 1, O, "arith"); 
    O << ", "; 
    printOperand(MI, 0, O); 
    return;
    break;
  case 9:
    // STBri, STBrr, STDFri, STDFrr, STFri, STFrr, STHri, STHrr, STQFri, STQF...
    printOperand(MI, 2, O); 
    O << ", ["; 
    printMemOperand(MI, 0, O); 
    O << ']'; 
    return;
    break;
  }


  // Fragment 1 encoded into 3 bits for 8 unique commands.
  switch ((Bits >> 14) & 7) {
  default:   // unreachable.
  case 0:
    // ADDCCri, ADDCCrr, ADDXri, ADDXrr, ADDri, ADDrr, ANDNri, ANDNrr, ANDri,...
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 0, O); 
    return;
    break;
  case 1:
    // ADJCALLSTACKDOWN, ADJCALLSTACKUP, BA, CALL, RDY, RET, RETL, UNIMP
    return;
    break;
  case 2:
    // BCOND, FBCOND
    O << ' '; 
    printOperand(MI, 0, O); 
    return;
    break;
  case 3:
    // BPXCC, FMOVD_XCC, FMOVS_XCC, MOVXCCri, MOVXCCrr
    O << " %xcc, "; 
    break;
  case 4:
    // CMPri, CMPrr, FCMPD, FCMPQ, FCMPS, WRYri, WRYrr
    O << ", "; 
    printOperand(MI, 1, O); 
    break;
  case 5:
    // FABSD, FABSQ, FABSS, FDTOI, FDTOQ, FDTOS, FITOD, FITOQ, FITOS, FMOVD, ...
    printOperand(MI, 0, O); 
    return;
    break;
  case 6:
    // FMOVD_FCC, FMOVS_FCC, MOVFCCri, MOVFCCrr
    O << " %fcc0, "; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 0, O); 
    return;
    break;
  case 7:
    // FMOVD_ICC, FMOVS_ICC, MOVICCri, MOVICCrr
    O << " %icc, "; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 0, O); 
    return;
    break;
  }


  // Fragment 2 encoded into 3 bits for 5 unique commands.
  switch ((Bits >> 17) & 7) {
  default:   // unreachable.
  case 0:
    // BPXCC
    printOperand(MI, 0, O); 
    return;
    break;
  case 1:
    // CMPri, CMPrr
    return;
    break;
  case 2:
    // FCMPD, FCMPQ, FCMPS
    O << "\n\tnop"; 
    return;
    break;
  case 3:
    // FMOVD_XCC, FMOVS_XCC, MOVXCCri, MOVXCCrr
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 0, O); 
    return;
    break;
  case 4:
    // WRYri, WRYrr
    O << ", %y"; 
    return;
    break;
  }

}


/// getRegisterName - This method is automatically generated by tblgen
/// from the register set description.  This returns the assembler name
/// for the specified register.
const char *SparcAsmPrinter::getRegisterName(unsigned RegNo) {
  assert(RegNo && RegNo < 116 && "Invalid register number!");

  static const char AsmStrs[] = {
  /* 0 */ 'F', '1', '0', 0,
  /* 4 */ 'F', '2', '0', 0,
  /* 8 */ 'F', '3', '0', 0,
  /* 12 */ 'F', '4', '0', 0,
  /* 16 */ 'F', '5', '0', 0,
  /* 20 */ 'F', '6', '0', 0,
  /* 24 */ 'F', '0', 0,
  /* 27 */ 'G', '0', 0,
  /* 30 */ 'I', '0', 0,
  /* 33 */ 'L', '0', 0,
  /* 36 */ 'O', '0', 0,
  /* 39 */ 'F', '1', '1', 0,
  /* 43 */ 'F', '2', '1', 0,
  /* 47 */ 'F', '3', '1', 0,
  /* 51 */ 'F', '1', 0,
  /* 54 */ 'G', '1', 0,
  /* 57 */ 'I', '1', 0,
  /* 60 */ 'L', '1', 0,
  /* 63 */ 'O', '1', 0,
  /* 66 */ 'F', '1', '2', 0,
  /* 70 */ 'F', '2', '2', 0,
  /* 74 */ 'F', '3', '2', 0,
  /* 78 */ 'F', '4', '2', 0,
  /* 82 */ 'F', '5', '2', 0,
  /* 86 */ 'F', '6', '2', 0,
  /* 90 */ 'F', '2', 0,
  /* 93 */ 'G', '2', 0,
  /* 96 */ 'I', '2', 0,
  /* 99 */ 'L', '2', 0,
  /* 102 */ 'O', '2', 0,
  /* 105 */ 'F', '1', '3', 0,
  /* 109 */ 'F', '2', '3', 0,
  /* 113 */ 'F', '3', 0,
  /* 116 */ 'G', '3', 0,
  /* 119 */ 'I', '3', 0,
  /* 122 */ 'L', '3', 0,
  /* 125 */ 'O', '3', 0,
  /* 128 */ 'F', '1', '4', 0,
  /* 132 */ 'F', '2', '4', 0,
  /* 136 */ 'F', '3', '4', 0,
  /* 140 */ 'F', '4', '4', 0,
  /* 144 */ 'F', '5', '4', 0,
  /* 148 */ 'F', '4', 0,
  /* 151 */ 'G', '4', 0,
  /* 154 */ 'I', '4', 0,
  /* 157 */ 'L', '4', 0,
  /* 160 */ 'O', '4', 0,
  /* 163 */ 'F', '1', '5', 0,
  /* 167 */ 'F', '2', '5', 0,
  /* 171 */ 'F', '5', 0,
  /* 174 */ 'G', '5', 0,
  /* 177 */ 'I', '5', 0,
  /* 180 */ 'L', '5', 0,
  /* 183 */ 'O', '5', 0,
  /* 186 */ 'F', '1', '6', 0,
  /* 190 */ 'F', '2', '6', 0,
  /* 194 */ 'F', '3', '6', 0,
  /* 198 */ 'F', '4', '6', 0,
  /* 202 */ 'F', '5', '6', 0,
  /* 206 */ 'F', '6', 0,
  /* 209 */ 'G', '6', 0,
  /* 212 */ 'L', '6', 0,
  /* 215 */ 'F', '1', '7', 0,
  /* 219 */ 'F', '2', '7', 0,
  /* 223 */ 'F', '7', 0,
  /* 226 */ 'G', '7', 0,
  /* 229 */ 'I', '7', 0,
  /* 232 */ 'L', '7', 0,
  /* 235 */ 'O', '7', 0,
  /* 238 */ 'F', '1', '8', 0,
  /* 242 */ 'F', '2', '8', 0,
  /* 246 */ 'F', '3', '8', 0,
  /* 250 */ 'F', '4', '8', 0,
  /* 254 */ 'F', '5', '8', 0,
  /* 258 */ 'F', '8', 0,
  /* 261 */ 'F', '1', '9', 0,
  /* 265 */ 'F', '2', '9', 0,
  /* 269 */ 'F', '9', 0,
  /* 272 */ 'F', 'C', 'C', 0,
  /* 276 */ 'I', 'C', 'C', 0,
  /* 280 */ 'F', 'P', 0,
  /* 283 */ 'S', 'P', 0,
  /* 286 */ 'Y', 0,
  };

  static const uint32_t RegAsmOffset[] = {
    272, 276, 286, 24, 90, 148, 206, 258, 0, 66, 128, 186, 238, 4, 
    70, 132, 190, 242, 8, 74, 136, 194, 246, 12, 78, 140, 198, 250, 
    16, 82, 144, 202, 254, 20, 86, 24, 51, 90, 113, 148, 171, 206, 
    223, 258, 269, 0, 39, 66, 105, 128, 163, 186, 215, 238, 261, 4, 
    43, 70, 109, 132, 167, 190, 219, 242, 265, 8, 47, 27, 54, 93, 
    116, 151, 174, 209, 226, 30, 57, 96, 119, 154, 177, 280, 229, 33, 
    60, 99, 122, 157, 180, 212, 232, 36, 63, 102, 125, 160, 183, 283, 
    235, 24, 148, 258, 66, 186, 4, 132, 242, 74, 194, 12, 140, 250, 
    82, 202, 20, 
  };

  assert (*(AsmStrs+RegAsmOffset[RegNo-1]) &&
          "Invalid alt name index for register!");
  return AsmStrs+RegAsmOffset[RegNo-1];
}
