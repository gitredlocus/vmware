/*===- TableGen'erated file -------------------------------------*- C++ -*-===*\
|*                                                                            *|
|*Assembly Writer Source Fragment                                             *|
|*                                                                            *|
|* Automatically generated file, do not edit!                                 *|
|*                                                                            *|
\*===----------------------------------------------------------------------===*/

/// printInstruction - This method is automatically generated by tablegen
/// from the instruction set description.
void PPCInstPrinter::printInstruction(const MCInst *MI, raw_ostream &O) {
  static const uint32_t OpInfo[] = {
    0U,	// PHI
    0U,	// INLINEASM
    0U,	// PROLOG_LABEL
    0U,	// EH_LABEL
    0U,	// GC_LABEL
    0U,	// KILL
    0U,	// EXTRACT_SUBREG
    0U,	// INSERT_SUBREG
    0U,	// IMPLICIT_DEF
    0U,	// SUBREG_TO_REG
    0U,	// COPY_TO_REGCLASS
    5285U,	// DBG_VALUE
    0U,	// REG_SEQUENCE
    0U,	// COPY
    5278U,	// BUNDLE
    5473U,	// LIFETIME_START
    5265U,	// LIFETIME_END
    9936U,	// ADD4
    8479U,	// ADD4o
    9936U,	// ADD8
    9936U,	// ADD8TLS
    8479U,	// ADD8o
    9842U,	// ADDC
    9842U,	// ADDC8
    8419U,	// ADDC8o
    8419U,	// ADDCo
    10060U,	// ADDE
    10060U,	// ADDE8
    8571U,	// ADDE8o
    8571U,	// ADDEo
    268445855U,	// ADDI
    268445855U,	// ADDI8
    268445333U,	// ADDIC
    268445333U,	// ADDIC8
    268443905U,	// ADDICo
    268446897U,	// ADDIS
    268446897U,	// ADDIS8
    5224U,	// ADDISdtprelHA
    5207U,	// ADDISgotTprelHA
    5179U,	// ADDIStlsgdHA
    5193U,	// ADDIStlsldHA
    5167U,	// ADDIStocHA
    5390U,	// ADDIdtprelL
    5353U,	// ADDItlsgdL
    5365U,	// ADDItlsldL
    5343U,	// ADDItocL
    33564505U,	// ADDME
    33564505U,	// ADDME8
    33563018U,	// ADDME8o
    33563018U,	// ADDMEo
    33564534U,	// ADDZE
    33564534U,	// ADDZE8
    33563051U,	// ADDZE8o
    33563051U,	// ADDZEo
    148763U,	// ADJCALLSTACKDOWN
    2377006U,	// ADJCALLSTACKUP
    10003U,	// AND
    10003U,	// AND8
    8533U,	// AND8o
    9850U,	// ANDC
    9850U,	// ANDC8
    8426U,	// ANDC8o
    8426U,	// ANDCo
    536880024U,	// ANDISo
    536880024U,	// ANDISo8
    536879631U,	// ANDIo
    536879631U,	// ANDIo8
    8533U,	// ANDo
    71574732U,	// ATOMIC_CMP_SWAP_I16
    71574710U,	// ATOMIC_CMP_SWAP_I32
    4641U,	// ATOMIC_CMP_SWAP_I64
    5080U,	// ATOMIC_CMP_SWAP_I8
    4838U,	// ATOMIC_LOAD_ADD_I16
    4401U,	// ATOMIC_LOAD_ADD_I32
    4581U,	// ATOMIC_LOAD_ADD_I64
    5019U,	// ATOMIC_LOAD_ADD_I8
    4881U,	// ATOMIC_LOAD_AND_I16
    4444U,	// ATOMIC_LOAD_AND_I32
    4740U,	// ATOMIC_LOAD_AND_I64
    5060U,	// ATOMIC_LOAD_AND_I8
    4859U,	// ATOMIC_LOAD_NAND_I16
    4422U,	// ATOMIC_LOAD_NAND_I32
    4602U,	// ATOMIC_LOAD_NAND_I64
    5039U,	// ATOMIC_LOAD_NAND_I8
    4940U,	// ATOMIC_LOAD_OR_I16
    4503U,	// ATOMIC_LOAD_OR_I32
    4683U,	// ATOMIC_LOAD_OR_I64
    5119U,	// ATOMIC_LOAD_OR_I8
    4817U,	// ATOMIC_LOAD_SUB_I16
    4380U,	// ATOMIC_LOAD_SUB_I32
    4560U,	// ATOMIC_LOAD_SUB_I64
    4985U,	// ATOMIC_LOAD_SUB_I8
    4919U,	// ATOMIC_LOAD_XOR_I16
    4482U,	// ATOMIC_LOAD_XOR_I32
    4662U,	// ATOMIC_LOAD_XOR_I64
    5100U,	// ATOMIC_LOAD_XOR_I8
    4902U,	// ATOMIC_SWAP_I16
    4465U,	// ATOMIC_SWAP_I32
    4624U,	// ATOMIC_SWAP_I64
    5151U,	// ATOMIC_SWAP_I8
    157068U,	// B
    165198U,	// BA
    439664U,	// BCC
    570736U,	// BCCA
    701808U,	// BCCL
    832880U,	// BCCLA
    963952U,	// BCCTR
    963952U,	// BCCTR8
    1095024U,	// BCCTRL
    1095024U,	// BCCTRL8
    1226096U,	// BCLR
    1357168U,	// BCLRL
    155725U,	// BCLalways
    5568U,	// BCTR
    5568U,	// BCTR8
    5530U,	// BCTRL
    5530U,	// BCTRL8
    159906U,	// BDNZ
    159906U,	// BDNZ8
    165249U,	// BDNZA
    163966U,	// BDNZAm
    163881U,	// BDNZAp
    158148U,	// BDNZL
    165230U,	// BDNZLA
    163950U,	// BDNZLAm
    163865U,	// BDNZLAp
    5561U,	// BDNZLR
    5561U,	// BDNZLR8
    5522U,	// BDNZLRL
    4356U,	// BDNZLRLm
    4324U,	// BDNZLRLp
    4372U,	// BDNZLRm
    4340U,	// BDNZLRp
    155789U,	// BDNZLm
    155704U,	// BDNZLp
    155803U,	// BDNZm
    155718U,	// BDNZp
    159875U,	// BDZ
    159875U,	// BDZ8
    165243U,	// BDZA
    163959U,	// BDZAm
    163874U,	// BDZAp
    158142U,	// BDZL
    165223U,	// BDZLA
    163942U,	// BDZLAm
    163857U,	// BDZLAp
    5555U,	// BDZLR
    5555U,	// BDZLR8
    5515U,	// BDZLRL
    4348U,	// BDZLRLm
    4316U,	// BDZLRLp
    4365U,	// BDZLRm
    4333U,	// BDZLRp
    155782U,	// BDZLm
    155697U,	// BDZLp
    155797U,	// BDZm
    155712U,	// BDZp
    158053U,	// BL
    158053U,	// BL8
    1468773U,	// BL8_NOP
    1493349U,	// BL8_NOP_TLS
    182629U,	// BL8_TLS
    165212U,	// BLA
    165212U,	// BLA8
    1475932U,	// BLA8_NOP
    5551U,	// BLR
    5510U,	// BLRL
    2952800429U,	// CLRLSLDI
    2952798715U,	// CLRLSLDIo
    3221235999U,	// CLRLSLWI
    3221234260U,	// CLRLSLWIo
    805316806U,	// CLRRDI
    805315094U,	// CLRRDIo
    1073752384U,	// CLRRWI
    1073750641U,	// CLRRWIo
    10021U,	// CMPD
    268445887U,	// CMPDI
    9988U,	// CMPLD
    536881317U,	// CMPLDI
    11855U,	// CMPLW
    536881431U,	// CMPLWI
    11885U,	// CMPW
    268446009U,	// CMPWI
    33564484U,	// CNTLZD
    33562994U,	// CNTLZDo
    33566470U,	// CNTLZW
    33563744U,	// CNTLZWo
    4803U,	// CR6SET
    4789U,	// CR6UNSET
    10008U,	// CRAND
    9848U,	// CRANDC
    11811U,	// CREQV
    10000U,	// CRNAND
    11109U,	// CRNOR
    11122U,	// CROR
    9905U,	// CRORC
    6303267U,	// CRSET
    6302589U,	// CRUNSET
    11133U,	// CRXOR
    58700U,	// DCBA
    59269U,	// DCBF
    59526U,	// DCBI
    60792U,	// DCBST
    60773U,	// DCBT
    60804U,	// DCBTST
    61560U,	// DCBZ
    59831U,	// DCBZL
    10046U,	// DIVD
    11733U,	// DIVDU
    9181U,	// DIVDUo
    8555U,	// DIVDo
    12032U,	// DIVW
    11780U,	// DIVWU
    9198U,	// DIVWUo
    9305U,	// DIVWo
    68811U,	// DSS
    5503U,	// DSSALL
    77183U,	// DST
    77183U,	// DST64
    77196U,	// DSTST
    77196U,	// DSTST64
    77209U,	// DSTSTT
    77209U,	// DSTSTT64
    77203U,	// DSTT
    77203U,	// DSTT64
    5239U,	// DYNALLOC
    4960U,	// DYNALLOC8
    4523U,	// EH_SjLj_LongJmp32
    4703U,	// EH_SjLj_LongJmp64
    4542U,	// EH_SjLj_SetJmp32
    4722U,	// EH_SjLj_SetJmp64
    155649U,	// EH_SjLj_Setup
    5536U,	// EIEIO
    11813U,	// EQV
    11813U,	// EQV8
    9213U,	// EQV8o
    9213U,	// EQVo
    2952800439U,	// EXTLDI
    2952798726U,	// EXTLDIo
    3221236017U,	// EXTLWI
    3221234280U,	// EXTLWIo
    2952800478U,	// EXTRDI
    2952798769U,	// EXTRDIo
    3221236056U,	// EXTRWI
    3221234316U,	// EXTRWIo
    33564153U,	// EXTSB
    33564153U,	// EXTSB8
    33564153U,	// EXTSB8_32_64
    33562797U,	// EXTSB8o
    33562797U,	// EXTSBo
    33564716U,	// EXTSH
    33564716U,	// EXTSH8
    33564716U,	// EXTSH8_32_64
    33563093U,	// EXTSH8o
    33563093U,	// EXTSHo
    33566365U,	// EXTSW
    33566365U,	// EXTSW_32_64
    33563697U,	// EXTSW_32_64o
    33563697U,	// EXTSWo
    33565619U,	// FABSD
    33563448U,	// FABSDo
    33565619U,	// FABSS
    33563448U,	// FABSSo
    9935U,	// FADD
    11280U,	// FADDS
    9058U,	// FADDSo
    8478U,	// FADDo
    0U,	// FADDrtz
    33564406U,	// FCFID
    33565736U,	// FCFIDS
    33563517U,	// FCFIDSo
    33566146U,	// FCFIDU
    33565930U,	// FCFIDUS
    33563569U,	// FCFIDUSo
    33563604U,	// FCFIDUo
    33562942U,	// FCFIDo
    11746U,	// FCMPUD
    11746U,	// FCMPUS
    10857U,	// FCPSGND
    8908U,	// FCPSGNDo
    10857U,	// FCPSGNS
    8908U,	// FCPSGNSo
    33566888U,	// FCTIDUZ
    33563785U,	// FCTIDUZo
    33566856U,	// FCTIDZ
    33563769U,	// FCTIDZo
    33566897U,	// FCTIWUZ
    33563795U,	// FCTIWUZo
    33566906U,	// FCTIWZ
    33563805U,	// FCTIWZo
    11805U,	// FDIV
    11543U,	// FDIVS
    9147U,	// FDIVSo
    9206U,	// FDIVo
    2147493589U,	// FMADD
    2147494935U,	// FMADDS
    2147492714U,	// FMADDSo
    2147492133U,	// FMADDo
    33565536U,	// FMR
    33563430U,	// FMRo
    2147493453U,	// FMSUB
    2147494911U,	// FMSUBS
    2147492687U,	// FMSUBSo
    2147492039U,	// FMSUBo
    10660U,	// FMUL
    11460U,	// FMULS
    9120U,	// FMULSo
    8877U,	// FMULo
    33565625U,	// FNABSD
    33563455U,	// FNABSDo
    33565625U,	// FNABSS
    33563455U,	// FNABSSo
    33564597U,	// FNEGD
    33563075U,	// FNEGDo
    33564597U,	// FNEGS
    33563075U,	// FNEGSo
    2147493596U,	// FNMADD
    2147494943U,	// FNMADDS
    2147492723U,	// FNMADDSo
    2147492141U,	// FNMADDo
    2147493460U,	// FNMSUB
    2147494919U,	// FNMSUBS
    2147492696U,	// FNMSUBSo
    2147492047U,	// FNMSUBo
    33564520U,	// FRE
    33565744U,	// FRES
    33563526U,	// FRESo
    33563035U,	// FREo
    33565225U,	// FRIMD
    33563316U,	// FRIMDo
    33565225U,	// FRIMS
    33563316U,	// FRIMSo
    33565304U,	// FRIND
    33563349U,	// FRINDo
    33565304U,	// FRINS
    33563349U,	// FRINSo
    33565456U,	// FRIPD
    33563399U,	// FRIPDo
    33565456U,	// FRIPS
    33563399U,	// FRIPSo
    33566876U,	// FRIZD
    33563778U,	// FRIZDo
    33566876U,	// FRIZS
    33563778U,	// FRIZSo
    33565462U,	// FRSP
    33563406U,	// FRSPo
    33564525U,	// FRSQRTE
    33565750U,	// FRSQRTES
    33563533U,	// FRSQRTESo
    33563041U,	// FRSQRTEo
    2147494269U,	// FSELD
    2147492518U,	// FSELDo
    2147494269U,	// FSELS
    2147492518U,	// FSELSo
    33566065U,	// FSQRT
    33565922U,	// FSQRTS
    33563560U,	// FSQRTSo
    33563587U,	// FSQRTo
    9799U,	// FSUB
    11256U,	// FSUBS
    9031U,	// FSUBSo
    8384U,	// FSUBo
    5439U,	// GETtlsADDR
    5425U,	// GETtlsldADDR
    59532U,	// ICBI
    3221236009U,	// INSLWI
    3221234271U,	// INSLWIo
    2952800462U,	// INSRDI
    2952798751U,	// INSRDIo
    3221236040U,	// INSRWI
    3221234298U,	// INSRWIo
    2147494275U,	// ISEL
    2147494275U,	// ISEL8
    5490U,	// ISYNC
    8398173U,	// LA
    10495325U,	// LAx
    10498174U,	// LBZ
    10498174U,	// LBZ8
    12594699U,	// LBZU
    12594699U,	// LBZU8
    14692385U,	// LBZUX
    14692385U,	// LBZUX8
    37761118U,	// LBZX
    37761118U,	// LBZX8
    10495744U,	// LD
    37760893U,	// LDARX
    37760907U,	// LDBRX
    12594634U,	// LDU
    14692336U,	// LDUX
    37760836U,	// LDX
    5377U,	// LDgotTprelL
    1585351U,	// LDinto_toc
    5496U,	// LDtoc
    5463U,	// LDtocCPT
    5325U,	// LDtocJTI
    5335U,	// LDtocL
    4304U,	// LDtoc_restore
    10495716U,	// LFD
    12594605U,	// LFDU
    14692321U,	// LFDUX
    37760823U,	// LFDX
    37760788U,	// LFIWAX
    37761130U,	// LFIWZX
    10497094U,	// LFS
    12594665U,	// LFSU
    14692363U,	// LFSUX
    37760959U,	// LFSX
    10495319U,	// LHA
    10495319U,	// LHA8
    12594593U,	// LHAU
    12594593U,	// LHAU8
    14692300U,	// LHAUX
    14692300U,	// LHAUX8
    37760782U,	// LHAX
    37760782U,	// LHAX8
    37760922U,	// LHBRX
    10498192U,	// LHZ
    10498192U,	// LHZ8
    12594705U,	// LHZU
    12594705U,	// LHZU8
    14692392U,	// LHZUX
    14692392U,	// LHZUX8
    37761124U,	// LHZX
    37761124U,	// LHZX8
    16787694U,	// LI
    16787694U,	// LI8
    16788664U,	// LIS
    16788664U,	// LIS8
    10497634U,	// LMW
    37760802U,	// LVEBX
    37760847U,	// LVEHX
    37761089U,	// LVEWX
    37759390U,	// LVSL
    37759896U,	// LVSR
    37761078U,	// LVX
    37759402U,	// LVXL
    10495350U,	// LWA
    37760900U,	// LWARX
    14692307U,	// LWAUX
    37760796U,	// LWAX
    37760796U,	// LWAX_32
    10495350U,	// LWA_32
    37760937U,	// LWBRX
    10498242U,	// LWZ
    10498242U,	// LWZ8
    12594711U,	// LWZU
    12594711U,	// LWZU8
    14692399U,	// LWZUX
    14692399U,	// LWZUX8
    37761138U,	// LWZX
    37761138U,	// LWZX8
    33564561U,	// MCRF
    142128U,	// MFCR
    142128U,	// MFCR8
    142245U,	// MFCTR
    142245U,	// MFCTR8
    142400U,	// MFFS
    142164U,	// MFLR
    142164U,	// MFLR8
    18884503U,	// MFOCRF
    18884503U,	// MFOCRF8
    33565578U,	// MFSPR
    33564168U,	// MFTB
    1715082U,	// MFTB8
    1846154U,	// MFVRSAVE
    1846154U,	// MFVRSAVEv
    142142U,	// MFVSCR
    33564583U,	// MTCRF
    33564583U,	// MTCRF8
    142252U,	// MTCTR
    142252U,	// MTCTR8
    142252U,	// MTCTR8loop
    142252U,	// MTCTRloop
    214182U,	// MTFSB0
    214190U,	// MTFSB1
    33564590U,	// MTFSF
    142170U,	// MTLR
    142170U,	// MTLR8
    92063U,	// MTOCRF
    92063U,	// MTOCRF8
    33565585U,	// MTSPR
    139354U,	// MTVRSAVE
    229466U,	// MTVRSAVEv
    142150U,	// MTVSCR
    9967U,	// MULHD
    11706U,	// MULHDU
    9163U,	// MULHDUo
    8502U,	// MULHDo
    11833U,	// MULHW
    11766U,	// MULHWU
    9189U,	// MULHWUo
    9226U,	// MULHWo
    9981U,	// MULLD
    8518U,	// MULLDo
    268445931U,	// MULLI
    268445931U,	// MULLI8
    11848U,	// MULLW
    9234U,	// MULLWo
    5451U,	// MovePCtoLR
    5138U,	// MovePCtoLR8
    10002U,	// NAND
    10002U,	// NAND8
    8532U,	// NAND8o
    8532U,	// NANDo
    33564598U,	// NEG
    33564598U,	// NEG8
    33563076U,	// NEG8o
    33563076U,	// NEGo
    5547U,	// NOP
    11111U,	// NOR
    11111U,	// NOR8
    9004U,	// NOR8o
    9004U,	// NORo
    11112U,	// OR
    11112U,	// OR8
    9005U,	// OR8o
    9907U,	// ORC
    9907U,	// ORC8
    8465U,	// ORC8o
    8465U,	// ORCo
    536881419U,	// ORI
    536881419U,	// ORI8
    536882366U,	// ORIS
    536882366U,	// ORIS8
    9005U,	// ORo
    33564464U,	// POPCNTD
    33562977U,	// POPCNTDo
    33566388U,	// POPCNTW
    33563705U,	// POPCNTWo
    5403U,	// RESTORE_CR
    5295U,	// RESTORE_VRSAVE
    2147494254U,	// RLDCL
    2147492501U,	// RLDCLo
    2147494697U,	// RLDCR
    2147492629U,	// RLDCRo
    2952799900U,	// RLDIC
    2952800629U,	// RLDICL
    2952800629U,	// RLDICL_32_64
    2952798877U,	// RLDICLo
    2952801078U,	// RLDICR
    2952799005U,	// RLDICRo
    2952798473U,	// RLDICo
    121645298U,	// RLDIMI
    121643578U,	// RLDIMIo
    155199738U,	// RLWIMI
    155198019U,	// RLWIMIo
    3221236271U,	// RLWINM
    3221236271U,	// RLWINM8
    3221234363U,	// RLWINM8o
    3221234363U,	// RLWINMo
    2147494455U,	// RLWNM
    2147492548U,	// RLWNMo
    805316822U,	// ROTRDI
    805315112U,	// ROTRDIo
    1073752400U,	// ROTRWI
    1073750659U,	// ROTRWIo
    140984U,	// SC
    4761U,	// SELECT_CC_F4
    4971U,	// SELECT_CC_F8
    4775U,	// SELECT_CC_I4
    5005U,	// SELECT_CC_I8
    5249U,	// SELECT_CC_VRRC
    9995U,	// SLD
    805316785U,	// SLDI
    805315071U,	// SLDIo
    8526U,	// SLDo
    11869U,	// SLW
    1073752355U,	// SLWI
    1073750616U,	// SLWIo
    9242U,	// SLWo
    5415U,	// SPILL_CR
    5311U,	// SPILL_VRSAVE
    9929U,	// SRAD
    805316760U,	// SRADI
    805315059U,	// SRADIo
    8471U,	// SRADo
    11819U,	// SRAW
    1073752336U,	// SRAWI
    1073750604U,	// SRAWIo
    9219U,	// SRAWo
    10027U,	// SRD
    805316816U,	// SRDI
    805315105U,	// SRDIo
    8539U,	// SRDo
    11892U,	// SRW
    1073752394U,	// SRWI
    1073750652U,	// SRWIo
    9248U,	// SRWo
    10495510U,	// STB
    10495510U,	// STB8
    12684711U,	// STBU
    12684711U,	// STBU8
    14782426U,	// STBUX
    14782426U,	// STBUX8
    37760817U,	// STBX
    37760817U,	// STBX8
    10495801U,	// STD
    37760914U,	// STDBRX
    37758057U,	// STDCX
    12684751U,	// STDU
    14782454U,	// STDUX
    37760841U,	// STDX
    10495721U,	// STFD
    12684723U,	// STFDU
    14782440U,	// STFDUX
    37760829U,	// STFDX
    37761104U,	// STFIWX
    10497099U,	// STFS
    12684783U,	// STFSU
    14782482U,	// STFSUX
    37760965U,	// STFSX
    10496067U,	// STH
    10496067U,	// STH8
    37760929U,	// STHBRX
    12684764U,	// STHU
    12684764U,	// STHU8
    14782468U,	// STHUX
    14782468U,	// STHUX8
    37760862U,	// STHX
    37760862U,	// STHX8
    10497639U,	// STMW
    37760809U,	// STVEBX
    37760854U,	// STVEHX
    37761096U,	// STVEWX
    37761083U,	// STVX
    37759408U,	// STVXL
    10497725U,	// STW
    10497725U,	// STW8
    37760944U,	// STWBRX
    37758065U,	// STWCX
    12684798U,	// STWU
    12684798U,	// STWU8
    14782490U,	// STWUX
    14782490U,	// STWUX8
    37761112U,	// STWX
    37761112U,	// STWX8
    10123U,	// SUBF
    10123U,	// SUBF8
    8636U,	// SUBF8o
    9863U,	// SUBFC
    9863U,	// SUBFC8
    8433U,	// SUBFC8o
    8433U,	// SUBFCo
    10066U,	// SUBFE
    10066U,	// SUBFE8
    8578U,	// SUBFE8o
    8578U,	// SUBFEo
    268445347U,	// SUBFIC
    268445347U,	// SUBFIC8
    33564512U,	// SUBFME
    33564512U,	// SUBFME8
    33563026U,	// SUBFME8o
    33563026U,	// SUBFMEo
    33564541U,	// SUBFZE
    33564541U,	// SUBFZE8
    33563059U,	// SUBFZE8o
    33563059U,	// SUBFZEo
    8636U,	// SUBFo
    268445842U,	// SUBI
    268445326U,	// SUBIC
    268443897U,	// SUBICo
    268446890U,	// SUBIS
    140971U,	// SYNC
    157068U,	// TAILB
    157068U,	// TAILB8
    165198U,	// TAILBA
    165198U,	// TAILBA8
    5568U,	// TAILBCTR
    5568U,	// TAILBCTR8
    33850687U,	// TCRETURNai
    33850594U,	// TCRETURNai8
    33842876U,	// TCRETURNdi
    33842416U,	// TCRETURNdi8
    33827612U,	// TCRETURNri
    33826046U,	// TCRETURNri8
    83765U,	// TD
    268519654U,	// TDI
    5542U,	// TRAP
    85680U,	// TW
    268519776U,	// TWI
    33563916U,	// UPDATE_VRSAVE
    11979U,	// VADDCUW
    10926U,	// VADDFP
    11219U,	// VADDSBS
    11387U,	// VADDSHS
    11569U,	// VADDSWS
    10718U,	// VADDUBM
    11247U,	// VADDUBS
    10767U,	// VADDUHM
    11415U,	// VADDUHS
    10848U,	// VADDUWM
    11596U,	// VADDUWS
    10015U,	// VAND
    9856U,	// VANDC
    9658U,	// VAVGSB
    10221U,	// VAVGSH
    11897U,	// VAVGSW
    9764U,	// VAVGUB
    10321U,	// VAVGUH
    11988U,	// VAVGUW
    188755896U,	// VCFSX
    201338808U,	// VCFSX_0
    188755965U,	// VCFUX
    201338877U,	// VCFUX_0
    10890U,	// VCMPBFP
    8924U,	// VCMPBFPo
    10989U,	// VCMPEQFP
    8945U,	// VCMPEQFPo
    9789U,	// VCMPEQUB
    8373U,	// VCMPEQUBo
    10346U,	// VCMPEQUH
    8669U,	// VCMPEQUHo
    12004U,	// VCMPEQUW
    9283U,	// VCMPEQUWo
    10943U,	// VCMPGEFP
    8934U,	// VCMPGEFPo
    10999U,	// VCMPGTFP
    8956U,	// VCMPGTFPo
    9711U,	// VCMPGTSB
    8354U,	// VCMPGTSBo
    10274U,	// VCMPGTSH
    8650U,	// VCMPGTSHo
    11923U,	// VCMPGTSW
    9254U,	// VCMPGTSWo
    9820U,	// VCMPGTUB
    8408U,	// VCMPGTUBo
    10356U,	// VCMPGTUH
    8680U,	// VCMPGTUHo
    12014U,	// VCMPGTUW
    9294U,	// VCMPGTUWo
    188755285U,	// VCTSXS
    201338197U,	// VCTSXS_0
    188755293U,	// VCTUXS
    201338205U,	// VCTUXS_0
    33565392U,	// VEXPTEFP
    33565366U,	// VLOGEFP
    2147494565U,	// VMADDFP
    11009U,	// VMAXFP
    9728U,	// VMAXSB
    10291U,	// VMAXSH
    11940U,	// VMAXSW
    9830U,	// VMAXUB
    10366U,	// VMAXUH
    12024U,	// VMAXUW
    2147495012U,	// VMHADDSHS
    2147495023U,	// VMHRADDSHS
    10981U,	// VMINFP
    9694U,	// VMINSB
    10257U,	// VMINSH
    11915U,	// VMINSW
    9772U,	// VMINUB
    10329U,	// VMINUH
    11996U,	// VMINUW
    2147494404U,	// VMLADDUHM
    9615U,	// VMRGHB
    10178U,	// VMRGHH
    11825U,	// VMRGHW
    9623U,	// VMRGLB
    10186U,	// VMRGLH
    11840U,	// VMRGLW
    2147494347U,	// VMSUMMBM
    2147494385U,	// VMSUMSHM
    2147495044U,	// VMSUMSHS
    2147494375U,	// VMSUMUBM
    2147494424U,	// VMSUMUHM
    2147495072U,	// VMSUMUHS
    9649U,	// VMULESB
    10212U,	// VMULESH
    9755U,	// VMULEUB
    10312U,	// VMULEUH
    9702U,	// VMULOSB
    10265U,	// VMULOSH
    9780U,	// VMULOUB
    10337U,	// VMULOUH
    2147494547U,	// VNMSUBFP
    11116U,	// VNOR
    11128U,	// VOR
    2147494462U,	// VPERM
    12141U,	// VPKPX
    11472U,	// VPKSHSS
    11507U,	// VPKSHUS
    11481U,	// VPKSWSS
    11525U,	// VPKSWUS
    10821U,	// VPKUHUM
    11516U,	// VPKUHUS
    10830U,	// VPKUWUM
    11534U,	// VPKUWUS
    33565385U,	// VREFP
    33565218U,	// VRFIM
    33565297U,	// VRFIN
    33565449U,	// VRFIP
    33566869U,	// VRFIZ
    9631U,	// VRLB
    10194U,	// VRLH
    11862U,	// VRLW
    33565402U,	// VRSQRTEFP
    2147494281U,	// VSEL
    10655U,	// VSL
    9637U,	// VSLB
    2147494146U,	// VSLDOI
    10200U,	// VSLH
    10878U,	// VSLO
    11868U,	// VSLW
    188753422U,	// VSPLTB
    188753979U,	// VSPLTH
    23078347U,	// VSPLTISB
    23078910U,	// VSPLTISH
    23080577U,	// VSPLTISW
    188755628U,	// VSPLTW
    11161U,	// VSR
    9608U,	// VSRAB
    10171U,	// VSRAH
    11818U,	// VSRAW
    9643U,	// VSRB
    10206U,	// VSRH
    10884U,	// VSRO
    11891U,	// VSRW
    11970U,	// VSUBCUW
    10909U,	// VSUBFP
    11210U,	// VSUBSBS
    11355U,	// VSUBSHS
    11560U,	// VSUBSWS
    10709U,	// VSUBUBM
    11238U,	// VSUBUBS
    10747U,	// VSUBUHM
    11406U,	// VSUBUHS
    10839U,	// VSUBUWM
    11587U,	// VSUBUWS
    11550U,	// VSUM2SWS
    11200U,	// VSUM4SBS
    11345U,	// VSUM4SHS
    11228U,	// VSUM4UBS
    11578U,	// VSUMSWS
    33566564U,	// VUPKHPX
    33564098U,	// VUPKHSB
    33564661U,	// VUPKHSH
    33566580U,	// VUPKLPX
    33564117U,	// VUPKLSB
    33564680U,	// VUPKLSH
    11140U,	// VXOR
    6302596U,	// V_SET0
    6302596U,	// V_SET0B
    6302596U,	// V_SET0H
    1977985U,	// V_SETALLONES
    1977985U,	// V_SETALLONESB
    1977985U,	// V_SETALLONESH
    142699U,	// WAIT
    11135U,	// XOR
    11135U,	// XOR8
    9010U,	// XOR8o
    536881418U,	// XORI
    536881418U,	// XORI8
    536882365U,	// XORIS
    536882365U,	// XORIS8
    9010U,	// XORo
    1342260846U,	// gBC
    1610696018U,	// gBCA
    84894U,	// gBCCTR
    84374U,	// gBCCTRL
    1342261609U,	// gBCL
    1610696033U,	// gBCLA
    84814U,	// gBCLR
    84367U,	// gBCLRL
    0U
  };

  static const uint8_t OpInfo2[] = {
    0U,	// PHI
    0U,	// INLINEASM
    0U,	// PROLOG_LABEL
    0U,	// EH_LABEL
    0U,	// GC_LABEL
    0U,	// KILL
    0U,	// EXTRACT_SUBREG
    0U,	// INSERT_SUBREG
    0U,	// IMPLICIT_DEF
    0U,	// SUBREG_TO_REG
    0U,	// COPY_TO_REGCLASS
    0U,	// DBG_VALUE
    0U,	// REG_SEQUENCE
    0U,	// COPY
    0U,	// BUNDLE
    0U,	// LIFETIME_START
    0U,	// LIFETIME_END
    0U,	// ADD4
    0U,	// ADD4o
    0U,	// ADD8
    0U,	// ADD8TLS
    0U,	// ADD8o
    0U,	// ADDC
    0U,	// ADDC8
    0U,	// ADDC8o
    0U,	// ADDCo
    0U,	// ADDE
    0U,	// ADDE8
    0U,	// ADDE8o
    0U,	// ADDEo
    0U,	// ADDI
    0U,	// ADDI8
    0U,	// ADDIC
    0U,	// ADDIC8
    0U,	// ADDICo
    0U,	// ADDIS
    0U,	// ADDIS8
    0U,	// ADDISdtprelHA
    0U,	// ADDISgotTprelHA
    0U,	// ADDIStlsgdHA
    0U,	// ADDIStlsldHA
    0U,	// ADDIStocHA
    0U,	// ADDIdtprelL
    0U,	// ADDItlsgdL
    0U,	// ADDItlsldL
    0U,	// ADDItocL
    0U,	// ADDME
    0U,	// ADDME8
    0U,	// ADDME8o
    0U,	// ADDMEo
    0U,	// ADDZE
    0U,	// ADDZE8
    0U,	// ADDZE8o
    0U,	// ADDZEo
    0U,	// ADJCALLSTACKDOWN
    0U,	// ADJCALLSTACKUP
    0U,	// AND
    0U,	// AND8
    0U,	// AND8o
    0U,	// ANDC
    0U,	// ANDC8
    0U,	// ANDC8o
    0U,	// ANDCo
    0U,	// ANDISo
    0U,	// ANDISo8
    0U,	// ANDIo
    0U,	// ANDIo8
    0U,	// ANDo
    0U,	// ATOMIC_CMP_SWAP_I16
    0U,	// ATOMIC_CMP_SWAP_I32
    0U,	// ATOMIC_CMP_SWAP_I64
    0U,	// ATOMIC_CMP_SWAP_I8
    0U,	// ATOMIC_LOAD_ADD_I16
    0U,	// ATOMIC_LOAD_ADD_I32
    0U,	// ATOMIC_LOAD_ADD_I64
    0U,	// ATOMIC_LOAD_ADD_I8
    0U,	// ATOMIC_LOAD_AND_I16
    0U,	// ATOMIC_LOAD_AND_I32
    0U,	// ATOMIC_LOAD_AND_I64
    0U,	// ATOMIC_LOAD_AND_I8
    0U,	// ATOMIC_LOAD_NAND_I16
    0U,	// ATOMIC_LOAD_NAND_I32
    0U,	// ATOMIC_LOAD_NAND_I64
    0U,	// ATOMIC_LOAD_NAND_I8
    0U,	// ATOMIC_LOAD_OR_I16
    0U,	// ATOMIC_LOAD_OR_I32
    0U,	// ATOMIC_LOAD_OR_I64
    0U,	// ATOMIC_LOAD_OR_I8
    0U,	// ATOMIC_LOAD_SUB_I16
    0U,	// ATOMIC_LOAD_SUB_I32
    0U,	// ATOMIC_LOAD_SUB_I64
    0U,	// ATOMIC_LOAD_SUB_I8
    0U,	// ATOMIC_LOAD_XOR_I16
    0U,	// ATOMIC_LOAD_XOR_I32
    0U,	// ATOMIC_LOAD_XOR_I64
    0U,	// ATOMIC_LOAD_XOR_I8
    0U,	// ATOMIC_SWAP_I16
    0U,	// ATOMIC_SWAP_I32
    0U,	// ATOMIC_SWAP_I64
    0U,	// ATOMIC_SWAP_I8
    0U,	// B
    0U,	// BA
    0U,	// BCC
    0U,	// BCCA
    0U,	// BCCL
    0U,	// BCCLA
    0U,	// BCCTR
    0U,	// BCCTR8
    0U,	// BCCTRL
    0U,	// BCCTRL8
    0U,	// BCLR
    0U,	// BCLRL
    0U,	// BCLalways
    0U,	// BCTR
    0U,	// BCTR8
    0U,	// BCTRL
    0U,	// BCTRL8
    0U,	// BDNZ
    0U,	// BDNZ8
    0U,	// BDNZA
    0U,	// BDNZAm
    0U,	// BDNZAp
    0U,	// BDNZL
    0U,	// BDNZLA
    0U,	// BDNZLAm
    0U,	// BDNZLAp
    0U,	// BDNZLR
    0U,	// BDNZLR8
    0U,	// BDNZLRL
    0U,	// BDNZLRLm
    0U,	// BDNZLRLp
    0U,	// BDNZLRm
    0U,	// BDNZLRp
    0U,	// BDNZLm
    0U,	// BDNZLp
    0U,	// BDNZm
    0U,	// BDNZp
    0U,	// BDZ
    0U,	// BDZ8
    0U,	// BDZA
    0U,	// BDZAm
    0U,	// BDZAp
    0U,	// BDZL
    0U,	// BDZLA
    0U,	// BDZLAm
    0U,	// BDZLAp
    0U,	// BDZLR
    0U,	// BDZLR8
    0U,	// BDZLRL
    0U,	// BDZLRLm
    0U,	// BDZLRLp
    0U,	// BDZLRm
    0U,	// BDZLRp
    0U,	// BDZLm
    0U,	// BDZLp
    0U,	// BDZm
    0U,	// BDZp
    0U,	// BL
    0U,	// BL8
    0U,	// BL8_NOP
    0U,	// BL8_NOP_TLS
    0U,	// BL8_TLS
    0U,	// BLA
    0U,	// BLA8
    0U,	// BLA8_NOP
    0U,	// BLR
    0U,	// BLRL
    0U,	// CLRLSLDI
    0U,	// CLRLSLDIo
    1U,	// CLRLSLWI
    1U,	// CLRLSLWIo
    0U,	// CLRRDI
    0U,	// CLRRDIo
    0U,	// CLRRWI
    0U,	// CLRRWIo
    0U,	// CMPD
    0U,	// CMPDI
    0U,	// CMPLD
    0U,	// CMPLDI
    0U,	// CMPLW
    0U,	// CMPLWI
    0U,	// CMPW
    0U,	// CMPWI
    0U,	// CNTLZD
    0U,	// CNTLZDo
    0U,	// CNTLZW
    0U,	// CNTLZWo
    0U,	// CR6SET
    0U,	// CR6UNSET
    0U,	// CRAND
    0U,	// CRANDC
    0U,	// CREQV
    0U,	// CRNAND
    0U,	// CRNOR
    0U,	// CROR
    0U,	// CRORC
    0U,	// CRSET
    0U,	// CRUNSET
    0U,	// CRXOR
    0U,	// DCBA
    0U,	// DCBF
    0U,	// DCBI
    0U,	// DCBST
    0U,	// DCBT
    0U,	// DCBTST
    0U,	// DCBZ
    0U,	// DCBZL
    0U,	// DIVD
    0U,	// DIVDU
    0U,	// DIVDUo
    0U,	// DIVDo
    0U,	// DIVW
    0U,	// DIVWU
    0U,	// DIVWUo
    0U,	// DIVWo
    0U,	// DSS
    0U,	// DSSALL
    0U,	// DST
    0U,	// DST64
    0U,	// DSTST
    0U,	// DSTST64
    0U,	// DSTSTT
    0U,	// DSTSTT64
    0U,	// DSTT
    0U,	// DSTT64
    0U,	// DYNALLOC
    0U,	// DYNALLOC8
    0U,	// EH_SjLj_LongJmp32
    0U,	// EH_SjLj_LongJmp64
    0U,	// EH_SjLj_SetJmp32
    0U,	// EH_SjLj_SetJmp64
    0U,	// EH_SjLj_Setup
    0U,	// EIEIO
    0U,	// EQV
    0U,	// EQV8
    0U,	// EQV8o
    0U,	// EQVo
    0U,	// EXTLDI
    0U,	// EXTLDIo
    1U,	// EXTLWI
    1U,	// EXTLWIo
    0U,	// EXTRDI
    0U,	// EXTRDIo
    1U,	// EXTRWI
    1U,	// EXTRWIo
    0U,	// EXTSB
    0U,	// EXTSB8
    0U,	// EXTSB8_32_64
    0U,	// EXTSB8o
    0U,	// EXTSBo
    0U,	// EXTSH
    0U,	// EXTSH8
    0U,	// EXTSH8_32_64
    0U,	// EXTSH8o
    0U,	// EXTSHo
    0U,	// EXTSW
    0U,	// EXTSW_32_64
    0U,	// EXTSW_32_64o
    0U,	// EXTSWo
    0U,	// FABSD
    0U,	// FABSDo
    0U,	// FABSS
    0U,	// FABSSo
    0U,	// FADD
    0U,	// FADDS
    0U,	// FADDSo
    0U,	// FADDo
    0U,	// FADDrtz
    0U,	// FCFID
    0U,	// FCFIDS
    0U,	// FCFIDSo
    0U,	// FCFIDU
    0U,	// FCFIDUS
    0U,	// FCFIDUSo
    0U,	// FCFIDUo
    0U,	// FCFIDo
    0U,	// FCMPUD
    0U,	// FCMPUS
    0U,	// FCPSGND
    0U,	// FCPSGNDo
    0U,	// FCPSGNS
    0U,	// FCPSGNSo
    0U,	// FCTIDUZ
    0U,	// FCTIDUZo
    0U,	// FCTIDZ
    0U,	// FCTIDZo
    0U,	// FCTIWUZ
    0U,	// FCTIWUZo
    0U,	// FCTIWZ
    0U,	// FCTIWZo
    0U,	// FDIV
    0U,	// FDIVS
    0U,	// FDIVSo
    0U,	// FDIVo
    2U,	// FMADD
    2U,	// FMADDS
    2U,	// FMADDSo
    2U,	// FMADDo
    0U,	// FMR
    0U,	// FMRo
    2U,	// FMSUB
    2U,	// FMSUBS
    2U,	// FMSUBSo
    2U,	// FMSUBo
    0U,	// FMUL
    0U,	// FMULS
    0U,	// FMULSo
    0U,	// FMULo
    0U,	// FNABSD
    0U,	// FNABSDo
    0U,	// FNABSS
    0U,	// FNABSSo
    0U,	// FNEGD
    0U,	// FNEGDo
    0U,	// FNEGS
    0U,	// FNEGSo
    2U,	// FNMADD
    2U,	// FNMADDS
    2U,	// FNMADDSo
    2U,	// FNMADDo
    2U,	// FNMSUB
    2U,	// FNMSUBS
    2U,	// FNMSUBSo
    2U,	// FNMSUBo
    0U,	// FRE
    0U,	// FRES
    0U,	// FRESo
    0U,	// FREo
    0U,	// FRIMD
    0U,	// FRIMDo
    0U,	// FRIMS
    0U,	// FRIMSo
    0U,	// FRIND
    0U,	// FRINDo
    0U,	// FRINS
    0U,	// FRINSo
    0U,	// FRIPD
    0U,	// FRIPDo
    0U,	// FRIPS
    0U,	// FRIPSo
    0U,	// FRIZD
    0U,	// FRIZDo
    0U,	// FRIZS
    0U,	// FRIZSo
    0U,	// FRSP
    0U,	// FRSPo
    0U,	// FRSQRTE
    0U,	// FRSQRTES
    0U,	// FRSQRTESo
    0U,	// FRSQRTEo
    2U,	// FSELD
    2U,	// FSELDo
    2U,	// FSELS
    2U,	// FSELSo
    0U,	// FSQRT
    0U,	// FSQRTS
    0U,	// FSQRTSo
    0U,	// FSQRTo
    0U,	// FSUB
    0U,	// FSUBS
    0U,	// FSUBSo
    0U,	// FSUBo
    0U,	// GETtlsADDR
    0U,	// GETtlsldADDR
    0U,	// ICBI
    1U,	// INSLWI
    1U,	// INSLWIo
    0U,	// INSRDI
    0U,	// INSRDIo
    1U,	// INSRWI
    1U,	// INSRWIo
    2U,	// ISEL
    2U,	// ISEL8
    0U,	// ISYNC
    0U,	// LA
    0U,	// LAx
    0U,	// LBZ
    0U,	// LBZ8
    0U,	// LBZU
    0U,	// LBZU8
    0U,	// LBZUX
    0U,	// LBZUX8
    0U,	// LBZX
    0U,	// LBZX8
    0U,	// LD
    0U,	// LDARX
    0U,	// LDBRX
    0U,	// LDU
    0U,	// LDUX
    0U,	// LDX
    0U,	// LDgotTprelL
    0U,	// LDinto_toc
    0U,	// LDtoc
    0U,	// LDtocCPT
    0U,	// LDtocJTI
    0U,	// LDtocL
    0U,	// LDtoc_restore
    0U,	// LFD
    0U,	// LFDU
    0U,	// LFDUX
    0U,	// LFDX
    0U,	// LFIWAX
    0U,	// LFIWZX
    0U,	// LFS
    0U,	// LFSU
    0U,	// LFSUX
    0U,	// LFSX
    0U,	// LHA
    0U,	// LHA8
    0U,	// LHAU
    0U,	// LHAU8
    0U,	// LHAUX
    0U,	// LHAUX8
    0U,	// LHAX
    0U,	// LHAX8
    0U,	// LHBRX
    0U,	// LHZ
    0U,	// LHZ8
    0U,	// LHZU
    0U,	// LHZU8
    0U,	// LHZUX
    0U,	// LHZUX8
    0U,	// LHZX
    0U,	// LHZX8
    0U,	// LI
    0U,	// LI8
    0U,	// LIS
    0U,	// LIS8
    0U,	// LMW
    0U,	// LVEBX
    0U,	// LVEHX
    0U,	// LVEWX
    0U,	// LVSL
    0U,	// LVSR
    0U,	// LVX
    0U,	// LVXL
    0U,	// LWA
    0U,	// LWARX
    0U,	// LWAUX
    0U,	// LWAX
    0U,	// LWAX_32
    0U,	// LWA_32
    0U,	// LWBRX
    0U,	// LWZ
    0U,	// LWZ8
    0U,	// LWZU
    0U,	// LWZU8
    0U,	// LWZUX
    0U,	// LWZUX8
    0U,	// LWZX
    0U,	// LWZX8
    0U,	// MCRF
    0U,	// MFCR
    0U,	// MFCR8
    0U,	// MFCTR
    0U,	// MFCTR8
    0U,	// MFFS
    0U,	// MFLR
    0U,	// MFLR8
    0U,	// MFOCRF
    0U,	// MFOCRF8
    0U,	// MFSPR
    0U,	// MFTB
    0U,	// MFTB8
    0U,	// MFVRSAVE
    0U,	// MFVRSAVEv
    0U,	// MFVSCR
    0U,	// MTCRF
    0U,	// MTCRF8
    0U,	// MTCTR
    0U,	// MTCTR8
    0U,	// MTCTR8loop
    0U,	// MTCTRloop
    0U,	// MTFSB0
    0U,	// MTFSB1
    0U,	// MTFSF
    0U,	// MTLR
    0U,	// MTLR8
    0U,	// MTOCRF
    0U,	// MTOCRF8
    0U,	// MTSPR
    0U,	// MTVRSAVE
    0U,	// MTVRSAVEv
    0U,	// MTVSCR
    0U,	// MULHD
    0U,	// MULHDU
    0U,	// MULHDUo
    0U,	// MULHDo
    0U,	// MULHW
    0U,	// MULHWU
    0U,	// MULHWUo
    0U,	// MULHWo
    0U,	// MULLD
    0U,	// MULLDo
    0U,	// MULLI
    0U,	// MULLI8
    0U,	// MULLW
    0U,	// MULLWo
    0U,	// MovePCtoLR
    0U,	// MovePCtoLR8
    0U,	// NAND
    0U,	// NAND8
    0U,	// NAND8o
    0U,	// NANDo
    0U,	// NEG
    0U,	// NEG8
    0U,	// NEG8o
    0U,	// NEGo
    0U,	// NOP
    0U,	// NOR
    0U,	// NOR8
    0U,	// NOR8o
    0U,	// NORo
    0U,	// OR
    0U,	// OR8
    0U,	// OR8o
    0U,	// ORC
    0U,	// ORC8
    0U,	// ORC8o
    0U,	// ORCo
    0U,	// ORI
    0U,	// ORI8
    0U,	// ORIS
    0U,	// ORIS8
    0U,	// ORo
    0U,	// POPCNTD
    0U,	// POPCNTDo
    0U,	// POPCNTW
    0U,	// POPCNTWo
    0U,	// RESTORE_CR
    0U,	// RESTORE_VRSAVE
    0U,	// RLDCL
    0U,	// RLDCLo
    0U,	// RLDCR
    0U,	// RLDCRo
    0U,	// RLDIC
    0U,	// RLDICL
    0U,	// RLDICL_32_64
    0U,	// RLDICLo
    0U,	// RLDICR
    0U,	// RLDICRo
    0U,	// RLDICo
    0U,	// RLDIMI
    0U,	// RLDIMIo
    0U,	// RLWIMI
    0U,	// RLWIMIo
    5U,	// RLWINM
    5U,	// RLWINM8
    5U,	// RLWINM8o
    5U,	// RLWINMo
    5U,	// RLWNM
    5U,	// RLWNMo
    0U,	// ROTRDI
    0U,	// ROTRDIo
    0U,	// ROTRWI
    0U,	// ROTRWIo
    0U,	// SC
    0U,	// SELECT_CC_F4
    0U,	// SELECT_CC_F8
    0U,	// SELECT_CC_I4
    0U,	// SELECT_CC_I8
    0U,	// SELECT_CC_VRRC
    0U,	// SLD
    0U,	// SLDI
    0U,	// SLDIo
    0U,	// SLDo
    0U,	// SLW
    0U,	// SLWI
    0U,	// SLWIo
    0U,	// SLWo
    0U,	// SPILL_CR
    0U,	// SPILL_VRSAVE
    0U,	// SRAD
    0U,	// SRADI
    0U,	// SRADIo
    0U,	// SRADo
    0U,	// SRAW
    0U,	// SRAWI
    0U,	// SRAWIo
    0U,	// SRAWo
    0U,	// SRD
    0U,	// SRDI
    0U,	// SRDIo
    0U,	// SRDo
    0U,	// SRW
    0U,	// SRWI
    0U,	// SRWIo
    0U,	// SRWo
    0U,	// STB
    0U,	// STB8
    0U,	// STBU
    0U,	// STBU8
    0U,	// STBUX
    0U,	// STBUX8
    0U,	// STBX
    0U,	// STBX8
    0U,	// STD
    0U,	// STDBRX
    0U,	// STDCX
    0U,	// STDU
    0U,	// STDUX
    0U,	// STDX
    0U,	// STFD
    0U,	// STFDU
    0U,	// STFDUX
    0U,	// STFDX
    0U,	// STFIWX
    0U,	// STFS
    0U,	// STFSU
    0U,	// STFSUX
    0U,	// STFSX
    0U,	// STH
    0U,	// STH8
    0U,	// STHBRX
    0U,	// STHU
    0U,	// STHU8
    0U,	// STHUX
    0U,	// STHUX8
    0U,	// STHX
    0U,	// STHX8
    0U,	// STMW
    0U,	// STVEBX
    0U,	// STVEHX
    0U,	// STVEWX
    0U,	// STVX
    0U,	// STVXL
    0U,	// STW
    0U,	// STW8
    0U,	// STWBRX
    0U,	// STWCX
    0U,	// STWU
    0U,	// STWU8
    0U,	// STWUX
    0U,	// STWUX8
    0U,	// STWX
    0U,	// STWX8
    0U,	// SUBF
    0U,	// SUBF8
    0U,	// SUBF8o
    0U,	// SUBFC
    0U,	// SUBFC8
    0U,	// SUBFC8o
    0U,	// SUBFCo
    0U,	// SUBFE
    0U,	// SUBFE8
    0U,	// SUBFE8o
    0U,	// SUBFEo
    0U,	// SUBFIC
    0U,	// SUBFIC8
    0U,	// SUBFME
    0U,	// SUBFME8
    0U,	// SUBFME8o
    0U,	// SUBFMEo
    0U,	// SUBFZE
    0U,	// SUBFZE8
    0U,	// SUBFZE8o
    0U,	// SUBFZEo
    0U,	// SUBFo
    0U,	// SUBI
    0U,	// SUBIC
    0U,	// SUBICo
    0U,	// SUBIS
    0U,	// SYNC
    0U,	// TAILB
    0U,	// TAILB8
    0U,	// TAILBA
    0U,	// TAILBA8
    0U,	// TAILBCTR
    0U,	// TAILBCTR8
    0U,	// TCRETURNai
    0U,	// TCRETURNai8
    0U,	// TCRETURNdi
    0U,	// TCRETURNdi8
    0U,	// TCRETURNri
    0U,	// TCRETURNri8
    0U,	// TD
    0U,	// TDI
    0U,	// TRAP
    0U,	// TW
    0U,	// TWI
    0U,	// UPDATE_VRSAVE
    0U,	// VADDCUW
    0U,	// VADDFP
    0U,	// VADDSBS
    0U,	// VADDSHS
    0U,	// VADDSWS
    0U,	// VADDUBM
    0U,	// VADDUBS
    0U,	// VADDUHM
    0U,	// VADDUHS
    0U,	// VADDUWM
    0U,	// VADDUWS
    0U,	// VAND
    0U,	// VANDC
    0U,	// VAVGSB
    0U,	// VAVGSH
    0U,	// VAVGSW
    0U,	// VAVGUB
    0U,	// VAVGUH
    0U,	// VAVGUW
    0U,	// VCFSX
    0U,	// VCFSX_0
    0U,	// VCFUX
    0U,	// VCFUX_0
    0U,	// VCMPBFP
    0U,	// VCMPBFPo
    0U,	// VCMPEQFP
    0U,	// VCMPEQFPo
    0U,	// VCMPEQUB
    0U,	// VCMPEQUBo
    0U,	// VCMPEQUH
    0U,	// VCMPEQUHo
    0U,	// VCMPEQUW
    0U,	// VCMPEQUWo
    0U,	// VCMPGEFP
    0U,	// VCMPGEFPo
    0U,	// VCMPGTFP
    0U,	// VCMPGTFPo
    0U,	// VCMPGTSB
    0U,	// VCMPGTSBo
    0U,	// VCMPGTSH
    0U,	// VCMPGTSHo
    0U,	// VCMPGTSW
    0U,	// VCMPGTSWo
    0U,	// VCMPGTUB
    0U,	// VCMPGTUBo
    0U,	// VCMPGTUH
    0U,	// VCMPGTUHo
    0U,	// VCMPGTUW
    0U,	// VCMPGTUWo
    0U,	// VCTSXS
    0U,	// VCTSXS_0
    0U,	// VCTUXS
    0U,	// VCTUXS_0
    0U,	// VEXPTEFP
    0U,	// VLOGEFP
    2U,	// VMADDFP
    0U,	// VMAXFP
    0U,	// VMAXSB
    0U,	// VMAXSH
    0U,	// VMAXSW
    0U,	// VMAXUB
    0U,	// VMAXUH
    0U,	// VMAXUW
    2U,	// VMHADDSHS
    2U,	// VMHRADDSHS
    0U,	// VMINFP
    0U,	// VMINSB
    0U,	// VMINSH
    0U,	// VMINSW
    0U,	// VMINUB
    0U,	// VMINUH
    0U,	// VMINUW
    2U,	// VMLADDUHM
    0U,	// VMRGHB
    0U,	// VMRGHH
    0U,	// VMRGHW
    0U,	// VMRGLB
    0U,	// VMRGLH
    0U,	// VMRGLW
    2U,	// VMSUMMBM
    2U,	// VMSUMSHM
    2U,	// VMSUMSHS
    2U,	// VMSUMUBM
    2U,	// VMSUMUHM
    2U,	// VMSUMUHS
    0U,	// VMULESB
    0U,	// VMULESH
    0U,	// VMULEUB
    0U,	// VMULEUH
    0U,	// VMULOSB
    0U,	// VMULOSH
    0U,	// VMULOUB
    0U,	// VMULOUH
    2U,	// VNMSUBFP
    0U,	// VNOR
    0U,	// VOR
    2U,	// VPERM
    0U,	// VPKPX
    0U,	// VPKSHSS
    0U,	// VPKSHUS
    0U,	// VPKSWSS
    0U,	// VPKSWUS
    0U,	// VPKUHUM
    0U,	// VPKUHUS
    0U,	// VPKUWUM
    0U,	// VPKUWUS
    0U,	// VREFP
    0U,	// VRFIM
    0U,	// VRFIN
    0U,	// VRFIP
    0U,	// VRFIZ
    0U,	// VRLB
    0U,	// VRLH
    0U,	// VRLW
    0U,	// VRSQRTEFP
    2U,	// VSEL
    0U,	// VSL
    0U,	// VSLB
    1U,	// VSLDOI
    0U,	// VSLH
    0U,	// VSLO
    0U,	// VSLW
    0U,	// VSPLTB
    0U,	// VSPLTH
    0U,	// VSPLTISB
    0U,	// VSPLTISH
    0U,	// VSPLTISW
    0U,	// VSPLTW
    0U,	// VSR
    0U,	// VSRAB
    0U,	// VSRAH
    0U,	// VSRAW
    0U,	// VSRB
    0U,	// VSRH
    0U,	// VSRO
    0U,	// VSRW
    0U,	// VSUBCUW
    0U,	// VSUBFP
    0U,	// VSUBSBS
    0U,	// VSUBSHS
    0U,	// VSUBSWS
    0U,	// VSUBUBM
    0U,	// VSUBUBS
    0U,	// VSUBUHM
    0U,	// VSUBUHS
    0U,	// VSUBUWM
    0U,	// VSUBUWS
    0U,	// VSUM2SWS
    0U,	// VSUM4SBS
    0U,	// VSUM4SHS
    0U,	// VSUM4UBS
    0U,	// VSUMSWS
    0U,	// VUPKHPX
    0U,	// VUPKHSB
    0U,	// VUPKHSH
    0U,	// VUPKLPX
    0U,	// VUPKLSB
    0U,	// VUPKLSH
    0U,	// VXOR
    0U,	// V_SET0
    0U,	// V_SET0B
    0U,	// V_SET0H
    0U,	// V_SETALLONES
    0U,	// V_SETALLONESB
    0U,	// V_SETALLONESH
    0U,	// WAIT
    0U,	// XOR
    0U,	// XOR8
    0U,	// XOR8o
    0U,	// XORI
    0U,	// XORI8
    0U,	// XORIS
    0U,	// XORIS8
    0U,	// XORo
    0U,	// gBC
    0U,	// gBCA
    0U,	// gBCCTR
    0U,	// gBCCTRL
    0U,	// gBCL
    0U,	// gBCLA
    0U,	// gBCLR
    0U,	// gBCLRL
    0U
  };

  const char AsmStrs[] = {
  /* 0 */ '#', 'E', 'H', '_', 'S', 'j', 'L', 'j', '_', 'S', 'e', 't', 'u', 'p', 9, 0,
  /* 16 */ 'b', 'd', 'z', 'l', 'a', '+', 32, 0,
  /* 24 */ 'b', 'd', 'n', 'z', 'l', 'a', '+', 32, 0,
  /* 33 */ 'b', 'd', 'z', 'a', '+', 32, 0,
  /* 40 */ 'b', 'd', 'n', 'z', 'a', '+', 32, 0,
  /* 48 */ 'b', 'd', 'z', 'l', '+', 32, 0,
  /* 55 */ 'b', 'd', 'n', 'z', 'l', '+', 32, 0,
  /* 63 */ 'b', 'd', 'z', '+', 32, 0,
  /* 69 */ 'b', 'd', 'n', 'z', '+', 32, 0,
  /* 76 */ 'b', 'c', 'l', 32, '2', '0', ',', 32, '3', '1', ',', 32, 0,
  /* 89 */ 'm', 't', 's', 'p', 'r', 32, '2', '5', '6', ',', 32, 0,
  /* 101 */ 'b', 'd', 'z', 'l', 'a', '-', 32, 0,
  /* 109 */ 'b', 'd', 'n', 'z', 'l', 'a', '-', 32, 0,
  /* 118 */ 'b', 'd', 'z', 'a', '-', 32, 0,
  /* 125 */ 'b', 'd', 'n', 'z', 'a', '-', 32, 0,
  /* 133 */ 'b', 'd', 'z', 'l', '-', 32, 0,
  /* 140 */ 'b', 'd', 'n', 'z', 'l', '-', 32, 0,
  /* 148 */ 'b', 'd', 'z', '-', 32, 0,
  /* 154 */ 'b', 'd', 'n', 'z', '-', 32, 0,
  /* 161 */ 'v', 'c', 'm', 'p', 'g', 't', 's', 'b', '.', 32, 0,
  /* 172 */ 'e', 'x', 't', 's', 'b', '.', 32, 0,
  /* 180 */ 'v', 'c', 'm', 'p', 'e', 'q', 'u', 'b', '.', 32, 0,
  /* 191 */ 'f', 's', 'u', 'b', '.', 32, 0,
  /* 198 */ 'f', 'm', 's', 'u', 'b', '.', 32, 0,
  /* 206 */ 'f', 'n', 'm', 's', 'u', 'b', '.', 32, 0,
  /* 215 */ 'v', 'c', 'm', 'p', 'g', 't', 'u', 'b', '.', 32, 0,
  /* 226 */ 'a', 'd', 'd', 'c', '.', 32, 0,
  /* 233 */ 'a', 'n', 'd', 'c', '.', 32, 0,
  /* 240 */ 's', 'u', 'b', 'f', 'c', '.', 32, 0,
  /* 248 */ 's', 'u', 'b', 'i', 'c', '.', 32, 0,
  /* 256 */ 'a', 'd', 'd', 'i', 'c', '.', 32, 0,
  /* 264 */ 'r', 'l', 'd', 'i', 'c', '.', 32, 0,
  /* 272 */ 'o', 'r', 'c', '.', 32, 0,
  /* 278 */ 's', 'r', 'a', 'd', '.', 32, 0,
  /* 285 */ 'f', 'a', 'd', 'd', '.', 32, 0,
  /* 292 */ 'f', 'm', 'a', 'd', 'd', '.', 32, 0,
  /* 300 */ 'f', 'n', 'm', 'a', 'd', 'd', '.', 32, 0,
  /* 309 */ 'm', 'u', 'l', 'h', 'd', '.', 32, 0,
  /* 317 */ 'f', 'c', 'f', 'i', 'd', '.', 32, 0,
  /* 325 */ 'm', 'u', 'l', 'l', 'd', '.', 32, 0,
  /* 333 */ 's', 'l', 'd', '.', 32, 0,
  /* 339 */ 'n', 'a', 'n', 'd', '.', 32, 0,
  /* 346 */ 's', 'r', 'd', '.', 32, 0,
  /* 352 */ 'p', 'o', 'p', 'c', 'n', 't', 'd', '.', 32, 0,
  /* 362 */ 'd', 'i', 'v', 'd', '.', 32, 0,
  /* 369 */ 'c', 'n', 't', 'l', 'z', 'd', '.', 32, 0,
  /* 378 */ 'a', 'd', 'd', 'e', '.', 32, 0,
  /* 385 */ 's', 'u', 'b', 'f', 'e', '.', 32, 0,
  /* 393 */ 'a', 'd', 'd', 'm', 'e', '.', 32, 0,
  /* 401 */ 's', 'u', 'b', 'f', 'm', 'e', '.', 32, 0,
  /* 410 */ 'f', 'r', 'e', '.', 32, 0,
  /* 416 */ 'f', 'r', 's', 'q', 'r', 't', 'e', '.', 32, 0,
  /* 426 */ 'a', 'd', 'd', 'z', 'e', '.', 32, 0,
  /* 434 */ 's', 'u', 'b', 'f', 'z', 'e', '.', 32, 0,
  /* 443 */ 's', 'u', 'b', 'f', '.', 32, 0,
  /* 450 */ 'f', 'n', 'e', 'g', '.', 32, 0,
  /* 457 */ 'v', 'c', 'm', 'p', 'g', 't', 's', 'h', '.', 32, 0,
  /* 468 */ 'e', 'x', 't', 's', 'h', '.', 32, 0,
  /* 476 */ 'v', 'c', 'm', 'p', 'e', 'q', 'u', 'h', '.', 32, 0,
  /* 487 */ 'v', 'c', 'm', 'p', 'g', 't', 'u', 'h', '.', 32, 0,
  /* 498 */ 's', 'r', 'a', 'd', 'i', '.', 32, 0,
  /* 506 */ 'c', 'l', 'r', 'l', 's', 'l', 'd', 'i', '.', 32, 0,
  /* 517 */ 'e', 'x', 't', 'l', 'd', 'i', '.', 32, 0,
  /* 526 */ 'a', 'n', 'd', 'i', '.', 32, 0,
  /* 533 */ 'c', 'l', 'r', 'r', 'd', 'i', '.', 32, 0,
  /* 542 */ 'i', 'n', 's', 'r', 'd', 'i', '.', 32, 0,
  /* 551 */ 'r', 'o', 't', 'r', 'd', 'i', '.', 32, 0,
  /* 560 */ 'e', 'x', 't', 'r', 'd', 'i', '.', 32, 0,
  /* 569 */ 'r', 'l', 'd', 'i', 'm', 'i', '.', 32, 0,
  /* 578 */ 'r', 'l', 'w', 'i', 'm', 'i', '.', 32, 0,
  /* 587 */ 's', 'r', 'a', 'w', 'i', '.', 32, 0,
  /* 595 */ 'c', 'l', 'r', 'l', 's', 'l', 'w', 'i', '.', 32, 0,
  /* 606 */ 'i', 'n', 's', 'l', 'w', 'i', '.', 32, 0,
  /* 615 */ 'e', 'x', 't', 'l', 'w', 'i', '.', 32, 0,
  /* 624 */ 'c', 'l', 'r', 'r', 'w', 'i', '.', 32, 0,
  /* 633 */ 'i', 'n', 's', 'r', 'w', 'i', '.', 32, 0,
  /* 642 */ 'r', 'o', 't', 'r', 'w', 'i', '.', 32, 0,
  /* 651 */ 'e', 'x', 't', 'r', 'w', 'i', '.', 32, 0,
  /* 660 */ 'r', 'l', 'd', 'c', 'l', '.', 32, 0,
  /* 668 */ 'r', 'l', 'd', 'i', 'c', 'l', '.', 32, 0,
  /* 677 */ 'f', 's', 'e', 'l', '.', 32, 0,
  /* 684 */ 'f', 'm', 'u', 'l', '.', 32, 0,
  /* 691 */ 'f', 'r', 'i', 'm', '.', 32, 0,
  /* 698 */ 'r', 'l', 'w', 'i', 'n', 'm', '.', 32, 0,
  /* 707 */ 'r', 'l', 'w', 'n', 'm', '.', 32, 0,
  /* 715 */ 'f', 'c', 'p', 's', 'g', 'n', '.', 32, 0,
  /* 724 */ 'f', 'r', 'i', 'n', '.', 32, 0,
  /* 731 */ 'v', 'c', 'm', 'p', 'b', 'f', 'p', '.', 32, 0,
  /* 741 */ 'v', 'c', 'm', 'p', 'g', 'e', 'f', 'p', '.', 32, 0,
  /* 752 */ 'v', 'c', 'm', 'p', 'e', 'q', 'f', 'p', '.', 32, 0,
  /* 763 */ 'v', 'c', 'm', 'p', 'g', 't', 'f', 'p', '.', 32, 0,
  /* 774 */ 'f', 'r', 'i', 'p', '.', 32, 0,
  /* 781 */ 'f', 'r', 's', 'p', '.', 32, 0,
  /* 788 */ 'r', 'l', 'd', 'c', 'r', '.', 32, 0,
  /* 796 */ 'r', 'l', 'd', 'i', 'c', 'r', '.', 32, 0,
  /* 805 */ 'f', 'm', 'r', '.', 32, 0,
  /* 811 */ 'n', 'o', 'r', '.', 32, 0,
  /* 817 */ 'x', 'o', 'r', '.', 32, 0,
  /* 823 */ 'f', 'a', 'b', 's', '.', 32, 0,
  /* 830 */ 'f', 'n', 'a', 'b', 's', '.', 32, 0,
  /* 838 */ 'f', 's', 'u', 'b', 's', '.', 32, 0,
  /* 846 */ 'f', 'm', 's', 'u', 'b', 's', '.', 32, 0,
  /* 855 */ 'f', 'n', 'm', 's', 'u', 'b', 's', '.', 32, 0,
  /* 865 */ 'f', 'a', 'd', 'd', 's', '.', 32, 0,
  /* 873 */ 'f', 'm', 'a', 'd', 'd', 's', '.', 32, 0,
  /* 882 */ 'f', 'n', 'm', 'a', 'd', 'd', 's', '.', 32, 0,
  /* 892 */ 'f', 'c', 'f', 'i', 'd', 's', '.', 32, 0,
  /* 901 */ 'f', 'r', 'e', 's', '.', 32, 0,
  /* 908 */ 'f', 'r', 's', 'q', 'r', 't', 'e', 's', '.', 32, 0,
  /* 919 */ 'a', 'n', 'd', 'i', 's', '.', 32, 0,
  /* 927 */ 'f', 'm', 'u', 'l', 's', '.', 32, 0,
  /* 935 */ 'f', 's', 'q', 'r', 't', 's', '.', 32, 0,
  /* 944 */ 'f', 'c', 'f', 'i', 'd', 'u', 's', '.', 32, 0,
  /* 954 */ 'f', 'd', 'i', 'v', 's', '.', 32, 0,
  /* 962 */ 'f', 's', 'q', 'r', 't', '.', 32, 0,
  /* 970 */ 'm', 'u', 'l', 'h', 'd', 'u', '.', 32, 0,
  /* 979 */ 'f', 'c', 'f', 'i', 'd', 'u', '.', 32, 0,
  /* 988 */ 'd', 'i', 'v', 'd', 'u', '.', 32, 0,
  /* 996 */ 'm', 'u', 'l', 'h', 'w', 'u', '.', 32, 0,
  /* 1005 */ 'd', 'i', 'v', 'w', 'u', '.', 32, 0,
  /* 1013 */ 'f', 'd', 'i', 'v', '.', 32, 0,
  /* 1020 */ 'e', 'q', 'v', '.', 32, 0,
  /* 1026 */ 's', 'r', 'a', 'w', '.', 32, 0,
  /* 1033 */ 'm', 'u', 'l', 'h', 'w', '.', 32, 0,
  /* 1041 */ 'm', 'u', 'l', 'l', 'w', '.', 32, 0,
  /* 1049 */ 's', 'l', 'w', '.', 32, 0,
  /* 1055 */ 's', 'r', 'w', '.', 32, 0,
  /* 1061 */ 'v', 'c', 'm', 'p', 'g', 't', 's', 'w', '.', 32, 0,
  /* 1072 */ 'e', 'x', 't', 's', 'w', '.', 32, 0,
  /* 1080 */ 'p', 'o', 'p', 'c', 'n', 't', 'w', '.', 32, 0,
  /* 1090 */ 'v', 'c', 'm', 'p', 'e', 'q', 'u', 'w', '.', 32, 0,
  /* 1101 */ 'v', 'c', 'm', 'p', 'g', 't', 'u', 'w', '.', 32, 0,
  /* 1112 */ 'd', 'i', 'v', 'w', '.', 32, 0,
  /* 1119 */ 'c', 'n', 't', 'l', 'z', 'w', '.', 32, 0,
  /* 1128 */ 's', 't', 'd', 'c', 'x', '.', 32, 0,
  /* 1136 */ 's', 't', 'w', 'c', 'x', '.', 32, 0,
  /* 1144 */ 'f', 'c', 't', 'i', 'd', 'z', '.', 32, 0,
  /* 1153 */ 'f', 'r', 'i', 'z', '.', 32, 0,
  /* 1160 */ 'f', 'c', 't', 'i', 'd', 'u', 'z', '.', 32, 0,
  /* 1170 */ 'f', 'c', 't', 'i', 'w', 'u', 'z', '.', 32, 0,
  /* 1180 */ 'f', 'c', 't', 'i', 'w', 'z', '.', 32, 0,
  /* 1189 */ 'm', 't', 'f', 's', 'b', '0', 32, 0,
  /* 1197 */ 'm', 't', 'f', 's', 'b', '1', 32, 0,
  /* 1205 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'C', 'M', 'P', '_', 'S', 'W', 'A', 'P', '_', 'I', '3', '2', 32, 0,
  /* 1227 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'C', 'M', 'P', '_', 'S', 'W', 'A', 'P', '_', 'I', '1', '6', 32, 0,
  /* 1249 */ '#', 'T', 'C', '_', 'R', 'E', 'T', 'U', 'R', 'N', 'a', '8', 32, 0,
  /* 1263 */ '#', 'T', 'C', '_', 'R', 'E', 'T', 'U', 'R', 'N', 'd', '8', 32, 0,
  /* 1277 */ '#', 'T', 'C', '_', 'R', 'E', 'T', 'U', 'R', 'N', 'r', '8', 32, 0,
  /* 1291 */ 'U', 'P', 'D', 'A', 'T', 'E', '_', 'V', 'R', 'S', 'A', 'V', 'E', 32, 0,
  /* 1306 */ '#', 'A', 'D', 'J', 'C', 'A', 'L', 'L', 'S', 'T', 'A', 'C', 'K', 'D', 'O', 'W', 'N', 32, 0,
  /* 1325 */ '#', 'A', 'D', 'J', 'C', 'A', 'L', 'L', 'S', 'T', 'A', 'C', 'K', 'U', 'P', 32, 0,
  /* 1342 */ '#', 'T', 'C', '_', 'R', 'E', 'T', 'U', 'R', 'N', 'a', 32, 0,
  /* 1355 */ 'd', 'c', 'b', 'a', 32, 0,
  /* 1361 */ 'b', 'c', 'a', 32, 0,
  /* 1366 */ 'l', 'h', 'a', 32, 0,
  /* 1371 */ 'b', 'l', 'a', 32, 0,
  /* 1376 */ 'b', 'c', 'l', 'a', 32, 0,
  /* 1382 */ 'b', 'd', 'z', 'l', 'a', 32, 0,
  /* 1389 */ 'b', 'd', 'n', 'z', 'l', 'a', 32, 0,
  /* 1397 */ 'l', 'w', 'a', 32, 0,
  /* 1402 */ 'b', 'd', 'z', 'a', 32, 0,
  /* 1408 */ 'b', 'd', 'n', 'z', 'a', 32, 0,
  /* 1415 */ 'v', 's', 'r', 'a', 'b', 32, 0,
  /* 1422 */ 'v', 'm', 'r', 'g', 'h', 'b', 32, 0,
  /* 1430 */ 'v', 'm', 'r', 'g', 'l', 'b', 32, 0,
  /* 1438 */ 'v', 'r', 'l', 'b', 32, 0,
  /* 1444 */ 'v', 's', 'l', 'b', 32, 0,
  /* 1450 */ 'v', 's', 'r', 'b', 32, 0,
  /* 1456 */ 'v', 'm', 'u', 'l', 'e', 's', 'b', 32, 0,
  /* 1465 */ 'v', 'a', 'v', 'g', 's', 'b', 32, 0,
  /* 1473 */ 'v', 'u', 'p', 'k', 'h', 's', 'b', 32, 0,
  /* 1482 */ 'v', 's', 'p', 'l', 't', 'i', 's', 'b', 32, 0,
  /* 1492 */ 'v', 'u', 'p', 'k', 'l', 's', 'b', 32, 0,
  /* 1501 */ 'v', 'm', 'i', 'n', 's', 'b', 32, 0,
  /* 1509 */ 'v', 'm', 'u', 'l', 'o', 's', 'b', 32, 0,
  /* 1518 */ 'v', 'c', 'm', 'p', 'g', 't', 's', 'b', 32, 0,
  /* 1528 */ 'e', 'x', 't', 's', 'b', 32, 0,
  /* 1535 */ 'v', 'm', 'a', 'x', 's', 'b', 32, 0,
  /* 1543 */ 'm', 'f', 't', 'b', 32, 0,
  /* 1549 */ 'v', 's', 'p', 'l', 't', 'b', 32, 0,
  /* 1557 */ 's', 't', 'b', 32, 0,
  /* 1562 */ 'v', 'm', 'u', 'l', 'e', 'u', 'b', 32, 0,
  /* 1571 */ 'v', 'a', 'v', 'g', 'u', 'b', 32, 0,
  /* 1579 */ 'v', 'm', 'i', 'n', 'u', 'b', 32, 0,
  /* 1587 */ 'v', 'm', 'u', 'l', 'o', 'u', 'b', 32, 0,
  /* 1596 */ 'v', 'c', 'm', 'p', 'e', 'q', 'u', 'b', 32, 0,
  /* 1606 */ 'f', 's', 'u', 'b', 32, 0,
  /* 1612 */ 'f', 'm', 's', 'u', 'b', 32, 0,
  /* 1619 */ 'f', 'n', 'm', 's', 'u', 'b', 32, 0,
  /* 1627 */ 'v', 'c', 'm', 'p', 'g', 't', 'u', 'b', 32, 0,
  /* 1637 */ 'v', 'm', 'a', 'x', 'u', 'b', 32, 0,
  /* 1645 */ 'b', 'c', 32, 0,
  /* 1649 */ 'a', 'd', 'd', 'c', 32, 0,
  /* 1655 */ 'c', 'r', 'a', 'n', 'd', 'c', 32, 0,
  /* 1663 */ 'v', 'a', 'n', 'd', 'c', 32, 0,
  /* 1670 */ 's', 'u', 'b', 'f', 'c', 32, 0,
  /* 1677 */ 's', 'u', 'b', 'i', 'c', 32, 0,
  /* 1684 */ 'a', 'd', 'd', 'i', 'c', 32, 0,
  /* 1691 */ 'r', 'l', 'd', 'i', 'c', 32, 0,
  /* 1698 */ 's', 'u', 'b', 'f', 'i', 'c', 32, 0,
  /* 1706 */ 's', 'y', 'n', 'c', 32, 0,
  /* 1712 */ 'c', 'r', 'o', 'r', 'c', 32, 0,
  /* 1719 */ 's', 'c', 32, 0,
  /* 1723 */ '#', 'T', 'C', '_', 'R', 'E', 'T', 'U', 'R', 'N', 'd', 32, 0,
  /* 1736 */ 's', 'r', 'a', 'd', 32, 0,
  /* 1742 */ 'f', 'a', 'd', 'd', 32, 0,
  /* 1748 */ 'f', 'm', 'a', 'd', 'd', 32, 0,
  /* 1755 */ 'f', 'n', 'm', 'a', 'd', 'd', 32, 0,
  /* 1763 */ 'l', 'f', 'd', 32, 0,
  /* 1768 */ 's', 't', 'f', 'd', 32, 0,
  /* 1774 */ 'm', 'u', 'l', 'h', 'd', 32, 0,
  /* 1781 */ 'f', 'c', 'f', 'i', 'd', 32, 0,
  /* 1788 */ 'm', 'u', 'l', 'l', 'd', 32, 0,
  /* 1795 */ 'c', 'm', 'p', 'l', 'd', 32, 0,
  /* 1802 */ 's', 'l', 'd', 32, 0,
  /* 1807 */ 'c', 'r', 'n', 'a', 'n', 'd', 32, 0,
  /* 1815 */ 'c', 'r', 'a', 'n', 'd', 32, 0,
  /* 1822 */ 'v', 'a', 'n', 'd', 32, 0,
  /* 1828 */ 'c', 'm', 'p', 'd', 32, 0,
  /* 1834 */ 's', 'r', 'd', 32, 0,
  /* 1839 */ 'p', 'o', 'p', 'c', 'n', 't', 'd', 32, 0,
  /* 1848 */ 's', 't', 'd', 32, 0,
  /* 1853 */ 'd', 'i', 'v', 'd', 32, 0,
  /* 1859 */ 'c', 'n', 't', 'l', 'z', 'd', 32, 0,
  /* 1867 */ 'a', 'd', 'd', 'e', 32, 0,
  /* 1873 */ 's', 'u', 'b', 'f', 'e', 32, 0,
  /* 1880 */ 'a', 'd', 'd', 'm', 'e', 32, 0,
  /* 1887 */ 's', 'u', 'b', 'f', 'm', 'e', 32, 0,
  /* 1895 */ 'f', 'r', 'e', 32, 0,
  /* 1900 */ 'f', 'r', 's', 'q', 'r', 't', 'e', 32, 0,
  /* 1909 */ 'a', 'd', 'd', 'z', 'e', 32, 0,
  /* 1916 */ 's', 'u', 'b', 'f', 'z', 'e', 32, 0,
  /* 1924 */ 'd', 'c', 'b', 'f', 32, 0,
  /* 1930 */ 's', 'u', 'b', 'f', 32, 0,
  /* 1936 */ 'm', 'c', 'r', 'f', 32, 0,
  /* 1942 */ 'm', 'f', 'o', 'c', 'r', 'f', 32, 0,
  /* 1950 */ 'm', 't', 'o', 'c', 'r', 'f', 32, 0,
  /* 1958 */ 'm', 't', 'c', 'r', 'f', 32, 0,
  /* 1965 */ 'm', 't', 'f', 's', 'f', 32, 0,
  /* 1972 */ 'f', 'n', 'e', 'g', 32, 0,
  /* 1978 */ 'v', 's', 'r', 'a', 'h', 32, 0,
  /* 1985 */ 'v', 'm', 'r', 'g', 'h', 'h', 32, 0,
  /* 1993 */ 'v', 'm', 'r', 'g', 'l', 'h', 32, 0,
  /* 2001 */ 'v', 'r', 'l', 'h', 32, 0,
  /* 2007 */ 'v', 's', 'l', 'h', 32, 0,
  /* 2013 */ 'v', 's', 'r', 'h', 32, 0,
  /* 2019 */ 'v', 'm', 'u', 'l', 'e', 's', 'h', 32, 0,
  /* 2028 */ 'v', 'a', 'v', 'g', 's', 'h', 32, 0,
  /* 2036 */ 'v', 'u', 'p', 'k', 'h', 's', 'h', 32, 0,
  /* 2045 */ 'v', 's', 'p', 'l', 't', 'i', 's', 'h', 32, 0,
  /* 2055 */ 'v', 'u', 'p', 'k', 'l', 's', 'h', 32, 0,
  /* 2064 */ 'v', 'm', 'i', 'n', 's', 'h', 32, 0,
  /* 2072 */ 'v', 'm', 'u', 'l', 'o', 's', 'h', 32, 0,
  /* 2081 */ 'v', 'c', 'm', 'p', 'g', 't', 's', 'h', 32, 0,
  /* 2091 */ 'e', 'x', 't', 's', 'h', 32, 0,
  /* 2098 */ 'v', 'm', 'a', 'x', 's', 'h', 32, 0,
  /* 2106 */ 'v', 's', 'p', 'l', 't', 'h', 32, 0,
  /* 2114 */ 's', 't', 'h', 32, 0,
  /* 2119 */ 'v', 'm', 'u', 'l', 'e', 'u', 'h', 32, 0,
  /* 2128 */ 'v', 'a', 'v', 'g', 'u', 'h', 32, 0,
  /* 2136 */ 'v', 'm', 'i', 'n', 'u', 'h', 32, 0,
  /* 2144 */ 'v', 'm', 'u', 'l', 'o', 'u', 'h', 32, 0,
  /* 2153 */ 'v', 'c', 'm', 'p', 'e', 'q', 'u', 'h', 32, 0,
  /* 2163 */ 'v', 'c', 'm', 'p', 'g', 't', 'u', 'h', 32, 0,
  /* 2173 */ 'v', 'm', 'a', 'x', 'u', 'h', 32, 0,
  /* 2181 */ 'd', 'c', 'b', 'i', 32, 0,
  /* 2187 */ 'i', 'c', 'b', 'i', 32, 0,
  /* 2193 */ 's', 'u', 'b', 'i', 32, 0,
  /* 2199 */ 's', 'r', 'a', 'd', 'i', 32, 0,
  /* 2206 */ 'a', 'd', 'd', 'i', 32, 0,
  /* 2212 */ 'c', 'm', 'p', 'l', 'd', 'i', 32, 0,
  /* 2220 */ 'c', 'l', 'r', 'l', 's', 'l', 'd', 'i', 32, 0,
  /* 2230 */ 'e', 'x', 't', 'l', 'd', 'i', 32, 0,
  /* 2238 */ 'c', 'm', 'p', 'd', 'i', 32, 0,
  /* 2245 */ 'c', 'l', 'r', 'r', 'd', 'i', 32, 0,
  /* 2253 */ 'i', 'n', 's', 'r', 'd', 'i', 32, 0,
  /* 2261 */ 'r', 'o', 't', 'r', 'd', 'i', 32, 0,
  /* 2269 */ 'e', 'x', 't', 'r', 'd', 'i', 32, 0,
  /* 2277 */ 't', 'd', 'i', 32, 0,
  /* 2282 */ 'm', 'u', 'l', 'l', 'i', 32, 0,
  /* 2289 */ 'r', 'l', 'd', 'i', 'm', 'i', 32, 0,
  /* 2297 */ 'r', 'l', 'w', 'i', 'm', 'i', 32, 0,
  /* 2305 */ 'v', 's', 'l', 'd', 'o', 'i', 32, 0,
  /* 2313 */ 'x', 'o', 'r', 'i', 32, 0,
  /* 2319 */ 's', 'r', 'a', 'w', 'i', 32, 0,
  /* 2326 */ 'c', 'm', 'p', 'l', 'w', 'i', 32, 0,
  /* 2334 */ 'c', 'l', 'r', 'l', 's', 'l', 'w', 'i', 32, 0,
  /* 2344 */ 'i', 'n', 's', 'l', 'w', 'i', 32, 0,
  /* 2352 */ 'e', 'x', 't', 'l', 'w', 'i', 32, 0,
  /* 2360 */ 'c', 'm', 'p', 'w', 'i', 32, 0,
  /* 2367 */ 'c', 'l', 'r', 'r', 'w', 'i', 32, 0,
  /* 2375 */ 'i', 'n', 's', 'r', 'w', 'i', 32, 0,
  /* 2383 */ 'r', 'o', 't', 'r', 'w', 'i', 32, 0,
  /* 2391 */ 'e', 'x', 't', 'r', 'w', 'i', 32, 0,
  /* 2399 */ 't', 'w', 'i', 32, 0,
  /* 2404 */ 'b', 'l', 32, 0,
  /* 2408 */ 'b', 'c', 'l', 32, 0,
  /* 2413 */ 'r', 'l', 'd', 'c', 'l', 32, 0,
  /* 2420 */ 'r', 'l', 'd', 'i', 'c', 'l', 32, 0,
  /* 2428 */ 'f', 's', 'e', 'l', 32, 0,
  /* 2434 */ 'i', 's', 'e', 'l', 32, 0,
  /* 2440 */ 'v', 's', 'e', 'l', 32, 0,
  /* 2446 */ 'b', 'c', 'l', 'r', 'l', 32, 0,
  /* 2453 */ 'b', 'c', 'c', 't', 'r', 'l', 32, 0,
  /* 2461 */ 'l', 'v', 's', 'l', 32, 0,
  /* 2467 */ 'f', 'm', 'u', 'l', 32, 0,
  /* 2473 */ 'l', 'v', 'x', 'l', 32, 0,
  /* 2479 */ 's', 't', 'v', 'x', 'l', 32, 0,
  /* 2486 */ 'd', 'c', 'b', 'z', 'l', 32, 0,
  /* 2493 */ 'b', 'd', 'z', 'l', 32, 0,
  /* 2499 */ 'b', 'd', 'n', 'z', 'l', 32, 0,
  /* 2506 */ 'v', 'm', 's', 'u', 'm', 'm', 'b', 'm', 32, 0,
  /* 2516 */ 'v', 's', 'u', 'b', 'u', 'b', 'm', 32, 0,
  /* 2525 */ 'v', 'a', 'd', 'd', 'u', 'b', 'm', 32, 0,
  /* 2534 */ 'v', 'm', 's', 'u', 'm', 'u', 'b', 'm', 32, 0,
  /* 2544 */ 'v', 'm', 's', 'u', 'm', 's', 'h', 'm', 32, 0,
  /* 2554 */ 'v', 's', 'u', 'b', 'u', 'h', 'm', 32, 0,
  /* 2563 */ 'v', 'm', 'l', 'a', 'd', 'd', 'u', 'h', 'm', 32, 0,
  /* 2574 */ 'v', 'a', 'd', 'd', 'u', 'h', 'm', 32, 0,
  /* 2583 */ 'v', 'm', 's', 'u', 'm', 'u', 'h', 'm', 32, 0,
  /* 2593 */ 'v', 'r', 'f', 'i', 'm', 32, 0,
  /* 2600 */ 'f', 'r', 'i', 'm', 32, 0,
  /* 2606 */ 'r', 'l', 'w', 'i', 'n', 'm', 32, 0,
  /* 2614 */ 'r', 'l', 'w', 'n', 'm', 32, 0,
  /* 2621 */ 'v', 'p', 'e', 'r', 'm', 32, 0,
  /* 2628 */ 'v', 'p', 'k', 'u', 'h', 'u', 'm', 32, 0,
  /* 2637 */ 'v', 'p', 'k', 'u', 'w', 'u', 'm', 32, 0,
  /* 2646 */ 'v', 's', 'u', 'b', 'u', 'w', 'm', 32, 0,
  /* 2655 */ 'v', 'a', 'd', 'd', 'u', 'w', 'm', 32, 0,
  /* 2664 */ 'f', 'c', 'p', 's', 'g', 'n', 32, 0,
  /* 2672 */ 'v', 'r', 'f', 'i', 'n', 32, 0,
  /* 2679 */ 'f', 'r', 'i', 'n', 32, 0,
  /* 2685 */ 'v', 's', 'l', 'o', 32, 0,
  /* 2691 */ 'v', 's', 'r', 'o', 32, 0,
  /* 2697 */ 'v', 'c', 'm', 'p', 'b', 'f', 'p', 32, 0,
  /* 2706 */ 'v', 'n', 'm', 's', 'u', 'b', 'f', 'p', 32, 0,
  /* 2716 */ 'v', 's', 'u', 'b', 'f', 'p', 32, 0,
  /* 2724 */ 'v', 'm', 'a', 'd', 'd', 'f', 'p', 32, 0,
  /* 2733 */ 'v', 'a', 'd', 'd', 'f', 'p', 32, 0,
  /* 2741 */ 'v', 'l', 'o', 'g', 'e', 'f', 'p', 32, 0,
  /* 2750 */ 'v', 'c', 'm', 'p', 'g', 'e', 'f', 'p', 32, 0,
  /* 2760 */ 'v', 'r', 'e', 'f', 'p', 32, 0,
  /* 2767 */ 'v', 'e', 'x', 'p', 't', 'e', 'f', 'p', 32, 0,
  /* 2777 */ 'v', 'r', 's', 'q', 'r', 't', 'e', 'f', 'p', 32, 0,
  /* 2788 */ 'v', 'm', 'i', 'n', 'f', 'p', 32, 0,
  /* 2796 */ 'v', 'c', 'm', 'p', 'e', 'q', 'f', 'p', 32, 0,
  /* 2806 */ 'v', 'c', 'm', 'p', 'g', 't', 'f', 'p', 32, 0,
  /* 2816 */ 'v', 'm', 'a', 'x', 'f', 'p', 32, 0,
  /* 2824 */ 'v', 'r', 'f', 'i', 'p', 32, 0,
  /* 2831 */ 'f', 'r', 'i', 'p', 32, 0,
  /* 2837 */ 'f', 'r', 's', 'p', 32, 0,
  /* 2843 */ '#', 'T', 'C', '_', 'R', 'E', 'T', 'U', 'R', 'N', 'r', 32, 0,
  /* 2856 */ 'r', 'l', 'd', 'c', 'r', 32, 0,
  /* 2863 */ 'm', 'f', 'c', 'r', 32, 0,
  /* 2869 */ 'r', 'l', 'd', 'i', 'c', 'r', 32, 0,
  /* 2877 */ 'm', 'f', 'v', 's', 'c', 'r', 32, 0,
  /* 2885 */ 'm', 't', 'v', 's', 'c', 'r', 32, 0,
  /* 2893 */ 'b', 'c', 'l', 'r', 32, 0,
  /* 2899 */ 'm', 'f', 'l', 'r', 32, 0,
  /* 2905 */ 'm', 't', 'l', 'r', 32, 0,
  /* 2911 */ 'f', 'm', 'r', 32, 0,
  /* 2916 */ 'c', 'r', 'n', 'o', 'r', 32, 0,
  /* 2923 */ 'v', 'n', 'o', 'r', 32, 0,
  /* 2929 */ 'c', 'r', 'o', 'r', 32, 0,
  /* 2935 */ 'v', 'o', 'r', 32, 0,
  /* 2940 */ 'c', 'r', 'x', 'o', 'r', 32, 0,
  /* 2947 */ 'v', 'x', 'o', 'r', 32, 0,
  /* 2953 */ 'm', 'f', 's', 'p', 'r', 32, 0,
  /* 2960 */ 'm', 't', 's', 'p', 'r', 32, 0,
  /* 2967 */ 'l', 'v', 's', 'r', 32, 0,
  /* 2973 */ 'b', 'c', 'c', 't', 'r', 32, 0,
  /* 2980 */ 'm', 'f', 'c', 't', 'r', 32, 0,
  /* 2987 */ 'm', 't', 'c', 't', 'r', 32, 0,
  /* 2994 */ 'f', 'a', 'b', 's', 32, 0,
  /* 3000 */ 'f', 'n', 'a', 'b', 's', 32, 0,
  /* 3007 */ 'v', 's', 'u', 'm', '4', 's', 'b', 's', 32, 0,
  /* 3017 */ 'v', 's', 'u', 'b', 's', 'b', 's', 32, 0,
  /* 3026 */ 'v', 'a', 'd', 'd', 's', 'b', 's', 32, 0,
  /* 3035 */ 'v', 's', 'u', 'm', '4', 'u', 'b', 's', 32, 0,
  /* 3045 */ 'v', 's', 'u', 'b', 'u', 'b', 's', 32, 0,
  /* 3054 */ 'v', 'a', 'd', 'd', 'u', 'b', 's', 32, 0,
  /* 3063 */ 'f', 's', 'u', 'b', 's', 32, 0,
  /* 3070 */ 'f', 'm', 's', 'u', 'b', 's', 32, 0,
  /* 3078 */ 'f', 'n', 'm', 's', 'u', 'b', 's', 32, 0,
  /* 3087 */ 'f', 'a', 'd', 'd', 's', 32, 0,
  /* 3094 */ 'f', 'm', 'a', 'd', 'd', 's', 32, 0,
  /* 3102 */ 'f', 'n', 'm', 'a', 'd', 'd', 's', 32, 0,
  /* 3111 */ 'f', 'c', 'f', 'i', 'd', 's', 32, 0,
  /* 3119 */ 'f', 'r', 'e', 's', 32, 0,
  /* 3125 */ 'f', 'r', 's', 'q', 'r', 't', 'e', 's', 32, 0,
  /* 3135 */ 'm', 'f', 'f', 's', 32, 0,
  /* 3141 */ 'l', 'f', 's', 32, 0,
  /* 3146 */ 's', 't', 'f', 's', 32, 0,
  /* 3152 */ 'v', 's', 'u', 'm', '4', 's', 'h', 's', 32, 0,
  /* 3162 */ 'v', 's', 'u', 'b', 's', 'h', 's', 32, 0,
  /* 3171 */ 'v', 'm', 'h', 'a', 'd', 'd', 's', 'h', 's', 32, 0,
  /* 3182 */ 'v', 'm', 'h', 'r', 'a', 'd', 'd', 's', 'h', 's', 32, 0,
  /* 3194 */ 'v', 'a', 'd', 'd', 's', 'h', 's', 32, 0,
  /* 3203 */ 'v', 'm', 's', 'u', 'm', 's', 'h', 's', 32, 0,
  /* 3213 */ 'v', 's', 'u', 'b', 'u', 'h', 's', 32, 0,
  /* 3222 */ 'v', 'a', 'd', 'd', 'u', 'h', 's', 32, 0,
  /* 3231 */ 'v', 'm', 's', 'u', 'm', 'u', 'h', 's', 32, 0,
  /* 3241 */ 's', 'u', 'b', 'i', 's', 32, 0,
  /* 3248 */ 'a', 'd', 'd', 'i', 's', 32, 0,
  /* 3255 */ 'l', 'i', 's', 32, 0,
  /* 3260 */ 'x', 'o', 'r', 'i', 's', 32, 0,
  /* 3267 */ 'f', 'm', 'u', 'l', 's', 32, 0,
  /* 3274 */ 'd', 's', 's', 32, 0,
  /* 3279 */ 'v', 'p', 'k', 's', 'h', 's', 's', 32, 0,
  /* 3288 */ 'v', 'p', 'k', 's', 'w', 's', 's', 32, 0,
  /* 3297 */ 'f', 's', 'q', 'r', 't', 's', 32, 0,
  /* 3305 */ 'f', 'c', 'f', 'i', 'd', 'u', 's', 32, 0,
  /* 3314 */ 'v', 'p', 'k', 's', 'h', 'u', 's', 32, 0,
  /* 3323 */ 'v', 'p', 'k', 'u', 'h', 'u', 's', 32, 0,
  /* 3332 */ 'v', 'p', 'k', 's', 'w', 'u', 's', 32, 0,
  /* 3341 */ 'v', 'p', 'k', 'u', 'w', 'u', 's', 32, 0,
  /* 3350 */ 'f', 'd', 'i', 'v', 's', 32, 0,
  /* 3357 */ 'v', 's', 'u', 'm', '2', 's', 'w', 's', 32, 0,
  /* 3367 */ 'v', 's', 'u', 'b', 's', 'w', 's', 32, 0,
  /* 3376 */ 'v', 'a', 'd', 'd', 's', 'w', 's', 32, 0,
  /* 3385 */ 'v', 's', 'u', 'm', 's', 'w', 's', 32, 0,
  /* 3394 */ 'v', 's', 'u', 'b', 'u', 'w', 's', 32, 0,
  /* 3403 */ 'v', 'a', 'd', 'd', 'u', 'w', 's', 32, 0,
  /* 3412 */ 'v', 'c', 't', 's', 'x', 's', 32, 0,
  /* 3420 */ 'v', 'c', 't', 'u', 'x', 's', 32, 0,
  /* 3428 */ 'd', 'c', 'b', 't', 32, 0,
  /* 3434 */ 'w', 'a', 'i', 't', 32, 0,
  /* 3440 */ 'f', 's', 'q', 'r', 't', 32, 0,
  /* 3447 */ 'd', 'c', 'b', 's', 't', 32, 0,
  /* 3454 */ 'd', 's', 't', 32, 0,
  /* 3459 */ 'd', 'c', 'b', 't', 's', 't', 32, 0,
  /* 3467 */ 'd', 's', 't', 's', 't', 32, 0,
  /* 3474 */ 'd', 's', 't', 't', 32, 0,
  /* 3480 */ 'd', 's', 't', 's', 't', 't', 32, 0,
  /* 3488 */ 'l', 'h', 'a', 'u', 32, 0,
  /* 3494 */ 's', 't', 'b', 'u', 32, 0,
  /* 3500 */ 'l', 'f', 'd', 'u', 32, 0,
  /* 3506 */ 's', 't', 'f', 'd', 'u', 32, 0,
  /* 3513 */ 'm', 'u', 'l', 'h', 'd', 'u', 32, 0,
  /* 3521 */ 'f', 'c', 'f', 'i', 'd', 'u', 32, 0,
  /* 3529 */ 'l', 'd', 'u', 32, 0,
  /* 3534 */ 's', 't', 'd', 'u', 32, 0,
  /* 3540 */ 'd', 'i', 'v', 'd', 'u', 32, 0,
  /* 3547 */ 's', 't', 'h', 'u', 32, 0,
  /* 3553 */ 'f', 'c', 'm', 'p', 'u', 32, 0,
  /* 3560 */ 'l', 'f', 's', 'u', 32, 0,
  /* 3566 */ 's', 't', 'f', 's', 'u', 32, 0,
  /* 3573 */ 'm', 'u', 'l', 'h', 'w', 'u', 32, 0,
  /* 3581 */ 's', 't', 'w', 'u', 32, 0,
  /* 3587 */ 'd', 'i', 'v', 'w', 'u', 32, 0,
  /* 3594 */ 'l', 'b', 'z', 'u', 32, 0,
  /* 3600 */ 'l', 'h', 'z', 'u', 32, 0,
  /* 3606 */ 'l', 'w', 'z', 'u', 32, 0,
  /* 3612 */ 'f', 'd', 'i', 'v', 32, 0,
  /* 3618 */ 'c', 'r', 'e', 'q', 'v', 32, 0,
  /* 3625 */ 'v', 's', 'r', 'a', 'w', 32, 0,
  /* 3632 */ 'v', 'm', 'r', 'g', 'h', 'w', 32, 0,
  /* 3640 */ 'm', 'u', 'l', 'h', 'w', 32, 0,
  /* 3647 */ 'v', 'm', 'r', 'g', 'l', 'w', 32, 0,
  /* 3655 */ 'm', 'u', 'l', 'l', 'w', 32, 0,
  /* 3662 */ 'c', 'm', 'p', 'l', 'w', 32, 0,
  /* 3669 */ 'v', 'r', 'l', 'w', 32, 0,
  /* 3675 */ 'v', 's', 'l', 'w', 32, 0,
  /* 3681 */ 'l', 'm', 'w', 32, 0,
  /* 3686 */ 's', 't', 'm', 'w', 32, 0,
  /* 3692 */ 'c', 'm', 'p', 'w', 32, 0,
  /* 3698 */ 'v', 's', 'r', 'w', 32, 0,
  /* 3704 */ 'v', 'a', 'v', 'g', 's', 'w', 32, 0,
  /* 3712 */ 'v', 's', 'p', 'l', 't', 'i', 's', 'w', 32, 0,
  /* 3722 */ 'v', 'm', 'i', 'n', 's', 'w', 32, 0,
  /* 3730 */ 'v', 'c', 'm', 'p', 'g', 't', 's', 'w', 32, 0,
  /* 3740 */ 'e', 'x', 't', 's', 'w', 32, 0,
  /* 3747 */ 'v', 'm', 'a', 'x', 's', 'w', 32, 0,
  /* 3755 */ 'v', 's', 'p', 'l', 't', 'w', 32, 0,
  /* 3763 */ 'p', 'o', 'p', 'c', 'n', 't', 'w', 32, 0,
  /* 3772 */ 's', 't', 'w', 32, 0,
  /* 3777 */ 'v', 's', 'u', 'b', 'c', 'u', 'w', 32, 0,
  /* 3786 */ 'v', 'a', 'd', 'd', 'c', 'u', 'w', 32, 0,
  /* 3795 */ 'v', 'a', 'v', 'g', 'u', 'w', 32, 0,
  /* 3803 */ 'v', 'm', 'i', 'n', 'u', 'w', 32, 0,
  /* 3811 */ 'v', 'c', 'm', 'p', 'e', 'q', 'u', 'w', 32, 0,
  /* 3821 */ 'v', 'c', 'm', 'p', 'g', 't', 'u', 'w', 32, 0,
  /* 3831 */ 'v', 'm', 'a', 'x', 'u', 'w', 32, 0,
  /* 3839 */ 'd', 'i', 'v', 'w', 32, 0,
  /* 3845 */ 'c', 'n', 't', 'l', 'z', 'w', 32, 0,
  /* 3853 */ 'l', 'h', 'a', 'x', 32, 0,
  /* 3859 */ 'l', 'f', 'i', 'w', 'a', 'x', 32, 0,
  /* 3867 */ 'l', 'w', 'a', 'x', 32, 0,
  /* 3873 */ 'l', 'v', 'e', 'b', 'x', 32, 0,
  /* 3880 */ 's', 't', 'v', 'e', 'b', 'x', 32, 0,
  /* 3888 */ 's', 't', 'b', 'x', 32, 0,
  /* 3894 */ 'l', 'f', 'd', 'x', 32, 0,
  /* 3900 */ 's', 't', 'f', 'd', 'x', 32, 0,
  /* 3907 */ 'l', 'd', 'x', 32, 0,
  /* 3912 */ 's', 't', 'd', 'x', 32, 0,
  /* 3918 */ 'l', 'v', 'e', 'h', 'x', 32, 0,
  /* 3925 */ 's', 't', 'v', 'e', 'h', 'x', 32, 0,
  /* 3933 */ 's', 't', 'h', 'x', 32, 0,
  /* 3939 */ 'v', 'u', 'p', 'k', 'h', 'p', 'x', 32, 0,
  /* 3948 */ 'v', 'p', 'k', 'p', 'x', 32, 0,
  /* 3955 */ 'v', 'u', 'p', 'k', 'l', 'p', 'x', 32, 0,
  /* 3964 */ 'l', 'd', 'a', 'r', 'x', 32, 0,
  /* 3971 */ 'l', 'w', 'a', 'r', 'x', 32, 0,
  /* 3978 */ 'l', 'd', 'b', 'r', 'x', 32, 0,
  /* 3985 */ 's', 't', 'd', 'b', 'r', 'x', 32, 0,
  /* 3993 */ 'l', 'h', 'b', 'r', 'x', 32, 0,
  /* 4000 */ 's', 't', 'h', 'b', 'r', 'x', 32, 0,
  /* 4008 */ 'l', 'w', 'b', 'r', 'x', 32, 0,
  /* 4015 */ 's', 't', 'w', 'b', 'r', 'x', 32, 0,
  /* 4023 */ 'v', 'c', 'f', 's', 'x', 32, 0,
  /* 4030 */ 'l', 'f', 's', 'x', 32, 0,
  /* 4036 */ 's', 't', 'f', 's', 'x', 32, 0,
  /* 4043 */ 'l', 'h', 'a', 'u', 'x', 32, 0,
  /* 4050 */ 'l', 'w', 'a', 'u', 'x', 32, 0,
  /* 4057 */ 's', 't', 'b', 'u', 'x', 32, 0,
  /* 4064 */ 'l', 'f', 'd', 'u', 'x', 32, 0,
  /* 4071 */ 's', 't', 'f', 'd', 'u', 'x', 32, 0,
  /* 4079 */ 'l', 'd', 'u', 'x', 32, 0,
  /* 4085 */ 's', 't', 'd', 'u', 'x', 32, 0,
  /* 4092 */ 'v', 'c', 'f', 'u', 'x', 32, 0,
  /* 4099 */ 's', 't', 'h', 'u', 'x', 32, 0,
  /* 4106 */ 'l', 'f', 's', 'u', 'x', 32, 0,
  /* 4113 */ 's', 't', 'f', 's', 'u', 'x', 32, 0,
  /* 4121 */ 's', 't', 'w', 'u', 'x', 32, 0,
  /* 4128 */ 'l', 'b', 'z', 'u', 'x', 32, 0,
  /* 4135 */ 'l', 'h', 'z', 'u', 'x', 32, 0,
  /* 4142 */ 'l', 'w', 'z', 'u', 'x', 32, 0,
  /* 4149 */ 'l', 'v', 'x', 32, 0,
  /* 4154 */ 's', 't', 'v', 'x', 32, 0,
  /* 4160 */ 'l', 'v', 'e', 'w', 'x', 32, 0,
  /* 4167 */ 's', 't', 'v', 'e', 'w', 'x', 32, 0,
  /* 4175 */ 's', 't', 'f', 'i', 'w', 'x', 32, 0,
  /* 4183 */ 's', 't', 'w', 'x', 32, 0,
  /* 4189 */ 'l', 'b', 'z', 'x', 32, 0,
  /* 4195 */ 'l', 'h', 'z', 'x', 32, 0,
  /* 4201 */ 'l', 'f', 'i', 'w', 'z', 'x', 32, 0,
  /* 4209 */ 'l', 'w', 'z', 'x', 32, 0,
  /* 4215 */ 'd', 'c', 'b', 'z', 32, 0,
  /* 4221 */ 'l', 'b', 'z', 32, 0,
  /* 4226 */ 'b', 'd', 'z', 32, 0,
  /* 4231 */ 'f', 'c', 't', 'i', 'd', 'z', 32, 0,
  /* 4239 */ 'l', 'h', 'z', 32, 0,
  /* 4244 */ 'v', 'r', 'f', 'i', 'z', 32, 0,
  /* 4251 */ 'f', 'r', 'i', 'z', 32, 0,
  /* 4257 */ 'b', 'd', 'n', 'z', 32, 0,
  /* 4263 */ 'f', 'c', 't', 'i', 'd', 'u', 'z', 32, 0,
  /* 4272 */ 'f', 'c', 't', 'i', 'w', 'u', 'z', 32, 0,
  /* 4281 */ 'f', 'c', 't', 'i', 'w', 'z', 32, 0,
  /* 4289 */ 'l', 'w', 'z', 32, 0,
  /* 4294 */ 'l', 'd', 32, '2', ',', 32, '8', '(', 0,
  /* 4303 */ 'l', 'd', 32, '2', ',', 32, '4', '0', '(', '1', ')', 0,
  /* 4315 */ 'b', 'd', 'z', 'l', 'r', 'l', '+', 0,
  /* 4323 */ 'b', 'd', 'n', 'z', 'l', 'r', 'l', '+', 0,
  /* 4332 */ 'b', 'd', 'z', 'l', 'r', '+', 0,
  /* 4339 */ 'b', 'd', 'n', 'z', 'l', 'r', '+', 0,
  /* 4347 */ 'b', 'd', 'z', 'l', 'r', 'l', '-', 0,
  /* 4355 */ 'b', 'd', 'n', 'z', 'l', 'r', 'l', '-', 0,
  /* 4364 */ 'b', 'd', 'z', 'l', 'r', '-', 0,
  /* 4371 */ 'b', 'd', 'n', 'z', 'l', 'r', '-', 0,
  /* 4379 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'S', 'U', 'B', '_', 'I', '3', '2', 0,
  /* 4400 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'A', 'D', 'D', '_', 'I', '3', '2', 0,
  /* 4421 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'N', 'A', 'N', 'D', '_', 'I', '3', '2', 0,
  /* 4443 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'A', 'N', 'D', '_', 'I', '3', '2', 0,
  /* 4464 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'S', 'W', 'A', 'P', '_', 'I', '3', '2', 0,
  /* 4481 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'X', 'O', 'R', '_', 'I', '3', '2', 0,
  /* 4502 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'O', 'R', '_', 'I', '3', '2', 0,
  /* 4522 */ '#', 'E', 'H', '_', 'S', 'J', 'L', 'J', '_', 'L', 'O', 'N', 'G', 'J', 'M', 'P', '3', '2', 0,
  /* 4541 */ '#', 'E', 'H', '_', 'S', 'J', 'L', 'J', '_', 'S', 'E', 'T', 'J', 'M', 'P', '3', '2', 0,
  /* 4559 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'S', 'U', 'B', '_', 'I', '6', '4', 0,
  /* 4580 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'A', 'D', 'D', '_', 'I', '6', '4', 0,
  /* 4601 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'N', 'A', 'N', 'D', '_', 'I', '6', '4', 0,
  /* 4623 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'S', 'W', 'A', 'P', '_', 'I', '6', '4', 0,
  /* 4640 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'C', 'M', 'P', '_', 'S', 'W', 'A', 'P', '_', 'I', '6', '4', 0,
  /* 4661 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'X', 'O', 'R', '_', 'I', '6', '4', 0,
  /* 4682 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'O', 'R', '_', 'I', '6', '4', 0,
  /* 4702 */ '#', 'E', 'H', '_', 'S', 'J', 'L', 'J', '_', 'L', 'O', 'N', 'G', 'J', 'M', 'P', '6', '4', 0,
  /* 4721 */ '#', 'E', 'H', '_', 'S', 'J', 'L', 'J', '_', 'S', 'E', 'T', 'J', 'M', 'P', '6', '4', 0,
  /* 4739 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'A', 'N', 'D', '_', 'i', '6', '4', 0,
  /* 4760 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'F', '4', 0,
  /* 4774 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'I', '4', 0,
  /* 4788 */ 'c', 'r', 'x', 'o', 'r', 32, '6', ',', 32, '6', ',', 32, '6', 0,
  /* 4802 */ 'c', 'r', 'e', 'q', 'v', 32, '6', ',', 32, '6', ',', 32, '6', 0,
  /* 4816 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'S', 'U', 'B', '_', 'I', '1', '6', 0,
  /* 4837 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'A', 'D', 'D', '_', 'I', '1', '6', 0,
  /* 4858 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'N', 'A', 'N', 'D', '_', 'I', '1', '6', 0,
  /* 4880 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'A', 'N', 'D', '_', 'I', '1', '6', 0,
  /* 4901 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'S', 'W', 'A', 'P', '_', 'I', '1', '6', 0,
  /* 4918 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'X', 'O', 'R', '_', 'I', '1', '6', 0,
  /* 4939 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'O', 'R', '_', 'I', '1', '6', 0,
  /* 4959 */ '#', 'D', 'Y', 'N', 'A', 'L', 'L', 'O', 'C', '8', 0,
  /* 4970 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'F', '8', 0,
  /* 4984 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'S', 'U', 'B', '_', 'I', '8', 0,
  /* 5004 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'I', '8', 0,
  /* 5018 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'A', 'D', 'D', '_', 'I', '8', 0,
  /* 5038 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'N', 'A', 'N', 'D', '_', 'I', '8', 0,
  /* 5059 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'A', 'N', 'D', '_', 'I', '8', 0,
  /* 5079 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'C', 'M', 'P', '_', 'S', 'W', 'A', 'P', '_', 'I', '8', 0,
  /* 5099 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'X', 'O', 'R', '_', 'I', '8', 0,
  /* 5118 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'O', 'R', '_', 'I', '8', 0,
  /* 5137 */ '#', 'M', 'o', 'v', 'e', 'P', 'C', 't', 'o', 'L', 'R', '8', 0,
  /* 5150 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'S', 'W', 'A', 'P', '_', 'i', '8', 0,
  /* 5166 */ '#', 'A', 'D', 'D', 'I', 'S', 't', 'o', 'c', 'H', 'A', 0,
  /* 5178 */ '#', 'A', 'D', 'D', 'I', 'S', 't', 'l', 's', 'g', 'd', 'H', 'A', 0,
  /* 5192 */ '#', 'A', 'D', 'D', 'I', 'S', 't', 'l', 's', 'l', 'd', 'H', 'A', 0,
  /* 5206 */ '#', 'A', 'D', 'D', 'I', 'S', 'g', 'o', 't', 'T', 'p', 'r', 'e', 'l', 'H', 'A', 0,
  /* 5223 */ '#', 'A', 'D', 'D', 'I', 'S', 'd', 't', 'p', 'r', 'e', 'l', 'H', 'A', 0,
  /* 5238 */ '#', 'D', 'Y', 'N', 'A', 'L', 'L', 'O', 'C', 0,
  /* 5248 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'V', 'R', 'R', 'C', 0,
  /* 5264 */ 'L', 'I', 'F', 'E', 'T', 'I', 'M', 'E', '_', 'E', 'N', 'D', 0,
  /* 5277 */ 'B', 'U', 'N', 'D', 'L', 'E', 0,
  /* 5284 */ 'D', 'B', 'G', '_', 'V', 'A', 'L', 'U', 'E', 0,
  /* 5294 */ '#', 'R', 'E', 'S', 'T', 'O', 'R', 'E', '_', 'V', 'R', 'S', 'A', 'V', 'E', 0,
  /* 5310 */ '#', 'S', 'P', 'I', 'L', 'L', '_', 'V', 'R', 'S', 'A', 'V', 'E', 0,
  /* 5324 */ '#', 'L', 'D', 't', 'o', 'c', 'J', 'T', 'I', 0,
  /* 5334 */ '#', 'L', 'D', 't', 'o', 'c', 'L', 0,
  /* 5342 */ '#', 'A', 'D', 'D', 'I', 't', 'o', 'c', 'L', 0,
  /* 5352 */ '#', 'A', 'D', 'D', 'I', 't', 'l', 's', 'g', 'd', 'L', 0,
  /* 5364 */ '#', 'A', 'D', 'D', 'I', 't', 'l', 's', 'l', 'd', 'L', 0,
  /* 5376 */ '#', 'L', 'D', 'g', 'o', 't', 'T', 'p', 'r', 'e', 'l', 'L', 0,
  /* 5389 */ '#', 'A', 'D', 'D', 'I', 'd', 't', 'p', 'r', 'e', 'l', 'L', 0,
  /* 5402 */ '#', 'R', 'E', 'S', 'T', 'O', 'R', 'E', '_', 'C', 'R', 0,
  /* 5414 */ '#', 'S', 'P', 'I', 'L', 'L', '_', 'C', 'R', 0,
  /* 5424 */ '#', 'G', 'E', 'T', 't', 'l', 's', 'l', 'd', 'A', 'D', 'D', 'R', 0,
  /* 5438 */ '#', 'G', 'E', 'T', 't', 'l', 's', 'A', 'D', 'D', 'R', 0,
  /* 5450 */ '#', 'M', 'o', 'v', 'e', 'P', 'C', 't', 'o', 'L', 'R', 0,
  /* 5462 */ '#', 'L', 'D', 't', 'o', 'c', 'C', 'P', 'T', 0,
  /* 5472 */ 'L', 'I', 'F', 'E', 'T', 'I', 'M', 'E', '_', 'S', 'T', 'A', 'R', 'T', 0,
  /* 5487 */ 'b', 0,
  /* 5489 */ 'i', 's', 'y', 'n', 'c', 0,
  /* 5495 */ '#', 'L', 'D', 't', 'o', 'c', 0,
  /* 5502 */ 'd', 's', 's', 'a', 'l', 'l', 0,
  /* 5509 */ 'b', 'l', 'r', 'l', 0,
  /* 5514 */ 'b', 'd', 'z', 'l', 'r', 'l', 0,
  /* 5521 */ 'b', 'd', 'n', 'z', 'l', 'r', 'l', 0,
  /* 5529 */ 'b', 'c', 't', 'r', 'l', 0,
  /* 5535 */ 'e', 'i', 'e', 'i', 'o', 0,
  /* 5541 */ 't', 'r', 'a', 'p', 0,
  /* 5546 */ 'n', 'o', 'p', 0,
  /* 5550 */ 'b', 'l', 'r', 0,
  /* 5554 */ 'b', 'd', 'z', 'l', 'r', 0,
  /* 5560 */ 'b', 'd', 'n', 'z', 'l', 'r', 0,
  /* 5567 */ 'b', 'c', 't', 'r', 0,
  };

  O << "\t";

  // Emit the opcode for the instruction.
  uint64_t Bits1 = OpInfo[MI->getOpcode()];
  uint64_t Bits2 = OpInfo2[MI->getOpcode()];
  uint64_t Bits = (Bits2 << 32) | Bits1;
  assert(Bits != 0 && "Cannot print this instruction.");
  O << AsmStrs+(Bits & 8191)-1;


  // Fragment 0 encoded into 4 bits for 13 unique commands.
  switch ((Bits >> 13) & 15) {
  default:   // unreachable.
  case 0:
    // DBG_VALUE, BUNDLE, LIFETIME_START, LIFETIME_END, ADDISdtprelHA, ADDISg...
    return;
    break;
  case 1:
    // ADD4, ADD4o, ADD8, ADD8TLS, ADD8o, ADDC, ADDC8, ADDC8o, ADDCo, ADDE, A...
    printOperand(MI, 0, O); 
    break;
  case 2:
    // ADJCALLSTACKDOWN, ADJCALLSTACKUP
    printU16ImmOperand(MI, 0, O); 
    break;
  case 3:
    // B, BCLalways, BDNZ, BDNZ8, BDNZL, BDNZLm, BDNZLp, BDNZm, BDNZp, BDZ, B...
    printBranchOperand(MI, 0, O); 
    break;
  case 4:
    // BA, BDNZA, BDNZAm, BDNZAp, BDNZLA, BDNZLAm, BDNZLAp, BDZA, BDZAm, BDZA...
    printAbsBranchOperand(MI, 0, O); 
    break;
  case 5:
    // BCC, BCCA, BCCL, BCCLA, BCCTR, BCCTR8, BCCTRL, BCCTRL8, BCLR, BCLRL
    printPredicateOperand(MI, 0, O, "cc"); 
    break;
  case 6:
    // BL8_NOP_TLS, BL8_TLS
    printTLSCall(MI, 0, O); 
    break;
  case 7:
    // DCBA, DCBF, DCBI, DCBST, DCBT, DCBTST, DCBZ, DCBZL, ICBI
    printMemRegReg(MI, 0, O); 
    return;
    break;
  case 8:
    // DSS
    printU5ImmOperand(MI, 1, O); 
    return;
    break;
  case 9:
    // DST, DST64, DSTST, DSTST64, DSTSTT, DSTSTT64, DSTT, DSTT64
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ", "; 
    printU5ImmOperand(MI, 1, O); 
    return;
    break;
  case 10:
    // MTFSB0, MTFSB1, TD, TDI, TW, TWI, gBC, gBCA, gBCCTR, gBCCTRL, gBCL, gB...
    printU5ImmOperand(MI, 0, O); 
    break;
  case 11:
    // MTOCRF, MTOCRF8
    printcrbitm(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 12:
    // MTVRSAVEv, STBU, STBU8, STBUX, STBUX8, STDU, STDUX, STFDU, STFDUX, STF...
    printOperand(MI, 1, O); 
    break;
  }


  // Fragment 1 encoded into 4 bits for 16 unique commands.
  switch ((Bits >> 17) & 15) {
  default:   // unreachable.
  case 0:
    // ADD4, ADD4o, ADD8, ADD8TLS, ADD8o, ADDC, ADDC8, ADDC8o, ADDCo, ADDE, A...
    O << ", "; 
    break;
  case 1:
    // ADJCALLSTACKDOWN, B, BA, BCLalways, BDNZ, BDNZ8, BDNZA, BDNZAm, BDNZAp...
    return;
    break;
  case 2:
    // ADJCALLSTACKUP, ATOMIC_CMP_SWAP_I16, ATOMIC_CMP_SWAP_I32, TCRETURNai, ...
    O << ' '; 
    break;
  case 3:
    // BCC
    printPredicateOperand(MI, 0, O, "pm"); 
    O << ' '; 
    printPredicateOperand(MI, 0, O, "reg"); 
    O << ", "; 
    printBranchOperand(MI, 2, O); 
    return;
    break;
  case 4:
    // BCCA
    O << 'a'; 
    printPredicateOperand(MI, 0, O, "pm"); 
    O << ' '; 
    printPredicateOperand(MI, 0, O, "reg"); 
    O << ", "; 
    printAbsBranchOperand(MI, 2, O); 
    return;
    break;
  case 5:
    // BCCL
    O << 'l'; 
    printPredicateOperand(MI, 0, O, "pm"); 
    O << ' '; 
    printPredicateOperand(MI, 0, O, "reg"); 
    O << ", "; 
    printBranchOperand(MI, 2, O); 
    return;
    break;
  case 6:
    // BCCLA
    O << "la"; 
    printPredicateOperand(MI, 0, O, "pm"); 
    O << ' '; 
    printPredicateOperand(MI, 0, O, "reg"); 
    O << ", "; 
    printAbsBranchOperand(MI, 2, O); 
    return;
    break;
  case 7:
    // BCCTR, BCCTR8
    O << "ctr"; 
    printPredicateOperand(MI, 0, O, "pm"); 
    O << ' '; 
    printPredicateOperand(MI, 0, O, "reg"); 
    return;
    break;
  case 8:
    // BCCTRL, BCCTRL8
    O << "ctrl"; 
    printPredicateOperand(MI, 0, O, "pm"); 
    O << ' '; 
    printPredicateOperand(MI, 0, O, "reg"); 
    return;
    break;
  case 9:
    // BCLR
    O << "lr"; 
    printPredicateOperand(MI, 0, O, "pm"); 
    O << ' '; 
    printPredicateOperand(MI, 0, O, "reg"); 
    return;
    break;
  case 10:
    // BCLRL
    O << "lrl"; 
    printPredicateOperand(MI, 0, O, "pm"); 
    O << ' '; 
    printPredicateOperand(MI, 0, O, "reg"); 
    return;
    break;
  case 11:
    // BL8_NOP, BL8_NOP_TLS, BLA8_NOP
    O << "\n\tnop"; 
    return;
    break;
  case 12:
    // LDinto_toc
    O << ')'; 
    return;
    break;
  case 13:
    // MFTB8
    O << ", 268"; 
    return;
    break;
  case 14:
    // MFVRSAVE, MFVRSAVEv
    O << ", 256"; 
    return;
    break;
  case 15:
    // V_SETALLONES, V_SETALLONESB, V_SETALLONESH
    O << ", -1"; 
    return;
    break;
  }


  // Fragment 2 encoded into 4 bits for 12 unique commands.
  switch ((Bits >> 21) & 15) {
  default:   // unreachable.
  case 0:
    // ADD4, ADD4o, ADD8, ADD8TLS, ADD8o, ADDC, ADDC8, ADDC8o, ADDCo, ADDE, A...
    printOperand(MI, 1, O); 
    break;
  case 1:
    // ADJCALLSTACKUP
    printU16ImmOperand(MI, 1, O); 
    return;
    break;
  case 2:
    // ATOMIC_CMP_SWAP_I16, ATOMIC_CMP_SWAP_I32, LBZX, LBZX8, LDARX, LDBRX, L...
    printMemRegReg(MI, 1, O); 
    break;
  case 3:
    // CRSET, CRUNSET, V_SET0, V_SET0B, V_SET0H
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 0, O); 
    return;
    break;
  case 4:
    // LA
    printS16ImmOperand(MI, 2, O); 
    O << '('; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 5:
    // LAx, LBZ, LBZ8, LD, LFD, LFS, LHA, LHA8, LHZ, LHZ8, LMW, LWA, LWA_32, ...
    printMemRegImm(MI, 1, O); 
    return;
    break;
  case 6:
    // LBZU, LBZU8, LDU, LFDU, LFSU, LHAU, LHAU8, LHZU, LHZU8, LWZU, LWZU8, S...
    printMemRegImm(MI, 2, O); 
    return;
    break;
  case 7:
    // LBZUX, LBZUX8, LDUX, LFDUX, LFSUX, LHAUX, LHAUX8, LHZUX, LHZUX8, LWAUX...
    printMemRegReg(MI, 2, O); 
    return;
    break;
  case 8:
    // LI, LI8, LIS, LIS8
    printS16ImmOperand(MI, 1, O); 
    return;
    break;
  case 9:
    // MFOCRF, MFOCRF8
    printcrbitm(MI, 1, O); 
    return;
    break;
  case 10:
    // RLDIMI, RLDIMIo, RLWIMI, RLWIMIo, VCFSX, VCFUX, VCTSXS, VCTUXS, VSPLTB...
    printOperand(MI, 2, O); 
    O << ", "; 
    break;
  case 11:
    // VSPLTISB, VSPLTISH, VSPLTISW
    printS5ImmOperand(MI, 1, O); 
    return;
    break;
  }


  // Fragment 3 encoded into 3 bits for 7 unique commands.
  switch ((Bits >> 25) & 7) {
  default:   // unreachable.
  case 0:
    // ADD4, ADD4o, ADD8, ADD8TLS, ADD8o, ADDC, ADDC8, ADDC8o, ADDCo, ADDE, A...
    O << ", "; 
    break;
  case 1:
    // ADDME, ADDME8, ADDME8o, ADDMEo, ADDZE, ADDZE8, ADDZE8o, ADDZEo, CNTLZD...
    return;
    break;
  case 2:
    // ATOMIC_CMP_SWAP_I16, ATOMIC_CMP_SWAP_I32
    O << ' '; 
    printOperand(MI, 3, O); 
    O << ' '; 
    printOperand(MI, 4, O); 
    return;
    break;
  case 3:
    // RLDIMI, RLDIMIo
    printU6ImmOperand(MI, 3, O); 
    O << ", "; 
    printU6ImmOperand(MI, 4, O); 
    return;
    break;
  case 4:
    // RLWIMI, RLWIMIo
    printU5ImmOperand(MI, 3, O); 
    O << ", "; 
    printU5ImmOperand(MI, 4, O); 
    O << ", "; 
    printU5ImmOperand(MI, 5, O); 
    return;
    break;
  case 5:
    // VCFSX, VCFUX, VCTSXS, VCTUXS, VSPLTB, VSPLTH, VSPLTW
    printU5ImmOperand(MI, 1, O); 
    return;
    break;
  case 6:
    // VCFSX_0, VCFUX_0, VCTSXS_0, VCTUXS_0
    O << ", 0"; 
    return;
    break;
  }


  // Fragment 4 encoded into 3 bits for 7 unique commands.
  switch ((Bits >> 28) & 7) {
  default:   // unreachable.
  case 0:
    // ADD4, ADD4o, ADD8, ADD8TLS, ADD8o, ADDC, ADDC8, ADDC8o, ADDCo, ADDE, A...
    printOperand(MI, 2, O); 
    break;
  case 1:
    // ADDI, ADDI8, ADDIC, ADDIC8, ADDICo, ADDIS, ADDIS8, CMPDI, CMPWI, MULLI...
    printS16ImmOperand(MI, 2, O); 
    return;
    break;
  case 2:
    // ANDISo, ANDISo8, ANDIo, ANDIo8, CMPLDI, CMPLWI, ORI, ORI8, ORIS, ORIS8...
    printU16ImmOperand(MI, 2, O); 
    return;
    break;
  case 3:
    // CLRLSLDI, CLRLSLDIo, CLRRDI, CLRRDIo, EXTLDI, EXTLDIo, EXTRDI, EXTRDIo...
    printU6ImmOperand(MI, 2, O); 
    break;
  case 4:
    // CLRLSLWI, CLRLSLWIo, CLRRWI, CLRRWIo, EXTLWI, EXTLWIo, EXTRWI, EXTRWIo...
    printU5ImmOperand(MI, 2, O); 
    break;
  case 5:
    // gBC, gBCL
    printBranchOperand(MI, 2, O); 
    return;
    break;
  case 6:
    // gBCA, gBCLA
    printAbsBranchOperand(MI, 2, O); 
    return;
    break;
  }


  // Fragment 5 encoded into 1 bits for 2 unique commands.
  if ((Bits >> 31) & 1) {
    // CLRLSLDI, CLRLSLDIo, CLRLSLWI, CLRLSLWIo, EXTLDI, EXTLDIo, EXTLWI, EXT...
    O << ", "; 
  } else {
    // ADD4, ADD4o, ADD8, ADD8TLS, ADD8o, ADDC, ADDC8, ADDC8o, ADDCo, ADDE, A...
    return;
  }


  // Fragment 6 encoded into 2 bits for 3 unique commands.
  switch ((Bits >> 32) & 3) {
  default:   // unreachable.
  case 0:
    // CLRLSLDI, CLRLSLDIo, EXTLDI, EXTLDIo, EXTRDI, EXTRDIo, INSRDI, INSRDIo...
    printU6ImmOperand(MI, 3, O); 
    return;
    break;
  case 1:
    // CLRLSLWI, CLRLSLWIo, EXTLWI, EXTLWIo, EXTRWI, EXTRWIo, INSLWI, INSLWIo...
    printU5ImmOperand(MI, 3, O); 
    break;
  case 2:
    // FMADD, FMADDS, FMADDSo, FMADDo, FMSUB, FMSUBS, FMSUBSo, FMSUBo, FNMADD...
    printOperand(MI, 3, O); 
    return;
    break;
  }


  // Fragment 7 encoded into 1 bits for 2 unique commands.
  if ((Bits >> 34) & 1) {
    // RLWINM, RLWINM8, RLWINM8o, RLWINMo, RLWNM, RLWNMo
    O << ", "; 
    printU5ImmOperand(MI, 4, O); 
    return;
  } else {
    // CLRLSLWI, CLRLSLWIo, EXTLWI, EXTLWIo, EXTRWI, EXTRWIo, INSLWI, INSLWIo...
    return;
  }

}


/// getRegisterName - This method is automatically generated by tblgen
/// from the register set description.  This returns the assembler name
/// for the specified register.
const char *PPCInstPrinter::getRegisterName(unsigned RegNo) {
  assert(RegNo && RegNo < 182 && "Invalid register number!");

  static const char AsmStrs[] = {
  /* 0 */ '*', '*', 'R', 'O', 'U', 'N', 'D', 'I', 'N', 'G', 32, 'M', 'O', 'D', 'E', '*', '*', 0,
  /* 18 */ '*', '*', 'F', 'R', 'A', 'M', 'E', 32, 'P', 'O', 'I', 'N', 'T', 'E', 'R', '*', '*', 0,
  /* 36 */ '*', '*', 'B', 'A', 'S', 'E', 32, 'P', 'O', 'I', 'N', 'T', 'E', 'R', '*', '*', 0,
  /* 53 */ 'f', '1', '0', 0,
  /* 57 */ 'r', '1', '0', 0,
  /* 61 */ 'v', '1', '0', 0,
  /* 65 */ 'f', '2', '0', 0,
  /* 69 */ 'r', '2', '0', 0,
  /* 73 */ 'v', '2', '0', 0,
  /* 77 */ 'f', '3', '0', 0,
  /* 81 */ 'r', '3', '0', 0,
  /* 85 */ 'v', '3', '0', 0,
  /* 89 */ 'f', '0', 0,
  /* 92 */ 'c', 'r', '0', 0,
  /* 96 */ 'v', '0', 0,
  /* 99 */ 'f', '1', '1', 0,
  /* 103 */ 'r', '1', '1', 0,
  /* 107 */ 'v', '1', '1', 0,
  /* 111 */ 'f', '2', '1', 0,
  /* 115 */ 'r', '2', '1', 0,
  /* 119 */ 'v', '2', '1', 0,
  /* 123 */ 'f', '3', '1', 0,
  /* 127 */ 'r', '3', '1', 0,
  /* 131 */ 'v', '3', '1', 0,
  /* 135 */ 'f', '1', 0,
  /* 138 */ 'c', 'r', '1', 0,
  /* 142 */ 'v', '1', 0,
  /* 145 */ 'f', '1', '2', 0,
  /* 149 */ 'r', '1', '2', 0,
  /* 153 */ 'v', '1', '2', 0,
  /* 157 */ 'f', '2', '2', 0,
  /* 161 */ 'r', '2', '2', 0,
  /* 165 */ 'v', '2', '2', 0,
  /* 169 */ 'f', '2', 0,
  /* 172 */ 'c', 'r', '2', 0,
  /* 176 */ 'v', '2', 0,
  /* 179 */ 'f', '1', '3', 0,
  /* 183 */ 'r', '1', '3', 0,
  /* 187 */ 'v', '1', '3', 0,
  /* 191 */ 'f', '2', '3', 0,
  /* 195 */ 'r', '2', '3', 0,
  /* 199 */ 'v', '2', '3', 0,
  /* 203 */ 'f', '3', 0,
  /* 206 */ 'c', 'r', '3', 0,
  /* 210 */ 'v', '3', 0,
  /* 213 */ 'f', '1', '4', 0,
  /* 217 */ 'r', '1', '4', 0,
  /* 221 */ 'v', '1', '4', 0,
  /* 225 */ 'f', '2', '4', 0,
  /* 229 */ 'r', '2', '4', 0,
  /* 233 */ 'v', '2', '4', 0,
  /* 237 */ 'f', '4', 0,
  /* 240 */ 'c', 'r', '4', 0,
  /* 244 */ 'v', '4', 0,
  /* 247 */ 'f', '1', '5', 0,
  /* 251 */ 'r', '1', '5', 0,
  /* 255 */ 'v', '1', '5', 0,
  /* 259 */ 'f', '2', '5', 0,
  /* 263 */ 'r', '2', '5', 0,
  /* 267 */ 'v', '2', '5', 0,
  /* 271 */ 'f', '5', 0,
  /* 274 */ 'c', 'r', '5', 0,
  /* 278 */ 'v', '5', 0,
  /* 281 */ 'f', '1', '6', 0,
  /* 285 */ 'r', '1', '6', 0,
  /* 289 */ 'v', '1', '6', 0,
  /* 293 */ 'f', '2', '6', 0,
  /* 297 */ 'r', '2', '6', 0,
  /* 301 */ 'v', '2', '6', 0,
  /* 305 */ 'f', '6', 0,
  /* 308 */ 'c', 'r', '6', 0,
  /* 312 */ 'v', '6', 0,
  /* 315 */ 'f', '1', '7', 0,
  /* 319 */ 'r', '1', '7', 0,
  /* 323 */ 'v', '1', '7', 0,
  /* 327 */ 'f', '2', '7', 0,
  /* 331 */ 'r', '2', '7', 0,
  /* 335 */ 'v', '2', '7', 0,
  /* 339 */ 'f', '7', 0,
  /* 342 */ 'c', 'r', '7', 0,
  /* 346 */ 'v', '7', 0,
  /* 349 */ 'f', '1', '8', 0,
  /* 353 */ 'r', '1', '8', 0,
  /* 357 */ 'v', '1', '8', 0,
  /* 361 */ 'f', '2', '8', 0,
  /* 365 */ 'r', '2', '8', 0,
  /* 369 */ 'v', '2', '8', 0,
  /* 373 */ 'f', '8', 0,
  /* 376 */ 'r', '8', 0,
  /* 379 */ 'v', '8', 0,
  /* 382 */ 'f', '1', '9', 0,
  /* 386 */ 'r', '1', '9', 0,
  /* 390 */ 'v', '1', '9', 0,
  /* 394 */ 'f', '2', '9', 0,
  /* 398 */ 'r', '2', '9', 0,
  /* 402 */ 'v', '2', '9', 0,
  /* 406 */ 'f', '9', 0,
  /* 409 */ 'r', '9', 0,
  /* 412 */ 'v', '9', 0,
  /* 415 */ 'c', 'a', 0,
  /* 418 */ 'v', 'r', 's', 'a', 'v', 'e', 0,
  /* 425 */ 'l', 'r', 0,
  /* 428 */ 'c', 't', 'r', 0,
  };

  static const uint32_t RegAsmOffset[] = {
    36, 415, 428, 18, 425, 0, 418, 55, 36, 92, 138, 172, 206, 240, 
    274, 308, 342, 428, 89, 135, 169, 203, 237, 271, 305, 339, 373, 406, 
    53, 99, 145, 179, 213, 247, 281, 315, 349, 382, 65, 111, 157, 191, 
    225, 259, 293, 327, 361, 394, 77, 123, 18, 425, 93, 139, 173, 207, 
    241, 275, 309, 343, 376, 409, 57, 103, 149, 183, 217, 251, 285, 319, 
    353, 386, 69, 115, 161, 195, 229, 263, 297, 331, 365, 398, 81, 127, 
    96, 142, 176, 210, 244, 278, 312, 346, 379, 412, 61, 107, 153, 187, 
    221, 255, 289, 323, 357, 390, 73, 119, 165, 199, 233, 267, 301, 335, 
    369, 402, 85, 131, 93, 139, 173, 207, 241, 275, 309, 343, 376, 409, 
    57, 103, 149, 183, 217, 251, 285, 319, 353, 386, 69, 115, 161, 195, 
    229, 263, 297, 331, 365, 398, 81, 127, 55, 147, 283, 54, 214, 350, 
    158, 294, 78, 101, 249, 384, 180, 316, 112, 260, 395, 55, 215, 351, 
    146, 282, 66, 226, 362, 181, 317, 100, 248, 383, 192, 328, 124, 
  };

  assert (*(AsmStrs+RegAsmOffset[RegNo-1]) &&
          "Invalid alt name index for register!");
  return AsmStrs+RegAsmOffset[RegNo-1];
}

#ifdef PRINT_ALIAS_INSTR
#undef PRINT_ALIAS_INSTR

static unsigned getMapOperandNumber(const SmallVectorImpl<std::pair<StringRef, unsigned> > &OpMap,
                                    StringRef Name) {
  for (SmallVectorImpl<std::pair<StringRef, unsigned> >::const_iterator
         I = OpMap.begin(), E = OpMap.end(); I != E; ++I)
    if (I->first == Name)
      return I->second;
  llvm_unreachable("Operand not in map!");
}

bool PPCInstPrinter::printAliasInstr(const MCInst *MI, raw_ostream &OS) {
  StringRef AsmString;
  SmallVector<std::pair<StringRef, unsigned>, 4> OpMap;
  switch (MI->getOpcode()) {
  default: return false;
  case PPC::BCCTR:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 12 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCTR 12, CR0)
      AsmString = "bltctr";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 14 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCTR 14, CR0)
      AsmString = "bltctr-";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCTR 15, CR0)
      AsmString = "bltctr+";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 44 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCTR 44, CR0)
      AsmString = "bgtctr";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 46 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCTR 46, CR0)
      AsmString = "bgtctr-";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 47 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCTR 47, CR0)
      AsmString = "bgtctr+";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 76 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCTR 76, CR0)
      AsmString = "beqctr";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 78 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCTR 78, CR0)
      AsmString = "beqctr-";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 79 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCTR 79, CR0)
      AsmString = "beqctr+";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 68 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCTR 68, CR0)
      AsmString = "bnectr";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 70 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCTR 70, CR0)
      AsmString = "bnectr-";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 71 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCTR 71, CR0)
      AsmString = "bnectr+";
      break;
    }
    return false;
  case PPC::BCCTRL:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 12 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCTRL 12, CR0)
      AsmString = "bltctrl";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 14 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCTRL 14, CR0)
      AsmString = "bltctrl-";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCTRL 15, CR0)
      AsmString = "bltctrl+";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 44 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCTRL 44, CR0)
      AsmString = "bgtctrl";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 46 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCTRL 46, CR0)
      AsmString = "bgtctrl-";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 47 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCTRL 47, CR0)
      AsmString = "bgtctrl+";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 76 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCTRL 76, CR0)
      AsmString = "beqctrl";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 78 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCTRL 78, CR0)
      AsmString = "beqctrl-";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 79 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCTRL 79, CR0)
      AsmString = "beqctrl+";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 68 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCTRL 68, CR0)
      AsmString = "bnectrl";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 70 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCTRL 70, CR0)
      AsmString = "bnectrl-";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 71 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCTRL 71, CR0)
      AsmString = "bnectrl+";
      break;
    }
    return false;
  case PPC::BCLR:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 12 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCLR 12, CR0)
      AsmString = "bltlr";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 14 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCLR 14, CR0)
      AsmString = "bltlr-";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCLR 15, CR0)
      AsmString = "bltlr+";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 44 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCLR 44, CR0)
      AsmString = "bgtlr";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 46 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCLR 46, CR0)
      AsmString = "bgtlr-";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 47 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCLR 47, CR0)
      AsmString = "bgtlr+";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 76 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCLR 76, CR0)
      AsmString = "beqlr";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 78 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCLR 78, CR0)
      AsmString = "beqlr-";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 79 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCLR 79, CR0)
      AsmString = "beqlr+";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 68 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCLR 68, CR0)
      AsmString = "bnelr";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 70 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCLR 70, CR0)
      AsmString = "bnelr-";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 71 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCLR 71, CR0)
      AsmString = "bnelr+";
      break;
    }
    return false;
  case PPC::BCLRL:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 12 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCLRL 12, CR0)
      AsmString = "bltlrl";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 14 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCLRL 14, CR0)
      AsmString = "bltlrl-";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCLRL 15, CR0)
      AsmString = "bltlrl+";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 44 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCLRL 44, CR0)
      AsmString = "bgtlrl";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 46 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCLRL 46, CR0)
      AsmString = "bgtlrl-";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 47 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCLRL 47, CR0)
      AsmString = "bgtlrl+";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 76 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCLRL 76, CR0)
      AsmString = "beqlrl";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 78 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCLRL 78, CR0)
      AsmString = "beqlrl-";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 79 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCLRL 79, CR0)
      AsmString = "beqlrl+";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 68 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCLRL 68, CR0)
      AsmString = "bnelrl";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 70 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCLRL 70, CR0)
      AsmString = "bnelrl-";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 71 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCLRL 71, CR0)
      AsmString = "bnelrl+";
      break;
    }
    return false;
  case PPC::SC:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0) {
      // (SC 0)
      AsmString = "sc";
      break;
    }
    return false;
  case PPC::SYNC:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 1) {
      // (SYNC 1)
      AsmString = "lwsync";
      break;
    }
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 2) {
      // (SYNC 2)
      AsmString = "ptesync";
      break;
    }
    return false;
  case PPC::WAIT:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0) {
      // (WAIT 0)
      AsmString = "wait";
      break;
    }
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 1) {
      // (WAIT 1)
      AsmString = "waitrsv";
      break;
    }
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 2) {
      // (WAIT 2)
      AsmString = "waitimpl";
      break;
    }
    return false;
  case PPC::XORI:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == PPC::R0 &&
        MI->getOperand(1).getReg() == PPC::R0 &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (XORI R0, R0, 0)
      AsmString = "xnop";
      break;
    }
    return false;
  }

  std::pair<StringRef, StringRef> ASM = AsmString.split(' ');
  OS << '\t' << ASM.first;
  if (!ASM.second.empty()) {
    OS << '\t';
    for (StringRef::iterator
         I = ASM.second.begin(), E = ASM.second.end(); I != E; ) {
      if (*I == '$') {
        StringRef::iterator Start = ++I;
        while (I != E &&
               ((*I >= 'a' && *I <= 'z') ||
                (*I >= 'A' && *I <= 'Z') ||
                (*I >= '0' && *I <= '9') ||
                *I == '_'))
          ++I;
        StringRef Name(Start, I - Start);
        printOperand(MI, getMapOperandNumber(OpMap, Name), OS);
      } else {
        OS << *I++;
      }
    }
  }

  return true;
}

#endif // PRINT_ALIAS_INSTR
