/*===- TableGen'erated file -------------------------------------*- C++ -*-===*\
|*                                                                            *|
|*Target Register Enum Values                                                 *|
|*                                                                            *|
|* Automatically generated file, do not edit!                                 *|
|*                                                                            *|
\*===----------------------------------------------------------------------===*/


#ifdef GET_REGINFO_ENUM
#undef GET_REGINFO_ENUM
namespace llvm {

class MCRegisterClass;
extern const MCRegisterClass MipsMCRegisterClasses[];

namespace Mips {
enum {
  NoRegister,
  AT = 1,
  DSPCCond = 2,
  DSPCarry = 3,
  DSPEFI = 4,
  DSPOutFlag = 5,
  DSPPos = 6,
  DSPSCount = 7,
  FP = 8,
  GP = 9,
  MSAAccess = 10,
  MSACSR = 11,
  MSAIR = 12,
  MSAMap = 13,
  MSAModify = 14,
  MSARequest = 15,
  MSASave = 16,
  MSAUnmap = 17,
  PC = 18,
  RA = 19,
  SP = 20,
  ZERO = 21,
  A0 = 22,
  A1 = 23,
  A2 = 24,
  A3 = 25,
  AC0 = 26,
  AC1 = 27,
  AC2 = 28,
  AC3 = 29,
  AT_64 = 30,
  D0 = 31,
  D1 = 32,
  D2 = 33,
  D3 = 34,
  D4 = 35,
  D5 = 36,
  D6 = 37,
  D7 = 38,
  D8 = 39,
  D9 = 40,
  D10 = 41,
  D11 = 42,
  D12 = 43,
  D13 = 44,
  D14 = 45,
  D15 = 46,
  DSPOutFlag20 = 47,
  DSPOutFlag21 = 48,
  DSPOutFlag22 = 49,
  DSPOutFlag23 = 50,
  F0 = 51,
  F1 = 52,
  F2 = 53,
  F3 = 54,
  F4 = 55,
  F5 = 56,
  F6 = 57,
  F7 = 58,
  F8 = 59,
  F9 = 60,
  F10 = 61,
  F11 = 62,
  F12 = 63,
  F13 = 64,
  F14 = 65,
  F15 = 66,
  F16 = 67,
  F17 = 68,
  F18 = 69,
  F19 = 70,
  F20 = 71,
  F21 = 72,
  F22 = 73,
  F23 = 74,
  F24 = 75,
  F25 = 76,
  F26 = 77,
  F27 = 78,
  F28 = 79,
  F29 = 80,
  F30 = 81,
  F31 = 82,
  FCC0 = 83,
  FCC1 = 84,
  FCC2 = 85,
  FCC3 = 86,
  FCC4 = 87,
  FCC5 = 88,
  FCC6 = 89,
  FCC7 = 90,
  FCR0 = 91,
  FCR1 = 92,
  FCR2 = 93,
  FCR3 = 94,
  FCR4 = 95,
  FCR5 = 96,
  FCR6 = 97,
  FCR7 = 98,
  FCR8 = 99,
  FCR9 = 100,
  FCR10 = 101,
  FCR11 = 102,
  FCR12 = 103,
  FCR13 = 104,
  FCR14 = 105,
  FCR15 = 106,
  FCR16 = 107,
  FCR17 = 108,
  FCR18 = 109,
  FCR19 = 110,
  FCR20 = 111,
  FCR21 = 112,
  FCR22 = 113,
  FCR23 = 114,
  FCR24 = 115,
  FCR25 = 116,
  FCR26 = 117,
  FCR27 = 118,
  FCR28 = 119,
  FCR29 = 120,
  FCR30 = 121,
  FCR31 = 122,
  FP_64 = 123,
  F_HI0 = 124,
  F_HI1 = 125,
  F_HI2 = 126,
  F_HI3 = 127,
  F_HI4 = 128,
  F_HI5 = 129,
  F_HI6 = 130,
  F_HI7 = 131,
  F_HI8 = 132,
  F_HI9 = 133,
  F_HI10 = 134,
  F_HI11 = 135,
  F_HI12 = 136,
  F_HI13 = 137,
  F_HI14 = 138,
  F_HI15 = 139,
  F_HI16 = 140,
  F_HI17 = 141,
  F_HI18 = 142,
  F_HI19 = 143,
  F_HI20 = 144,
  F_HI21 = 145,
  F_HI22 = 146,
  F_HI23 = 147,
  F_HI24 = 148,
  F_HI25 = 149,
  F_HI26 = 150,
  F_HI27 = 151,
  F_HI28 = 152,
  F_HI29 = 153,
  F_HI30 = 154,
  F_HI31 = 155,
  GP_64 = 156,
  HI0 = 157,
  HI1 = 158,
  HI2 = 159,
  HI3 = 160,
  HWR29 = 161,
  K0 = 162,
  K1 = 163,
  LO0 = 164,
  LO1 = 165,
  LO2 = 166,
  LO3 = 167,
  RA_64 = 168,
  S0 = 169,
  S1 = 170,
  S2 = 171,
  S3 = 172,
  S4 = 173,
  S5 = 174,
  S6 = 175,
  S7 = 176,
  SP_64 = 177,
  T0 = 178,
  T1 = 179,
  T2 = 180,
  T3 = 181,
  T4 = 182,
  T5 = 183,
  T6 = 184,
  T7 = 185,
  T8 = 186,
  T9 = 187,
  V0 = 188,
  V1 = 189,
  W0 = 190,
  W1 = 191,
  W2 = 192,
  W3 = 193,
  W4 = 194,
  W5 = 195,
  W6 = 196,
  W7 = 197,
  W8 = 198,
  W9 = 199,
  W10 = 200,
  W11 = 201,
  W12 = 202,
  W13 = 203,
  W14 = 204,
  W15 = 205,
  W16 = 206,
  W17 = 207,
  W18 = 208,
  W19 = 209,
  W20 = 210,
  W21 = 211,
  W22 = 212,
  W23 = 213,
  W24 = 214,
  W25 = 215,
  W26 = 216,
  W27 = 217,
  W28 = 218,
  W29 = 219,
  W30 = 220,
  W31 = 221,
  ZERO_64 = 222,
  A0_64 = 223,
  A1_64 = 224,
  A2_64 = 225,
  A3_64 = 226,
  AC0_64 = 227,
  D0_64 = 228,
  D1_64 = 229,
  D2_64 = 230,
  D3_64 = 231,
  D4_64 = 232,
  D5_64 = 233,
  D6_64 = 234,
  D7_64 = 235,
  D8_64 = 236,
  D9_64 = 237,
  D10_64 = 238,
  D11_64 = 239,
  D12_64 = 240,
  D13_64 = 241,
  D14_64 = 242,
  D15_64 = 243,
  D16_64 = 244,
  D17_64 = 245,
  D18_64 = 246,
  D19_64 = 247,
  D20_64 = 248,
  D21_64 = 249,
  D22_64 = 250,
  D23_64 = 251,
  D24_64 = 252,
  D25_64 = 253,
  D26_64 = 254,
  D27_64 = 255,
  D28_64 = 256,
  D29_64 = 257,
  D30_64 = 258,
  D31_64 = 259,
  DSPOutFlag16_19 = 260,
  HI0_64 = 261,
  K0_64 = 262,
  K1_64 = 263,
  LO0_64 = 264,
  S0_64 = 265,
  S1_64 = 266,
  S2_64 = 267,
  S3_64 = 268,
  S4_64 = 269,
  S5_64 = 270,
  S6_64 = 271,
  S7_64 = 272,
  T0_64 = 273,
  T1_64 = 274,
  T2_64 = 275,
  T3_64 = 276,
  T4_64 = 277,
  T5_64 = 278,
  T6_64 = 279,
  T7_64 = 280,
  T8_64 = 281,
  T9_64 = 282,
  V0_64 = 283,
  V1_64 = 284,
  NUM_TARGET_REGS 	// 285
};
}

// Register classes
namespace Mips {
enum {
  CCRRegClassID = 0,
  DSPRRegClassID = 1,
  FGR32RegClassID = 2,
  FGRH32RegClassID = 3,
  GPR32RegClassID = 4,
  CPU16RegsPlusSPRegClassID = 5,
  CPU16RegsRegClassID = 6,
  FCCRegClassID = 7,
  MSACtrlRegClassID = 8,
  HI32DSPRegClassID = 9,
  LO32DSPRegClassID = 10,
  CPURARegRegClassID = 11,
  CPUSPRegRegClassID = 12,
  DSPCCRegClassID = 13,
  HI32RegClassID = 14,
  HWRegsRegClassID = 15,
  LO32RegClassID = 16,
  FGR64RegClassID = 17,
  GPR64RegClassID = 18,
  AFGR64RegClassID = 19,
  GPR64_with_sub_32_in_CPU16RegsPlusSPRegClassID = 20,
  GPR64_with_sub_32_in_CPU16RegsRegClassID = 21,
  ACC64DSPRegClassID = 22,
  ACC64RegClassID = 23,
  GPR64_with_sub_32_in_CPURARegRegClassID = 24,
  GPR64_with_sub_32_in_CPUSPRegRegClassID = 25,
  HI64RegClassID = 26,
  LO64RegClassID = 27,
  MSA128BRegClassID = 28,
  MSA128DRegClassID = 29,
  MSA128HRegClassID = 30,
  MSA128WRegClassID = 31,
  ACC128RegClassID = 32
  };
}

// Subregister indices
namespace Mips {
enum {
  NoSubRegister,
  sub_32,	// 1
  sub_64,	// 2
  sub_dsp16_19,	// 3
  sub_dsp20,	// 4
  sub_dsp21,	// 5
  sub_dsp22,	// 6
  sub_dsp23,	// 7
  sub_hi,	// 8
  sub_lo,	// 9
  sub_hi_then_sub_32,	// 10
  sub_32_sub_hi_then_sub_32,	// 11
  NUM_TARGET_SUBREGS
};
}
} // End llvm namespace 
#endif // GET_REGINFO_ENUM

/*===- TableGen'erated file -------------------------------------*- C++ -*-===*\
|*                                                                            *|
|*MC Register Information                                                     *|
|*                                                                            *|
|* Automatically generated file, do not edit!                                 *|
|*                                                                            *|
\*===----------------------------------------------------------------------===*/


#ifdef GET_REGINFO_MC_DESC
#undef GET_REGINFO_MC_DESC
namespace llvm {

extern const MCPhysReg MipsRegDiffLists[] = {
  /* 0 */ 0, 0,
  /* 2 */ 4, 1, 1, 1, 1, 0,
  /* 8 */ 255, 65323, 1, 1, 1, 0,
  /* 14 */ 20, 1, 0,
  /* 17 */ 21, 1, 0,
  /* 20 */ 22, 1, 0,
  /* 23 */ 23, 1, 0,
  /* 26 */ 24, 1, 0,
  /* 29 */ 25, 1, 0,
  /* 32 */ 26, 1, 0,
  /* 35 */ 27, 1, 0,
  /* 38 */ 28, 1, 0,
  /* 41 */ 29, 1, 0,
  /* 44 */ 30, 1, 0,
  /* 47 */ 31, 1, 0,
  /* 50 */ 32, 1, 0,
  /* 53 */ 33, 1, 0,
  /* 56 */ 34, 1, 0,
  /* 59 */ 35, 1, 0,
  /* 62 */ 63749, 1, 0,
  /* 65 */ 65511, 1, 0,
  /* 68 */ 65513, 1, 0,
  /* 71 */ 3, 0,
  /* 73 */ 4, 0,
  /* 75 */ 11, 0,
  /* 77 */ 12, 0,
  /* 79 */ 22, 0,
  /* 81 */ 23, 0,
  /* 83 */ 29, 0,
  /* 85 */ 30, 0,
  /* 87 */ 65345, 72, 0,
  /* 90 */ 65383, 72, 0,
  /* 93 */ 38, 65359, 73, 0,
  /* 97 */ 95, 0,
  /* 99 */ 96, 0,
  /* 101 */ 100, 0,
  /* 103 */ 115, 0,
  /* 105 */ 147, 0,
  /* 107 */ 149, 0,
  /* 109 */ 157, 0,
  /* 111 */ 201, 0,
  /* 113 */ 65237, 0,
  /* 115 */ 65252, 0,
  /* 117 */ 65281, 0,
  /* 119 */ 65335, 0,
  /* 121 */ 65338, 0,
  /* 123 */ 65379, 0,
  /* 125 */ 65387, 0,
  /* 127 */ 65389, 0,
  /* 129 */ 65398, 0,
  /* 131 */ 37, 65436, 97, 65432, 65405, 0,
  /* 137 */ 65415, 0,
  /* 139 */ 65416, 0,
  /* 141 */ 65421, 0,
  /* 143 */ 65432, 0,
  /* 145 */ 65436, 0,
  /* 147 */ 65440, 0,
  /* 149 */ 65441, 0,
  /* 151 */ 65491, 0,
  /* 153 */ 65492, 0,
  /* 155 */ 65493, 0,
  /* 157 */ 65494, 0,
  /* 159 */ 104, 65498, 0,
  /* 162 */ 65516, 197, 65498, 0,
  /* 166 */ 65515, 198, 65498, 0,
  /* 170 */ 65514, 199, 65498, 0,
  /* 174 */ 65513, 200, 65498, 0,
  /* 178 */ 65512, 201, 65498, 0,
  /* 182 */ 65511, 202, 65498, 0,
  /* 186 */ 65510, 203, 65498, 0,
  /* 190 */ 65509, 204, 65498, 0,
  /* 194 */ 65508, 205, 65498, 0,
  /* 198 */ 65507, 206, 65498, 0,
  /* 202 */ 65506, 207, 65498, 0,
  /* 206 */ 65505, 208, 65498, 0,
  /* 210 */ 65504, 209, 65498, 0,
  /* 214 */ 65503, 210, 65498, 0,
  /* 218 */ 65502, 211, 65498, 0,
  /* 222 */ 65501, 212, 65498, 0,
  /* 226 */ 65500, 213, 65498, 0,
  /* 230 */ 65398, 238, 65499, 0,
  /* 234 */ 65405, 235, 65502, 0,
  /* 238 */ 65507, 0,
  /* 240 */ 65510, 0,
  /* 242 */ 65511, 0,
  /* 244 */ 65516, 0,
  /* 246 */ 65521, 0,
  /* 248 */ 65522, 0,
  /* 250 */ 138, 65529, 0,
  /* 253 */ 65535, 0,
};

extern const uint16_t MipsSubRegIdxLists[] = {
  /* 0 */ 1, 0,
  /* 2 */ 3, 4, 5, 6, 7, 0,
  /* 8 */ 2, 9, 8, 0,
  /* 12 */ 9, 1, 8, 10, 11, 0,
};

extern const MCRegisterInfo::SubRegCoveredBits MipsSubRegIdxRanges[] = {
  { 65535, 65535 },
  { 0, 32 },	// sub_32
  { 0, 64 },	// sub_64
  { 16, 4 },	// sub_dsp16_19
  { 20, 1 },	// sub_dsp20
  { 21, 1 },	// sub_dsp21
  { 22, 1 },	// sub_dsp22
  { 23, 1 },	// sub_dsp23
  { 32, 32 },	// sub_hi
  { 0, 32 },	// sub_lo
  { 32, 32 },	// sub_hi_then_sub_32
  { 0, 64 },	// sub_32_sub_hi_then_sub_32
};

extern const char MipsRegStrings[] = {
  /* 0 */ 'D', '1', '0', 0,
  /* 4 */ 'F', '1', '0', 0,
  /* 8 */ 'F', '_', 'H', 'I', '1', '0', 0,
  /* 15 */ 'F', 'C', 'R', '1', '0', 0,
  /* 21 */ 'W', '1', '0', 0,
  /* 25 */ 'F', '2', '0', 0,
  /* 29 */ 'F', '_', 'H', 'I', '2', '0', 0,
  /* 36 */ 'F', 'C', 'R', '2', '0', 0,
  /* 42 */ 'W', '2', '0', 0,
  /* 46 */ 'D', 'S', 'P', 'O', 'u', 't', 'F', 'l', 'a', 'g', '2', '0', 0,
  /* 59 */ 'F', '3', '0', 0,
  /* 63 */ 'F', '_', 'H', 'I', '3', '0', 0,
  /* 70 */ 'F', 'C', 'R', '3', '0', 0,
  /* 76 */ 'W', '3', '0', 0,
  /* 80 */ 'A', '0', 0,
  /* 83 */ 'A', 'C', '0', 0,
  /* 87 */ 'F', 'C', 'C', '0', 0,
  /* 92 */ 'D', '0', 0,
  /* 95 */ 'F', '0', 0,
  /* 98 */ 'F', '_', 'H', 'I', '0', 0,
  /* 104 */ 'K', '0', 0,
  /* 107 */ 'L', 'O', '0', 0,
  /* 111 */ 'F', 'C', 'R', '0', 0,
  /* 116 */ 'S', '0', 0,
  /* 119 */ 'T', '0', 0,
  /* 122 */ 'V', '0', 0,
  /* 125 */ 'W', '0', 0,
  /* 128 */ 'D', '1', '1', 0,
  /* 132 */ 'F', '1', '1', 0,
  /* 136 */ 'F', '_', 'H', 'I', '1', '1', 0,
  /* 143 */ 'F', 'C', 'R', '1', '1', 0,
  /* 149 */ 'W', '1', '1', 0,
  /* 153 */ 'F', '2', '1', 0,
  /* 157 */ 'F', '_', 'H', 'I', '2', '1', 0,
  /* 164 */ 'F', 'C', 'R', '2', '1', 0,
  /* 170 */ 'W', '2', '1', 0,
  /* 174 */ 'D', 'S', 'P', 'O', 'u', 't', 'F', 'l', 'a', 'g', '2', '1', 0,
  /* 187 */ 'F', '3', '1', 0,
  /* 191 */ 'F', '_', 'H', 'I', '3', '1', 0,
  /* 198 */ 'F', 'C', 'R', '3', '1', 0,
  /* 204 */ 'W', '3', '1', 0,
  /* 208 */ 'A', '1', 0,
  /* 211 */ 'A', 'C', '1', 0,
  /* 215 */ 'F', 'C', 'C', '1', 0,
  /* 220 */ 'D', '1', 0,
  /* 223 */ 'F', '1', 0,
  /* 226 */ 'F', '_', 'H', 'I', '1', 0,
  /* 232 */ 'K', '1', 0,
  /* 235 */ 'L', 'O', '1', 0,
  /* 239 */ 'F', 'C', 'R', '1', 0,
  /* 244 */ 'S', '1', 0,
  /* 247 */ 'T', '1', 0,
  /* 250 */ 'V', '1', 0,
  /* 253 */ 'W', '1', 0,
  /* 256 */ 'D', '1', '2', 0,
  /* 260 */ 'F', '1', '2', 0,
  /* 264 */ 'F', '_', 'H', 'I', '1', '2', 0,
  /* 271 */ 'F', 'C', 'R', '1', '2', 0,
  /* 277 */ 'W', '1', '2', 0,
  /* 281 */ 'F', '2', '2', 0,
  /* 285 */ 'F', '_', 'H', 'I', '2', '2', 0,
  /* 292 */ 'F', 'C', 'R', '2', '2', 0,
  /* 298 */ 'W', '2', '2', 0,
  /* 302 */ 'D', 'S', 'P', 'O', 'u', 't', 'F', 'l', 'a', 'g', '2', '2', 0,
  /* 315 */ 'A', '2', 0,
  /* 318 */ 'A', 'C', '2', 0,
  /* 322 */ 'F', 'C', 'C', '2', 0,
  /* 327 */ 'D', '2', 0,
  /* 330 */ 'F', '2', 0,
  /* 333 */ 'F', '_', 'H', 'I', '2', 0,
  /* 339 */ 'L', 'O', '2', 0,
  /* 343 */ 'F', 'C', 'R', '2', 0,
  /* 348 */ 'S', '2', 0,
  /* 351 */ 'T', '2', 0,
  /* 354 */ 'W', '2', 0,
  /* 357 */ 'D', '1', '3', 0,
  /* 361 */ 'F', '1', '3', 0,
  /* 365 */ 'F', '_', 'H', 'I', '1', '3', 0,
  /* 372 */ 'F', 'C', 'R', '1', '3', 0,
  /* 378 */ 'W', '1', '3', 0,
  /* 382 */ 'F', '2', '3', 0,
  /* 386 */ 'F', '_', 'H', 'I', '2', '3', 0,
  /* 393 */ 'F', 'C', 'R', '2', '3', 0,
  /* 399 */ 'W', '2', '3', 0,
  /* 403 */ 'D', 'S', 'P', 'O', 'u', 't', 'F', 'l', 'a', 'g', '2', '3', 0,
  /* 416 */ 'A', '3', 0,
  /* 419 */ 'A', 'C', '3', 0,
  /* 423 */ 'F', 'C', 'C', '3', 0,
  /* 428 */ 'D', '3', 0,
  /* 431 */ 'F', '3', 0,
  /* 434 */ 'F', '_', 'H', 'I', '3', 0,
  /* 440 */ 'L', 'O', '3', 0,
  /* 444 */ 'F', 'C', 'R', '3', 0,
  /* 449 */ 'S', '3', 0,
  /* 452 */ 'T', '3', 0,
  /* 455 */ 'W', '3', 0,
  /* 458 */ 'D', '1', '4', 0,
  /* 462 */ 'F', '1', '4', 0,
  /* 466 */ 'F', '_', 'H', 'I', '1', '4', 0,
  /* 473 */ 'F', 'C', 'R', '1', '4', 0,
  /* 479 */ 'W', '1', '4', 0,
  /* 483 */ 'F', '2', '4', 0,
  /* 487 */ 'F', '_', 'H', 'I', '2', '4', 0,
  /* 494 */ 'F', 'C', 'R', '2', '4', 0,
  /* 500 */ 'W', '2', '4', 0,
  /* 504 */ 'D', '1', '0', '_', '6', '4', 0,
  /* 511 */ 'D', '2', '0', '_', '6', '4', 0,
  /* 518 */ 'D', '3', '0', '_', '6', '4', 0,
  /* 525 */ 'A', '0', '_', '6', '4', 0,
  /* 531 */ 'A', 'C', '0', '_', '6', '4', 0,
  /* 538 */ 'D', '0', '_', '6', '4', 0,
  /* 544 */ 'H', 'I', '0', '_', '6', '4', 0,
  /* 551 */ 'K', '0', '_', '6', '4', 0,
  /* 557 */ 'L', 'O', '0', '_', '6', '4', 0,
  /* 564 */ 'S', '0', '_', '6', '4', 0,
  /* 570 */ 'T', '0', '_', '6', '4', 0,
  /* 576 */ 'V', '0', '_', '6', '4', 0,
  /* 582 */ 'D', '1', '1', '_', '6', '4', 0,
  /* 589 */ 'D', '2', '1', '_', '6', '4', 0,
  /* 596 */ 'D', '3', '1', '_', '6', '4', 0,
  /* 603 */ 'A', '1', '_', '6', '4', 0,
  /* 609 */ 'D', '1', '_', '6', '4', 0,
  /* 615 */ 'K', '1', '_', '6', '4', 0,
  /* 621 */ 'S', '1', '_', '6', '4', 0,
  /* 627 */ 'T', '1', '_', '6', '4', 0,
  /* 633 */ 'V', '1', '_', '6', '4', 0,
  /* 639 */ 'D', '1', '2', '_', '6', '4', 0,
  /* 646 */ 'D', '2', '2', '_', '6', '4', 0,
  /* 653 */ 'A', '2', '_', '6', '4', 0,
  /* 659 */ 'D', '2', '_', '6', '4', 0,
  /* 665 */ 'S', '2', '_', '6', '4', 0,
  /* 671 */ 'T', '2', '_', '6', '4', 0,
  /* 677 */ 'D', '1', '3', '_', '6', '4', 0,
  /* 684 */ 'D', '2', '3', '_', '6', '4', 0,
  /* 691 */ 'A', '3', '_', '6', '4', 0,
  /* 697 */ 'D', '3', '_', '6', '4', 0,
  /* 703 */ 'S', '3', '_', '6', '4', 0,
  /* 709 */ 'T', '3', '_', '6', '4', 0,
  /* 715 */ 'D', '1', '4', '_', '6', '4', 0,
  /* 722 */ 'D', '2', '4', '_', '6', '4', 0,
  /* 729 */ 'D', '4', '_', '6', '4', 0,
  /* 735 */ 'S', '4', '_', '6', '4', 0,
  /* 741 */ 'T', '4', '_', '6', '4', 0,
  /* 747 */ 'D', '1', '5', '_', '6', '4', 0,
  /* 754 */ 'D', '2', '5', '_', '6', '4', 0,
  /* 761 */ 'D', '5', '_', '6', '4', 0,
  /* 767 */ 'S', '5', '_', '6', '4', 0,
  /* 773 */ 'T', '5', '_', '6', '4', 0,
  /* 779 */ 'D', '1', '6', '_', '6', '4', 0,
  /* 786 */ 'D', '2', '6', '_', '6', '4', 0,
  /* 793 */ 'D', '6', '_', '6', '4', 0,
  /* 799 */ 'S', '6', '_', '6', '4', 0,
  /* 805 */ 'T', '6', '_', '6', '4', 0,
  /* 811 */ 'D', '1', '7', '_', '6', '4', 0,
  /* 818 */ 'D', '2', '7', '_', '6', '4', 0,
  /* 825 */ 'D', '7', '_', '6', '4', 0,
  /* 831 */ 'S', '7', '_', '6', '4', 0,
  /* 837 */ 'T', '7', '_', '6', '4', 0,
  /* 843 */ 'D', '1', '8', '_', '6', '4', 0,
  /* 850 */ 'D', '2', '8', '_', '6', '4', 0,
  /* 857 */ 'D', '8', '_', '6', '4', 0,
  /* 863 */ 'T', '8', '_', '6', '4', 0,
  /* 869 */ 'D', '1', '9', '_', '6', '4', 0,
  /* 876 */ 'D', '2', '9', '_', '6', '4', 0,
  /* 883 */ 'D', '9', '_', '6', '4', 0,
  /* 889 */ 'T', '9', '_', '6', '4', 0,
  /* 895 */ 'R', 'A', '_', '6', '4', 0,
  /* 901 */ 'Z', 'E', 'R', 'O', '_', '6', '4', 0,
  /* 909 */ 'F', 'P', '_', '6', '4', 0,
  /* 915 */ 'G', 'P', '_', '6', '4', 0,
  /* 921 */ 'S', 'P', '_', '6', '4', 0,
  /* 927 */ 'A', 'T', '_', '6', '4', 0,
  /* 933 */ 'F', 'C', 'C', '4', 0,
  /* 938 */ 'D', '4', 0,
  /* 941 */ 'F', '4', 0,
  /* 944 */ 'F', '_', 'H', 'I', '4', 0,
  /* 950 */ 'F', 'C', 'R', '4', 0,
  /* 955 */ 'S', '4', 0,
  /* 958 */ 'T', '4', 0,
  /* 961 */ 'W', '4', 0,
  /* 964 */ 'D', '1', '5', 0,
  /* 968 */ 'F', '1', '5', 0,
  /* 972 */ 'F', '_', 'H', 'I', '1', '5', 0,
  /* 979 */ 'F', 'C', 'R', '1', '5', 0,
  /* 985 */ 'W', '1', '5', 0,
  /* 989 */ 'F', '2', '5', 0,
  /* 993 */ 'F', '_', 'H', 'I', '2', '5', 0,
  /* 1000 */ 'F', 'C', 'R', '2', '5', 0,
  /* 1006 */ 'W', '2', '5', 0,
  /* 1010 */ 'F', 'C', 'C', '5', 0,
  /* 1015 */ 'D', '5', 0,
  /* 1018 */ 'F', '5', 0,
  /* 1021 */ 'F', '_', 'H', 'I', '5', 0,
  /* 1027 */ 'F', 'C', 'R', '5', 0,
  /* 1032 */ 'S', '5', 0,
  /* 1035 */ 'T', '5', 0,
  /* 1038 */ 'W', '5', 0,
  /* 1041 */ 'F', '1', '6', 0,
  /* 1045 */ 'F', '_', 'H', 'I', '1', '6', 0,
  /* 1052 */ 'F', 'C', 'R', '1', '6', 0,
  /* 1058 */ 'W', '1', '6', 0,
  /* 1062 */ 'F', '2', '6', 0,
  /* 1066 */ 'F', '_', 'H', 'I', '2', '6', 0,
  /* 1073 */ 'F', 'C', 'R', '2', '6', 0,
  /* 1079 */ 'W', '2', '6', 0,
  /* 1083 */ 'F', 'C', 'C', '6', 0,
  /* 1088 */ 'D', '6', 0,
  /* 1091 */ 'F', '6', 0,
  /* 1094 */ 'F', '_', 'H', 'I', '6', 0,
  /* 1100 */ 'F', 'C', 'R', '6', 0,
  /* 1105 */ 'S', '6', 0,
  /* 1108 */ 'T', '6', 0,
  /* 1111 */ 'W', '6', 0,
  /* 1114 */ 'F', '1', '7', 0,
  /* 1118 */ 'F', '_', 'H', 'I', '1', '7', 0,
  /* 1125 */ 'F', 'C', 'R', '1', '7', 0,
  /* 1131 */ 'W', '1', '7', 0,
  /* 1135 */ 'F', '2', '7', 0,
  /* 1139 */ 'F', '_', 'H', 'I', '2', '7', 0,
  /* 1146 */ 'F', 'C', 'R', '2', '7', 0,
  /* 1152 */ 'W', '2', '7', 0,
  /* 1156 */ 'F', 'C', 'C', '7', 0,
  /* 1161 */ 'D', '7', 0,
  /* 1164 */ 'F', '7', 0,
  /* 1167 */ 'F', '_', 'H', 'I', '7', 0,
  /* 1173 */ 'F', 'C', 'R', '7', 0,
  /* 1178 */ 'S', '7', 0,
  /* 1181 */ 'T', '7', 0,
  /* 1184 */ 'W', '7', 0,
  /* 1187 */ 'F', '1', '8', 0,
  /* 1191 */ 'F', '_', 'H', 'I', '1', '8', 0,
  /* 1198 */ 'F', 'C', 'R', '1', '8', 0,
  /* 1204 */ 'W', '1', '8', 0,
  /* 1208 */ 'F', '2', '8', 0,
  /* 1212 */ 'F', '_', 'H', 'I', '2', '8', 0,
  /* 1219 */ 'F', 'C', 'R', '2', '8', 0,
  /* 1225 */ 'W', '2', '8', 0,
  /* 1229 */ 'D', '8', 0,
  /* 1232 */ 'F', '8', 0,
  /* 1235 */ 'F', '_', 'H', 'I', '8', 0,
  /* 1241 */ 'F', 'C', 'R', '8', 0,
  /* 1246 */ 'T', '8', 0,
  /* 1249 */ 'W', '8', 0,
  /* 1252 */ 'F', '1', '9', 0,
  /* 1256 */ 'F', '_', 'H', 'I', '1', '9', 0,
  /* 1263 */ 'F', 'C', 'R', '1', '9', 0,
  /* 1269 */ 'W', '1', '9', 0,
  /* 1273 */ 'D', 'S', 'P', 'O', 'u', 't', 'F', 'l', 'a', 'g', '1', '6', '_', '1', '9', 0,
  /* 1289 */ 'F', '2', '9', 0,
  /* 1293 */ 'F', '_', 'H', 'I', '2', '9', 0,
  /* 1300 */ 'F', 'C', 'R', '2', '9', 0,
  /* 1306 */ 'H', 'W', 'R', '2', '9', 0,
  /* 1312 */ 'W', '2', '9', 0,
  /* 1316 */ 'D', '9', 0,
  /* 1319 */ 'F', '9', 0,
  /* 1322 */ 'F', '_', 'H', 'I', '9', 0,
  /* 1328 */ 'F', 'C', 'R', '9', 0,
  /* 1333 */ 'T', '9', 0,
  /* 1336 */ 'W', '9', 0,
  /* 1339 */ 'R', 'A', 0,
  /* 1342 */ 'P', 'C', 0,
  /* 1345 */ 'D', 'S', 'P', 'E', 'F', 'I', 0,
  /* 1352 */ 'Z', 'E', 'R', 'O', 0,
  /* 1357 */ 'F', 'P', 0,
  /* 1360 */ 'G', 'P', 0,
  /* 1363 */ 'S', 'P', 0,
  /* 1366 */ 'M', 'S', 'A', 'I', 'R', 0,
  /* 1372 */ 'M', 'S', 'A', 'C', 'S', 'R', 0,
  /* 1379 */ 'A', 'T', 0,
  /* 1382 */ 'D', 'S', 'P', 'C', 'C', 'o', 'n', 'd', 0,
  /* 1391 */ 'M', 'S', 'A', 'S', 'a', 'v', 'e', 0,
  /* 1399 */ 'D', 'S', 'P', 'O', 'u', 't', 'F', 'l', 'a', 'g', 0,
  /* 1410 */ 'M', 'S', 'A', 'M', 'a', 'p', 0,
  /* 1417 */ 'M', 'S', 'A', 'U', 'n', 'm', 'a', 'p', 0,
  /* 1426 */ 'D', 'S', 'P', 'P', 'o', 's', 0,
  /* 1433 */ 'M', 'S', 'A', 'A', 'c', 'c', 'e', 's', 's', 0,
  /* 1443 */ 'D', 'S', 'P', 'S', 'C', 'o', 'u', 'n', 't', 0,
  /* 1453 */ 'M', 'S', 'A', 'R', 'e', 'q', 'u', 'e', 's', 't', 0,
  /* 1464 */ 'M', 'S', 'A', 'M', 'o', 'd', 'i', 'f', 'y', 0,
  /* 1474 */ 'D', 'S', 'P', 'C', 'a', 'r', 'r', 'y', 0,
};

extern const MCRegisterDesc MipsRegDesc[] = { // Descriptors
  { 3, 0, 0, 0, 0 },
  { 1379, 1, 83, 1, 4049 },
  { 1382, 1, 1, 1, 4049 },
  { 1474, 1, 1, 1, 4049 },
  { 1345, 1, 1, 1, 4049 },
  { 1399, 8, 1, 2, 32 },
  { 1426, 1, 1, 1, 1137 },
  { 1443, 1, 1, 1, 1137 },
  { 1357, 1, 103, 1, 1137 },
  { 1360, 1, 105, 1, 1137 },
  { 1433, 1, 1, 1, 1137 },
  { 1372, 1, 1, 1, 1137 },
  { 1366, 1, 1, 1, 1137 },
  { 1410, 1, 1, 1, 1137 },
  { 1464, 1, 1, 1, 1137 },
  { 1453, 1, 1, 1, 1137 },
  { 1391, 1, 1, 1, 1137 },
  { 1417, 1, 1, 1, 1137 },
  { 1342, 1, 1, 1, 1137 },
  { 1339, 1, 107, 1, 1137 },
  { 1363, 1, 109, 1, 1137 },
  { 1352, 1, 111, 1, 1137 },
  { 80, 1, 111, 1, 1137 },
  { 208, 1, 111, 1, 1137 },
  { 315, 1, 111, 1, 1137 },
  { 416, 1, 111, 1, 1137 },
  { 83, 250, 111, 9, 1090 },
  { 211, 250, 1, 9, 1090 },
  { 318, 250, 1, 9, 1090 },
  { 419, 250, 1, 9, 1090 },
  { 927, 238, 1, 0, 0 },
  { 92, 14, 1, 9, 1042 },
  { 220, 17, 1, 9, 1042 },
  { 327, 20, 1, 9, 1042 },
  { 428, 23, 1, 9, 1042 },
  { 938, 26, 1, 9, 1042 },
  { 1015, 29, 1, 9, 1042 },
  { 1088, 32, 1, 9, 1042 },
  { 1161, 35, 1, 9, 1042 },
  { 1229, 38, 1, 9, 1042 },
  { 1316, 41, 1, 9, 1042 },
  { 0, 44, 1, 9, 1042 },
  { 128, 47, 1, 9, 1042 },
  { 256, 50, 1, 9, 1042 },
  { 357, 53, 1, 9, 1042 },
  { 458, 56, 1, 9, 1042 },
  { 964, 59, 1, 9, 1042 },
  { 46, 1, 157, 1, 2513 },
  { 174, 1, 155, 1, 2513 },
  { 302, 1, 153, 1, 2513 },
  { 403, 1, 151, 1, 2513 },
  { 95, 1, 162, 1, 3969 },
  { 223, 1, 166, 1, 3969 },
  { 330, 1, 166, 1, 3969 },
  { 431, 1, 170, 1, 3969 },
  { 941, 1, 170, 1, 3969 },
  { 1018, 1, 174, 1, 3969 },
  { 1091, 1, 174, 1, 3969 },
  { 1164, 1, 178, 1, 3969 },
  { 1232, 1, 178, 1, 3969 },
  { 1319, 1, 182, 1, 3969 },
  { 4, 1, 182, 1, 3969 },
  { 132, 1, 186, 1, 3969 },
  { 260, 1, 186, 1, 3969 },
  { 361, 1, 190, 1, 3969 },
  { 462, 1, 190, 1, 3969 },
  { 968, 1, 194, 1, 3969 },
  { 1041, 1, 194, 1, 3969 },
  { 1114, 1, 198, 1, 3969 },
  { 1187, 1, 198, 1, 3969 },
  { 1252, 1, 202, 1, 3969 },
  { 25, 1, 202, 1, 3969 },
  { 153, 1, 206, 1, 3969 },
  { 281, 1, 206, 1, 3969 },
  { 382, 1, 210, 1, 3969 },
  { 483, 1, 210, 1, 3969 },
  { 989, 1, 214, 1, 3969 },
  { 1062, 1, 214, 1, 3969 },
  { 1135, 1, 218, 1, 3969 },
  { 1208, 1, 218, 1, 3969 },
  { 1289, 1, 222, 1, 3969 },
  { 59, 1, 222, 1, 3969 },
  { 187, 1, 226, 1, 3969 },
  { 87, 1, 1, 1, 3969 },
  { 215, 1, 1, 1, 3969 },
  { 322, 1, 1, 1, 3969 },
  { 423, 1, 1, 1, 3969 },
  { 933, 1, 1, 1, 3969 },
  { 1010, 1, 1, 1, 3969 },
  { 1083, 1, 1, 1, 3969 },
  { 1156, 1, 1, 1, 3969 },
  { 111, 1, 1, 1, 3969 },
  { 239, 1, 1, 1, 3969 },
  { 343, 1, 1, 1, 3969 },
  { 444, 1, 1, 1, 3969 },
  { 950, 1, 1, 1, 3969 },
  { 1027, 1, 1, 1, 3969 },
  { 1100, 1, 1, 1, 3969 },
  { 1173, 1, 1, 1, 3969 },
  { 1241, 1, 1, 1, 3969 },
  { 1328, 1, 1, 1, 3969 },
  { 15, 1, 1, 1, 3969 },
  { 143, 1, 1, 1, 3969 },
  { 271, 1, 1, 1, 3969 },
  { 372, 1, 1, 1, 3969 },
  { 473, 1, 1, 1, 3969 },
  { 979, 1, 1, 1, 3969 },
  { 1052, 1, 1, 1, 3969 },
  { 1125, 1, 1, 1, 3969 },
  { 1198, 1, 1, 1, 3969 },
  { 1263, 1, 1, 1, 3969 },
  { 36, 1, 1, 1, 3969 },
  { 164, 1, 1, 1, 3969 },
  { 292, 1, 1, 1, 3969 },
  { 393, 1, 1, 1, 3969 },
  { 494, 1, 1, 1, 3969 },
  { 1000, 1, 1, 1, 3969 },
  { 1073, 1, 1, 1, 3969 },
  { 1146, 1, 1, 1, 3969 },
  { 1219, 1, 1, 1, 3969 },
  { 1300, 1, 1, 1, 3969 },
  { 70, 1, 1, 1, 3969 },
  { 198, 1, 1, 1, 3969 },
  { 909, 141, 1, 0, 1200 },
  { 98, 1, 159, 1, 3937 },
  { 226, 1, 159, 1, 3937 },
  { 333, 1, 159, 1, 3937 },
  { 434, 1, 159, 1, 3937 },
  { 944, 1, 159, 1, 3937 },
  { 1021, 1, 159, 1, 3937 },
  { 1094, 1, 159, 1, 3937 },
  { 1167, 1, 159, 1, 3937 },
  { 1235, 1, 159, 1, 3937 },
  { 1322, 1, 159, 1, 3937 },
  { 8, 1, 159, 1, 3937 },
  { 136, 1, 159, 1, 3937 },
  { 264, 1, 159, 1, 3937 },
  { 365, 1, 159, 1, 3937 },
  { 466, 1, 159, 1, 3937 },
  { 972, 1, 159, 1, 3937 },
  { 1045, 1, 159, 1, 3937 },
  { 1118, 1, 159, 1, 3937 },
  { 1191, 1, 159, 1, 3937 },
  { 1256, 1, 159, 1, 3937 },
  { 29, 1, 159, 1, 3937 },
  { 157, 1, 159, 1, 3937 },
  { 285, 1, 159, 1, 3937 },
  { 386, 1, 159, 1, 3937 },
  { 487, 1, 159, 1, 3937 },
  { 993, 1, 159, 1, 3937 },
  { 1066, 1, 159, 1, 3937 },
  { 1139, 1, 159, 1, 3937 },
  { 1212, 1, 159, 1, 3937 },
  { 1293, 1, 159, 1, 3937 },
  { 63, 1, 159, 1, 3937 },
  { 191, 1, 159, 1, 3937 },
  { 915, 127, 1, 0, 1232 },
  { 100, 1, 234, 1, 1842 },
  { 228, 1, 135, 1, 1842 },
  { 335, 1, 135, 1, 1842 },
  { 436, 1, 135, 1, 1842 },
  { 1306, 1, 1, 1, 3905 },
  { 104, 1, 101, 1, 3905 },
  { 232, 1, 101, 1, 3905 },
  { 107, 1, 230, 1, 1810 },
  { 235, 1, 129, 1, 1810 },
  { 339, 1, 129, 1, 1810 },
  { 440, 1, 129, 1, 1810 },
  { 895, 125, 1, 0, 1264 },
  { 116, 1, 99, 1, 3873 },
  { 244, 1, 99, 1, 3873 },
  { 348, 1, 99, 1, 3873 },
  { 449, 1, 99, 1, 3873 },
  { 955, 1, 99, 1, 3873 },
  { 1032, 1, 99, 1, 3873 },
  { 1105, 1, 99, 1, 3873 },
  { 1178, 1, 99, 1, 3873 },
  { 921, 123, 1, 0, 1296 },
  { 119, 1, 97, 1, 3841 },
  { 247, 1, 97, 1, 3841 },
  { 351, 1, 97, 1, 3841 },
  { 452, 1, 97, 1, 3841 },
  { 958, 1, 97, 1, 3841 },
  { 1035, 1, 97, 1, 3841 },
  { 1108, 1, 97, 1, 3841 },
  { 1181, 1, 97, 1, 3841 },
  { 1246, 1, 97, 1, 3841 },
  { 1333, 1, 97, 1, 3841 },
  { 122, 1, 97, 1, 3841 },
  { 250, 1, 97, 1, 3841 },
  { 125, 93, 1, 8, 1441 },
  { 253, 93, 1, 8, 1441 },
  { 354, 93, 1, 8, 1441 },
  { 455, 93, 1, 8, 1441 },
  { 961, 93, 1, 8, 1441 },
  { 1038, 93, 1, 8, 1441 },
  { 1111, 93, 1, 8, 1441 },
  { 1184, 93, 1, 8, 1441 },
  { 1249, 93, 1, 8, 1441 },
  { 1336, 93, 1, 8, 1441 },
  { 21, 93, 1, 8, 1441 },
  { 149, 93, 1, 8, 1441 },
  { 277, 93, 1, 8, 1441 },
  { 378, 93, 1, 8, 1441 },
  { 479, 93, 1, 8, 1441 },
  { 985, 93, 1, 8, 1441 },
  { 1058, 93, 1, 8, 1441 },
  { 1131, 93, 1, 8, 1441 },
  { 1204, 93, 1, 8, 1441 },
  { 1269, 93, 1, 8, 1441 },
  { 42, 93, 1, 8, 1441 },
  { 170, 93, 1, 8, 1441 },
  { 298, 93, 1, 8, 1441 },
  { 399, 93, 1, 8, 1441 },
  { 500, 93, 1, 8, 1441 },
  { 1006, 93, 1, 8, 1441 },
  { 1079, 93, 1, 8, 1441 },
  { 1152, 93, 1, 8, 1441 },
  { 1225, 93, 1, 8, 1441 },
  { 1312, 93, 1, 8, 1441 },
  { 76, 93, 1, 8, 1441 },
  { 204, 93, 1, 8, 1441 },
  { 901, 119, 1, 0, 1937 },
  { 525, 119, 1, 0, 1937 },
  { 603, 119, 1, 0, 1937 },
  { 653, 119, 1, 0, 1937 },
  { 691, 119, 1, 0, 1937 },
  { 531, 131, 1, 12, 1000 },
  { 538, 94, 160, 9, 1393 },
  { 609, 94, 160, 9, 1393 },
  { 659, 94, 160, 9, 1393 },
  { 697, 94, 160, 9, 1393 },
  { 729, 94, 160, 9, 1393 },
  { 761, 94, 160, 9, 1393 },
  { 793, 94, 160, 9, 1393 },
  { 825, 94, 160, 9, 1393 },
  { 857, 94, 160, 9, 1393 },
  { 883, 94, 160, 9, 1393 },
  { 504, 94, 160, 9, 1393 },
  { 582, 94, 160, 9, 1393 },
  { 639, 94, 160, 9, 1393 },
  { 677, 94, 160, 9, 1393 },
  { 715, 94, 160, 9, 1393 },
  { 747, 94, 160, 9, 1393 },
  { 779, 94, 160, 9, 1393 },
  { 811, 94, 160, 9, 1393 },
  { 843, 94, 160, 9, 1393 },
  { 869, 94, 160, 9, 1393 },
  { 511, 94, 160, 9, 1393 },
  { 589, 94, 160, 9, 1393 },
  { 646, 94, 160, 9, 1393 },
  { 684, 94, 160, 9, 1393 },
  { 722, 94, 160, 9, 1393 },
  { 754, 94, 160, 9, 1393 },
  { 786, 94, 160, 9, 1393 },
  { 818, 94, 160, 9, 1393 },
  { 850, 94, 160, 9, 1393 },
  { 876, 94, 160, 9, 1393 },
  { 518, 94, 160, 9, 1393 },
  { 596, 94, 160, 9, 1393 },
  { 1273, 1, 117, 1, 1168 },
  { 544, 143, 236, 0, 1360 },
  { 551, 145, 1, 0, 2225 },
  { 615, 145, 1, 0, 2225 },
  { 557, 145, 232, 0, 1328 },
  { 564, 147, 1, 0, 2193 },
  { 621, 147, 1, 0, 2193 },
  { 665, 147, 1, 0, 2193 },
  { 703, 147, 1, 0, 2193 },
  { 735, 147, 1, 0, 2193 },
  { 767, 147, 1, 0, 2193 },
  { 799, 147, 1, 0, 2193 },
  { 831, 147, 1, 0, 2193 },
  { 570, 149, 1, 0, 2193 },
  { 627, 149, 1, 0, 2193 },
  { 671, 149, 1, 0, 2193 },
  { 709, 149, 1, 0, 2193 },
  { 741, 149, 1, 0, 2193 },
  { 773, 149, 1, 0, 2193 },
  { 805, 149, 1, 0, 2193 },
  { 837, 149, 1, 0, 2193 },
  { 863, 149, 1, 0, 2193 },
  { 889, 149, 1, 0, 2193 },
  { 576, 149, 1, 0, 2193 },
  { 633, 149, 1, 0, 2193 },
};

extern const uint16_t MipsRegUnitRoots[][2] = {
  { Mips::AT },
  { Mips::DSPCCond },
  { Mips::DSPCarry },
  { Mips::DSPEFI },
  { Mips::DSPOutFlag16_19 },
  { Mips::DSPOutFlag20 },
  { Mips::DSPOutFlag21 },
  { Mips::DSPOutFlag22 },
  { Mips::DSPOutFlag23 },
  { Mips::DSPPos },
  { Mips::DSPSCount },
  { Mips::FP },
  { Mips::GP },
  { Mips::MSAAccess },
  { Mips::MSACSR },
  { Mips::MSAIR },
  { Mips::MSAMap },
  { Mips::MSAModify },
  { Mips::MSARequest },
  { Mips::MSASave },
  { Mips::MSAUnmap },
  { Mips::PC },
  { Mips::RA },
  { Mips::SP },
  { Mips::ZERO },
  { Mips::A0 },
  { Mips::A1 },
  { Mips::A2 },
  { Mips::A3 },
  { Mips::LO0 },
  { Mips::HI0 },
  { Mips::LO1 },
  { Mips::HI1 },
  { Mips::LO2 },
  { Mips::HI2 },
  { Mips::LO3 },
  { Mips::HI3 },
  { Mips::F0 },
  { Mips::F1 },
  { Mips::F2 },
  { Mips::F3 },
  { Mips::F4 },
  { Mips::F5 },
  { Mips::F6 },
  { Mips::F7 },
  { Mips::F8 },
  { Mips::F9 },
  { Mips::F10 },
  { Mips::F11 },
  { Mips::F12 },
  { Mips::F13 },
  { Mips::F14 },
  { Mips::F15 },
  { Mips::F16 },
  { Mips::F17 },
  { Mips::F18 },
  { Mips::F19 },
  { Mips::F20 },
  { Mips::F21 },
  { Mips::F22 },
  { Mips::F23 },
  { Mips::F24 },
  { Mips::F25 },
  { Mips::F26 },
  { Mips::F27 },
  { Mips::F28 },
  { Mips::F29 },
  { Mips::F30 },
  { Mips::F31 },
  { Mips::FCC0 },
  { Mips::FCC1 },
  { Mips::FCC2 },
  { Mips::FCC3 },
  { Mips::FCC4 },
  { Mips::FCC5 },
  { Mips::FCC6 },
  { Mips::FCC7 },
  { Mips::FCR0 },
  { Mips::FCR1 },
  { Mips::FCR2 },
  { Mips::FCR3 },
  { Mips::FCR4 },
  { Mips::FCR5 },
  { Mips::FCR6 },
  { Mips::FCR7 },
  { Mips::FCR8 },
  { Mips::FCR9 },
  { Mips::FCR10 },
  { Mips::FCR11 },
  { Mips::FCR12 },
  { Mips::FCR13 },
  { Mips::FCR14 },
  { Mips::FCR15 },
  { Mips::FCR16 },
  { Mips::FCR17 },
  { Mips::FCR18 },
  { Mips::FCR19 },
  { Mips::FCR20 },
  { Mips::FCR21 },
  { Mips::FCR22 },
  { Mips::FCR23 },
  { Mips::FCR24 },
  { Mips::FCR25 },
  { Mips::FCR26 },
  { Mips::FCR27 },
  { Mips::FCR28 },
  { Mips::FCR29 },
  { Mips::FCR30 },
  { Mips::FCR31 },
  { Mips::F_HI0 },
  { Mips::F_HI1 },
  { Mips::F_HI2 },
  { Mips::F_HI3 },
  { Mips::F_HI4 },
  { Mips::F_HI5 },
  { Mips::F_HI6 },
  { Mips::F_HI7 },
  { Mips::F_HI8 },
  { Mips::F_HI9 },
  { Mips::F_HI10 },
  { Mips::F_HI11 },
  { Mips::F_HI12 },
  { Mips::F_HI13 },
  { Mips::F_HI14 },
  { Mips::F_HI15 },
  { Mips::F_HI16 },
  { Mips::F_HI17 },
  { Mips::F_HI18 },
  { Mips::F_HI19 },
  { Mips::F_HI20 },
  { Mips::F_HI21 },
  { Mips::F_HI22 },
  { Mips::F_HI23 },
  { Mips::F_HI24 },
  { Mips::F_HI25 },
  { Mips::F_HI26 },
  { Mips::F_HI27 },
  { Mips::F_HI28 },
  { Mips::F_HI29 },
  { Mips::F_HI30 },
  { Mips::F_HI31 },
  { Mips::HWR29 },
  { Mips::K0 },
  { Mips::K1 },
  { Mips::S0 },
  { Mips::S1 },
  { Mips::S2 },
  { Mips::S3 },
  { Mips::S4 },
  { Mips::S5 },
  { Mips::S6 },
  { Mips::S7 },
  { Mips::T0 },
  { Mips::T1 },
  { Mips::T2 },
  { Mips::T3 },
  { Mips::T4 },
  { Mips::T5 },
  { Mips::T6 },
  { Mips::T7 },
  { Mips::T8 },
  { Mips::T9 },
  { Mips::V0 },
  { Mips::V1 },
};

namespace {     // Register classes...
  // CCR Register Class...
  const uint16_t CCR[] = {
    Mips::FCR0, Mips::FCR1, Mips::FCR2, Mips::FCR3, Mips::FCR4, Mips::FCR5, Mips::FCR6, Mips::FCR7, Mips::FCR8, Mips::FCR9, Mips::FCR10, Mips::FCR11, Mips::FCR12, Mips::FCR13, Mips::FCR14, Mips::FCR15, Mips::FCR16, Mips::FCR17, Mips::FCR18, Mips::FCR19, Mips::FCR20, Mips::FCR21, Mips::FCR22, Mips::FCR23, Mips::FCR24, Mips::FCR25, Mips::FCR26, Mips::FCR27, Mips::FCR28, Mips::FCR29, Mips::FCR30, Mips::FCR31, 
  };

  // CCR Bit set.
  const uint8_t CCRBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0xff, 0xff, 0xff, 0x07, 
  };

  // DSPR Register Class...
  const uint16_t DSPR[] = {
    Mips::ZERO, Mips::AT, Mips::V0, Mips::V1, Mips::A0, Mips::A1, Mips::A2, Mips::A3, Mips::T0, Mips::T1, Mips::T2, Mips::T3, Mips::T4, Mips::T5, Mips::T6, Mips::T7, Mips::S0, Mips::S1, Mips::S2, Mips::S3, Mips::S4, Mips::S5, Mips::S6, Mips::S7, Mips::T8, Mips::T9, Mips::K0, Mips::K1, Mips::GP, Mips::SP, Mips::FP, Mips::RA, 
  };

  // DSPR Bit set.
  const uint8_t DSPRBits[] = {
    0x02, 0x03, 0xf8, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0xfe, 0xfd, 0x3f, 
  };

  // FGR32 Register Class...
  const uint16_t FGR32[] = {
    Mips::F0, Mips::F1, Mips::F2, Mips::F3, Mips::F4, Mips::F5, Mips::F6, Mips::F7, Mips::F8, Mips::F9, Mips::F10, Mips::F11, Mips::F12, Mips::F13, Mips::F14, Mips::F15, Mips::F16, Mips::F17, Mips::F18, Mips::F19, Mips::F20, Mips::F21, Mips::F22, Mips::F23, Mips::F24, Mips::F25, Mips::F26, Mips::F27, Mips::F28, Mips::F29, Mips::F30, Mips::F31, 
  };

  // FGR32 Bit set.
  const uint8_t FGR32Bits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0xff, 0xff, 0xff, 0x07, 
  };

  // FGRH32 Register Class...
  const uint16_t FGRH32[] = {
    Mips::F_HI0, Mips::F_HI1, Mips::F_HI2, Mips::F_HI3, Mips::F_HI4, Mips::F_HI5, Mips::F_HI6, Mips::F_HI7, Mips::F_HI8, Mips::F_HI9, Mips::F_HI10, Mips::F_HI11, Mips::F_HI12, Mips::F_HI13, Mips::F_HI14, Mips::F_HI15, Mips::F_HI16, Mips::F_HI17, Mips::F_HI18, Mips::F_HI19, Mips::F_HI20, Mips::F_HI21, Mips::F_HI22, Mips::F_HI23, Mips::F_HI24, Mips::F_HI25, Mips::F_HI26, Mips::F_HI27, Mips::F_HI28, Mips::F_HI29, Mips::F_HI30, Mips::F_HI31, 
  };

  // FGRH32 Bit set.
  const uint8_t FGRH32Bits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xff, 0xff, 0xff, 0x0f, 
  };

  // GPR32 Register Class...
  const uint16_t GPR32[] = {
    Mips::ZERO, Mips::AT, Mips::V0, Mips::V1, Mips::A0, Mips::A1, Mips::A2, Mips::A3, Mips::T0, Mips::T1, Mips::T2, Mips::T3, Mips::T4, Mips::T5, Mips::T6, Mips::T7, Mips::S0, Mips::S1, Mips::S2, Mips::S3, Mips::S4, Mips::S5, Mips::S6, Mips::S7, Mips::T8, Mips::T9, Mips::K0, Mips::K1, Mips::GP, Mips::SP, Mips::FP, Mips::RA, 
  };

  // GPR32 Bit set.
  const uint8_t GPR32Bits[] = {
    0x02, 0x03, 0xf8, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0xfe, 0xfd, 0x3f, 
  };

  // CPU16RegsPlusSP Register Class...
  const uint16_t CPU16RegsPlusSP[] = {
    Mips::V0, Mips::V1, Mips::A0, Mips::A1, Mips::A2, Mips::A3, Mips::S0, Mips::S1, Mips::SP, 
  };

  // CPU16RegsPlusSP Bit set.
  const uint8_t CPU16RegsPlusSPBits[] = {
    0x00, 0x00, 0xd0, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x30, 
  };

  // CPU16Regs Register Class...
  const uint16_t CPU16Regs[] = {
    Mips::V0, Mips::V1, Mips::A0, Mips::A1, Mips::A2, Mips::A3, Mips::S0, Mips::S1, 
  };

  // CPU16Regs Bit set.
  const uint8_t CPU16RegsBits[] = {
    0x00, 0x00, 0xc0, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x30, 
  };

  // FCC Register Class...
  const uint16_t FCC[] = {
    Mips::FCC0, Mips::FCC1, Mips::FCC2, Mips::FCC3, Mips::FCC4, Mips::FCC5, Mips::FCC6, Mips::FCC7, 
  };

  // FCC Bit set.
  const uint8_t FCCBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x07, 
  };

  // MSACtrl Register Class...
  const uint16_t MSACtrl[] = {
    Mips::MSAIR, Mips::MSACSR, Mips::MSAAccess, Mips::MSASave, Mips::MSAModify, Mips::MSARequest, Mips::MSAMap, Mips::MSAUnmap, 
  };

  // MSACtrl Bit set.
  const uint8_t MSACtrlBits[] = {
    0x00, 0xfc, 0x03, 
  };

  // HI32DSP Register Class...
  const uint16_t HI32DSP[] = {
    Mips::HI0, Mips::HI1, Mips::HI2, Mips::HI3, 
  };

  // HI32DSP Bit set.
  const uint8_t HI32DSPBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x01, 
  };

  // LO32DSP Register Class...
  const uint16_t LO32DSP[] = {
    Mips::LO0, Mips::LO1, Mips::LO2, Mips::LO3, 
  };

  // LO32DSP Bit set.
  const uint8_t LO32DSPBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 
  };

  // CPURAReg Register Class...
  const uint16_t CPURAReg[] = {
    Mips::RA, 
  };

  // CPURAReg Bit set.
  const uint8_t CPURARegBits[] = {
    0x00, 0x00, 0x08, 
  };

  // CPUSPReg Register Class...
  const uint16_t CPUSPReg[] = {
    Mips::SP, 
  };

  // CPUSPReg Bit set.
  const uint8_t CPUSPRegBits[] = {
    0x00, 0x00, 0x10, 
  };

  // DSPCC Register Class...
  const uint16_t DSPCC[] = {
    Mips::DSPCCond, 
  };

  // DSPCC Bit set.
  const uint8_t DSPCCBits[] = {
    0x04, 
  };

  // HI32 Register Class...
  const uint16_t HI32[] = {
    Mips::HI0, 
  };

  // HI32 Bit set.
  const uint8_t HI32Bits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 
  };

  // HWRegs Register Class...
  const uint16_t HWRegs[] = {
    Mips::HWR29, 
  };

  // HWRegs Bit set.
  const uint8_t HWRegsBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 
  };

  // LO32 Register Class...
  const uint16_t LO32[] = {
    Mips::LO0, 
  };

  // LO32 Bit set.
  const uint8_t LO32Bits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 
  };

  // FGR64 Register Class...
  const uint16_t FGR64[] = {
    Mips::D0_64, Mips::D1_64, Mips::D2_64, Mips::D3_64, Mips::D4_64, Mips::D5_64, Mips::D6_64, Mips::D7_64, Mips::D8_64, Mips::D9_64, Mips::D10_64, Mips::D11_64, Mips::D12_64, Mips::D13_64, Mips::D14_64, Mips::D15_64, Mips::D16_64, Mips::D17_64, Mips::D18_64, Mips::D19_64, Mips::D20_64, Mips::D21_64, Mips::D22_64, Mips::D23_64, Mips::D24_64, Mips::D25_64, Mips::D26_64, Mips::D27_64, Mips::D28_64, Mips::D29_64, Mips::D30_64, Mips::D31_64, 
  };

  // FGR64 Bit set.
  const uint8_t FGR64Bits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xff, 0xff, 0xff, 0x0f, 
  };

  // GPR64 Register Class...
  const uint16_t GPR64[] = {
    Mips::ZERO_64, Mips::AT_64, Mips::V0_64, Mips::V1_64, Mips::A0_64, Mips::A1_64, Mips::A2_64, Mips::A3_64, Mips::T0_64, Mips::T1_64, Mips::T2_64, Mips::T3_64, Mips::T4_64, Mips::T5_64, Mips::T6_64, Mips::T7_64, Mips::S0_64, Mips::S1_64, Mips::S2_64, Mips::S3_64, Mips::S4_64, Mips::S5_64, Mips::S6_64, Mips::S7_64, Mips::T8_64, Mips::T9_64, Mips::K0_64, Mips::K1_64, Mips::GP_64, Mips::SP_64, Mips::FP_64, Mips::RA_64, 
  };

  // GPR64 Bit set.
  const uint8_t GPR64Bits[] = {
    0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x10, 0x00, 0x01, 0x02, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x07, 0x00, 0x00, 0x00, 0xc0, 0xfe, 0xff, 0x1f, 
  };

  // AFGR64 Register Class...
  const uint16_t AFGR64[] = {
    Mips::D0, Mips::D1, Mips::D2, Mips::D3, Mips::D4, Mips::D5, Mips::D6, Mips::D7, Mips::D8, Mips::D9, Mips::D10, Mips::D11, Mips::D12, Mips::D13, Mips::D14, Mips::D15, 
  };

  // AFGR64 Bit set.
  const uint8_t AFGR64Bits[] = {
    0x00, 0x00, 0x00, 0x80, 0xff, 0x7f, 
  };

  // GPR64_with_sub_32_in_CPU16RegsPlusSP Register Class...
  const uint16_t GPR64_with_sub_32_in_CPU16RegsPlusSP[] = {
    Mips::V0_64, Mips::V1_64, Mips::A0_64, Mips::A1_64, Mips::A2_64, Mips::A3_64, Mips::S0_64, Mips::S1_64, Mips::SP_64, 
  };

  // GPR64_with_sub_32_in_CPU16RegsPlusSP Bit set.
  const uint8_t GPR64_with_sub_32_in_CPU16RegsPlusSPBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x80, 0x07, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x18, 
  };

  // GPR64_with_sub_32_in_CPU16Regs Register Class...
  const uint16_t GPR64_with_sub_32_in_CPU16Regs[] = {
    Mips::V0_64, Mips::V1_64, Mips::A0_64, Mips::A1_64, Mips::A2_64, Mips::A3_64, Mips::S0_64, Mips::S1_64, 
  };

  // GPR64_with_sub_32_in_CPU16Regs Bit set.
  const uint8_t GPR64_with_sub_32_in_CPU16RegsBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x07, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x18, 
  };

  // ACC64DSP Register Class...
  const uint16_t ACC64DSP[] = {
    Mips::AC0, Mips::AC1, Mips::AC2, Mips::AC3, 
  };

  // ACC64DSP Bit set.
  const uint8_t ACC64DSPBits[] = {
    0x00, 0x00, 0x00, 0x3c, 
  };

  // ACC64 Register Class...
  const uint16_t ACC64[] = {
    Mips::AC0, 
  };

  // ACC64 Bit set.
  const uint8_t ACC64Bits[] = {
    0x00, 0x00, 0x00, 0x04, 
  };

  // GPR64_with_sub_32_in_CPURAReg Register Class...
  const uint16_t GPR64_with_sub_32_in_CPURAReg[] = {
    Mips::RA_64, 
  };

  // GPR64_with_sub_32_in_CPURAReg Bit set.
  const uint8_t GPR64_with_sub_32_in_CPURARegBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 
  };

  // GPR64_with_sub_32_in_CPUSPReg Register Class...
  const uint16_t GPR64_with_sub_32_in_CPUSPReg[] = {
    Mips::SP_64, 
  };

  // GPR64_with_sub_32_in_CPUSPReg Bit set.
  const uint8_t GPR64_with_sub_32_in_CPUSPRegBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 
  };

  // HI64 Register Class...
  const uint16_t HI64[] = {
    Mips::HI0_64, 
  };

  // HI64 Bit set.
  const uint8_t HI64Bits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 
  };

  // LO64 Register Class...
  const uint16_t LO64[] = {
    Mips::LO0_64, 
  };

  // LO64 Bit set.
  const uint8_t LO64Bits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 
  };

  // MSA128B Register Class...
  const uint16_t MSA128B[] = {
    Mips::W0, Mips::W1, Mips::W2, Mips::W3, Mips::W4, Mips::W5, Mips::W6, Mips::W7, Mips::W8, Mips::W9, Mips::W10, Mips::W11, Mips::W12, Mips::W13, Mips::W14, Mips::W15, Mips::W16, Mips::W17, Mips::W18, Mips::W19, Mips::W20, Mips::W21, Mips::W22, Mips::W23, Mips::W24, Mips::W25, Mips::W26, Mips::W27, Mips::W28, Mips::W29, Mips::W30, Mips::W31, 
  };

  // MSA128B Bit set.
  const uint8_t MSA128BBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xff, 0xff, 0xff, 0x3f, 
  };

  // MSA128D Register Class...
  const uint16_t MSA128D[] = {
    Mips::W0, Mips::W1, Mips::W2, Mips::W3, Mips::W4, Mips::W5, Mips::W6, Mips::W7, Mips::W8, Mips::W9, Mips::W10, Mips::W11, Mips::W12, Mips::W13, Mips::W14, Mips::W15, Mips::W16, Mips::W17, Mips::W18, Mips::W19, Mips::W20, Mips::W21, Mips::W22, Mips::W23, Mips::W24, Mips::W25, Mips::W26, Mips::W27, Mips::W28, Mips::W29, Mips::W30, Mips::W31, 
  };

  // MSA128D Bit set.
  const uint8_t MSA128DBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xff, 0xff, 0xff, 0x3f, 
  };

  // MSA128H Register Class...
  const uint16_t MSA128H[] = {
    Mips::W0, Mips::W1, Mips::W2, Mips::W3, Mips::W4, Mips::W5, Mips::W6, Mips::W7, Mips::W8, Mips::W9, Mips::W10, Mips::W11, Mips::W12, Mips::W13, Mips::W14, Mips::W15, Mips::W16, Mips::W17, Mips::W18, Mips::W19, Mips::W20, Mips::W21, Mips::W22, Mips::W23, Mips::W24, Mips::W25, Mips::W26, Mips::W27, Mips::W28, Mips::W29, Mips::W30, Mips::W31, 
  };

  // MSA128H Bit set.
  const uint8_t MSA128HBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xff, 0xff, 0xff, 0x3f, 
  };

  // MSA128W Register Class...
  const uint16_t MSA128W[] = {
    Mips::W0, Mips::W1, Mips::W2, Mips::W3, Mips::W4, Mips::W5, Mips::W6, Mips::W7, Mips::W8, Mips::W9, Mips::W10, Mips::W11, Mips::W12, Mips::W13, Mips::W14, Mips::W15, Mips::W16, Mips::W17, Mips::W18, Mips::W19, Mips::W20, Mips::W21, Mips::W22, Mips::W23, Mips::W24, Mips::W25, Mips::W26, Mips::W27, Mips::W28, Mips::W29, Mips::W30, Mips::W31, 
  };

  // MSA128W Bit set.
  const uint8_t MSA128WBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xff, 0xff, 0xff, 0x3f, 
  };

  // ACC128 Register Class...
  const uint16_t ACC128[] = {
    Mips::AC0_64, 
  };

  // ACC128 Bit set.
  const uint8_t ACC128Bits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 
  };

}

extern const MCRegisterClass MipsMCRegisterClasses[] = {
  { "CCR", CCR, CCRBits, 32, sizeof(CCRBits), Mips::CCRRegClassID, 4, 4, 1, 0 },
  { "DSPR", DSPR, DSPRBits, 32, sizeof(DSPRBits), Mips::DSPRRegClassID, 4, 4, 1, 1 },
  { "FGR32", FGR32, FGR32Bits, 32, sizeof(FGR32Bits), Mips::FGR32RegClassID, 4, 4, 1, 1 },
  { "FGRH32", FGRH32, FGRH32Bits, 32, sizeof(FGRH32Bits), Mips::FGRH32RegClassID, 4, 4, 1, 0 },
  { "GPR32", GPR32, GPR32Bits, 32, sizeof(GPR32Bits), Mips::GPR32RegClassID, 4, 4, 1, 1 },
  { "CPU16RegsPlusSP", CPU16RegsPlusSP, CPU16RegsPlusSPBits, 9, sizeof(CPU16RegsPlusSPBits), Mips::CPU16RegsPlusSPRegClassID, 4, 4, 1, 1 },
  { "CPU16Regs", CPU16Regs, CPU16RegsBits, 8, sizeof(CPU16RegsBits), Mips::CPU16RegsRegClassID, 4, 4, 1, 1 },
  { "FCC", FCC, FCCBits, 8, sizeof(FCCBits), Mips::FCCRegClassID, 4, 4, 1, 0 },
  { "MSACtrl", MSACtrl, MSACtrlBits, 8, sizeof(MSACtrlBits), Mips::MSACtrlRegClassID, 4, 4, 1, 1 },
  { "HI32DSP", HI32DSP, HI32DSPBits, 4, sizeof(HI32DSPBits), Mips::HI32DSPRegClassID, 4, 4, 1, 1 },
  { "LO32DSP", LO32DSP, LO32DSPBits, 4, sizeof(LO32DSPBits), Mips::LO32DSPRegClassID, 4, 4, 1, 1 },
  { "CPURAReg", CPURAReg, CPURARegBits, 1, sizeof(CPURARegBits), Mips::CPURARegRegClassID, 4, 4, 1, 0 },
  { "CPUSPReg", CPUSPReg, CPUSPRegBits, 1, sizeof(CPUSPRegBits), Mips::CPUSPRegRegClassID, 4, 4, 1, 0 },
  { "DSPCC", DSPCC, DSPCCBits, 1, sizeof(DSPCCBits), Mips::DSPCCRegClassID, 4, 4, 1, 1 },
  { "HI32", HI32, HI32Bits, 1, sizeof(HI32Bits), Mips::HI32RegClassID, 4, 4, 1, 1 },
  { "HWRegs", HWRegs, HWRegsBits, 1, sizeof(HWRegsBits), Mips::HWRegsRegClassID, 4, 4, 1, 0 },
  { "LO32", LO32, LO32Bits, 1, sizeof(LO32Bits), Mips::LO32RegClassID, 4, 4, 1, 1 },
  { "FGR64", FGR64, FGR64Bits, 32, sizeof(FGR64Bits), Mips::FGR64RegClassID, 8, 8, 1, 1 },
  { "GPR64", GPR64, GPR64Bits, 32, sizeof(GPR64Bits), Mips::GPR64RegClassID, 8, 8, 1, 1 },
  { "AFGR64", AFGR64, AFGR64Bits, 16, sizeof(AFGR64Bits), Mips::AFGR64RegClassID, 8, 8, 1, 1 },
  { "GPR64_with_sub_32_in_CPU16RegsPlusSP", GPR64_with_sub_32_in_CPU16RegsPlusSP, GPR64_with_sub_32_in_CPU16RegsPlusSPBits, 9, sizeof(GPR64_with_sub_32_in_CPU16RegsPlusSPBits), Mips::GPR64_with_sub_32_in_CPU16RegsPlusSPRegClassID, 8, 8, 1, 1 },
  { "GPR64_with_sub_32_in_CPU16Regs", GPR64_with_sub_32_in_CPU16Regs, GPR64_with_sub_32_in_CPU16RegsBits, 8, sizeof(GPR64_with_sub_32_in_CPU16RegsBits), Mips::GPR64_with_sub_32_in_CPU16RegsRegClassID, 8, 8, 1, 1 },
  { "ACC64DSP", ACC64DSP, ACC64DSPBits, 4, sizeof(ACC64DSPBits), Mips::ACC64DSPRegClassID, 8, 8, 1, 1 },
  { "ACC64", ACC64, ACC64Bits, 1, sizeof(ACC64Bits), Mips::ACC64RegClassID, 8, 8, 1, 1 },
  { "GPR64_with_sub_32_in_CPURAReg", GPR64_with_sub_32_in_CPURAReg, GPR64_with_sub_32_in_CPURARegBits, 1, sizeof(GPR64_with_sub_32_in_CPURARegBits), Mips::GPR64_with_sub_32_in_CPURARegRegClassID, 8, 8, 1, 1 },
  { "GPR64_with_sub_32_in_CPUSPReg", GPR64_with_sub_32_in_CPUSPReg, GPR64_with_sub_32_in_CPUSPRegBits, 1, sizeof(GPR64_with_sub_32_in_CPUSPRegBits), Mips::GPR64_with_sub_32_in_CPUSPRegRegClassID, 8, 8, 1, 1 },
  { "HI64", HI64, HI64Bits, 1, sizeof(HI64Bits), Mips::HI64RegClassID, 8, 8, 1, 1 },
  { "LO64", LO64, LO64Bits, 1, sizeof(LO64Bits), Mips::LO64RegClassID, 8, 8, 1, 1 },
  { "MSA128B", MSA128B, MSA128BBits, 32, sizeof(MSA128BBits), Mips::MSA128BRegClassID, 16, 16, 1, 1 },
  { "MSA128D", MSA128D, MSA128DBits, 32, sizeof(MSA128DBits), Mips::MSA128DRegClassID, 16, 16, 1, 1 },
  { "MSA128H", MSA128H, MSA128HBits, 32, sizeof(MSA128HBits), Mips::MSA128HRegClassID, 16, 16, 1, 1 },
  { "MSA128W", MSA128W, MSA128WBits, 32, sizeof(MSA128WBits), Mips::MSA128WRegClassID, 16, 16, 1, 1 },
  { "ACC128", ACC128, ACC128Bits, 1, sizeof(ACC128Bits), Mips::ACC128RegClassID, 16, 16, 1, 1 },
};

// Mips Dwarf<->LLVM register mappings.
extern const MCRegisterInfo::DwarfLLVMRegPair MipsDwarfFlavour0Dwarf2L[] = {
  { 0U, Mips::ZERO_64 },
  { 1U, Mips::AT_64 },
  { 2U, Mips::V0_64 },
  { 3U, Mips::V1_64 },
  { 4U, Mips::A0_64 },
  { 5U, Mips::A1_64 },
  { 6U, Mips::A2_64 },
  { 7U, Mips::A3_64 },
  { 8U, Mips::T0_64 },
  { 9U, Mips::T1_64 },
  { 10U, Mips::T2_64 },
  { 11U, Mips::T3_64 },
  { 12U, Mips::T4_64 },
  { 13U, Mips::T5_64 },
  { 14U, Mips::T6_64 },
  { 15U, Mips::T7_64 },
  { 16U, Mips::S0_64 },
  { 17U, Mips::S1_64 },
  { 18U, Mips::S2_64 },
  { 19U, Mips::S3_64 },
  { 20U, Mips::S4_64 },
  { 21U, Mips::S5_64 },
  { 22U, Mips::S6_64 },
  { 23U, Mips::S7_64 },
  { 24U, Mips::T8_64 },
  { 25U, Mips::T9_64 },
  { 26U, Mips::K0_64 },
  { 27U, Mips::K1_64 },
  { 28U, Mips::GP_64 },
  { 29U, Mips::SP_64 },
  { 30U, Mips::FP_64 },
  { 31U, Mips::RA_64 },
  { 32U, Mips::D0_64 },
  { 33U, Mips::D1_64 },
  { 34U, Mips::D2_64 },
  { 35U, Mips::D3_64 },
  { 36U, Mips::D4_64 },
  { 37U, Mips::D5_64 },
  { 38U, Mips::D6_64 },
  { 39U, Mips::D7_64 },
  { 40U, Mips::D8_64 },
  { 41U, Mips::D9_64 },
  { 42U, Mips::D10_64 },
  { 43U, Mips::D11_64 },
  { 44U, Mips::D12_64 },
  { 45U, Mips::D13_64 },
  { 46U, Mips::D14_64 },
  { 47U, Mips::D15_64 },
  { 48U, Mips::D16_64 },
  { 49U, Mips::D17_64 },
  { 50U, Mips::D18_64 },
  { 51U, Mips::D19_64 },
  { 52U, Mips::D20_64 },
  { 53U, Mips::D21_64 },
  { 54U, Mips::D22_64 },
  { 55U, Mips::D23_64 },
  { 56U, Mips::D24_64 },
  { 57U, Mips::D25_64 },
  { 58U, Mips::D26_64 },
  { 59U, Mips::D27_64 },
  { 60U, Mips::D28_64 },
  { 61U, Mips::D29_64 },
  { 62U, Mips::D30_64 },
  { 63U, Mips::D31_64 },
  { 64U, Mips::HI0 },
  { 65U, Mips::LO0 },
  { 176U, Mips::HI1 },
  { 177U, Mips::LO1 },
  { 178U, Mips::HI2 },
  { 179U, Mips::LO2 },
  { 180U, Mips::HI3 },
  { 181U, Mips::LO3 },
};
extern const unsigned MipsDwarfFlavour0Dwarf2LSize = sizeof(MipsDwarfFlavour0Dwarf2L)/sizeof(MCRegisterInfo::DwarfLLVMRegPair);

extern const MCRegisterInfo::DwarfLLVMRegPair MipsEHFlavour0Dwarf2L[] = {
  { 0U, Mips::ZERO_64 },
  { 1U, Mips::AT_64 },
  { 2U, Mips::V0_64 },
  { 3U, Mips::V1_64 },
  { 4U, Mips::A0_64 },
  { 5U, Mips::A1_64 },
  { 6U, Mips::A2_64 },
  { 7U, Mips::A3_64 },
  { 8U, Mips::T0_64 },
  { 9U, Mips::T1_64 },
  { 10U, Mips::T2_64 },
  { 11U, Mips::T3_64 },
  { 12U, Mips::T4_64 },
  { 13U, Mips::T5_64 },
  { 14U, Mips::T6_64 },
  { 15U, Mips::T7_64 },
  { 16U, Mips::S0_64 },
  { 17U, Mips::S1_64 },
  { 18U, Mips::S2_64 },
  { 19U, Mips::S3_64 },
  { 20U, Mips::S4_64 },
  { 21U, Mips::S5_64 },
  { 22U, Mips::S6_64 },
  { 23U, Mips::S7_64 },
  { 24U, Mips::T8_64 },
  { 25U, Mips::T9_64 },
  { 26U, Mips::K0_64 },
  { 27U, Mips::K1_64 },
  { 28U, Mips::GP_64 },
  { 29U, Mips::SP_64 },
  { 30U, Mips::FP_64 },
  { 31U, Mips::RA_64 },
  { 32U, Mips::D0_64 },
  { 33U, Mips::D1_64 },
  { 34U, Mips::D2_64 },
  { 35U, Mips::D3_64 },
  { 36U, Mips::D4_64 },
  { 37U, Mips::D5_64 },
  { 38U, Mips::D6_64 },
  { 39U, Mips::D7_64 },
  { 40U, Mips::D8_64 },
  { 41U, Mips::D9_64 },
  { 42U, Mips::D10_64 },
  { 43U, Mips::D11_64 },
  { 44U, Mips::D12_64 },
  { 45U, Mips::D13_64 },
  { 46U, Mips::D14_64 },
  { 47U, Mips::D15_64 },
  { 48U, Mips::D16_64 },
  { 49U, Mips::D17_64 },
  { 50U, Mips::D18_64 },
  { 51U, Mips::D19_64 },
  { 52U, Mips::D20_64 },
  { 53U, Mips::D21_64 },
  { 54U, Mips::D22_64 },
  { 55U, Mips::D23_64 },
  { 56U, Mips::D24_64 },
  { 57U, Mips::D25_64 },
  { 58U, Mips::D26_64 },
  { 59U, Mips::D27_64 },
  { 60U, Mips::D28_64 },
  { 61U, Mips::D29_64 },
  { 62U, Mips::D30_64 },
  { 63U, Mips::D31_64 },
  { 64U, Mips::HI0 },
  { 65U, Mips::LO0 },
  { 176U, Mips::HI1 },
  { 177U, Mips::LO1 },
  { 178U, Mips::HI2 },
  { 179U, Mips::LO2 },
  { 180U, Mips::HI3 },
  { 181U, Mips::LO3 },
};
extern const unsigned MipsEHFlavour0Dwarf2LSize = sizeof(MipsEHFlavour0Dwarf2L)/sizeof(MCRegisterInfo::DwarfLLVMRegPair);

extern const MCRegisterInfo::DwarfLLVMRegPair MipsDwarfFlavour0L2Dwarf[] = {
  { Mips::AT, 1U },
  { Mips::FP, 30U },
  { Mips::GP, 28U },
  { Mips::RA, 31U },
  { Mips::SP, 29U },
  { Mips::ZERO, 0U },
  { Mips::A0, 4U },
  { Mips::A1, 5U },
  { Mips::A2, 6U },
  { Mips::A3, 7U },
  { Mips::AT_64, 1U },
  { Mips::F0, 32U },
  { Mips::F1, 33U },
  { Mips::F2, 34U },
  { Mips::F3, 35U },
  { Mips::F4, 36U },
  { Mips::F5, 37U },
  { Mips::F6, 38U },
  { Mips::F7, 39U },
  { Mips::F8, 40U },
  { Mips::F9, 41U },
  { Mips::F10, 42U },
  { Mips::F11, 43U },
  { Mips::F12, 44U },
  { Mips::F13, 45U },
  { Mips::F14, 46U },
  { Mips::F15, 47U },
  { Mips::F16, 48U },
  { Mips::F17, 49U },
  { Mips::F18, 50U },
  { Mips::F19, 51U },
  { Mips::F20, 52U },
  { Mips::F21, 53U },
  { Mips::F22, 54U },
  { Mips::F23, 55U },
  { Mips::F24, 56U },
  { Mips::F25, 57U },
  { Mips::F26, 58U },
  { Mips::F27, 59U },
  { Mips::F28, 60U },
  { Mips::F29, 61U },
  { Mips::F30, 62U },
  { Mips::F31, 63U },
  { Mips::FP_64, 30U },
  { Mips::F_HI0, 32U },
  { Mips::F_HI1, 33U },
  { Mips::F_HI2, 34U },
  { Mips::F_HI3, 35U },
  { Mips::F_HI4, 36U },
  { Mips::F_HI5, 37U },
  { Mips::F_HI6, 38U },
  { Mips::F_HI7, 39U },
  { Mips::F_HI8, 40U },
  { Mips::F_HI9, 41U },
  { Mips::F_HI10, 42U },
  { Mips::F_HI11, 43U },
  { Mips::F_HI12, 44U },
  { Mips::F_HI13, 45U },
  { Mips::F_HI14, 46U },
  { Mips::F_HI15, 47U },
  { Mips::F_HI16, 48U },
  { Mips::F_HI17, 49U },
  { Mips::F_HI18, 50U },
  { Mips::F_HI19, 51U },
  { Mips::F_HI20, 52U },
  { Mips::F_HI21, 53U },
  { Mips::F_HI22, 54U },
  { Mips::F_HI23, 55U },
  { Mips::F_HI24, 56U },
  { Mips::F_HI25, 57U },
  { Mips::F_HI26, 58U },
  { Mips::F_HI27, 59U },
  { Mips::F_HI28, 60U },
  { Mips::F_HI29, 61U },
  { Mips::F_HI30, 62U },
  { Mips::F_HI31, 63U },
  { Mips::GP_64, 28U },
  { Mips::HI0, 64U },
  { Mips::HI1, 176U },
  { Mips::HI2, 178U },
  { Mips::HI3, 180U },
  { Mips::K0, 26U },
  { Mips::K1, 27U },
  { Mips::LO0, 65U },
  { Mips::LO1, 177U },
  { Mips::LO2, 179U },
  { Mips::LO3, 181U },
  { Mips::RA_64, 31U },
  { Mips::S0, 16U },
  { Mips::S1, 17U },
  { Mips::S2, 18U },
  { Mips::S3, 19U },
  { Mips::S4, 20U },
  { Mips::S5, 21U },
  { Mips::S6, 22U },
  { Mips::S7, 23U },
  { Mips::SP_64, 29U },
  { Mips::T0, 8U },
  { Mips::T1, 9U },
  { Mips::T2, 10U },
  { Mips::T3, 11U },
  { Mips::T4, 12U },
  { Mips::T5, 13U },
  { Mips::T6, 14U },
  { Mips::T7, 15U },
  { Mips::T8, 24U },
  { Mips::T9, 25U },
  { Mips::V0, 2U },
  { Mips::V1, 3U },
  { Mips::W0, 32U },
  { Mips::W1, 33U },
  { Mips::W2, 34U },
  { Mips::W3, 35U },
  { Mips::W4, 36U },
  { Mips::W5, 37U },
  { Mips::W6, 38U },
  { Mips::W7, 39U },
  { Mips::W8, 40U },
  { Mips::W9, 41U },
  { Mips::W10, 42U },
  { Mips::W11, 43U },
  { Mips::W12, 44U },
  { Mips::W13, 45U },
  { Mips::W14, 46U },
  { Mips::W15, 47U },
  { Mips::W16, 48U },
  { Mips::W17, 49U },
  { Mips::W18, 50U },
  { Mips::W19, 51U },
  { Mips::W20, 52U },
  { Mips::W21, 53U },
  { Mips::W22, 54U },
  { Mips::W23, 55U },
  { Mips::W24, 56U },
  { Mips::W25, 57U },
  { Mips::W26, 58U },
  { Mips::W27, 59U },
  { Mips::W28, 60U },
  { Mips::W29, 61U },
  { Mips::W30, 62U },
  { Mips::W31, 63U },
  { Mips::ZERO_64, 0U },
  { Mips::A0_64, 4U },
  { Mips::A1_64, 5U },
  { Mips::A2_64, 6U },
  { Mips::A3_64, 7U },
  { Mips::D0_64, 32U },
  { Mips::D1_64, 33U },
  { Mips::D2_64, 34U },
  { Mips::D3_64, 35U },
  { Mips::D4_64, 36U },
  { Mips::D5_64, 37U },
  { Mips::D6_64, 38U },
  { Mips::D7_64, 39U },
  { Mips::D8_64, 40U },
  { Mips::D9_64, 41U },
  { Mips::D10_64, 42U },
  { Mips::D11_64, 43U },
  { Mips::D12_64, 44U },
  { Mips::D13_64, 45U },
  { Mips::D14_64, 46U },
  { Mips::D15_64, 47U },
  { Mips::D16_64, 48U },
  { Mips::D17_64, 49U },
  { Mips::D18_64, 50U },
  { Mips::D19_64, 51U },
  { Mips::D20_64, 52U },
  { Mips::D21_64, 53U },
  { Mips::D22_64, 54U },
  { Mips::D23_64, 55U },
  { Mips::D24_64, 56U },
  { Mips::D25_64, 57U },
  { Mips::D26_64, 58U },
  { Mips::D27_64, 59U },
  { Mips::D28_64, 60U },
  { Mips::D29_64, 61U },
  { Mips::D30_64, 62U },
  { Mips::D31_64, 63U },
  { Mips::K0_64, 26U },
  { Mips::K1_64, 27U },
  { Mips::S0_64, 16U },
  { Mips::S1_64, 17U },
  { Mips::S2_64, 18U },
  { Mips::S3_64, 19U },
  { Mips::S4_64, 20U },
  { Mips::S5_64, 21U },
  { Mips::S6_64, 22U },
  { Mips::S7_64, 23U },
  { Mips::T0_64, 8U },
  { Mips::T1_64, 9U },
  { Mips::T2_64, 10U },
  { Mips::T3_64, 11U },
  { Mips::T4_64, 12U },
  { Mips::T5_64, 13U },
  { Mips::T6_64, 14U },
  { Mips::T7_64, 15U },
  { Mips::T8_64, 24U },
  { Mips::T9_64, 25U },
  { Mips::V0_64, 2U },
  { Mips::V1_64, 3U },
};
extern const unsigned MipsDwarfFlavour0L2DwarfSize = sizeof(MipsDwarfFlavour0L2Dwarf)/sizeof(MCRegisterInfo::DwarfLLVMRegPair);

extern const MCRegisterInfo::DwarfLLVMRegPair MipsEHFlavour0L2Dwarf[] = {
  { Mips::AT, 1U },
  { Mips::FP, 30U },
  { Mips::GP, 28U },
  { Mips::RA, 31U },
  { Mips::SP, 29U },
  { Mips::ZERO, 0U },
  { Mips::A0, 4U },
  { Mips::A1, 5U },
  { Mips::A2, 6U },
  { Mips::A3, 7U },
  { Mips::AT_64, 1U },
  { Mips::F0, 32U },
  { Mips::F1, 33U },
  { Mips::F2, 34U },
  { Mips::F3, 35U },
  { Mips::F4, 36U },
  { Mips::F5, 37U },
  { Mips::F6, 38U },
  { Mips::F7, 39U },
  { Mips::F8, 40U },
  { Mips::F9, 41U },
  { Mips::F10, 42U },
  { Mips::F11, 43U },
  { Mips::F12, 44U },
  { Mips::F13, 45U },
  { Mips::F14, 46U },
  { Mips::F15, 47U },
  { Mips::F16, 48U },
  { Mips::F17, 49U },
  { Mips::F18, 50U },
  { Mips::F19, 51U },
  { Mips::F20, 52U },
  { Mips::F21, 53U },
  { Mips::F22, 54U },
  { Mips::F23, 55U },
  { Mips::F24, 56U },
  { Mips::F25, 57U },
  { Mips::F26, 58U },
  { Mips::F27, 59U },
  { Mips::F28, 60U },
  { Mips::F29, 61U },
  { Mips::F30, 62U },
  { Mips::F31, 63U },
  { Mips::FP_64, 30U },
  { Mips::F_HI0, 32U },
  { Mips::F_HI1, 33U },
  { Mips::F_HI2, 34U },
  { Mips::F_HI3, 35U },
  { Mips::F_HI4, 36U },
  { Mips::F_HI5, 37U },
  { Mips::F_HI6, 38U },
  { Mips::F_HI7, 39U },
  { Mips::F_HI8, 40U },
  { Mips::F_HI9, 41U },
  { Mips::F_HI10, 42U },
  { Mips::F_HI11, 43U },
  { Mips::F_HI12, 44U },
  { Mips::F_HI13, 45U },
  { Mips::F_HI14, 46U },
  { Mips::F_HI15, 47U },
  { Mips::F_HI16, 48U },
  { Mips::F_HI17, 49U },
  { Mips::F_HI18, 50U },
  { Mips::F_HI19, 51U },
  { Mips::F_HI20, 52U },
  { Mips::F_HI21, 53U },
  { Mips::F_HI22, 54U },
  { Mips::F_HI23, 55U },
  { Mips::F_HI24, 56U },
  { Mips::F_HI25, 57U },
  { Mips::F_HI26, 58U },
  { Mips::F_HI27, 59U },
  { Mips::F_HI28, 60U },
  { Mips::F_HI29, 61U },
  { Mips::F_HI30, 62U },
  { Mips::F_HI31, 63U },
  { Mips::GP_64, 28U },
  { Mips::HI0, 64U },
  { Mips::HI1, 176U },
  { Mips::HI2, 178U },
  { Mips::HI3, 180U },
  { Mips::K0, 26U },
  { Mips::K1, 27U },
  { Mips::LO0, 65U },
  { Mips::LO1, 177U },
  { Mips::LO2, 179U },
  { Mips::LO3, 181U },
  { Mips::RA_64, 31U },
  { Mips::S0, 16U },
  { Mips::S1, 17U },
  { Mips::S2, 18U },
  { Mips::S3, 19U },
  { Mips::S4, 20U },
  { Mips::S5, 21U },
  { Mips::S6, 22U },
  { Mips::S7, 23U },
  { Mips::SP_64, 29U },
  { Mips::T0, 8U },
  { Mips::T1, 9U },
  { Mips::T2, 10U },
  { Mips::T3, 11U },
  { Mips::T4, 12U },
  { Mips::T5, 13U },
  { Mips::T6, 14U },
  { Mips::T7, 15U },
  { Mips::T8, 24U },
  { Mips::T9, 25U },
  { Mips::V0, 2U },
  { Mips::V1, 3U },
  { Mips::W0, 32U },
  { Mips::W1, 33U },
  { Mips::W2, 34U },
  { Mips::W3, 35U },
  { Mips::W4, 36U },
  { Mips::W5, 37U },
  { Mips::W6, 38U },
  { Mips::W7, 39U },
  { Mips::W8, 40U },
  { Mips::W9, 41U },
  { Mips::W10, 42U },
  { Mips::W11, 43U },
  { Mips::W12, 44U },
  { Mips::W13, 45U },
  { Mips::W14, 46U },
  { Mips::W15, 47U },
  { Mips::W16, 48U },
  { Mips::W17, 49U },
  { Mips::W18, 50U },
  { Mips::W19, 51U },
  { Mips::W20, 52U },
  { Mips::W21, 53U },
  { Mips::W22, 54U },
  { Mips::W23, 55U },
  { Mips::W24, 56U },
  { Mips::W25, 57U },
  { Mips::W26, 58U },
  { Mips::W27, 59U },
  { Mips::W28, 60U },
  { Mips::W29, 61U },
  { Mips::W30, 62U },
  { Mips::W31, 63U },
  { Mips::ZERO_64, 0U },
  { Mips::A0_64, 4U },
  { Mips::A1_64, 5U },
  { Mips::A2_64, 6U },
  { Mips::A3_64, 7U },
  { Mips::D0_64, 32U },
  { Mips::D1_64, 33U },
  { Mips::D2_64, 34U },
  { Mips::D3_64, 35U },
  { Mips::D4_64, 36U },
  { Mips::D5_64, 37U },
  { Mips::D6_64, 38U },
  { Mips::D7_64, 39U },
  { Mips::D8_64, 40U },
  { Mips::D9_64, 41U },
  { Mips::D10_64, 42U },
  { Mips::D11_64, 43U },
  { Mips::D12_64, 44U },
  { Mips::D13_64, 45U },
  { Mips::D14_64, 46U },
  { Mips::D15_64, 47U },
  { Mips::D16_64, 48U },
  { Mips::D17_64, 49U },
  { Mips::D18_64, 50U },
  { Mips::D19_64, 51U },
  { Mips::D20_64, 52U },
  { Mips::D21_64, 53U },
  { Mips::D22_64, 54U },
  { Mips::D23_64, 55U },
  { Mips::D24_64, 56U },
  { Mips::D25_64, 57U },
  { Mips::D26_64, 58U },
  { Mips::D27_64, 59U },
  { Mips::D28_64, 60U },
  { Mips::D29_64, 61U },
  { Mips::D30_64, 62U },
  { Mips::D31_64, 63U },
  { Mips::K0_64, 26U },
  { Mips::K1_64, 27U },
  { Mips::S0_64, 16U },
  { Mips::S1_64, 17U },
  { Mips::S2_64, 18U },
  { Mips::S3_64, 19U },
  { Mips::S4_64, 20U },
  { Mips::S5_64, 21U },
  { Mips::S6_64, 22U },
  { Mips::S7_64, 23U },
  { Mips::T0_64, 8U },
  { Mips::T1_64, 9U },
  { Mips::T2_64, 10U },
  { Mips::T3_64, 11U },
  { Mips::T4_64, 12U },
  { Mips::T5_64, 13U },
  { Mips::T6_64, 14U },
  { Mips::T7_64, 15U },
  { Mips::T8_64, 24U },
  { Mips::T9_64, 25U },
  { Mips::V0_64, 2U },
  { Mips::V1_64, 3U },
};
extern const unsigned MipsEHFlavour0L2DwarfSize = sizeof(MipsEHFlavour0L2Dwarf)/sizeof(MCRegisterInfo::DwarfLLVMRegPair);

extern const uint16_t MipsRegEncodingTable[] = {
  0,
  1,
  0,
  0,
  0,
  0,
  0,
  0,
  30,
  28,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  31,
  29,
  0,
  4,
  5,
  6,
  7,
  0,
  1,
  2,
  3,
  1,
  0,
  2,
  4,
  6,
  8,
  10,
  12,
  14,
  16,
  18,
  20,
  22,
  24,
  26,
  28,
  30,
  0,
  0,
  0,
  0,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  30,
  31,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  30,
  31,
  30,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  30,
  31,
  28,
  0,
  0,
  0,
  0,
  29,
  26,
  27,
  0,
  0,
  0,
  0,
  31,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  29,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  24,
  25,
  2,
  3,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  30,
  31,
  0,
  4,
  5,
  6,
  7,
  0,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  30,
  31,
  0,
  0,
  26,
  27,
  0,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  24,
  25,
  2,
  3,
};
static inline void InitMipsMCRegisterInfo(MCRegisterInfo *RI, unsigned RA, unsigned DwarfFlavour = 0, unsigned EHFlavour = 0, unsigned PC = 0) {
  RI->InitMCRegisterInfo(MipsRegDesc, 285, RA, PC, MipsMCRegisterClasses, 33, MipsRegUnitRoots, 164, MipsRegDiffLists, MipsRegStrings, MipsSubRegIdxLists, 12,
MipsSubRegIdxRanges,   MipsRegEncodingTable);

  switch (DwarfFlavour) {
  default:
    llvm_unreachable("Unknown DWARF flavour");
  case 0:
    RI->mapDwarfRegsToLLVMRegs(MipsDwarfFlavour0Dwarf2L, MipsDwarfFlavour0Dwarf2LSize, false);
    break;
  }
  switch (EHFlavour) {
  default:
    llvm_unreachable("Unknown DWARF flavour");
  case 0:
    RI->mapDwarfRegsToLLVMRegs(MipsEHFlavour0Dwarf2L, MipsEHFlavour0Dwarf2LSize, true);
    break;
  }
  switch (DwarfFlavour) {
  default:
    llvm_unreachable("Unknown DWARF flavour");
  case 0:
    RI->mapLLVMRegsToDwarfRegs(MipsDwarfFlavour0L2Dwarf, MipsDwarfFlavour0L2DwarfSize, false);
    break;
  }
  switch (EHFlavour) {
  default:
    llvm_unreachable("Unknown DWARF flavour");
  case 0:
    RI->mapLLVMRegsToDwarfRegs(MipsEHFlavour0L2Dwarf, MipsEHFlavour0L2DwarfSize, true);
    break;
  }
}

} // End llvm namespace 
#endif // GET_REGINFO_MC_DESC

/*===- TableGen'erated file -------------------------------------*- C++ -*-===*\
|*                                                                            *|
|*Register Information Header Fragment                                        *|
|*                                                                            *|
|* Automatically generated file, do not edit!                                 *|
|*                                                                            *|
\*===----------------------------------------------------------------------===*/


#ifdef GET_REGINFO_HEADER
#undef GET_REGINFO_HEADER
#include "llvm/Target/TargetRegisterInfo.h"

namespace llvm {

struct MipsGenRegisterInfo : public TargetRegisterInfo {
  explicit MipsGenRegisterInfo(unsigned RA, unsigned D = 0, unsigned E = 0, unsigned PC = 0);
  virtual bool needsStackRealignment(const MachineFunction &) const
     { return false; }
  virtual unsigned composeSubRegIndicesImpl(unsigned, unsigned) const;
  virtual const TargetRegisterClass *getSubClassWithSubReg(const TargetRegisterClass*, unsigned) const;
  virtual const RegClassWeight &getRegClassWeight(const TargetRegisterClass *RC) const;
  virtual unsigned getRegUnitWeight(unsigned RegUnit) const;
  virtual unsigned getNumRegPressureSets() const;
  virtual const char *getRegPressureSetName(unsigned Idx) const;
  virtual unsigned getRegPressureSetLimit(unsigned Idx) const;
  virtual const int *getRegClassPressureSets(const TargetRegisterClass *RC) const;
  virtual const int *getRegUnitPressureSets(unsigned RegUnit) const;
};

namespace Mips { // Register classes
  extern const TargetRegisterClass CCRRegClass;
  extern const TargetRegisterClass DSPRRegClass;
  extern const TargetRegisterClass FGR32RegClass;
  extern const TargetRegisterClass FGRH32RegClass;
  extern const TargetRegisterClass GPR32RegClass;
  extern const TargetRegisterClass CPU16RegsPlusSPRegClass;
  extern const TargetRegisterClass CPU16RegsRegClass;
  extern const TargetRegisterClass FCCRegClass;
  extern const TargetRegisterClass MSACtrlRegClass;
  extern const TargetRegisterClass HI32DSPRegClass;
  extern const TargetRegisterClass LO32DSPRegClass;
  extern const TargetRegisterClass CPURARegRegClass;
  extern const TargetRegisterClass CPUSPRegRegClass;
  extern const TargetRegisterClass DSPCCRegClass;
  extern const TargetRegisterClass HI32RegClass;
  extern const TargetRegisterClass HWRegsRegClass;
  extern const TargetRegisterClass LO32RegClass;
  extern const TargetRegisterClass FGR64RegClass;
  extern const TargetRegisterClass GPR64RegClass;
  extern const TargetRegisterClass AFGR64RegClass;
  extern const TargetRegisterClass GPR64_with_sub_32_in_CPU16RegsPlusSPRegClass;
  extern const TargetRegisterClass GPR64_with_sub_32_in_CPU16RegsRegClass;
  extern const TargetRegisterClass ACC64DSPRegClass;
  extern const TargetRegisterClass ACC64RegClass;
  extern const TargetRegisterClass GPR64_with_sub_32_in_CPURARegRegClass;
  extern const TargetRegisterClass GPR64_with_sub_32_in_CPUSPRegRegClass;
  extern const TargetRegisterClass HI64RegClass;
  extern const TargetRegisterClass LO64RegClass;
  extern const TargetRegisterClass MSA128BRegClass;
  extern const TargetRegisterClass MSA128DRegClass;
  extern const TargetRegisterClass MSA128HRegClass;
  extern const TargetRegisterClass MSA128WRegClass;
  extern const TargetRegisterClass ACC128RegClass;
} // end of namespace Mips

} // End llvm namespace 
#endif // GET_REGINFO_HEADER

/*===- TableGen'erated file -------------------------------------*- C++ -*-===*\
|*                                                                            *|
|*Target Register and Register Classes Information                            *|
|*                                                                            *|
|* Automatically generated file, do not edit!                                 *|
|*                                                                            *|
\*===----------------------------------------------------------------------===*/


#ifdef GET_REGINFO_TARGET_DESC
#undef GET_REGINFO_TARGET_DESC
namespace llvm {

extern const MCRegisterClass MipsMCRegisterClasses[];

static const MVT::SimpleValueType VTLists[] = {
  /* 0 */ MVT::i32, MVT::Other,
  /* 2 */ MVT::i64, MVT::Other,
  /* 4 */ MVT::f32, MVT::Other,
  /* 6 */ MVT::f64, MVT::Other,
  /* 8 */ MVT::v16i8, MVT::Other,
  /* 10 */ MVT::v4i8, MVT::v2i16, MVT::Other,
  /* 13 */ MVT::v8i16, MVT::v8f16, MVT::Other,
  /* 16 */ MVT::v4i32, MVT::v4f32, MVT::Other,
  /* 19 */ MVT::v2i64, MVT::v2f64, MVT::Other,
  /* 22 */ MVT::Untyped, MVT::Other,
};

static const char *const SubRegIndexNameTable[] = { "sub_32", "sub_64", "sub_dsp16_19", "sub_dsp20", "sub_dsp21", "sub_dsp22", "sub_dsp23", "sub_hi", "sub_lo", "sub_hi_then_sub_32", "sub_32_sub_hi_then_sub_32" };


static const unsigned SubRegIndexLaneMaskTable[] = {
  ~0u,
  0x00000001, // sub_32
  0x00000041, // sub_64
  0x00000002, // sub_dsp16_19
  0x00000004, // sub_dsp20
  0x00000008, // sub_dsp21
  0x00000010, // sub_dsp22
  0x00000020, // sub_dsp23
  0x00000040, // sub_hi
  0x00000001, // sub_lo
  0x00000040, // sub_hi_then_sub_32
  0x00000041, // sub_32_sub_hi_then_sub_32
 };



static const TargetRegisterClass *const NullRegClasses[] = { NULL };

static const uint32_t CCRSubClassMask[] = {
  0x00000001, 0x00000000, 
};

static const uint32_t DSPRSubClassMask[] = {
  0x00001872, 0x00000000, 
  0x03340000, 0x00000000, // sub_32
};

static const uint32_t FGR32SubClassMask[] = {
  0x00000004, 0x00000000, 
  0x00080000, 0x00000000, // sub_hi
  0xf00a0000, 0x00000000, // sub_lo
};

static const uint32_t FGRH32SubClassMask[] = {
  0x00000008, 0x00000000, 
  0xf0020000, 0x00000000, // sub_hi
};

static const uint32_t GPR32SubClassMask[] = {
  0x00001870, 0x00000000, 
  0x03340000, 0x00000000, // sub_32
};

static const uint32_t CPU16RegsPlusSPSubClassMask[] = {
  0x00001060, 0x00000000, 
  0x02300000, 0x00000000, // sub_32
};

static const uint32_t CPU16RegsSubClassMask[] = {
  0x00000040, 0x00000000, 
  0x00200000, 0x00000000, // sub_32
};

static const uint32_t FCCSubClassMask[] = {
  0x00000080, 0x00000000, 
};

static const uint32_t MSACtrlSubClassMask[] = {
  0x00000100, 0x00000000, 
};

static const uint32_t HI32DSPSubClassMask[] = {
  0x00004200, 0x00000000, 
  0x04000000, 0x00000000, // sub_32
  0x00c00000, 0x00000000, // sub_hi
  0x00000000, 0x00000001, // sub_hi_then_sub_32
};

static const uint32_t LO32DSPSubClassMask[] = {
  0x00010400, 0x00000000, 
  0x08000000, 0x00000001, // sub_32
  0x00c00000, 0x00000000, // sub_lo
};

static const uint32_t CPURARegSubClassMask[] = {
  0x00000800, 0x00000000, 
  0x01000000, 0x00000000, // sub_32
};

static const uint32_t CPUSPRegSubClassMask[] = {
  0x00001000, 0x00000000, 
  0x02000000, 0x00000000, // sub_32
};

static const uint32_t DSPCCSubClassMask[] = {
  0x00002000, 0x00000000, 
};

static const uint32_t HI32SubClassMask[] = {
  0x00004000, 0x00000000, 
  0x04000000, 0x00000000, // sub_32
  0x00800000, 0x00000000, // sub_hi
  0x00000000, 0x00000001, // sub_hi_then_sub_32
};

static const uint32_t HWRegsSubClassMask[] = {
  0x00008000, 0x00000000, 
};

static const uint32_t LO32SubClassMask[] = {
  0x00010000, 0x00000000, 
  0x08000000, 0x00000001, // sub_32
  0x00800000, 0x00000000, // sub_lo
};

static const uint32_t FGR64SubClassMask[] = {
  0x00020000, 0x00000000, 
  0xf0000000, 0x00000000, // sub_64
};

static const uint32_t GPR64SubClassMask[] = {
  0x03340000, 0x00000000, 
};

static const uint32_t AFGR64SubClassMask[] = {
  0x00080000, 0x00000000, 
};

static const uint32_t GPR64_with_sub_32_in_CPU16RegsPlusSPSubClassMask[] = {
  0x02300000, 0x00000000, 
};

static const uint32_t GPR64_with_sub_32_in_CPU16RegsSubClassMask[] = {
  0x00200000, 0x00000000, 
};

static const uint32_t ACC64DSPSubClassMask[] = {
  0x00c00000, 0x00000000, 
  0x00000000, 0x00000001, // sub_32_sub_hi_then_sub_32
};

static const uint32_t ACC64SubClassMask[] = {
  0x00800000, 0x00000000, 
  0x00000000, 0x00000001, // sub_32_sub_hi_then_sub_32
};

static const uint32_t GPR64_with_sub_32_in_CPURARegSubClassMask[] = {
  0x01000000, 0x00000000, 
};

static const uint32_t GPR64_with_sub_32_in_CPUSPRegSubClassMask[] = {
  0x02000000, 0x00000000, 
};

static const uint32_t HI64SubClassMask[] = {
  0x04000000, 0x00000000, 
  0x00000000, 0x00000001, // sub_hi
};

static const uint32_t LO64SubClassMask[] = {
  0x08000000, 0x00000000, 
  0x00000000, 0x00000001, // sub_lo
};

static const uint32_t MSA128BSubClassMask[] = {
  0xf0000000, 0x00000000, 
};

static const uint32_t MSA128DSubClassMask[] = {
  0xf0000000, 0x00000000, 
};

static const uint32_t MSA128HSubClassMask[] = {
  0xf0000000, 0x00000000, 
};

static const uint32_t MSA128WSubClassMask[] = {
  0xf0000000, 0x00000000, 
};

static const uint32_t ACC128SubClassMask[] = {
  0x00000000, 0x00000001, 
};

static const uint16_t SuperRegIdxSeqs[] = {
  /* 0 */ 2, 0,
  /* 2 */ 1, 0,
  /* 4 */ 8, 0,
  /* 6 */ 1, 9, 0,
  /* 9 */ 8, 9, 0,
  /* 12 */ 1, 8, 10, 0,
  /* 16 */ 11, 0,
};

static const TargetRegisterClass *const GPR32Superclasses[] = {
  &Mips::DSPRRegClass,
  NULL
};

static const TargetRegisterClass *const CPU16RegsPlusSPSuperclasses[] = {
  &Mips::DSPRRegClass,
  &Mips::GPR32RegClass,
  NULL
};

static const TargetRegisterClass *const CPU16RegsSuperclasses[] = {
  &Mips::DSPRRegClass,
  &Mips::GPR32RegClass,
  &Mips::CPU16RegsPlusSPRegClass,
  NULL
};

static const TargetRegisterClass *const CPURARegSuperclasses[] = {
  &Mips::DSPRRegClass,
  &Mips::GPR32RegClass,
  NULL
};

static const TargetRegisterClass *const CPUSPRegSuperclasses[] = {
  &Mips::DSPRRegClass,
  &Mips::GPR32RegClass,
  &Mips::CPU16RegsPlusSPRegClass,
  NULL
};

static const TargetRegisterClass *const HI32Superclasses[] = {
  &Mips::HI32DSPRegClass,
  NULL
};

static const TargetRegisterClass *const LO32Superclasses[] = {
  &Mips::LO32DSPRegClass,
  NULL
};

static const TargetRegisterClass *const GPR64_with_sub_32_in_CPU16RegsPlusSPSuperclasses[] = {
  &Mips::GPR64RegClass,
  NULL
};

static const TargetRegisterClass *const GPR64_with_sub_32_in_CPU16RegsSuperclasses[] = {
  &Mips::GPR64RegClass,
  &Mips::GPR64_with_sub_32_in_CPU16RegsPlusSPRegClass,
  NULL
};

static const TargetRegisterClass *const ACC64Superclasses[] = {
  &Mips::ACC64DSPRegClass,
  NULL
};

static const TargetRegisterClass *const GPR64_with_sub_32_in_CPURARegSuperclasses[] = {
  &Mips::GPR64RegClass,
  NULL
};

static const TargetRegisterClass *const GPR64_with_sub_32_in_CPUSPRegSuperclasses[] = {
  &Mips::GPR64RegClass,
  &Mips::GPR64_with_sub_32_in_CPU16RegsPlusSPRegClass,
  NULL
};

static const TargetRegisterClass *const MSA128BSuperclasses[] = {
  &Mips::MSA128DRegClass,
  &Mips::MSA128HRegClass,
  &Mips::MSA128WRegClass,
  NULL
};

static const TargetRegisterClass *const MSA128DSuperclasses[] = {
  &Mips::MSA128BRegClass,
  &Mips::MSA128HRegClass,
  &Mips::MSA128WRegClass,
  NULL
};

static const TargetRegisterClass *const MSA128HSuperclasses[] = {
  &Mips::MSA128BRegClass,
  &Mips::MSA128DRegClass,
  &Mips::MSA128WRegClass,
  NULL
};

static const TargetRegisterClass *const MSA128WSuperclasses[] = {
  &Mips::MSA128BRegClass,
  &Mips::MSA128DRegClass,
  &Mips::MSA128HRegClass,
  NULL
};

namespace Mips {   // Register class instances
  extern const TargetRegisterClass CCRRegClass = {
    &MipsMCRegisterClasses[CCRRegClassID],
    VTLists + 0,
    CCRSubClassMask,
    SuperRegIdxSeqs + 1,
    NullRegClasses,
    0
  };

  extern const TargetRegisterClass DSPRRegClass = {
    &MipsMCRegisterClasses[DSPRRegClassID],
    VTLists + 10,
    DSPRSubClassMask,
    SuperRegIdxSeqs + 2,
    NullRegClasses,
    0
  };

  extern const TargetRegisterClass FGR32RegClass = {
    &MipsMCRegisterClasses[FGR32RegClassID],
    VTLists + 4,
    FGR32SubClassMask,
    SuperRegIdxSeqs + 9,
    NullRegClasses,
    0
  };

  extern const TargetRegisterClass FGRH32RegClass = {
    &MipsMCRegisterClasses[FGRH32RegClassID],
    VTLists + 4,
    FGRH32SubClassMask,
    SuperRegIdxSeqs + 4,
    NullRegClasses,
    0
  };

  extern const TargetRegisterClass GPR32RegClass = {
    &MipsMCRegisterClasses[GPR32RegClassID],
    VTLists + 0,
    GPR32SubClassMask,
    SuperRegIdxSeqs + 2,
    GPR32Superclasses,
    0
  };

  extern const TargetRegisterClass CPU16RegsPlusSPRegClass = {
    &MipsMCRegisterClasses[CPU16RegsPlusSPRegClassID],
    VTLists + 0,
    CPU16RegsPlusSPSubClassMask,
    SuperRegIdxSeqs + 2,
    CPU16RegsPlusSPSuperclasses,
    0
  };

  extern const TargetRegisterClass CPU16RegsRegClass = {
    &MipsMCRegisterClasses[CPU16RegsRegClassID],
    VTLists + 0,
    CPU16RegsSubClassMask,
    SuperRegIdxSeqs + 2,
    CPU16RegsSuperclasses,
    0
  };

  extern const TargetRegisterClass FCCRegClass = {
    &MipsMCRegisterClasses[FCCRegClassID],
    VTLists + 0,
    FCCSubClassMask,
    SuperRegIdxSeqs + 1,
    NullRegClasses,
    0
  };

  extern const TargetRegisterClass MSACtrlRegClass = {
    &MipsMCRegisterClasses[MSACtrlRegClassID],
    VTLists + 0,
    MSACtrlSubClassMask,
    SuperRegIdxSeqs + 1,
    NullRegClasses,
    0
  };

  extern const TargetRegisterClass HI32DSPRegClass = {
    &MipsMCRegisterClasses[HI32DSPRegClassID],
    VTLists + 0,
    HI32DSPSubClassMask,
    SuperRegIdxSeqs + 12,
    NullRegClasses,
    0
  };

  extern const TargetRegisterClass LO32DSPRegClass = {
    &MipsMCRegisterClasses[LO32DSPRegClassID],
    VTLists + 0,
    LO32DSPSubClassMask,
    SuperRegIdxSeqs + 6,
    NullRegClasses,
    0
  };

  extern const TargetRegisterClass CPURARegRegClass = {
    &MipsMCRegisterClasses[CPURARegRegClassID],
    VTLists + 0,
    CPURARegSubClassMask,
    SuperRegIdxSeqs + 2,
    CPURARegSuperclasses,
    0
  };

  extern const TargetRegisterClass CPUSPRegRegClass = {
    &MipsMCRegisterClasses[CPUSPRegRegClassID],
    VTLists + 0,
    CPUSPRegSubClassMask,
    SuperRegIdxSeqs + 2,
    CPUSPRegSuperclasses,
    0
  };

  extern const TargetRegisterClass DSPCCRegClass = {
    &MipsMCRegisterClasses[DSPCCRegClassID],
    VTLists + 10,
    DSPCCSubClassMask,
    SuperRegIdxSeqs + 1,
    NullRegClasses,
    0
  };

  extern const TargetRegisterClass HI32RegClass = {
    &MipsMCRegisterClasses[HI32RegClassID],
    VTLists + 0,
    HI32SubClassMask,
    SuperRegIdxSeqs + 12,
    HI32Superclasses,
    0
  };

  extern const TargetRegisterClass HWRegsRegClass = {
    &MipsMCRegisterClasses[HWRegsRegClassID],
    VTLists + 0,
    HWRegsSubClassMask,
    SuperRegIdxSeqs + 1,
    NullRegClasses,
    0
  };

  extern const TargetRegisterClass LO32RegClass = {
    &MipsMCRegisterClasses[LO32RegClassID],
    VTLists + 0,
    LO32SubClassMask,
    SuperRegIdxSeqs + 6,
    LO32Superclasses,
    0
  };

  extern const TargetRegisterClass FGR64RegClass = {
    &MipsMCRegisterClasses[FGR64RegClassID],
    VTLists + 6,
    FGR64SubClassMask,
    SuperRegIdxSeqs + 0,
    NullRegClasses,
    0
  };

  extern const TargetRegisterClass GPR64RegClass = {
    &MipsMCRegisterClasses[GPR64RegClassID],
    VTLists + 2,
    GPR64SubClassMask,
    SuperRegIdxSeqs + 1,
    NullRegClasses,
    0
  };

  extern const TargetRegisterClass AFGR64RegClass = {
    &MipsMCRegisterClasses[AFGR64RegClassID],
    VTLists + 6,
    AFGR64SubClassMask,
    SuperRegIdxSeqs + 1,
    NullRegClasses,
    0
  };

  extern const TargetRegisterClass GPR64_with_sub_32_in_CPU16RegsPlusSPRegClass = {
    &MipsMCRegisterClasses[GPR64_with_sub_32_in_CPU16RegsPlusSPRegClassID],
    VTLists + 2,
    GPR64_with_sub_32_in_CPU16RegsPlusSPSubClassMask,
    SuperRegIdxSeqs + 1,
    GPR64_with_sub_32_in_CPU16RegsPlusSPSuperclasses,
    0
  };

  extern const TargetRegisterClass GPR64_with_sub_32_in_CPU16RegsRegClass = {
    &MipsMCRegisterClasses[GPR64_with_sub_32_in_CPU16RegsRegClassID],
    VTLists + 2,
    GPR64_with_sub_32_in_CPU16RegsSubClassMask,
    SuperRegIdxSeqs + 1,
    GPR64_with_sub_32_in_CPU16RegsSuperclasses,
    0
  };

  extern const TargetRegisterClass ACC64DSPRegClass = {
    &MipsMCRegisterClasses[ACC64DSPRegClassID],
    VTLists + 22,
    ACC64DSPSubClassMask,
    SuperRegIdxSeqs + 16,
    NullRegClasses,
    0
  };

  extern const TargetRegisterClass ACC64RegClass = {
    &MipsMCRegisterClasses[ACC64RegClassID],
    VTLists + 22,
    ACC64SubClassMask,
    SuperRegIdxSeqs + 16,
    ACC64Superclasses,
    0
  };

  extern const TargetRegisterClass GPR64_with_sub_32_in_CPURARegRegClass = {
    &MipsMCRegisterClasses[GPR64_with_sub_32_in_CPURARegRegClassID],
    VTLists + 2,
    GPR64_with_sub_32_in_CPURARegSubClassMask,
    SuperRegIdxSeqs + 1,
    GPR64_with_sub_32_in_CPURARegSuperclasses,
    0
  };

  extern const TargetRegisterClass GPR64_with_sub_32_in_CPUSPRegRegClass = {
    &MipsMCRegisterClasses[GPR64_with_sub_32_in_CPUSPRegRegClassID],
    VTLists + 2,
    GPR64_with_sub_32_in_CPUSPRegSubClassMask,
    SuperRegIdxSeqs + 1,
    GPR64_with_sub_32_in_CPUSPRegSuperclasses,
    0
  };

  extern const TargetRegisterClass HI64RegClass = {
    &MipsMCRegisterClasses[HI64RegClassID],
    VTLists + 2,
    HI64SubClassMask,
    SuperRegIdxSeqs + 4,
    NullRegClasses,
    0
  };

  extern const TargetRegisterClass LO64RegClass = {
    &MipsMCRegisterClasses[LO64RegClassID],
    VTLists + 2,
    LO64SubClassMask,
    SuperRegIdxSeqs + 7,
    NullRegClasses,
    0
  };

  extern const TargetRegisterClass MSA128BRegClass = {
    &MipsMCRegisterClasses[MSA128BRegClassID],
    VTLists + 8,
    MSA128BSubClassMask,
    SuperRegIdxSeqs + 1,
    MSA128BSuperclasses,
    0
  };

  extern const TargetRegisterClass MSA128DRegClass = {
    &MipsMCRegisterClasses[MSA128DRegClassID],
    VTLists + 19,
    MSA128DSubClassMask,
    SuperRegIdxSeqs + 1,
    MSA128DSuperclasses,
    0
  };

  extern const TargetRegisterClass MSA128HRegClass = {
    &MipsMCRegisterClasses[MSA128HRegClassID],
    VTLists + 13,
    MSA128HSubClassMask,
    SuperRegIdxSeqs + 1,
    MSA128HSuperclasses,
    0
  };

  extern const TargetRegisterClass MSA128WRegClass = {
    &MipsMCRegisterClasses[MSA128WRegClassID],
    VTLists + 16,
    MSA128WSubClassMask,
    SuperRegIdxSeqs + 1,
    MSA128WSuperclasses,
    0
  };

  extern const TargetRegisterClass ACC128RegClass = {
    &MipsMCRegisterClasses[ACC128RegClassID],
    VTLists + 22,
    ACC128SubClassMask,
    SuperRegIdxSeqs + 1,
    NullRegClasses,
    0
  };

}

namespace {
  const TargetRegisterClass* const RegisterClasses[] = {
    &Mips::CCRRegClass,
    &Mips::DSPRRegClass,
    &Mips::FGR32RegClass,
    &Mips::FGRH32RegClass,
    &Mips::GPR32RegClass,
    &Mips::CPU16RegsPlusSPRegClass,
    &Mips::CPU16RegsRegClass,
    &Mips::FCCRegClass,
    &Mips::MSACtrlRegClass,
    &Mips::HI32DSPRegClass,
    &Mips::LO32DSPRegClass,
    &Mips::CPURARegRegClass,
    &Mips::CPUSPRegRegClass,
    &Mips::DSPCCRegClass,
    &Mips::HI32RegClass,
    &Mips::HWRegsRegClass,
    &Mips::LO32RegClass,
    &Mips::FGR64RegClass,
    &Mips::GPR64RegClass,
    &Mips::AFGR64RegClass,
    &Mips::GPR64_with_sub_32_in_CPU16RegsPlusSPRegClass,
    &Mips::GPR64_with_sub_32_in_CPU16RegsRegClass,
    &Mips::ACC64DSPRegClass,
    &Mips::ACC64RegClass,
    &Mips::GPR64_with_sub_32_in_CPURARegRegClass,
    &Mips::GPR64_with_sub_32_in_CPUSPRegRegClass,
    &Mips::HI64RegClass,
    &Mips::LO64RegClass,
    &Mips::MSA128BRegClass,
    &Mips::MSA128DRegClass,
    &Mips::MSA128HRegClass,
    &Mips::MSA128WRegClass,
    &Mips::ACC128RegClass,
  };
}

static const TargetRegisterInfoDesc MipsRegInfoDesc[] = { // Extra Descriptors
  { 0, 0 },
  { 0, 1 },
  { 0, 1 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 0 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 1 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 0 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 0 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
};
unsigned MipsGenRegisterInfo::composeSubRegIndicesImpl(unsigned IdxA, unsigned IdxB) const {
  static const uint8_t RowMap[11] = {
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 
  };
  static const uint8_t Rows[2][11] = {
    { 10, 0, 0, 0, 0, 0, 0, 8, 9, 0, 0, },
    { 1, 0, 0, 0, 0, 0, 0, 10, 1, 0, 0, },
  };

  --IdxA; assert(IdxA < 11);
  --IdxB; assert(IdxB < 11);
  return Rows[RowMap[IdxA]][IdxB];
}

const TargetRegisterClass *MipsGenRegisterInfo::getSubClassWithSubReg(const TargetRegisterClass *RC, unsigned Idx) const {
  static const uint8_t Table[33][11] = {
    {	// CCR
      0,	// sub_32
      0,	// sub_64
      0,	// sub_dsp16_19
      0,	// sub_dsp20
      0,	// sub_dsp21
      0,	// sub_dsp22
      0,	// sub_dsp23
      0,	// sub_hi
      0,	// sub_lo
      0,	// sub_hi_then_sub_32
      0,	// sub_32_sub_hi_then_sub_32
    },
    {	// DSPR
      0,	// sub_32
      0,	// sub_64
      0,	// sub_dsp16_19
      0,	// sub_dsp20
      0,	// sub_dsp21
      0,	// sub_dsp22
      0,	// sub_dsp23
      0,	// sub_hi
      0,	// sub_lo
      0,	// sub_hi_then_sub_32
      0,	// sub_32_sub_hi_then_sub_32
    },
    {	// FGR32
      0,	// sub_32
      0,	// sub_64
      0,	// sub_dsp16_19
      0,	// sub_dsp20
      0,	// sub_dsp21
      0,	// sub_dsp22
      0,	// sub_dsp23
      0,	// sub_hi
      0,	// sub_lo
      0,	// sub_hi_then_sub_32
      0,	// sub_32_sub_hi_then_sub_32
    },
    {	// FGRH32
      0,	// sub_32
      0,	// sub_64
      0,	// sub_dsp16_19
      0,	// sub_dsp20
      0,	// sub_dsp21
      0,	// sub_dsp22
      0,	// sub_dsp23
      0,	// sub_hi
      0,	// sub_lo
      0,	// sub_hi_then_sub_32
      0,	// sub_32_sub_hi_then_sub_32
    },
    {	// GPR32
      0,	// sub_32
      0,	// sub_64
      0,	// sub_dsp16_19
      0,	// sub_dsp20
      0,	// sub_dsp21
      0,	// sub_dsp22
      0,	// sub_dsp23
      0,	// sub_hi
      0,	// sub_lo
      0,	// sub_hi_then_sub_32
      0,	// sub_32_sub_hi_then_sub_32
    },
    {	// CPU16RegsPlusSP
      0,	// sub_32
      0,	// sub_64
      0,	// sub_dsp16_19
      0,	// sub_dsp20
      0,	// sub_dsp21
      0,	// sub_dsp22
      0,	// sub_dsp23
      0,	// sub_hi
      0,	// sub_lo
      0,	// sub_hi_then_sub_32
      0,	// sub_32_sub_hi_then_sub_32
    },
    {	// CPU16Regs
      0,	// sub_32
      0,	// sub_64
      0,	// sub_dsp16_19
      0,	// sub_dsp20
      0,	// sub_dsp21
      0,	// sub_dsp22
      0,	// sub_dsp23
      0,	// sub_hi
      0,	// sub_lo
      0,	// sub_hi_then_sub_32
      0,	// sub_32_sub_hi_then_sub_32
    },
    {	// FCC
      0,	// sub_32
      0,	// sub_64
      0,	// sub_dsp16_19
      0,	// sub_dsp20
      0,	// sub_dsp21
      0,	// sub_dsp22
      0,	// sub_dsp23
      0,	// sub_hi
      0,	// sub_lo
      0,	// sub_hi_then_sub_32
      0,	// sub_32_sub_hi_then_sub_32
    },
    {	// MSACtrl
      0,	// sub_32
      0,	// sub_64
      0,	// sub_dsp16_19
      0,	// sub_dsp20
      0,	// sub_dsp21
      0,	// sub_dsp22
      0,	// sub_dsp23
      0,	// sub_hi
      0,	// sub_lo
      0,	// sub_hi_then_sub_32
      0,	// sub_32_sub_hi_then_sub_32
    },
    {	// HI32DSP
      0,	// sub_32
      0,	// sub_64
      0,	// sub_dsp16_19
      0,	// sub_dsp20
      0,	// sub_dsp21
      0,	// sub_dsp22
      0,	// sub_dsp23
      0,	// sub_hi
      0,	// sub_lo
      0,	// sub_hi_then_sub_32
      0,	// sub_32_sub_hi_then_sub_32
    },
    {	// LO32DSP
      0,	// sub_32
      0,	// sub_64
      0,	// sub_dsp16_19
      0,	// sub_dsp20
      0,	// sub_dsp21
      0,	// sub_dsp22
      0,	// sub_dsp23
      0,	// sub_hi
      0,	// sub_lo
      0,	// sub_hi_then_sub_32
      0,	// sub_32_sub_hi_then_sub_32
    },
    {	// CPURAReg
      0,	// sub_32
      0,	// sub_64
      0,	// sub_dsp16_19
      0,	// sub_dsp20
      0,	// sub_dsp21
      0,	// sub_dsp22
      0,	// sub_dsp23
      0,	// sub_hi
      0,	// sub_lo
      0,	// sub_hi_then_sub_32
      0,	// sub_32_sub_hi_then_sub_32
    },
    {	// CPUSPReg
      0,	// sub_32
      0,	// sub_64
      0,	// sub_dsp16_19
      0,	// sub_dsp20
      0,	// sub_dsp21
      0,	// sub_dsp22
      0,	// sub_dsp23
      0,	// sub_hi
      0,	// sub_lo
      0,	// sub_hi_then_sub_32
      0,	// sub_32_sub_hi_then_sub_32
    },
    {	// DSPCC
      0,	// sub_32
      0,	// sub_64
      0,	// sub_dsp16_19
      0,	// sub_dsp20
      0,	// sub_dsp21
      0,	// sub_dsp22
      0,	// sub_dsp23
      0,	// sub_hi
      0,	// sub_lo
      0,	// sub_hi_then_sub_32
      0,	// sub_32_sub_hi_then_sub_32
    },
    {	// HI32
      0,	// sub_32
      0,	// sub_64
      0,	// sub_dsp16_19
      0,	// sub_dsp20
      0,	// sub_dsp21
      0,	// sub_dsp22
      0,	// sub_dsp23
      0,	// sub_hi
      0,	// sub_lo
      0,	// sub_hi_then_sub_32
      0,	// sub_32_sub_hi_then_sub_32
    },
    {	// HWRegs
      0,	// sub_32
      0,	// sub_64
      0,	// sub_dsp16_19
      0,	// sub_dsp20
      0,	// sub_dsp21
      0,	// sub_dsp22
      0,	// sub_dsp23
      0,	// sub_hi
      0,	// sub_lo
      0,	// sub_hi_then_sub_32
      0,	// sub_32_sub_hi_then_sub_32
    },
    {	// LO32
      0,	// sub_32
      0,	// sub_64
      0,	// sub_dsp16_19
      0,	// sub_dsp20
      0,	// sub_dsp21
      0,	// sub_dsp22
      0,	// sub_dsp23
      0,	// sub_hi
      0,	// sub_lo
      0,	// sub_hi_then_sub_32
      0,	// sub_32_sub_hi_then_sub_32
    },
    {	// FGR64
      0,	// sub_32
      0,	// sub_64
      0,	// sub_dsp16_19
      0,	// sub_dsp20
      0,	// sub_dsp21
      0,	// sub_dsp22
      0,	// sub_dsp23
      18,	// sub_hi -> FGR64
      18,	// sub_lo -> FGR64
      0,	// sub_hi_then_sub_32
      0,	// sub_32_sub_hi_then_sub_32
    },
    {	// GPR64
      19,	// sub_32 -> GPR64
      0,	// sub_64
      0,	// sub_dsp16_19
      0,	// sub_dsp20
      0,	// sub_dsp21
      0,	// sub_dsp22
      0,	// sub_dsp23
      0,	// sub_hi
      0,	// sub_lo
      0,	// sub_hi_then_sub_32
      0,	// sub_32_sub_hi_then_sub_32
    },
    {	// AFGR64
      0,	// sub_32
      0,	// sub_64
      0,	// sub_dsp16_19
      0,	// sub_dsp20
      0,	// sub_dsp21
      0,	// sub_dsp22
      0,	// sub_dsp23
      20,	// sub_hi -> AFGR64
      20,	// sub_lo -> AFGR64
      0,	// sub_hi_then_sub_32
      0,	// sub_32_sub_hi_then_sub_32
    },
    {	// GPR64_with_sub_32_in_CPU16RegsPlusSP
      21,	// sub_32 -> GPR64_with_sub_32_in_CPU16RegsPlusSP
      0,	// sub_64
      0,	// sub_dsp16_19
      0,	// sub_dsp20
      0,	// sub_dsp21
      0,	// sub_dsp22
      0,	// sub_dsp23
      0,	// sub_hi
      0,	// sub_lo
      0,	// sub_hi_then_sub_32
      0,	// sub_32_sub_hi_then_sub_32
    },
    {	// GPR64_with_sub_32_in_CPU16Regs
      22,	// sub_32 -> GPR64_with_sub_32_in_CPU16Regs
      0,	// sub_64
      0,	// sub_dsp16_19
      0,	// sub_dsp20
      0,	// sub_dsp21
      0,	// sub_dsp22
      0,	// sub_dsp23
      0,	// sub_hi
      0,	// sub_lo
      0,	// sub_hi_then_sub_32
      0,	// sub_32_sub_hi_then_sub_32
    },
    {	// ACC64DSP
      0,	// sub_32
      0,	// sub_64
      0,	// sub_dsp16_19
      0,	// sub_dsp20
      0,	// sub_dsp21
      0,	// sub_dsp22
      0,	// sub_dsp23
      23,	// sub_hi -> ACC64DSP
      23,	// sub_lo -> ACC64DSP
      0,	// sub_hi_then_sub_32
      0,	// sub_32_sub_hi_then_sub_32
    },
    {	// ACC64
      0,	// sub_32
      0,	// sub_64
      0,	// sub_dsp16_19
      0,	// sub_dsp20
      0,	// sub_dsp21
      0,	// sub_dsp22
      0,	// sub_dsp23
      24,	// sub_hi -> ACC64
      24,	// sub_lo -> ACC64
      0,	// sub_hi_then_sub_32
      0,	// sub_32_sub_hi_then_sub_32
    },
    {	// GPR64_with_sub_32_in_CPURAReg
      25,	// sub_32 -> GPR64_with_sub_32_in_CPURAReg
      0,	// sub_64
      0,	// sub_dsp16_19
      0,	// sub_dsp20
      0,	// sub_dsp21
      0,	// sub_dsp22
      0,	// sub_dsp23
      0,	// sub_hi
      0,	// sub_lo
      0,	// sub_hi_then_sub_32
      0,	// sub_32_sub_hi_then_sub_32
    },
    {	// GPR64_with_sub_32_in_CPUSPReg
      26,	// sub_32 -> GPR64_with_sub_32_in_CPUSPReg
      0,	// sub_64
      0,	// sub_dsp16_19
      0,	// sub_dsp20
      0,	// sub_dsp21
      0,	// sub_dsp22
      0,	// sub_dsp23
      0,	// sub_hi
      0,	// sub_lo
      0,	// sub_hi_then_sub_32
      0,	// sub_32_sub_hi_then_sub_32
    },
    {	// HI64
      27,	// sub_32 -> HI64
      0,	// sub_64
      0,	// sub_dsp16_19
      0,	// sub_dsp20
      0,	// sub_dsp21
      0,	// sub_dsp22
      0,	// sub_dsp23
      0,	// sub_hi
      0,	// sub_lo
      0,	// sub_hi_then_sub_32
      0,	// sub_32_sub_hi_then_sub_32
    },
    {	// LO64
      28,	// sub_32 -> LO64
      0,	// sub_64
      0,	// sub_dsp16_19
      0,	// sub_dsp20
      0,	// sub_dsp21
      0,	// sub_dsp22
      0,	// sub_dsp23
      0,	// sub_hi
      0,	// sub_lo
      0,	// sub_hi_then_sub_32
      0,	// sub_32_sub_hi_then_sub_32
    },
    {	// MSA128B
      0,	// sub_32
      29,	// sub_64 -> MSA128B
      0,	// sub_dsp16_19
      0,	// sub_dsp20
      0,	// sub_dsp21
      0,	// sub_dsp22
      0,	// sub_dsp23
      29,	// sub_hi -> MSA128B
      29,	// sub_lo -> MSA128B
      0,	// sub_hi_then_sub_32
      0,	// sub_32_sub_hi_then_sub_32
    },
    {	// MSA128D
      0,	// sub_32
      30,	// sub_64 -> MSA128D
      0,	// sub_dsp16_19
      0,	// sub_dsp20
      0,	// sub_dsp21
      0,	// sub_dsp22
      0,	// sub_dsp23
      30,	// sub_hi -> MSA128D
      30,	// sub_lo -> MSA128D
      0,	// sub_hi_then_sub_32
      0,	// sub_32_sub_hi_then_sub_32
    },
    {	// MSA128H
      0,	// sub_32
      31,	// sub_64 -> MSA128H
      0,	// sub_dsp16_19
      0,	// sub_dsp20
      0,	// sub_dsp21
      0,	// sub_dsp22
      0,	// sub_dsp23
      31,	// sub_hi -> MSA128H
      31,	// sub_lo -> MSA128H
      0,	// sub_hi_then_sub_32
      0,	// sub_32_sub_hi_then_sub_32
    },
    {	// MSA128W
      0,	// sub_32
      32,	// sub_64 -> MSA128W
      0,	// sub_dsp16_19
      0,	// sub_dsp20
      0,	// sub_dsp21
      0,	// sub_dsp22
      0,	// sub_dsp23
      32,	// sub_hi -> MSA128W
      32,	// sub_lo -> MSA128W
      0,	// sub_hi_then_sub_32
      0,	// sub_32_sub_hi_then_sub_32
    },
    {	// ACC128
      33,	// sub_32 -> ACC128
      0,	// sub_64
      0,	// sub_dsp16_19
      0,	// sub_dsp20
      0,	// sub_dsp21
      0,	// sub_dsp22
      0,	// sub_dsp23
      33,	// sub_hi -> ACC128
      33,	// sub_lo -> ACC128
      33,	// sub_hi_then_sub_32 -> ACC128
      33,	// sub_32_sub_hi_then_sub_32 -> ACC128
    },
  };
  assert(RC && "Missing regclass");
  if (!Idx) return RC;
  --Idx;
  assert(Idx < 11 && "Bad subreg");
  unsigned TV = Table[RC->getID()][Idx];
  return TV ? getRegClass(TV - 1) : 0;
}

/// Get the weight in units of pressure for this register class.
const RegClassWeight &MipsGenRegisterInfo::
getRegClassWeight(const TargetRegisterClass *RC) const {
  static const RegClassWeight RCWeightTable[] = {
    {0, 0},  	// CCR
    {1, 32},  	// DSPR
    {1, 32},  	// FGR32
    {1, 32},  	// FGRH32
    {1, 32},  	// GPR32
    {1, 9},  	// CPU16RegsPlusSP
    {1, 8},  	// CPU16Regs
    {0, 0},  	// FCC
    {1, 8},  	// MSACtrl
    {1, 4},  	// HI32DSP
    {1, 4},  	// LO32DSP
    {1, 1},  	// CPURAReg
    {1, 1},  	// CPUSPReg
    {1, 1},  	// DSPCC
    {1, 1},  	// HI32
    {0, 0},  	// HWRegs
    {1, 1},  	// LO32
    {2, 64},  	// FGR64
    {1, 32},  	// GPR64
    {2, 32},  	// AFGR64
    {1, 9},  	// GPR64_with_sub_32_in_CPU16RegsPlusSP
    {1, 8},  	// GPR64_with_sub_32_in_CPU16Regs
    {2, 8},  	// ACC64DSP
    {2, 2},  	// ACC64
    {1, 1},  	// GPR64_with_sub_32_in_CPURAReg
    {1, 1},  	// GPR64_with_sub_32_in_CPUSPReg
    {1, 1},  	// HI64
    {1, 1},  	// LO64
    {2, 64},  	// MSA128B
    {2, 64},  	// MSA128D
    {2, 64},  	// MSA128H
    {2, 64},  	// MSA128W
    {2, 2},  	// ACC128
    {0, 0} };
  return RCWeightTable[RC->getID()];
}

/// Get the weight in units of pressure for this register unit.
unsigned MipsGenRegisterInfo::
getRegUnitWeight(unsigned RegUnit) const {
  assert(RegUnit < 164 && "invalid register unit");
  // All register units have unit weight.
  return 1;
}


// Get the number of dimensions of register pressure.
unsigned MipsGenRegisterInfo::getNumRegPressureSets() const {
  return 12;
}

// Get the name of this register unit pressure set.
const char *MipsGenRegisterInfo::
getRegPressureSetName(unsigned Idx) const {
  static const char *PressureNameTable[] = {
    "DSPCC",
    "GPR64_with_sub_32_in_CPURAReg",
    "GPR64_with_sub_32_in_CPUSPReg",
    "ACC64",
    "HI32DSP+ACC64",
    "LO32DSP+ACC64",
    "MSACtrl",
    "ACC64DSP",
    "CPU16RegsPlusSP",
    "DSPR",
    "FGR32",
    "FGR64",
    0 };
  return PressureNameTable[Idx];
}

// Get the register unit pressure limit for this dimension.
// This limit must be adjusted dynamically for reserved registers.
unsigned MipsGenRegisterInfo::
getRegPressureSetLimit(unsigned Idx) const {
  static const unsigned PressureLimitTable[] = {
    1,  	// 0: DSPCC
    1,  	// 1: GPR64_with_sub_32_in_CPURAReg
    1,  	// 2: GPR64_with_sub_32_in_CPUSPReg
    2,  	// 3: ACC64
    5,  	// 4: HI32DSP+ACC64
    5,  	// 5: LO32DSP+ACC64
    8,  	// 6: MSACtrl
    8,  	// 7: ACC64DSP
    9,  	// 8: CPU16RegsPlusSP
    32,  	// 9: DSPR
    32,  	// 10: FGR32
    64,  	// 11: FGR64
    0 };
  return PressureLimitTable[Idx];
}

/// Table of pressure sets per register class or unit.
static const int RCSetsTable[] = {
    -1,  	// #0 CCR
    9,  -1,  	// #1 DSPR
    10,  11,  -1,  	// #3 FGR32
    -1,  	// #6 FGRH32
    9,  -1,  	// #7 GPR32
    8,  9,  -1,  	// #9 CPU16RegsPlusSP
    8,  9,  -1,  	// #12 CPU16Regs
    -1,  	// #15 FCC
    6,  -1,  	// #16 MSACtrl
    4,  7,  -1,  	// #18 HI32DSP
    5,  7,  -1,  	// #21 LO32DSP
    -1,  	// #24 CPURAReg
    -1,  	// #25 CPUSPReg
    0,  -1,  	// #26 DSPCC
    3,  4,  5,  7,  -1,  	// #28 HI32
    -1,  	// #33 HWRegs
    3,  4,  5,  7,  -1,  	// #34 LO32
    11,  -1,  	// #39 FGR64
    9,  -1,  	// #41 GPR64
    10,  11,  -1,  	// #43 AFGR64
    8,  9,  -1,  	// #46 GPR64_with_sub_32_in_CPU16RegsPlusSP
    8,  9,  -1,  	// #49 GPR64_with_sub_32_in_CPU16Regs
    7,  -1,  	// #52 ACC64DSP
    3,  4,  5,  7,  -1,  	// #54 ACC64
    1,  9,  -1,  	// #59 GPR64_with_sub_32_in_CPURAReg
    2,  8,  9,  -1,  	// #62 GPR64_with_sub_32_in_CPUSPReg
    3,  4,  5,  7,  -1,  	// #66 HI64
    3,  4,  5,  7,  -1,  	// #71 LO64
    11,  -1,  	// #76 MSA128B
    11,  -1,  	// #78 MSA128D
    11,  -1,  	// #80 MSA128H
    11,  -1,  	// #82 MSA128W
    3,  4,  5,  7,  -1,  	// #84 ACC128
    -1 };

/// Get the dimensions of register pressure impacted by this register class.
/// Returns a -1 terminated array of pressure set IDs
const int* MipsGenRegisterInfo::
getRegClassPressureSets(const TargetRegisterClass *RC) const {
  static const unsigned RCSetStartTable[] = {
    0,1,3,6,7,9,12,15,16,18,21,24,25,26,28,33,34,39,41,43,46,49,52,54,59,62,66,71,76,78,80,82,84,0 };
  unsigned SetListStart = RCSetStartTable[RC->getID()];
  return &RCSetsTable[SetListStart];
}

/// Get the dimensions of register pressure impacted by this register unit.
/// Returns a -1 terminated array of pressure set IDs
const int* MipsGenRegisterInfo::
getRegUnitPressureSets(unsigned RegUnit) const {
  assert(RegUnit < 164 && "invalid register unit");
  static const unsigned RUSetStartTable[] = {
    1,26,0,0,0,0,0,0,0,0,0,1,1,16,16,16,16,16,16,16,16,0,59,62,1,9,9,9,9,28,28,21,18,21,18,21,18,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,0,1,1,9,9,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,9,9,0 };
  unsigned SetListStart = RUSetStartTable[RegUnit];
  return &RCSetsTable[SetListStart];
}

extern const MCRegisterDesc MipsRegDesc[];
extern const MCPhysReg MipsRegDiffLists[];
extern const char MipsRegStrings[];
extern const uint16_t MipsRegUnitRoots[][2];
extern const uint16_t MipsSubRegIdxLists[];
extern const MCRegisterInfo::SubRegCoveredBits MipsSubRegIdxRanges[];
extern const uint16_t MipsRegEncodingTable[];
// Mips Dwarf<->LLVM register mappings.
extern const MCRegisterInfo::DwarfLLVMRegPair MipsDwarfFlavour0Dwarf2L[];
extern const unsigned MipsDwarfFlavour0Dwarf2LSize;

extern const MCRegisterInfo::DwarfLLVMRegPair MipsEHFlavour0Dwarf2L[];
extern const unsigned MipsEHFlavour0Dwarf2LSize;

extern const MCRegisterInfo::DwarfLLVMRegPair MipsDwarfFlavour0L2Dwarf[];
extern const unsigned MipsDwarfFlavour0L2DwarfSize;

extern const MCRegisterInfo::DwarfLLVMRegPair MipsEHFlavour0L2Dwarf[];
extern const unsigned MipsEHFlavour0L2DwarfSize;

MipsGenRegisterInfo::
MipsGenRegisterInfo(unsigned RA, unsigned DwarfFlavour, unsigned EHFlavour, unsigned PC)
  : TargetRegisterInfo(MipsRegInfoDesc, RegisterClasses, RegisterClasses+33,
             SubRegIndexNameTable, SubRegIndexLaneMaskTable, 0xffffff80) {
  InitMCRegisterInfo(MipsRegDesc, 285, RA, PC,
                     MipsMCRegisterClasses, 33,
                     MipsRegUnitRoots,
                     164,
                     MipsRegDiffLists,
                     MipsRegStrings,
                     MipsSubRegIdxLists,
                     12,
                     MipsSubRegIdxRanges,
                     MipsRegEncodingTable);

  switch (DwarfFlavour) {
  default:
    llvm_unreachable("Unknown DWARF flavour");
  case 0:
    mapDwarfRegsToLLVMRegs(MipsDwarfFlavour0Dwarf2L, MipsDwarfFlavour0Dwarf2LSize, false);
    break;
  }
  switch (EHFlavour) {
  default:
    llvm_unreachable("Unknown DWARF flavour");
  case 0:
    mapDwarfRegsToLLVMRegs(MipsEHFlavour0Dwarf2L, MipsEHFlavour0Dwarf2LSize, true);
    break;
  }
  switch (DwarfFlavour) {
  default:
    llvm_unreachable("Unknown DWARF flavour");
  case 0:
    mapLLVMRegsToDwarfRegs(MipsDwarfFlavour0L2Dwarf, MipsDwarfFlavour0L2DwarfSize, false);
    break;
  }
  switch (EHFlavour) {
  default:
    llvm_unreachable("Unknown DWARF flavour");
  case 0:
    mapLLVMRegsToDwarfRegs(MipsEHFlavour0L2Dwarf, MipsEHFlavour0L2DwarfSize, true);
    break;
  }
}

static const MCPhysReg CSR_Mips16RetHelper_SaveList[] = { Mips::V0, Mips::V1, Mips::A3, Mips::A2, Mips::A1, Mips::A0, Mips::S0, Mips::S1, 0 };
static const uint32_t CSR_Mips16RetHelper_RegMask[] = { 0x03c00000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x30000600, 0x00000000, 0x00000000, 0x00000000, };
static const MCPhysReg CSR_N32_SaveList[] = { Mips::D31_64, Mips::D29_64, Mips::D27_64, Mips::D25_64, Mips::D24_64, Mips::D23_64, Mips::D22_64, Mips::D21_64, Mips::RA_64, Mips::FP_64, Mips::GP_64, Mips::S7_64, Mips::S6_64, Mips::S5_64, Mips::S4_64, Mips::S3_64, Mips::S2_64, Mips::S1_64, Mips::S0_64, 0 };
static const uint32_t CSR_N32_RegMask[] = { 0x00080300, 0x00000c00, 0x00055f00, 0x08000000, 0x1abe0000, 0x0001ff00, 0x00000000, 0xbe000000, 0x0001fe0a, };
static const MCPhysReg CSR_N64_SaveList[] = { Mips::D31_64, Mips::D30_64, Mips::D29_64, Mips::D28_64, Mips::D27_64, Mips::D26_64, Mips::D25_64, Mips::D24_64, Mips::RA_64, Mips::FP_64, Mips::GP_64, Mips::S7_64, Mips::S6_64, Mips::S5_64, Mips::S4_64, Mips::S3_64, Mips::S2_64, Mips::S1_64, Mips::S0_64, 0 };
static const uint32_t CSR_N64_RegMask[] = { 0x00080300, 0x00007800, 0x0007f800, 0x08000000, 0x1ff00000, 0x0001ff00, 0x00000000, 0xf0000000, 0x0001fe0f, };
static const MCPhysReg CSR_O32_SaveList[] = { Mips::D15, Mips::D14, Mips::D13, Mips::D12, Mips::D11, Mips::D10, Mips::RA, Mips::FP, Mips::S7, Mips::S6, Mips::S5, Mips::S4, Mips::S3, Mips::S2, Mips::S1, Mips::S0, 0 };
static const uint32_t CSR_O32_RegMask[] = { 0x00080100, 0x00007e00, 0x0007ff80, 0x00000000, 0x00000000, 0x0001fe00, 0x00000000, 0x00000000, 0x00000000, };
static const MCPhysReg CSR_O32_FP64_SaveList[] = { Mips::D31_64, Mips::D30_64, Mips::D29_64, Mips::D28_64, Mips::D27_64, Mips::D26_64, Mips::D25_64, Mips::D24_64, Mips::D23_64, Mips::D22_64, Mips::D21_64, Mips::D20_64, Mips::RA, Mips::FP, Mips::S7, Mips::S6, Mips::S5, Mips::S4, Mips::S3, Mips::S2, Mips::S1, Mips::S0, 0 };
static const uint32_t CSR_O32_FP64_RegMask[] = { 0x00080100, 0x00007e00, 0x0007ff80, 0x00000000, 0x0fff0000, 0x0001fe00, 0x00000000, 0xff000000, 0x0000000f, };
static const MCPhysReg CSR_SingleFloatOnly_SaveList[] = { Mips::F31, Mips::F30, Mips::F29, Mips::F28, Mips::F27, Mips::F26, Mips::F25, Mips::F24, Mips::F23, Mips::F22, Mips::F21, Mips::F20, Mips::RA, Mips::FP, Mips::S7, Mips::S6, Mips::S5, Mips::S4, Mips::S3, Mips::S2, Mips::S1, Mips::S0, 0 };
static const uint32_t CSR_SingleFloatOnly_RegMask[] = { 0x00080100, 0x00007e00, 0x0007ff80, 0x00000000, 0x00000000, 0x0001fe00, 0x00000000, 0x00000000, 0x00000000, };


} // End llvm namespace 
#endif // GET_REGINFO_TARGET_DESC

